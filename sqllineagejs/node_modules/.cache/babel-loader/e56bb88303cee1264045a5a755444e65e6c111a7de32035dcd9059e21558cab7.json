{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nexport const allCharCodes = (() => {\n  const v = [];\n  for (let i = 32 /* START_CH_CODE */; i <= 126 /* END_CH_CODE */; i++) {\n    v.push(i);\n  }\n  v.push(65533 /* UNKNOWN_CODE */);\n  return v;\n})();\nexport const getCharIndex = (chCode, fontScale) => {\n  chCode -= 32 /* START_CH_CODE */;\n  if (chCode < 0 || chCode > 96 /* CHAR_COUNT */) {\n    if (fontScale <= 2) {\n      // for smaller scales, we can get away with using any ASCII character...\n      return (chCode + 96 /* CHAR_COUNT */) % 96 /* CHAR_COUNT */;\n    }\n\n    return 96 /* CHAR_COUNT */ - 1; // unknown symbol\n  }\n\n  return chCode;\n};","map":{"version":3,"names":["allCharCodes","v","i","push","getCharIndex","chCode","fontScale"],"sources":["C:/Users/Administrator/Desktop/sqllineage-master/sqllineagejs/node_modules/monaco-editor/esm/vs/editor/browser/viewParts/minimap/minimapCharSheet.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nexport const allCharCodes = (() => {\r\n    const v = [];\r\n    for (let i = 32 /* START_CH_CODE */; i <= 126 /* END_CH_CODE */; i++) {\r\n        v.push(i);\r\n    }\r\n    v.push(65533 /* UNKNOWN_CODE */);\r\n    return v;\r\n})();\r\nexport const getCharIndex = (chCode, fontScale) => {\r\n    chCode -= 32 /* START_CH_CODE */;\r\n    if (chCode < 0 || chCode > 96 /* CHAR_COUNT */) {\r\n        if (fontScale <= 2) {\r\n            // for smaller scales, we can get away with using any ASCII character...\r\n            return (chCode + 96 /* CHAR_COUNT */) % 96 /* CHAR_COUNT */;\r\n        }\r\n        return 96 /* CHAR_COUNT */ - 1; // unknown symbol\r\n    }\r\n    return chCode;\r\n};\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,OAAO,MAAMA,YAAY,GAAG,CAAC,MAAM;EAC/B,MAAMC,CAAC,GAAG,EAAE;EACZ,KAAK,IAAIC,CAAC,GAAG,EAAE,CAAC,qBAAqBA,CAAC,IAAI,GAAG,CAAC,mBAAmBA,CAAC,EAAE,EAAE;IAClED,CAAC,CAACE,IAAI,CAACD,CAAC,CAAC;EACb;EACAD,CAAC,CAACE,IAAI,CAAC,KAAK,CAAC,kBAAkB,CAAC;EAChC,OAAOF,CAAC;AACZ,CAAC,EAAE,CAAC;AACJ,OAAO,MAAMG,YAAY,GAAGA,CAACC,MAAM,EAAEC,SAAS,KAAK;EAC/CD,MAAM,IAAI,EAAE,CAAC;EACb,IAAIA,MAAM,GAAG,CAAC,IAAIA,MAAM,GAAG,EAAE,CAAC,kBAAkB;IAC5C,IAAIC,SAAS,IAAI,CAAC,EAAE;MAChB;MACA,OAAO,CAACD,MAAM,GAAG,EAAE,CAAC,oBAAoB,EAAE,CAAC;IAC/C;;IACA,OAAO,EAAE,CAAC,mBAAmB,CAAC,CAAC,CAAC;EACpC;;EACA,OAAOA,MAAM;AACjB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}