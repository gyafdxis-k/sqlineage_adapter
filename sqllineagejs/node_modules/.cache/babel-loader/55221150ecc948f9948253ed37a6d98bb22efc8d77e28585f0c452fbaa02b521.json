{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\nimport { createStyleSheet } from '../../../base/browser/dom.js';\nimport { PagedList } from '../../../base/browser/ui/list/listPaging.js';\nimport { DefaultStyleController, isSelectionRangeChangeEvent, isSelectionSingleChangeEvent, List } from '../../../base/browser/ui/list/listWidget.js';\nimport { Emitter, Event } from '../../../base/common/event.js';\nimport { Disposable, dispose, toDisposable, DisposableStore, combinedDisposable } from '../../../base/common/lifecycle.js';\nimport { localize } from '../../../nls.js';\nimport { IConfigurationService } from '../../configuration/common/configuration.js';\nimport { Extensions as ConfigurationExtensions } from '../../configuration/common/configurationRegistry.js';\nimport { ContextKeyExpr, IContextKeyService, RawContextKey } from '../../contextkey/common/contextkey.js';\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\nimport { IKeybindingService } from '../../keybinding/common/keybinding.js';\nimport { Registry } from '../../registry/common/platform.js';\nimport { attachListStyler, computeStyles, defaultListStyles } from '../../theme/common/styler.js';\nimport { IThemeService } from '../../theme/common/themeService.js';\nimport { InputFocusedContextKey } from '../../contextkey/common/contextkeys.js';\nimport { ObjectTree, CompressibleObjectTree } from '../../../base/browser/ui/tree/objectTree.js';\nimport { AsyncDataTree, CompressibleAsyncDataTree } from '../../../base/browser/ui/tree/asyncDataTree.js';\nimport { DataTree } from '../../../base/browser/ui/tree/dataTree.js';\nimport { IAccessibilityService } from '../../accessibility/common/accessibility.js';\nexport const IListService = createDecorator('listService');\nlet ListService = class ListService {\n  constructor(_themeService) {\n    this._themeService = _themeService;\n    this.disposables = new DisposableStore();\n    this.lists = [];\n    this._lastFocusedWidget = undefined;\n    this._hasCreatedStyleController = false;\n  }\n  get lastFocusedList() {\n    return this._lastFocusedWidget;\n  }\n  register(widget, extraContextKeys) {\n    if (!this._hasCreatedStyleController) {\n      this._hasCreatedStyleController = true;\n      // create a shared default tree style sheet for performance reasons\n      const styleController = new DefaultStyleController(createStyleSheet(), '');\n      this.disposables.add(attachListStyler(styleController, this._themeService));\n    }\n    if (this.lists.some(l => l.widget === widget)) {\n      throw new Error('Cannot register the same widget multiple times');\n    }\n    // Keep in our lists list\n    const registeredList = {\n      widget,\n      extraContextKeys\n    };\n    this.lists.push(registeredList);\n    // Check for currently being focused\n    if (widget.getHTMLElement() === document.activeElement) {\n      this._lastFocusedWidget = widget;\n    }\n    return combinedDisposable(widget.onDidFocus(() => this._lastFocusedWidget = widget), toDisposable(() => this.lists.splice(this.lists.indexOf(registeredList), 1)), widget.onDidDispose(() => {\n      this.lists = this.lists.filter(l => l !== registeredList);\n      if (this._lastFocusedWidget === widget) {\n        this._lastFocusedWidget = undefined;\n      }\n    }));\n  }\n  dispose() {\n    this.disposables.dispose();\n  }\n};\nListService = __decorate([__param(0, IThemeService)], ListService);\nexport { ListService };\nconst RawWorkbenchListFocusContextKey = new RawContextKey('listFocus', true);\nexport const WorkbenchListSupportsMultiSelectContextKey = new RawContextKey('listSupportsMultiselect', true);\nexport const WorkbenchListFocusContextKey = ContextKeyExpr.and(RawWorkbenchListFocusContextKey, ContextKeyExpr.not(InputFocusedContextKey));\nexport const WorkbenchListHasSelectionOrFocus = new RawContextKey('listHasSelectionOrFocus', false);\nexport const WorkbenchListDoubleSelection = new RawContextKey('listDoubleSelection', false);\nexport const WorkbenchListMultiSelection = new RawContextKey('listMultiSelection', false);\nexport const WorkbenchListSupportsKeyboardNavigation = new RawContextKey('listSupportsKeyboardNavigation', true);\nexport const WorkbenchListAutomaticKeyboardNavigationKey = 'listAutomaticKeyboardNavigation';\nexport const WorkbenchListAutomaticKeyboardNavigation = new RawContextKey(WorkbenchListAutomaticKeyboardNavigationKey, true);\nexport let didBindWorkbenchListAutomaticKeyboardNavigation = false;\nfunction createScopedContextKeyService(contextKeyService, widget) {\n  const result = contextKeyService.createScoped(widget.getHTMLElement());\n  RawWorkbenchListFocusContextKey.bindTo(result);\n  return result;\n}\nconst multiSelectModifierSettingKey = 'workbench.list.multiSelectModifier';\nconst openModeSettingKey = 'workbench.list.openMode';\nconst horizontalScrollingKey = 'workbench.list.horizontalScrolling';\nconst keyboardNavigationSettingKey = 'workbench.list.keyboardNavigation';\nconst automaticKeyboardNavigationSettingKey = 'workbench.list.automaticKeyboardNavigation';\nconst treeIndentKey = 'workbench.tree.indent';\nconst treeRenderIndentGuidesKey = 'workbench.tree.renderIndentGuides';\nconst listSmoothScrolling = 'workbench.list.smoothScrolling';\nconst treeExpandMode = 'workbench.tree.expandMode';\nfunction useAltAsMultipleSelectionModifier(configurationService) {\n  return configurationService.getValue(multiSelectModifierSettingKey) === 'alt';\n}\nclass MultipleSelectionController extends Disposable {\n  constructor(configurationService) {\n    super();\n    this.configurationService = configurationService;\n    this.useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(configurationService);\n    this.registerListeners();\n  }\n  registerListeners() {\n    this._register(this.configurationService.onDidChangeConfiguration(e => {\n      if (e.affectsConfiguration(multiSelectModifierSettingKey)) {\n        this.useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(this.configurationService);\n      }\n    }));\n  }\n  isSelectionSingleChangeEvent(event) {\n    if (this.useAltAsMultipleSelectionModifier) {\n      return event.browserEvent.altKey;\n    }\n    return isSelectionSingleChangeEvent(event);\n  }\n  isSelectionRangeChangeEvent(event) {\n    return isSelectionRangeChangeEvent(event);\n  }\n}\nfunction toWorkbenchListOptions(options, configurationService, keybindingService) {\n  const disposables = new DisposableStore();\n  const result = Object.assign({}, options);\n  if (options.multipleSelectionSupport !== false && !options.multipleSelectionController) {\n    const multipleSelectionController = new MultipleSelectionController(configurationService);\n    result.multipleSelectionController = multipleSelectionController;\n    disposables.add(multipleSelectionController);\n  }\n  result.keyboardNavigationDelegate = {\n    mightProducePrintableCharacter(e) {\n      return keybindingService.mightProducePrintableCharacter(e);\n    }\n  };\n  result.smoothScrolling = configurationService.getValue(listSmoothScrolling);\n  return [result, disposables];\n}\nlet WorkbenchList = class WorkbenchList extends List {\n  constructor(user, container, delegate, renderers, options, contextKeyService, listService, themeService, configurationService, keybindingService) {\n    const horizontalScrolling = typeof options.horizontalScrolling !== 'undefined' ? options.horizontalScrolling : configurationService.getValue(horizontalScrollingKey);\n    const [workbenchListOptions, workbenchListOptionsDisposable] = toWorkbenchListOptions(options, configurationService, keybindingService);\n    super(user, container, delegate, renderers, Object.assign(Object.assign(Object.assign({\n      keyboardSupport: false\n    }, computeStyles(themeService.getColorTheme(), defaultListStyles)), workbenchListOptions), {\n      horizontalScrolling\n    }));\n    this.disposables.add(workbenchListOptionsDisposable);\n    this.contextKeyService = createScopedContextKeyService(contextKeyService, this);\n    this.themeService = themeService;\n    const listSupportsMultiSelect = WorkbenchListSupportsMultiSelectContextKey.bindTo(this.contextKeyService);\n    listSupportsMultiSelect.set(!(options.multipleSelectionSupport === false));\n    this.listHasSelectionOrFocus = WorkbenchListHasSelectionOrFocus.bindTo(this.contextKeyService);\n    this.listDoubleSelection = WorkbenchListDoubleSelection.bindTo(this.contextKeyService);\n    this.listMultiSelection = WorkbenchListMultiSelection.bindTo(this.contextKeyService);\n    this.horizontalScrolling = options.horizontalScrolling;\n    this._useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(configurationService);\n    this.disposables.add(this.contextKeyService);\n    this.disposables.add(listService.register(this));\n    if (options.overrideStyles) {\n      this.updateStyles(options.overrideStyles);\n    }\n    this.disposables.add(this.onDidChangeSelection(() => {\n      const selection = this.getSelection();\n      const focus = this.getFocus();\n      this.contextKeyService.bufferChangeEvents(() => {\n        this.listHasSelectionOrFocus.set(selection.length > 0 || focus.length > 0);\n        this.listMultiSelection.set(selection.length > 1);\n        this.listDoubleSelection.set(selection.length === 2);\n      });\n    }));\n    this.disposables.add(this.onDidChangeFocus(() => {\n      const selection = this.getSelection();\n      const focus = this.getFocus();\n      this.listHasSelectionOrFocus.set(selection.length > 0 || focus.length > 0);\n    }));\n    this.disposables.add(configurationService.onDidChangeConfiguration(e => {\n      if (e.affectsConfiguration(multiSelectModifierSettingKey)) {\n        this._useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(configurationService);\n      }\n      let options = {};\n      if (e.affectsConfiguration(horizontalScrollingKey) && this.horizontalScrolling === undefined) {\n        const horizontalScrolling = configurationService.getValue(horizontalScrollingKey);\n        options = Object.assign(Object.assign({}, options), {\n          horizontalScrolling\n        });\n      }\n      if (e.affectsConfiguration(listSmoothScrolling)) {\n        const smoothScrolling = configurationService.getValue(listSmoothScrolling);\n        options = Object.assign(Object.assign({}, options), {\n          smoothScrolling\n        });\n      }\n      if (Object.keys(options).length > 0) {\n        this.updateOptions(options);\n      }\n    }));\n  }\n  updateOptions(options) {\n    super.updateOptions(options);\n    if (options.overrideStyles) {\n      this.updateStyles(options.overrideStyles);\n    }\n  }\n  dispose() {\n    super.dispose();\n    if (this._styler) {\n      this._styler.dispose();\n    }\n  }\n  updateStyles(styles) {\n    if (this._styler) {\n      this._styler.dispose();\n    }\n    this._styler = attachListStyler(this, this.themeService, styles);\n  }\n};\nWorkbenchList = __decorate([__param(5, IContextKeyService), __param(6, IListService), __param(7, IThemeService), __param(8, IConfigurationService), __param(9, IKeybindingService)], WorkbenchList);\nexport { WorkbenchList };\nlet WorkbenchPagedList = class WorkbenchPagedList extends PagedList {\n  constructor(user, container, delegate, renderers, options, contextKeyService, listService, themeService, configurationService, keybindingService) {\n    const horizontalScrolling = typeof options.horizontalScrolling !== 'undefined' ? options.horizontalScrolling : configurationService.getValue(horizontalScrollingKey);\n    const [workbenchListOptions, workbenchListOptionsDisposable] = toWorkbenchListOptions(options, configurationService, keybindingService);\n    super(user, container, delegate, renderers, Object.assign(Object.assign(Object.assign({\n      keyboardSupport: false\n    }, computeStyles(themeService.getColorTheme(), defaultListStyles)), workbenchListOptions), {\n      horizontalScrolling\n    }));\n    this.disposables = new DisposableStore();\n    this.disposables.add(workbenchListOptionsDisposable);\n    this.contextKeyService = createScopedContextKeyService(contextKeyService, this);\n    this.horizontalScrolling = options.horizontalScrolling;\n    const listSupportsMultiSelect = WorkbenchListSupportsMultiSelectContextKey.bindTo(this.contextKeyService);\n    listSupportsMultiSelect.set(!(options.multipleSelectionSupport === false));\n    this._useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(configurationService);\n    this.disposables.add(this.contextKeyService);\n    this.disposables.add(listService.register(this));\n    if (options.overrideStyles) {\n      this.disposables.add(attachListStyler(this, themeService, options.overrideStyles));\n    }\n    this.disposables.add(configurationService.onDidChangeConfiguration(e => {\n      if (e.affectsConfiguration(multiSelectModifierSettingKey)) {\n        this._useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(configurationService);\n      }\n      let options = {};\n      if (e.affectsConfiguration(horizontalScrollingKey) && this.horizontalScrolling === undefined) {\n        const horizontalScrolling = configurationService.getValue(horizontalScrollingKey);\n        options = Object.assign(Object.assign({}, options), {\n          horizontalScrolling\n        });\n      }\n      if (e.affectsConfiguration(listSmoothScrolling)) {\n        const smoothScrolling = configurationService.getValue(listSmoothScrolling);\n        options = Object.assign(Object.assign({}, options), {\n          smoothScrolling\n        });\n      }\n      if (Object.keys(options).length > 0) {\n        this.updateOptions(options);\n      }\n    }));\n  }\n  dispose() {\n    super.dispose();\n    this.disposables.dispose();\n  }\n};\nWorkbenchPagedList = __decorate([__param(5, IContextKeyService), __param(6, IListService), __param(7, IThemeService), __param(8, IConfigurationService), __param(9, IKeybindingService)], WorkbenchPagedList);\nexport { WorkbenchPagedList };\nclass ResourceNavigator extends Disposable {\n  constructor(widget, options) {\n    var _a, _b;\n    super();\n    this.widget = widget;\n    this._onDidOpen = this._register(new Emitter());\n    this.onDidOpen = this._onDidOpen.event;\n    this.openOnFocus = (_a = options === null || options === void 0 ? void 0 : options.openOnFocus) !== null && _a !== void 0 ? _a : false;\n    this._register(Event.filter(this.widget.onDidChangeSelection, e => e.browserEvent instanceof KeyboardEvent)(e => this.onSelectionFromKeyboard(e)));\n    this._register(this.widget.onPointer(e => this.onPointer(e.element, e.browserEvent)));\n    this._register(this.widget.onMouseDblClick(e => this.onMouseDblClick(e.element, e.browserEvent)));\n    if (this.openOnFocus) {\n      this._register(Event.filter(this.widget.onDidChangeFocus, e => e.browserEvent instanceof KeyboardEvent)(e => this.onFocusFromKeyboard(e)));\n    }\n    if (typeof (options === null || options === void 0 ? void 0 : options.openOnSingleClick) !== 'boolean' && (options === null || options === void 0 ? void 0 : options.configurationService)) {\n      this.openOnSingleClick = (options === null || options === void 0 ? void 0 : options.configurationService.getValue(openModeSettingKey)) !== 'doubleClick';\n      this._register(options === null || options === void 0 ? void 0 : options.configurationService.onDidChangeConfiguration(() => {\n        this.openOnSingleClick = (options === null || options === void 0 ? void 0 : options.configurationService.getValue(openModeSettingKey)) !== 'doubleClick';\n      }));\n    } else {\n      this.openOnSingleClick = (_b = options === null || options === void 0 ? void 0 : options.openOnSingleClick) !== null && _b !== void 0 ? _b : true;\n    }\n  }\n  onFocusFromKeyboard(event) {\n    const focus = this.widget.getFocus();\n    this.widget.setSelection(focus, event.browserEvent);\n    const selectionKeyboardEvent = event.browserEvent;\n    const preserveFocus = typeof selectionKeyboardEvent.preserveFocus === 'boolean' ? selectionKeyboardEvent.preserveFocus : true;\n    const pinned = typeof selectionKeyboardEvent.pinned === 'boolean' ? selectionKeyboardEvent.pinned : !preserveFocus;\n    const sideBySide = false;\n    this._open(this.getSelectedElement(), preserveFocus, pinned, sideBySide, event.browserEvent);\n  }\n  onSelectionFromKeyboard(event) {\n    if (event.elements.length !== 1) {\n      return;\n    }\n    const selectionKeyboardEvent = event.browserEvent;\n    const preserveFocus = typeof selectionKeyboardEvent.preserveFocus === 'boolean' ? selectionKeyboardEvent.preserveFocus : true;\n    const pinned = typeof selectionKeyboardEvent.pinned === 'boolean' ? selectionKeyboardEvent.pinned : !preserveFocus;\n    const sideBySide = false;\n    this._open(this.getSelectedElement(), preserveFocus, pinned, sideBySide, event.browserEvent);\n  }\n  onPointer(element, browserEvent) {\n    if (!this.openOnSingleClick) {\n      return;\n    }\n    const isDoubleClick = browserEvent.detail === 2;\n    if (isDoubleClick) {\n      return;\n    }\n    const isMiddleClick = browserEvent.button === 1;\n    const preserveFocus = true;\n    const pinned = isMiddleClick;\n    const sideBySide = browserEvent.ctrlKey || browserEvent.metaKey || browserEvent.altKey;\n    this._open(element, preserveFocus, pinned, sideBySide, browserEvent);\n  }\n  onMouseDblClick(element, browserEvent) {\n    if (!browserEvent) {\n      return;\n    }\n    const preserveFocus = false;\n    const pinned = true;\n    const sideBySide = browserEvent.ctrlKey || browserEvent.metaKey || browserEvent.altKey;\n    this._open(element, preserveFocus, pinned, sideBySide, browserEvent);\n  }\n  _open(element, preserveFocus, pinned, sideBySide, browserEvent) {\n    if (!element) {\n      return;\n    }\n    this._onDidOpen.fire({\n      editorOptions: {\n        preserveFocus,\n        pinned,\n        revealIfVisible: true\n      },\n      sideBySide,\n      element,\n      browserEvent\n    });\n  }\n}\nclass TreeResourceNavigator extends ResourceNavigator {\n  constructor(widget, options) {\n    super(widget, options);\n    this.widget = widget;\n  }\n  getSelectedElement() {\n    var _a;\n    return (_a = this.widget.getSelection()[0]) !== null && _a !== void 0 ? _a : undefined;\n  }\n}\nfunction createKeyboardNavigationEventFilter(container, keybindingService) {\n  let inChord = false;\n  return event => {\n    if (inChord) {\n      inChord = false;\n      return false;\n    }\n    const result = keybindingService.softDispatch(event, container);\n    if (result && result.enterChord) {\n      inChord = true;\n      return false;\n    }\n    inChord = false;\n    return true;\n  };\n}\nlet WorkbenchObjectTree = class WorkbenchObjectTree extends ObjectTree {\n  constructor(user, container, delegate, renderers, options, contextKeyService, listService, themeService, configurationService, keybindingService, accessibilityService) {\n    const {\n      options: treeOptions,\n      getAutomaticKeyboardNavigation,\n      disposable\n    } = workbenchTreeDataPreamble(container, options, contextKeyService, configurationService, keybindingService, accessibilityService);\n    super(user, container, delegate, renderers, treeOptions);\n    this.disposables.add(disposable);\n    this.internals = new WorkbenchTreeInternals(this, options, getAutomaticKeyboardNavigation, options.overrideStyles, contextKeyService, listService, themeService, configurationService, accessibilityService);\n    this.disposables.add(this.internals);\n  }\n};\nWorkbenchObjectTree = __decorate([__param(5, IContextKeyService), __param(6, IListService), __param(7, IThemeService), __param(8, IConfigurationService), __param(9, IKeybindingService), __param(10, IAccessibilityService)], WorkbenchObjectTree);\nexport { WorkbenchObjectTree };\nlet WorkbenchCompressibleObjectTree = class WorkbenchCompressibleObjectTree extends CompressibleObjectTree {\n  constructor(user, container, delegate, renderers, options, contextKeyService, listService, themeService, configurationService, keybindingService, accessibilityService) {\n    const {\n      options: treeOptions,\n      getAutomaticKeyboardNavigation,\n      disposable\n    } = workbenchTreeDataPreamble(container, options, contextKeyService, configurationService, keybindingService, accessibilityService);\n    super(user, container, delegate, renderers, treeOptions);\n    this.disposables.add(disposable);\n    this.internals = new WorkbenchTreeInternals(this, options, getAutomaticKeyboardNavigation, options.overrideStyles, contextKeyService, listService, themeService, configurationService, accessibilityService);\n    this.disposables.add(this.internals);\n  }\n  updateOptions() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super.updateOptions(options);\n    if (options.overrideStyles) {\n      this.internals.updateStyleOverrides(options.overrideStyles);\n    }\n  }\n};\nWorkbenchCompressibleObjectTree = __decorate([__param(5, IContextKeyService), __param(6, IListService), __param(7, IThemeService), __param(8, IConfigurationService), __param(9, IKeybindingService), __param(10, IAccessibilityService)], WorkbenchCompressibleObjectTree);\nexport { WorkbenchCompressibleObjectTree };\nlet WorkbenchDataTree = class WorkbenchDataTree extends DataTree {\n  constructor(user, container, delegate, renderers, dataSource, options, contextKeyService, listService, themeService, configurationService, keybindingService, accessibilityService) {\n    const {\n      options: treeOptions,\n      getAutomaticKeyboardNavigation,\n      disposable\n    } = workbenchTreeDataPreamble(container, options, contextKeyService, configurationService, keybindingService, accessibilityService);\n    super(user, container, delegate, renderers, dataSource, treeOptions);\n    this.disposables.add(disposable);\n    this.internals = new WorkbenchTreeInternals(this, options, getAutomaticKeyboardNavigation, options.overrideStyles, contextKeyService, listService, themeService, configurationService, accessibilityService);\n    this.disposables.add(this.internals);\n  }\n  updateOptions() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super.updateOptions(options);\n    if (options.overrideStyles) {\n      this.internals.updateStyleOverrides(options.overrideStyles);\n    }\n  }\n};\nWorkbenchDataTree = __decorate([__param(6, IContextKeyService), __param(7, IListService), __param(8, IThemeService), __param(9, IConfigurationService), __param(10, IKeybindingService), __param(11, IAccessibilityService)], WorkbenchDataTree);\nexport { WorkbenchDataTree };\nlet WorkbenchAsyncDataTree = class WorkbenchAsyncDataTree extends AsyncDataTree {\n  constructor(user, container, delegate, renderers, dataSource, options, contextKeyService, listService, themeService, configurationService, keybindingService, accessibilityService) {\n    const {\n      options: treeOptions,\n      getAutomaticKeyboardNavigation,\n      disposable\n    } = workbenchTreeDataPreamble(container, options, contextKeyService, configurationService, keybindingService, accessibilityService);\n    super(user, container, delegate, renderers, dataSource, treeOptions);\n    this.disposables.add(disposable);\n    this.internals = new WorkbenchTreeInternals(this, options, getAutomaticKeyboardNavigation, options.overrideStyles, contextKeyService, listService, themeService, configurationService, accessibilityService);\n    this.disposables.add(this.internals);\n  }\n  get onDidOpen() {\n    return this.internals.onDidOpen;\n  }\n  updateOptions() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super.updateOptions(options);\n    if (options.overrideStyles) {\n      this.internals.updateStyleOverrides(options.overrideStyles);\n    }\n  }\n};\nWorkbenchAsyncDataTree = __decorate([__param(6, IContextKeyService), __param(7, IListService), __param(8, IThemeService), __param(9, IConfigurationService), __param(10, IKeybindingService), __param(11, IAccessibilityService)], WorkbenchAsyncDataTree);\nexport { WorkbenchAsyncDataTree };\nlet WorkbenchCompressibleAsyncDataTree = class WorkbenchCompressibleAsyncDataTree extends CompressibleAsyncDataTree {\n  constructor(user, container, virtualDelegate, compressionDelegate, renderers, dataSource, options, contextKeyService, listService, themeService, configurationService, keybindingService, accessibilityService) {\n    const {\n      options: treeOptions,\n      getAutomaticKeyboardNavigation,\n      disposable\n    } = workbenchTreeDataPreamble(container, options, contextKeyService, configurationService, keybindingService, accessibilityService);\n    super(user, container, virtualDelegate, compressionDelegate, renderers, dataSource, treeOptions);\n    this.disposables.add(disposable);\n    this.internals = new WorkbenchTreeInternals(this, options, getAutomaticKeyboardNavigation, options.overrideStyles, contextKeyService, listService, themeService, configurationService, accessibilityService);\n    this.disposables.add(this.internals);\n  }\n};\nWorkbenchCompressibleAsyncDataTree = __decorate([__param(7, IContextKeyService), __param(8, IListService), __param(9, IThemeService), __param(10, IConfigurationService), __param(11, IKeybindingService), __param(12, IAccessibilityService)], WorkbenchCompressibleAsyncDataTree);\nexport { WorkbenchCompressibleAsyncDataTree };\nfunction workbenchTreeDataPreamble(container, options, contextKeyService, configurationService, keybindingService, accessibilityService) {\n  var _a;\n  WorkbenchListSupportsKeyboardNavigation.bindTo(contextKeyService);\n  if (!didBindWorkbenchListAutomaticKeyboardNavigation) {\n    WorkbenchListAutomaticKeyboardNavigation.bindTo(contextKeyService);\n    didBindWorkbenchListAutomaticKeyboardNavigation = true;\n  }\n  const getAutomaticKeyboardNavigation = () => {\n    // give priority to the context key value to disable this completely\n    let automaticKeyboardNavigation = contextKeyService.getContextKeyValue(WorkbenchListAutomaticKeyboardNavigationKey);\n    if (automaticKeyboardNavigation) {\n      automaticKeyboardNavigation = configurationService.getValue(automaticKeyboardNavigationSettingKey);\n    }\n    return automaticKeyboardNavigation;\n  };\n  const accessibilityOn = accessibilityService.isScreenReaderOptimized();\n  const keyboardNavigation = options.simpleKeyboardNavigation || accessibilityOn ? 'simple' : configurationService.getValue(keyboardNavigationSettingKey);\n  const horizontalScrolling = options.horizontalScrolling !== undefined ? options.horizontalScrolling : configurationService.getValue(horizontalScrollingKey);\n  const [workbenchListOptions, disposable] = toWorkbenchListOptions(options, configurationService, keybindingService);\n  const additionalScrollHeight = options.additionalScrollHeight;\n  return {\n    getAutomaticKeyboardNavigation,\n    disposable,\n    options: Object.assign(Object.assign({\n      // ...options, // TODO@Joao why is this not splatted here?\n      keyboardSupport: false\n    }, workbenchListOptions), {\n      indent: configurationService.getValue(treeIndentKey),\n      renderIndentGuides: configurationService.getValue(treeRenderIndentGuidesKey),\n      smoothScrolling: configurationService.getValue(listSmoothScrolling),\n      automaticKeyboardNavigation: getAutomaticKeyboardNavigation(),\n      simpleKeyboardNavigation: keyboardNavigation === 'simple',\n      filterOnType: keyboardNavigation === 'filter',\n      horizontalScrolling,\n      keyboardNavigationEventFilter: createKeyboardNavigationEventFilter(container, keybindingService),\n      additionalScrollHeight,\n      hideTwistiesOfChildlessElements: options.hideTwistiesOfChildlessElements,\n      expandOnlyOnDoubleClick: configurationService.getValue(openModeSettingKey) === 'doubleClick',\n      expandOnlyOnTwistieClick: (_a = options.expandOnlyOnTwistieClick) !== null && _a !== void 0 ? _a : configurationService.getValue(treeExpandMode) === 'doubleClick'\n    })\n  };\n}\nlet WorkbenchTreeInternals = class WorkbenchTreeInternals {\n  constructor(tree, options, getAutomaticKeyboardNavigation, overrideStyles, contextKeyService, listService, themeService, configurationService, accessibilityService) {\n    this.tree = tree;\n    this.themeService = themeService;\n    this.disposables = [];\n    this.contextKeyService = createScopedContextKeyService(contextKeyService, tree);\n    const listSupportsMultiSelect = WorkbenchListSupportsMultiSelectContextKey.bindTo(this.contextKeyService);\n    listSupportsMultiSelect.set(!(options.multipleSelectionSupport === false));\n    this.hasSelectionOrFocus = WorkbenchListHasSelectionOrFocus.bindTo(this.contextKeyService);\n    this.hasDoubleSelection = WorkbenchListDoubleSelection.bindTo(this.contextKeyService);\n    this.hasMultiSelection = WorkbenchListMultiSelection.bindTo(this.contextKeyService);\n    this._useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(configurationService);\n    const interestingContextKeys = new Set();\n    interestingContextKeys.add(WorkbenchListAutomaticKeyboardNavigationKey);\n    const updateKeyboardNavigation = () => {\n      const accessibilityOn = accessibilityService.isScreenReaderOptimized();\n      const keyboardNavigation = accessibilityOn ? 'simple' : configurationService.getValue(keyboardNavigationSettingKey);\n      tree.updateOptions({\n        simpleKeyboardNavigation: keyboardNavigation === 'simple',\n        filterOnType: keyboardNavigation === 'filter'\n      });\n    };\n    this.updateStyleOverrides(overrideStyles);\n    this.disposables.push(this.contextKeyService, listService.register(tree), tree.onDidChangeSelection(() => {\n      const selection = tree.getSelection();\n      const focus = tree.getFocus();\n      this.contextKeyService.bufferChangeEvents(() => {\n        this.hasSelectionOrFocus.set(selection.length > 0 || focus.length > 0);\n        this.hasMultiSelection.set(selection.length > 1);\n        this.hasDoubleSelection.set(selection.length === 2);\n      });\n    }), tree.onDidChangeFocus(() => {\n      const selection = tree.getSelection();\n      const focus = tree.getFocus();\n      this.hasSelectionOrFocus.set(selection.length > 0 || focus.length > 0);\n    }), configurationService.onDidChangeConfiguration(e => {\n      let newOptions = {};\n      if (e.affectsConfiguration(multiSelectModifierSettingKey)) {\n        this._useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(configurationService);\n      }\n      if (e.affectsConfiguration(treeIndentKey)) {\n        const indent = configurationService.getValue(treeIndentKey);\n        newOptions = Object.assign(Object.assign({}, newOptions), {\n          indent\n        });\n      }\n      if (e.affectsConfiguration(treeRenderIndentGuidesKey)) {\n        const renderIndentGuides = configurationService.getValue(treeRenderIndentGuidesKey);\n        newOptions = Object.assign(Object.assign({}, newOptions), {\n          renderIndentGuides\n        });\n      }\n      if (e.affectsConfiguration(listSmoothScrolling)) {\n        const smoothScrolling = configurationService.getValue(listSmoothScrolling);\n        newOptions = Object.assign(Object.assign({}, newOptions), {\n          smoothScrolling\n        });\n      }\n      if (e.affectsConfiguration(keyboardNavigationSettingKey)) {\n        updateKeyboardNavigation();\n      }\n      if (e.affectsConfiguration(automaticKeyboardNavigationSettingKey)) {\n        newOptions = Object.assign(Object.assign({}, newOptions), {\n          automaticKeyboardNavigation: getAutomaticKeyboardNavigation()\n        });\n      }\n      if (e.affectsConfiguration(horizontalScrollingKey) && options.horizontalScrolling === undefined) {\n        const horizontalScrolling = configurationService.getValue(horizontalScrollingKey);\n        newOptions = Object.assign(Object.assign({}, newOptions), {\n          horizontalScrolling\n        });\n      }\n      if (e.affectsConfiguration(openModeSettingKey)) {\n        newOptions = Object.assign(Object.assign({}, newOptions), {\n          expandOnlyOnDoubleClick: configurationService.getValue(openModeSettingKey) === 'doubleClick'\n        });\n      }\n      if (e.affectsConfiguration(treeExpandMode) && options.expandOnlyOnTwistieClick === undefined) {\n        newOptions = Object.assign(Object.assign({}, newOptions), {\n          expandOnlyOnTwistieClick: configurationService.getValue(treeExpandMode) === 'doubleClick'\n        });\n      }\n      if (Object.keys(newOptions).length > 0) {\n        tree.updateOptions(newOptions);\n      }\n    }), this.contextKeyService.onDidChangeContext(e => {\n      if (e.affectsSome(interestingContextKeys)) {\n        tree.updateOptions({\n          automaticKeyboardNavigation: getAutomaticKeyboardNavigation()\n        });\n      }\n    }), accessibilityService.onDidChangeScreenReaderOptimized(() => updateKeyboardNavigation()));\n    this.navigator = new TreeResourceNavigator(tree, Object.assign({\n      configurationService\n    }, options));\n    this.disposables.push(this.navigator);\n  }\n  get onDidOpen() {\n    return this.navigator.onDidOpen;\n  }\n  updateStyleOverrides(overrideStyles) {\n    dispose(this.styler);\n    this.styler = overrideStyles ? attachListStyler(this.tree, this.themeService, overrideStyles) : Disposable.None;\n  }\n  dispose() {\n    this.disposables = dispose(this.disposables);\n    dispose(this.styler);\n    this.styler = undefined;\n  }\n};\nWorkbenchTreeInternals = __decorate([__param(4, IContextKeyService), __param(5, IListService), __param(6, IThemeService), __param(7, IConfigurationService), __param(8, IAccessibilityService)], WorkbenchTreeInternals);\nconst configurationRegistry = Registry.as(ConfigurationExtensions.Configuration);\nconfigurationRegistry.registerConfiguration({\n  'id': 'workbench',\n  'order': 7,\n  'title': localize('workbenchConfigurationTitle', \"Workbench\"),\n  'type': 'object',\n  'properties': {\n    [multiSelectModifierSettingKey]: {\n      'type': 'string',\n      'enum': ['ctrlCmd', 'alt'],\n      'enumDescriptions': [localize('multiSelectModifier.ctrlCmd', \"Maps to `Control` on Windows and Linux and to `Command` on macOS.\"), localize('multiSelectModifier.alt', \"Maps to `Alt` on Windows and Linux and to `Option` on macOS.\")],\n      'default': 'ctrlCmd',\n      'description': localize({\n        key: 'multiSelectModifier',\n        comment: ['- `ctrlCmd` refers to a value the setting can take and should not be localized.', '- `Control` and `Command` refer to the modifier keys Ctrl or Cmd on the keyboard and can be localized.']\n      }, \"The modifier to be used to add an item in trees and lists to a multi-selection with the mouse (for example in the explorer, open editors and scm view). The 'Open to Side' mouse gestures - if supported - will adapt such that they do not conflict with the multiselect modifier.\")\n    },\n    [openModeSettingKey]: {\n      'type': 'string',\n      'enum': ['singleClick', 'doubleClick'],\n      'default': 'singleClick',\n      'description': localize({\n        key: 'openModeModifier',\n        comment: ['`singleClick` and `doubleClick` refers to a value the setting can take and should not be localized.']\n      }, \"Controls how to open items in trees and lists using the mouse (if supported). For parents with children in trees, this setting will control if a single click expands the parent or a double click. Note that some trees and lists might choose to ignore this setting if it is not applicable. \")\n    },\n    [horizontalScrollingKey]: {\n      'type': 'boolean',\n      'default': false,\n      'description': localize('horizontalScrolling setting', \"Controls whether lists and trees support horizontal scrolling in the workbench. Warning: turning on this setting has a performance implication.\")\n    },\n    [treeIndentKey]: {\n      'type': 'number',\n      'default': 8,\n      minimum: 0,\n      maximum: 40,\n      'description': localize('tree indent setting', \"Controls tree indentation in pixels.\")\n    },\n    [treeRenderIndentGuidesKey]: {\n      type: 'string',\n      enum: ['none', 'onHover', 'always'],\n      default: 'onHover',\n      description: localize('render tree indent guides', \"Controls whether the tree should render indent guides.\")\n    },\n    [listSmoothScrolling]: {\n      type: 'boolean',\n      default: false,\n      description: localize('list smoothScrolling setting', \"Controls whether lists and trees have smooth scrolling.\")\n    },\n    [keyboardNavigationSettingKey]: {\n      'type': 'string',\n      'enum': ['simple', 'highlight', 'filter'],\n      'enumDescriptions': [localize('keyboardNavigationSettingKey.simple', \"Simple keyboard navigation focuses elements which match the keyboard input. Matching is done only on prefixes.\"), localize('keyboardNavigationSettingKey.highlight', \"Highlight keyboard navigation highlights elements which match the keyboard input. Further up and down navigation will traverse only the highlighted elements.\"), localize('keyboardNavigationSettingKey.filter', \"Filter keyboard navigation will filter out and hide all the elements which do not match the keyboard input.\")],\n      'default': 'highlight',\n      'description': localize('keyboardNavigationSettingKey', \"Controls the keyboard navigation style for lists and trees in the workbench. Can be simple, highlight and filter.\")\n    },\n    [automaticKeyboardNavigationSettingKey]: {\n      'type': 'boolean',\n      'default': true,\n      markdownDescription: localize('automatic keyboard navigation setting', \"Controls whether keyboard navigation in lists and trees is automatically triggered simply by typing. If set to `false`, keyboard navigation is only triggered when executing the `list.toggleKeyboardNavigation` command, for which you can assign a keyboard shortcut.\")\n    },\n    [treeExpandMode]: {\n      type: 'string',\n      enum: ['singleClick', 'doubleClick'],\n      default: 'singleClick',\n      description: localize('expand mode', \"Controls how tree folders are expanded when clicking the folder names.\")\n    }\n  }\n});","map":{"version":3,"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","createStyleSheet","PagedList","DefaultStyleController","isSelectionRangeChangeEvent","isSelectionSingleChangeEvent","List","Emitter","Event","Disposable","dispose","toDisposable","DisposableStore","combinedDisposable","localize","IConfigurationService","Extensions","ConfigurationExtensions","ContextKeyExpr","IContextKeyService","RawContextKey","createDecorator","IKeybindingService","Registry","attachListStyler","computeStyles","defaultListStyles","IThemeService","InputFocusedContextKey","ObjectTree","CompressibleObjectTree","AsyncDataTree","CompressibleAsyncDataTree","DataTree","IAccessibilityService","IListService","ListService","constructor","_themeService","disposables","lists","_lastFocusedWidget","undefined","_hasCreatedStyleController","lastFocusedList","register","widget","extraContextKeys","styleController","add","some","l","Error","registeredList","push","getHTMLElement","document","activeElement","onDidFocus","splice","indexOf","onDidDispose","filter","RawWorkbenchListFocusContextKey","WorkbenchListSupportsMultiSelectContextKey","WorkbenchListFocusContextKey","and","not","WorkbenchListHasSelectionOrFocus","WorkbenchListDoubleSelection","WorkbenchListMultiSelection","WorkbenchListSupportsKeyboardNavigation","WorkbenchListAutomaticKeyboardNavigationKey","WorkbenchListAutomaticKeyboardNavigation","didBindWorkbenchListAutomaticKeyboardNavigation","createScopedContextKeyService","contextKeyService","result","createScoped","bindTo","multiSelectModifierSettingKey","openModeSettingKey","horizontalScrollingKey","keyboardNavigationSettingKey","automaticKeyboardNavigationSettingKey","treeIndentKey","treeRenderIndentGuidesKey","listSmoothScrolling","treeExpandMode","useAltAsMultipleSelectionModifier","configurationService","getValue","MultipleSelectionController","registerListeners","_register","onDidChangeConfiguration","e","affectsConfiguration","event","browserEvent","altKey","toWorkbenchListOptions","options","keybindingService","assign","multipleSelectionSupport","multipleSelectionController","keyboardNavigationDelegate","mightProducePrintableCharacter","smoothScrolling","WorkbenchList","user","container","delegate","renderers","listService","themeService","horizontalScrolling","workbenchListOptions","workbenchListOptionsDisposable","keyboardSupport","getColorTheme","listSupportsMultiSelect","set","listHasSelectionOrFocus","listDoubleSelection","listMultiSelection","_useAltAsMultipleSelectionModifier","overrideStyles","updateStyles","onDidChangeSelection","selection","getSelection","focus","getFocus","bufferChangeEvents","onDidChangeFocus","keys","updateOptions","_styler","styles","WorkbenchPagedList","ResourceNavigator","_a","_b","_onDidOpen","onDidOpen","openOnFocus","KeyboardEvent","onSelectionFromKeyboard","onPointer","element","onMouseDblClick","onFocusFromKeyboard","openOnSingleClick","setSelection","selectionKeyboardEvent","preserveFocus","pinned","sideBySide","_open","getSelectedElement","elements","isDoubleClick","detail","isMiddleClick","button","ctrlKey","metaKey","fire","editorOptions","revealIfVisible","TreeResourceNavigator","createKeyboardNavigationEventFilter","inChord","softDispatch","enterChord","WorkbenchObjectTree","accessibilityService","treeOptions","getAutomaticKeyboardNavigation","disposable","workbenchTreeDataPreamble","internals","WorkbenchTreeInternals","WorkbenchCompressibleObjectTree","updateStyleOverrides","WorkbenchDataTree","dataSource","WorkbenchAsyncDataTree","WorkbenchCompressibleAsyncDataTree","virtualDelegate","compressionDelegate","automaticKeyboardNavigation","getContextKeyValue","accessibilityOn","isScreenReaderOptimized","keyboardNavigation","simpleKeyboardNavigation","additionalScrollHeight","indent","renderIndentGuides","filterOnType","keyboardNavigationEventFilter","hideTwistiesOfChildlessElements","expandOnlyOnDoubleClick","expandOnlyOnTwistieClick","tree","hasSelectionOrFocus","hasDoubleSelection","hasMultiSelection","interestingContextKeys","Set","updateKeyboardNavigation","newOptions","onDidChangeContext","affectsSome","onDidChangeScreenReaderOptimized","navigator","styler","None","configurationRegistry","as","Configuration","registerConfiguration","comment","minimum","maximum","type","enum","default","description","markdownDescription"],"sources":["C:/Users/Administrator/Desktop/sqllineage-master/sqllineagejs/node_modules/monaco-editor/esm/vs/platform/list/browser/listService.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n};\r\nimport { createStyleSheet } from '../../../base/browser/dom.js';\r\nimport { PagedList } from '../../../base/browser/ui/list/listPaging.js';\r\nimport { DefaultStyleController, isSelectionRangeChangeEvent, isSelectionSingleChangeEvent, List } from '../../../base/browser/ui/list/listWidget.js';\r\nimport { Emitter, Event } from '../../../base/common/event.js';\r\nimport { Disposable, dispose, toDisposable, DisposableStore, combinedDisposable } from '../../../base/common/lifecycle.js';\r\nimport { localize } from '../../../nls.js';\r\nimport { IConfigurationService } from '../../configuration/common/configuration.js';\r\nimport { Extensions as ConfigurationExtensions } from '../../configuration/common/configurationRegistry.js';\r\nimport { ContextKeyExpr, IContextKeyService, RawContextKey } from '../../contextkey/common/contextkey.js';\r\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\r\nimport { IKeybindingService } from '../../keybinding/common/keybinding.js';\r\nimport { Registry } from '../../registry/common/platform.js';\r\nimport { attachListStyler, computeStyles, defaultListStyles } from '../../theme/common/styler.js';\r\nimport { IThemeService } from '../../theme/common/themeService.js';\r\nimport { InputFocusedContextKey } from '../../contextkey/common/contextkeys.js';\r\nimport { ObjectTree, CompressibleObjectTree } from '../../../base/browser/ui/tree/objectTree.js';\r\nimport { AsyncDataTree, CompressibleAsyncDataTree } from '../../../base/browser/ui/tree/asyncDataTree.js';\r\nimport { DataTree } from '../../../base/browser/ui/tree/dataTree.js';\r\nimport { IAccessibilityService } from '../../accessibility/common/accessibility.js';\r\nexport const IListService = createDecorator('listService');\r\nlet ListService = class ListService {\r\n    constructor(_themeService) {\r\n        this._themeService = _themeService;\r\n        this.disposables = new DisposableStore();\r\n        this.lists = [];\r\n        this._lastFocusedWidget = undefined;\r\n        this._hasCreatedStyleController = false;\r\n    }\r\n    get lastFocusedList() {\r\n        return this._lastFocusedWidget;\r\n    }\r\n    register(widget, extraContextKeys) {\r\n        if (!this._hasCreatedStyleController) {\r\n            this._hasCreatedStyleController = true;\r\n            // create a shared default tree style sheet for performance reasons\r\n            const styleController = new DefaultStyleController(createStyleSheet(), '');\r\n            this.disposables.add(attachListStyler(styleController, this._themeService));\r\n        }\r\n        if (this.lists.some(l => l.widget === widget)) {\r\n            throw new Error('Cannot register the same widget multiple times');\r\n        }\r\n        // Keep in our lists list\r\n        const registeredList = { widget, extraContextKeys };\r\n        this.lists.push(registeredList);\r\n        // Check for currently being focused\r\n        if (widget.getHTMLElement() === document.activeElement) {\r\n            this._lastFocusedWidget = widget;\r\n        }\r\n        return combinedDisposable(widget.onDidFocus(() => this._lastFocusedWidget = widget), toDisposable(() => this.lists.splice(this.lists.indexOf(registeredList), 1)), widget.onDidDispose(() => {\r\n            this.lists = this.lists.filter(l => l !== registeredList);\r\n            if (this._lastFocusedWidget === widget) {\r\n                this._lastFocusedWidget = undefined;\r\n            }\r\n        }));\r\n    }\r\n    dispose() {\r\n        this.disposables.dispose();\r\n    }\r\n};\r\nListService = __decorate([\r\n    __param(0, IThemeService)\r\n], ListService);\r\nexport { ListService };\r\nconst RawWorkbenchListFocusContextKey = new RawContextKey('listFocus', true);\r\nexport const WorkbenchListSupportsMultiSelectContextKey = new RawContextKey('listSupportsMultiselect', true);\r\nexport const WorkbenchListFocusContextKey = ContextKeyExpr.and(RawWorkbenchListFocusContextKey, ContextKeyExpr.not(InputFocusedContextKey));\r\nexport const WorkbenchListHasSelectionOrFocus = new RawContextKey('listHasSelectionOrFocus', false);\r\nexport const WorkbenchListDoubleSelection = new RawContextKey('listDoubleSelection', false);\r\nexport const WorkbenchListMultiSelection = new RawContextKey('listMultiSelection', false);\r\nexport const WorkbenchListSupportsKeyboardNavigation = new RawContextKey('listSupportsKeyboardNavigation', true);\r\nexport const WorkbenchListAutomaticKeyboardNavigationKey = 'listAutomaticKeyboardNavigation';\r\nexport const WorkbenchListAutomaticKeyboardNavigation = new RawContextKey(WorkbenchListAutomaticKeyboardNavigationKey, true);\r\nexport let didBindWorkbenchListAutomaticKeyboardNavigation = false;\r\nfunction createScopedContextKeyService(contextKeyService, widget) {\r\n    const result = contextKeyService.createScoped(widget.getHTMLElement());\r\n    RawWorkbenchListFocusContextKey.bindTo(result);\r\n    return result;\r\n}\r\nconst multiSelectModifierSettingKey = 'workbench.list.multiSelectModifier';\r\nconst openModeSettingKey = 'workbench.list.openMode';\r\nconst horizontalScrollingKey = 'workbench.list.horizontalScrolling';\r\nconst keyboardNavigationSettingKey = 'workbench.list.keyboardNavigation';\r\nconst automaticKeyboardNavigationSettingKey = 'workbench.list.automaticKeyboardNavigation';\r\nconst treeIndentKey = 'workbench.tree.indent';\r\nconst treeRenderIndentGuidesKey = 'workbench.tree.renderIndentGuides';\r\nconst listSmoothScrolling = 'workbench.list.smoothScrolling';\r\nconst treeExpandMode = 'workbench.tree.expandMode';\r\nfunction useAltAsMultipleSelectionModifier(configurationService) {\r\n    return configurationService.getValue(multiSelectModifierSettingKey) === 'alt';\r\n}\r\nclass MultipleSelectionController extends Disposable {\r\n    constructor(configurationService) {\r\n        super();\r\n        this.configurationService = configurationService;\r\n        this.useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(configurationService);\r\n        this.registerListeners();\r\n    }\r\n    registerListeners() {\r\n        this._register(this.configurationService.onDidChangeConfiguration(e => {\r\n            if (e.affectsConfiguration(multiSelectModifierSettingKey)) {\r\n                this.useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(this.configurationService);\r\n            }\r\n        }));\r\n    }\r\n    isSelectionSingleChangeEvent(event) {\r\n        if (this.useAltAsMultipleSelectionModifier) {\r\n            return event.browserEvent.altKey;\r\n        }\r\n        return isSelectionSingleChangeEvent(event);\r\n    }\r\n    isSelectionRangeChangeEvent(event) {\r\n        return isSelectionRangeChangeEvent(event);\r\n    }\r\n}\r\nfunction toWorkbenchListOptions(options, configurationService, keybindingService) {\r\n    const disposables = new DisposableStore();\r\n    const result = Object.assign({}, options);\r\n    if (options.multipleSelectionSupport !== false && !options.multipleSelectionController) {\r\n        const multipleSelectionController = new MultipleSelectionController(configurationService);\r\n        result.multipleSelectionController = multipleSelectionController;\r\n        disposables.add(multipleSelectionController);\r\n    }\r\n    result.keyboardNavigationDelegate = {\r\n        mightProducePrintableCharacter(e) {\r\n            return keybindingService.mightProducePrintableCharacter(e);\r\n        }\r\n    };\r\n    result.smoothScrolling = configurationService.getValue(listSmoothScrolling);\r\n    return [result, disposables];\r\n}\r\nlet WorkbenchList = class WorkbenchList extends List {\r\n    constructor(user, container, delegate, renderers, options, contextKeyService, listService, themeService, configurationService, keybindingService) {\r\n        const horizontalScrolling = typeof options.horizontalScrolling !== 'undefined' ? options.horizontalScrolling : configurationService.getValue(horizontalScrollingKey);\r\n        const [workbenchListOptions, workbenchListOptionsDisposable] = toWorkbenchListOptions(options, configurationService, keybindingService);\r\n        super(user, container, delegate, renderers, Object.assign(Object.assign(Object.assign({ keyboardSupport: false }, computeStyles(themeService.getColorTheme(), defaultListStyles)), workbenchListOptions), { horizontalScrolling }));\r\n        this.disposables.add(workbenchListOptionsDisposable);\r\n        this.contextKeyService = createScopedContextKeyService(contextKeyService, this);\r\n        this.themeService = themeService;\r\n        const listSupportsMultiSelect = WorkbenchListSupportsMultiSelectContextKey.bindTo(this.contextKeyService);\r\n        listSupportsMultiSelect.set(!(options.multipleSelectionSupport === false));\r\n        this.listHasSelectionOrFocus = WorkbenchListHasSelectionOrFocus.bindTo(this.contextKeyService);\r\n        this.listDoubleSelection = WorkbenchListDoubleSelection.bindTo(this.contextKeyService);\r\n        this.listMultiSelection = WorkbenchListMultiSelection.bindTo(this.contextKeyService);\r\n        this.horizontalScrolling = options.horizontalScrolling;\r\n        this._useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(configurationService);\r\n        this.disposables.add(this.contextKeyService);\r\n        this.disposables.add(listService.register(this));\r\n        if (options.overrideStyles) {\r\n            this.updateStyles(options.overrideStyles);\r\n        }\r\n        this.disposables.add(this.onDidChangeSelection(() => {\r\n            const selection = this.getSelection();\r\n            const focus = this.getFocus();\r\n            this.contextKeyService.bufferChangeEvents(() => {\r\n                this.listHasSelectionOrFocus.set(selection.length > 0 || focus.length > 0);\r\n                this.listMultiSelection.set(selection.length > 1);\r\n                this.listDoubleSelection.set(selection.length === 2);\r\n            });\r\n        }));\r\n        this.disposables.add(this.onDidChangeFocus(() => {\r\n            const selection = this.getSelection();\r\n            const focus = this.getFocus();\r\n            this.listHasSelectionOrFocus.set(selection.length > 0 || focus.length > 0);\r\n        }));\r\n        this.disposables.add(configurationService.onDidChangeConfiguration(e => {\r\n            if (e.affectsConfiguration(multiSelectModifierSettingKey)) {\r\n                this._useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(configurationService);\r\n            }\r\n            let options = {};\r\n            if (e.affectsConfiguration(horizontalScrollingKey) && this.horizontalScrolling === undefined) {\r\n                const horizontalScrolling = configurationService.getValue(horizontalScrollingKey);\r\n                options = Object.assign(Object.assign({}, options), { horizontalScrolling });\r\n            }\r\n            if (e.affectsConfiguration(listSmoothScrolling)) {\r\n                const smoothScrolling = configurationService.getValue(listSmoothScrolling);\r\n                options = Object.assign(Object.assign({}, options), { smoothScrolling });\r\n            }\r\n            if (Object.keys(options).length > 0) {\r\n                this.updateOptions(options);\r\n            }\r\n        }));\r\n    }\r\n    updateOptions(options) {\r\n        super.updateOptions(options);\r\n        if (options.overrideStyles) {\r\n            this.updateStyles(options.overrideStyles);\r\n        }\r\n    }\r\n    dispose() {\r\n        super.dispose();\r\n        if (this._styler) {\r\n            this._styler.dispose();\r\n        }\r\n    }\r\n    updateStyles(styles) {\r\n        if (this._styler) {\r\n            this._styler.dispose();\r\n        }\r\n        this._styler = attachListStyler(this, this.themeService, styles);\r\n    }\r\n};\r\nWorkbenchList = __decorate([\r\n    __param(5, IContextKeyService),\r\n    __param(6, IListService),\r\n    __param(7, IThemeService),\r\n    __param(8, IConfigurationService),\r\n    __param(9, IKeybindingService)\r\n], WorkbenchList);\r\nexport { WorkbenchList };\r\nlet WorkbenchPagedList = class WorkbenchPagedList extends PagedList {\r\n    constructor(user, container, delegate, renderers, options, contextKeyService, listService, themeService, configurationService, keybindingService) {\r\n        const horizontalScrolling = typeof options.horizontalScrolling !== 'undefined' ? options.horizontalScrolling : configurationService.getValue(horizontalScrollingKey);\r\n        const [workbenchListOptions, workbenchListOptionsDisposable] = toWorkbenchListOptions(options, configurationService, keybindingService);\r\n        super(user, container, delegate, renderers, Object.assign(Object.assign(Object.assign({ keyboardSupport: false }, computeStyles(themeService.getColorTheme(), defaultListStyles)), workbenchListOptions), { horizontalScrolling }));\r\n        this.disposables = new DisposableStore();\r\n        this.disposables.add(workbenchListOptionsDisposable);\r\n        this.contextKeyService = createScopedContextKeyService(contextKeyService, this);\r\n        this.horizontalScrolling = options.horizontalScrolling;\r\n        const listSupportsMultiSelect = WorkbenchListSupportsMultiSelectContextKey.bindTo(this.contextKeyService);\r\n        listSupportsMultiSelect.set(!(options.multipleSelectionSupport === false));\r\n        this._useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(configurationService);\r\n        this.disposables.add(this.contextKeyService);\r\n        this.disposables.add(listService.register(this));\r\n        if (options.overrideStyles) {\r\n            this.disposables.add(attachListStyler(this, themeService, options.overrideStyles));\r\n        }\r\n        this.disposables.add(configurationService.onDidChangeConfiguration(e => {\r\n            if (e.affectsConfiguration(multiSelectModifierSettingKey)) {\r\n                this._useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(configurationService);\r\n            }\r\n            let options = {};\r\n            if (e.affectsConfiguration(horizontalScrollingKey) && this.horizontalScrolling === undefined) {\r\n                const horizontalScrolling = configurationService.getValue(horizontalScrollingKey);\r\n                options = Object.assign(Object.assign({}, options), { horizontalScrolling });\r\n            }\r\n            if (e.affectsConfiguration(listSmoothScrolling)) {\r\n                const smoothScrolling = configurationService.getValue(listSmoothScrolling);\r\n                options = Object.assign(Object.assign({}, options), { smoothScrolling });\r\n            }\r\n            if (Object.keys(options).length > 0) {\r\n                this.updateOptions(options);\r\n            }\r\n        }));\r\n    }\r\n    dispose() {\r\n        super.dispose();\r\n        this.disposables.dispose();\r\n    }\r\n};\r\nWorkbenchPagedList = __decorate([\r\n    __param(5, IContextKeyService),\r\n    __param(6, IListService),\r\n    __param(7, IThemeService),\r\n    __param(8, IConfigurationService),\r\n    __param(9, IKeybindingService)\r\n], WorkbenchPagedList);\r\nexport { WorkbenchPagedList };\r\nclass ResourceNavigator extends Disposable {\r\n    constructor(widget, options) {\r\n        var _a, _b;\r\n        super();\r\n        this.widget = widget;\r\n        this._onDidOpen = this._register(new Emitter());\r\n        this.onDidOpen = this._onDidOpen.event;\r\n        this.openOnFocus = (_a = options === null || options === void 0 ? void 0 : options.openOnFocus) !== null && _a !== void 0 ? _a : false;\r\n        this._register(Event.filter(this.widget.onDidChangeSelection, e => e.browserEvent instanceof KeyboardEvent)(e => this.onSelectionFromKeyboard(e)));\r\n        this._register(this.widget.onPointer((e) => this.onPointer(e.element, e.browserEvent)));\r\n        this._register(this.widget.onMouseDblClick((e) => this.onMouseDblClick(e.element, e.browserEvent)));\r\n        if (this.openOnFocus) {\r\n            this._register(Event.filter(this.widget.onDidChangeFocus, e => e.browserEvent instanceof KeyboardEvent)(e => this.onFocusFromKeyboard(e)));\r\n        }\r\n        if (typeof (options === null || options === void 0 ? void 0 : options.openOnSingleClick) !== 'boolean' && (options === null || options === void 0 ? void 0 : options.configurationService)) {\r\n            this.openOnSingleClick = (options === null || options === void 0 ? void 0 : options.configurationService.getValue(openModeSettingKey)) !== 'doubleClick';\r\n            this._register(options === null || options === void 0 ? void 0 : options.configurationService.onDidChangeConfiguration(() => {\r\n                this.openOnSingleClick = (options === null || options === void 0 ? void 0 : options.configurationService.getValue(openModeSettingKey)) !== 'doubleClick';\r\n            }));\r\n        }\r\n        else {\r\n            this.openOnSingleClick = (_b = options === null || options === void 0 ? void 0 : options.openOnSingleClick) !== null && _b !== void 0 ? _b : true;\r\n        }\r\n    }\r\n    onFocusFromKeyboard(event) {\r\n        const focus = this.widget.getFocus();\r\n        this.widget.setSelection(focus, event.browserEvent);\r\n        const selectionKeyboardEvent = event.browserEvent;\r\n        const preserveFocus = typeof selectionKeyboardEvent.preserveFocus === 'boolean' ? selectionKeyboardEvent.preserveFocus : true;\r\n        const pinned = typeof selectionKeyboardEvent.pinned === 'boolean' ? selectionKeyboardEvent.pinned : !preserveFocus;\r\n        const sideBySide = false;\r\n        this._open(this.getSelectedElement(), preserveFocus, pinned, sideBySide, event.browserEvent);\r\n    }\r\n    onSelectionFromKeyboard(event) {\r\n        if (event.elements.length !== 1) {\r\n            return;\r\n        }\r\n        const selectionKeyboardEvent = event.browserEvent;\r\n        const preserveFocus = typeof selectionKeyboardEvent.preserveFocus === 'boolean' ? selectionKeyboardEvent.preserveFocus : true;\r\n        const pinned = typeof selectionKeyboardEvent.pinned === 'boolean' ? selectionKeyboardEvent.pinned : !preserveFocus;\r\n        const sideBySide = false;\r\n        this._open(this.getSelectedElement(), preserveFocus, pinned, sideBySide, event.browserEvent);\r\n    }\r\n    onPointer(element, browserEvent) {\r\n        if (!this.openOnSingleClick) {\r\n            return;\r\n        }\r\n        const isDoubleClick = browserEvent.detail === 2;\r\n        if (isDoubleClick) {\r\n            return;\r\n        }\r\n        const isMiddleClick = browserEvent.button === 1;\r\n        const preserveFocus = true;\r\n        const pinned = isMiddleClick;\r\n        const sideBySide = browserEvent.ctrlKey || browserEvent.metaKey || browserEvent.altKey;\r\n        this._open(element, preserveFocus, pinned, sideBySide, browserEvent);\r\n    }\r\n    onMouseDblClick(element, browserEvent) {\r\n        if (!browserEvent) {\r\n            return;\r\n        }\r\n        const preserveFocus = false;\r\n        const pinned = true;\r\n        const sideBySide = (browserEvent.ctrlKey || browserEvent.metaKey || browserEvent.altKey);\r\n        this._open(element, preserveFocus, pinned, sideBySide, browserEvent);\r\n    }\r\n    _open(element, preserveFocus, pinned, sideBySide, browserEvent) {\r\n        if (!element) {\r\n            return;\r\n        }\r\n        this._onDidOpen.fire({\r\n            editorOptions: {\r\n                preserveFocus,\r\n                pinned,\r\n                revealIfVisible: true\r\n            },\r\n            sideBySide,\r\n            element,\r\n            browserEvent\r\n        });\r\n    }\r\n}\r\nclass TreeResourceNavigator extends ResourceNavigator {\r\n    constructor(widget, options) {\r\n        super(widget, options);\r\n        this.widget = widget;\r\n    }\r\n    getSelectedElement() {\r\n        var _a;\r\n        return (_a = this.widget.getSelection()[0]) !== null && _a !== void 0 ? _a : undefined;\r\n    }\r\n}\r\nfunction createKeyboardNavigationEventFilter(container, keybindingService) {\r\n    let inChord = false;\r\n    return event => {\r\n        if (inChord) {\r\n            inChord = false;\r\n            return false;\r\n        }\r\n        const result = keybindingService.softDispatch(event, container);\r\n        if (result && result.enterChord) {\r\n            inChord = true;\r\n            return false;\r\n        }\r\n        inChord = false;\r\n        return true;\r\n    };\r\n}\r\nlet WorkbenchObjectTree = class WorkbenchObjectTree extends ObjectTree {\r\n    constructor(user, container, delegate, renderers, options, contextKeyService, listService, themeService, configurationService, keybindingService, accessibilityService) {\r\n        const { options: treeOptions, getAutomaticKeyboardNavigation, disposable } = workbenchTreeDataPreamble(container, options, contextKeyService, configurationService, keybindingService, accessibilityService);\r\n        super(user, container, delegate, renderers, treeOptions);\r\n        this.disposables.add(disposable);\r\n        this.internals = new WorkbenchTreeInternals(this, options, getAutomaticKeyboardNavigation, options.overrideStyles, contextKeyService, listService, themeService, configurationService, accessibilityService);\r\n        this.disposables.add(this.internals);\r\n    }\r\n};\r\nWorkbenchObjectTree = __decorate([\r\n    __param(5, IContextKeyService),\r\n    __param(6, IListService),\r\n    __param(7, IThemeService),\r\n    __param(8, IConfigurationService),\r\n    __param(9, IKeybindingService),\r\n    __param(10, IAccessibilityService)\r\n], WorkbenchObjectTree);\r\nexport { WorkbenchObjectTree };\r\nlet WorkbenchCompressibleObjectTree = class WorkbenchCompressibleObjectTree extends CompressibleObjectTree {\r\n    constructor(user, container, delegate, renderers, options, contextKeyService, listService, themeService, configurationService, keybindingService, accessibilityService) {\r\n        const { options: treeOptions, getAutomaticKeyboardNavigation, disposable } = workbenchTreeDataPreamble(container, options, contextKeyService, configurationService, keybindingService, accessibilityService);\r\n        super(user, container, delegate, renderers, treeOptions);\r\n        this.disposables.add(disposable);\r\n        this.internals = new WorkbenchTreeInternals(this, options, getAutomaticKeyboardNavigation, options.overrideStyles, contextKeyService, listService, themeService, configurationService, accessibilityService);\r\n        this.disposables.add(this.internals);\r\n    }\r\n    updateOptions(options = {}) {\r\n        super.updateOptions(options);\r\n        if (options.overrideStyles) {\r\n            this.internals.updateStyleOverrides(options.overrideStyles);\r\n        }\r\n    }\r\n};\r\nWorkbenchCompressibleObjectTree = __decorate([\r\n    __param(5, IContextKeyService),\r\n    __param(6, IListService),\r\n    __param(7, IThemeService),\r\n    __param(8, IConfigurationService),\r\n    __param(9, IKeybindingService),\r\n    __param(10, IAccessibilityService)\r\n], WorkbenchCompressibleObjectTree);\r\nexport { WorkbenchCompressibleObjectTree };\r\nlet WorkbenchDataTree = class WorkbenchDataTree extends DataTree {\r\n    constructor(user, container, delegate, renderers, dataSource, options, contextKeyService, listService, themeService, configurationService, keybindingService, accessibilityService) {\r\n        const { options: treeOptions, getAutomaticKeyboardNavigation, disposable } = workbenchTreeDataPreamble(container, options, contextKeyService, configurationService, keybindingService, accessibilityService);\r\n        super(user, container, delegate, renderers, dataSource, treeOptions);\r\n        this.disposables.add(disposable);\r\n        this.internals = new WorkbenchTreeInternals(this, options, getAutomaticKeyboardNavigation, options.overrideStyles, contextKeyService, listService, themeService, configurationService, accessibilityService);\r\n        this.disposables.add(this.internals);\r\n    }\r\n    updateOptions(options = {}) {\r\n        super.updateOptions(options);\r\n        if (options.overrideStyles) {\r\n            this.internals.updateStyleOverrides(options.overrideStyles);\r\n        }\r\n    }\r\n};\r\nWorkbenchDataTree = __decorate([\r\n    __param(6, IContextKeyService),\r\n    __param(7, IListService),\r\n    __param(8, IThemeService),\r\n    __param(9, IConfigurationService),\r\n    __param(10, IKeybindingService),\r\n    __param(11, IAccessibilityService)\r\n], WorkbenchDataTree);\r\nexport { WorkbenchDataTree };\r\nlet WorkbenchAsyncDataTree = class WorkbenchAsyncDataTree extends AsyncDataTree {\r\n    constructor(user, container, delegate, renderers, dataSource, options, contextKeyService, listService, themeService, configurationService, keybindingService, accessibilityService) {\r\n        const { options: treeOptions, getAutomaticKeyboardNavigation, disposable } = workbenchTreeDataPreamble(container, options, contextKeyService, configurationService, keybindingService, accessibilityService);\r\n        super(user, container, delegate, renderers, dataSource, treeOptions);\r\n        this.disposables.add(disposable);\r\n        this.internals = new WorkbenchTreeInternals(this, options, getAutomaticKeyboardNavigation, options.overrideStyles, contextKeyService, listService, themeService, configurationService, accessibilityService);\r\n        this.disposables.add(this.internals);\r\n    }\r\n    get onDidOpen() { return this.internals.onDidOpen; }\r\n    updateOptions(options = {}) {\r\n        super.updateOptions(options);\r\n        if (options.overrideStyles) {\r\n            this.internals.updateStyleOverrides(options.overrideStyles);\r\n        }\r\n    }\r\n};\r\nWorkbenchAsyncDataTree = __decorate([\r\n    __param(6, IContextKeyService),\r\n    __param(7, IListService),\r\n    __param(8, IThemeService),\r\n    __param(9, IConfigurationService),\r\n    __param(10, IKeybindingService),\r\n    __param(11, IAccessibilityService)\r\n], WorkbenchAsyncDataTree);\r\nexport { WorkbenchAsyncDataTree };\r\nlet WorkbenchCompressibleAsyncDataTree = class WorkbenchCompressibleAsyncDataTree extends CompressibleAsyncDataTree {\r\n    constructor(user, container, virtualDelegate, compressionDelegate, renderers, dataSource, options, contextKeyService, listService, themeService, configurationService, keybindingService, accessibilityService) {\r\n        const { options: treeOptions, getAutomaticKeyboardNavigation, disposable } = workbenchTreeDataPreamble(container, options, contextKeyService, configurationService, keybindingService, accessibilityService);\r\n        super(user, container, virtualDelegate, compressionDelegate, renderers, dataSource, treeOptions);\r\n        this.disposables.add(disposable);\r\n        this.internals = new WorkbenchTreeInternals(this, options, getAutomaticKeyboardNavigation, options.overrideStyles, contextKeyService, listService, themeService, configurationService, accessibilityService);\r\n        this.disposables.add(this.internals);\r\n    }\r\n};\r\nWorkbenchCompressibleAsyncDataTree = __decorate([\r\n    __param(7, IContextKeyService),\r\n    __param(8, IListService),\r\n    __param(9, IThemeService),\r\n    __param(10, IConfigurationService),\r\n    __param(11, IKeybindingService),\r\n    __param(12, IAccessibilityService)\r\n], WorkbenchCompressibleAsyncDataTree);\r\nexport { WorkbenchCompressibleAsyncDataTree };\r\nfunction workbenchTreeDataPreamble(container, options, contextKeyService, configurationService, keybindingService, accessibilityService) {\r\n    var _a;\r\n    WorkbenchListSupportsKeyboardNavigation.bindTo(contextKeyService);\r\n    if (!didBindWorkbenchListAutomaticKeyboardNavigation) {\r\n        WorkbenchListAutomaticKeyboardNavigation.bindTo(contextKeyService);\r\n        didBindWorkbenchListAutomaticKeyboardNavigation = true;\r\n    }\r\n    const getAutomaticKeyboardNavigation = () => {\r\n        // give priority to the context key value to disable this completely\r\n        let automaticKeyboardNavigation = contextKeyService.getContextKeyValue(WorkbenchListAutomaticKeyboardNavigationKey);\r\n        if (automaticKeyboardNavigation) {\r\n            automaticKeyboardNavigation = configurationService.getValue(automaticKeyboardNavigationSettingKey);\r\n        }\r\n        return automaticKeyboardNavigation;\r\n    };\r\n    const accessibilityOn = accessibilityService.isScreenReaderOptimized();\r\n    const keyboardNavigation = options.simpleKeyboardNavigation || accessibilityOn ? 'simple' : configurationService.getValue(keyboardNavigationSettingKey);\r\n    const horizontalScrolling = options.horizontalScrolling !== undefined ? options.horizontalScrolling : configurationService.getValue(horizontalScrollingKey);\r\n    const [workbenchListOptions, disposable] = toWorkbenchListOptions(options, configurationService, keybindingService);\r\n    const additionalScrollHeight = options.additionalScrollHeight;\r\n    return {\r\n        getAutomaticKeyboardNavigation,\r\n        disposable,\r\n        options: Object.assign(Object.assign({ \r\n            // ...options, // TODO@Joao why is this not splatted here?\r\n            keyboardSupport: false }, workbenchListOptions), { indent: configurationService.getValue(treeIndentKey), renderIndentGuides: configurationService.getValue(treeRenderIndentGuidesKey), smoothScrolling: configurationService.getValue(listSmoothScrolling), automaticKeyboardNavigation: getAutomaticKeyboardNavigation(), simpleKeyboardNavigation: keyboardNavigation === 'simple', filterOnType: keyboardNavigation === 'filter', horizontalScrolling, keyboardNavigationEventFilter: createKeyboardNavigationEventFilter(container, keybindingService), additionalScrollHeight, hideTwistiesOfChildlessElements: options.hideTwistiesOfChildlessElements, expandOnlyOnDoubleClick: configurationService.getValue(openModeSettingKey) === 'doubleClick', expandOnlyOnTwistieClick: (_a = options.expandOnlyOnTwistieClick) !== null && _a !== void 0 ? _a : (configurationService.getValue(treeExpandMode) === 'doubleClick') })\r\n    };\r\n}\r\nlet WorkbenchTreeInternals = class WorkbenchTreeInternals {\r\n    constructor(tree, options, getAutomaticKeyboardNavigation, overrideStyles, contextKeyService, listService, themeService, configurationService, accessibilityService) {\r\n        this.tree = tree;\r\n        this.themeService = themeService;\r\n        this.disposables = [];\r\n        this.contextKeyService = createScopedContextKeyService(contextKeyService, tree);\r\n        const listSupportsMultiSelect = WorkbenchListSupportsMultiSelectContextKey.bindTo(this.contextKeyService);\r\n        listSupportsMultiSelect.set(!(options.multipleSelectionSupport === false));\r\n        this.hasSelectionOrFocus = WorkbenchListHasSelectionOrFocus.bindTo(this.contextKeyService);\r\n        this.hasDoubleSelection = WorkbenchListDoubleSelection.bindTo(this.contextKeyService);\r\n        this.hasMultiSelection = WorkbenchListMultiSelection.bindTo(this.contextKeyService);\r\n        this._useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(configurationService);\r\n        const interestingContextKeys = new Set();\r\n        interestingContextKeys.add(WorkbenchListAutomaticKeyboardNavigationKey);\r\n        const updateKeyboardNavigation = () => {\r\n            const accessibilityOn = accessibilityService.isScreenReaderOptimized();\r\n            const keyboardNavigation = accessibilityOn ? 'simple' : configurationService.getValue(keyboardNavigationSettingKey);\r\n            tree.updateOptions({\r\n                simpleKeyboardNavigation: keyboardNavigation === 'simple',\r\n                filterOnType: keyboardNavigation === 'filter'\r\n            });\r\n        };\r\n        this.updateStyleOverrides(overrideStyles);\r\n        this.disposables.push(this.contextKeyService, listService.register(tree), tree.onDidChangeSelection(() => {\r\n            const selection = tree.getSelection();\r\n            const focus = tree.getFocus();\r\n            this.contextKeyService.bufferChangeEvents(() => {\r\n                this.hasSelectionOrFocus.set(selection.length > 0 || focus.length > 0);\r\n                this.hasMultiSelection.set(selection.length > 1);\r\n                this.hasDoubleSelection.set(selection.length === 2);\r\n            });\r\n        }), tree.onDidChangeFocus(() => {\r\n            const selection = tree.getSelection();\r\n            const focus = tree.getFocus();\r\n            this.hasSelectionOrFocus.set(selection.length > 0 || focus.length > 0);\r\n        }), configurationService.onDidChangeConfiguration(e => {\r\n            let newOptions = {};\r\n            if (e.affectsConfiguration(multiSelectModifierSettingKey)) {\r\n                this._useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(configurationService);\r\n            }\r\n            if (e.affectsConfiguration(treeIndentKey)) {\r\n                const indent = configurationService.getValue(treeIndentKey);\r\n                newOptions = Object.assign(Object.assign({}, newOptions), { indent });\r\n            }\r\n            if (e.affectsConfiguration(treeRenderIndentGuidesKey)) {\r\n                const renderIndentGuides = configurationService.getValue(treeRenderIndentGuidesKey);\r\n                newOptions = Object.assign(Object.assign({}, newOptions), { renderIndentGuides });\r\n            }\r\n            if (e.affectsConfiguration(listSmoothScrolling)) {\r\n                const smoothScrolling = configurationService.getValue(listSmoothScrolling);\r\n                newOptions = Object.assign(Object.assign({}, newOptions), { smoothScrolling });\r\n            }\r\n            if (e.affectsConfiguration(keyboardNavigationSettingKey)) {\r\n                updateKeyboardNavigation();\r\n            }\r\n            if (e.affectsConfiguration(automaticKeyboardNavigationSettingKey)) {\r\n                newOptions = Object.assign(Object.assign({}, newOptions), { automaticKeyboardNavigation: getAutomaticKeyboardNavigation() });\r\n            }\r\n            if (e.affectsConfiguration(horizontalScrollingKey) && options.horizontalScrolling === undefined) {\r\n                const horizontalScrolling = configurationService.getValue(horizontalScrollingKey);\r\n                newOptions = Object.assign(Object.assign({}, newOptions), { horizontalScrolling });\r\n            }\r\n            if (e.affectsConfiguration(openModeSettingKey)) {\r\n                newOptions = Object.assign(Object.assign({}, newOptions), { expandOnlyOnDoubleClick: configurationService.getValue(openModeSettingKey) === 'doubleClick' });\r\n            }\r\n            if (e.affectsConfiguration(treeExpandMode) && options.expandOnlyOnTwistieClick === undefined) {\r\n                newOptions = Object.assign(Object.assign({}, newOptions), { expandOnlyOnTwistieClick: configurationService.getValue(treeExpandMode) === 'doubleClick' });\r\n            }\r\n            if (Object.keys(newOptions).length > 0) {\r\n                tree.updateOptions(newOptions);\r\n            }\r\n        }), this.contextKeyService.onDidChangeContext(e => {\r\n            if (e.affectsSome(interestingContextKeys)) {\r\n                tree.updateOptions({ automaticKeyboardNavigation: getAutomaticKeyboardNavigation() });\r\n            }\r\n        }), accessibilityService.onDidChangeScreenReaderOptimized(() => updateKeyboardNavigation()));\r\n        this.navigator = new TreeResourceNavigator(tree, Object.assign({ configurationService }, options));\r\n        this.disposables.push(this.navigator);\r\n    }\r\n    get onDidOpen() { return this.navigator.onDidOpen; }\r\n    updateStyleOverrides(overrideStyles) {\r\n        dispose(this.styler);\r\n        this.styler = overrideStyles ? attachListStyler(this.tree, this.themeService, overrideStyles) : Disposable.None;\r\n    }\r\n    dispose() {\r\n        this.disposables = dispose(this.disposables);\r\n        dispose(this.styler);\r\n        this.styler = undefined;\r\n    }\r\n};\r\nWorkbenchTreeInternals = __decorate([\r\n    __param(4, IContextKeyService),\r\n    __param(5, IListService),\r\n    __param(6, IThemeService),\r\n    __param(7, IConfigurationService),\r\n    __param(8, IAccessibilityService)\r\n], WorkbenchTreeInternals);\r\nconst configurationRegistry = Registry.as(ConfigurationExtensions.Configuration);\r\nconfigurationRegistry.registerConfiguration({\r\n    'id': 'workbench',\r\n    'order': 7,\r\n    'title': localize('workbenchConfigurationTitle', \"Workbench\"),\r\n    'type': 'object',\r\n    'properties': {\r\n        [multiSelectModifierSettingKey]: {\r\n            'type': 'string',\r\n            'enum': ['ctrlCmd', 'alt'],\r\n            'enumDescriptions': [\r\n                localize('multiSelectModifier.ctrlCmd', \"Maps to `Control` on Windows and Linux and to `Command` on macOS.\"),\r\n                localize('multiSelectModifier.alt', \"Maps to `Alt` on Windows and Linux and to `Option` on macOS.\")\r\n            ],\r\n            'default': 'ctrlCmd',\r\n            'description': localize({\r\n                key: 'multiSelectModifier',\r\n                comment: [\r\n                    '- `ctrlCmd` refers to a value the setting can take and should not be localized.',\r\n                    '- `Control` and `Command` refer to the modifier keys Ctrl or Cmd on the keyboard and can be localized.'\r\n                ]\r\n            }, \"The modifier to be used to add an item in trees and lists to a multi-selection with the mouse (for example in the explorer, open editors and scm view). The 'Open to Side' mouse gestures - if supported - will adapt such that they do not conflict with the multiselect modifier.\")\r\n        },\r\n        [openModeSettingKey]: {\r\n            'type': 'string',\r\n            'enum': ['singleClick', 'doubleClick'],\r\n            'default': 'singleClick',\r\n            'description': localize({\r\n                key: 'openModeModifier',\r\n                comment: ['`singleClick` and `doubleClick` refers to a value the setting can take and should not be localized.']\r\n            }, \"Controls how to open items in trees and lists using the mouse (if supported). For parents with children in trees, this setting will control if a single click expands the parent or a double click. Note that some trees and lists might choose to ignore this setting if it is not applicable. \")\r\n        },\r\n        [horizontalScrollingKey]: {\r\n            'type': 'boolean',\r\n            'default': false,\r\n            'description': localize('horizontalScrolling setting', \"Controls whether lists and trees support horizontal scrolling in the workbench. Warning: turning on this setting has a performance implication.\")\r\n        },\r\n        [treeIndentKey]: {\r\n            'type': 'number',\r\n            'default': 8,\r\n            minimum: 0,\r\n            maximum: 40,\r\n            'description': localize('tree indent setting', \"Controls tree indentation in pixels.\")\r\n        },\r\n        [treeRenderIndentGuidesKey]: {\r\n            type: 'string',\r\n            enum: ['none', 'onHover', 'always'],\r\n            default: 'onHover',\r\n            description: localize('render tree indent guides', \"Controls whether the tree should render indent guides.\")\r\n        },\r\n        [listSmoothScrolling]: {\r\n            type: 'boolean',\r\n            default: false,\r\n            description: localize('list smoothScrolling setting', \"Controls whether lists and trees have smooth scrolling.\"),\r\n        },\r\n        [keyboardNavigationSettingKey]: {\r\n            'type': 'string',\r\n            'enum': ['simple', 'highlight', 'filter'],\r\n            'enumDescriptions': [\r\n                localize('keyboardNavigationSettingKey.simple', \"Simple keyboard navigation focuses elements which match the keyboard input. Matching is done only on prefixes.\"),\r\n                localize('keyboardNavigationSettingKey.highlight', \"Highlight keyboard navigation highlights elements which match the keyboard input. Further up and down navigation will traverse only the highlighted elements.\"),\r\n                localize('keyboardNavigationSettingKey.filter', \"Filter keyboard navigation will filter out and hide all the elements which do not match the keyboard input.\")\r\n            ],\r\n            'default': 'highlight',\r\n            'description': localize('keyboardNavigationSettingKey', \"Controls the keyboard navigation style for lists and trees in the workbench. Can be simple, highlight and filter.\")\r\n        },\r\n        [automaticKeyboardNavigationSettingKey]: {\r\n            'type': 'boolean',\r\n            'default': true,\r\n            markdownDescription: localize('automatic keyboard navigation setting', \"Controls whether keyboard navigation in lists and trees is automatically triggered simply by typing. If set to `false`, keyboard navigation is only triggered when executing the `list.toggleKeyboardNavigation` command, for which you can assign a keyboard shortcut.\")\r\n        },\r\n        [treeExpandMode]: {\r\n            type: 'string',\r\n            enum: ['singleClick', 'doubleClick'],\r\n            default: 'singleClick',\r\n            description: localize('expand mode', \"Controls how tree folders are expanded when clicking the folder names.\"),\r\n        }\r\n    }\r\n});\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}