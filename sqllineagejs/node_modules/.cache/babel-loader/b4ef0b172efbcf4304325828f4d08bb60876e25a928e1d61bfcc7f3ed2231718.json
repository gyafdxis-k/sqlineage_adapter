{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\nimport { Emitter, PauseableEmitter } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { isUndefinedOrNull } from '../../../base/common/types.js';\nconst TARGET_KEY = '__$__targetStorageMarker';\nexport const IStorageService = createDecorator('storageService');\nexport var WillSaveStateReason;\n(function (WillSaveStateReason) {\n  /**\r\n   * No specific reason to save state.\r\n   */\n  WillSaveStateReason[WillSaveStateReason[\"NONE\"] = 0] = \"NONE\";\n  /**\r\n   * A hint that the workbench is about to shutdown.\r\n   */\n  WillSaveStateReason[WillSaveStateReason[\"SHUTDOWN\"] = 1] = \"SHUTDOWN\";\n})(WillSaveStateReason || (WillSaveStateReason = {}));\nexport class AbstractStorageService extends Disposable {\n  constructor() {\n    super(...arguments);\n    this._onDidChangeValue = this._register(new PauseableEmitter());\n    this._onDidChangeTarget = this._register(new PauseableEmitter());\n    this._onWillSaveState = this._register(new Emitter());\n    this.onWillSaveState = this._onWillSaveState.event;\n    this._workspaceKeyTargets = undefined;\n    this._globalKeyTargets = undefined;\n  }\n  emitDidChangeValue(scope, key) {\n    // Specially handle `TARGET_KEY`\n    if (key === TARGET_KEY) {\n      // Clear our cached version which is now out of date\n      if (scope === 0 /* GLOBAL */) {\n        this._globalKeyTargets = undefined;\n      } else if (scope === 1 /* WORKSPACE */) {\n        this._workspaceKeyTargets = undefined;\n      }\n      // Emit as `didChangeTarget` event\n      this._onDidChangeTarget.fire({\n        scope\n      });\n    }\n    // Emit any other key to outside\n    else {\n      this._onDidChangeValue.fire({\n        scope,\n        key,\n        target: this.getKeyTargets(scope)[key]\n      });\n    }\n  }\n  store(key, value, scope, target) {\n    // We remove the key for undefined/null values\n    if (isUndefinedOrNull(value)) {\n      this.remove(key, scope);\n      return;\n    }\n    // Update our datastructures but send events only after\n    this.withPausedEmitters(() => {\n      // Update key-target map\n      this.updateKeyTarget(key, scope, target);\n      // Store actual value\n      this.doStore(key, value, scope);\n    });\n  }\n  remove(key, scope) {\n    // Update our datastructures but send events only after\n    this.withPausedEmitters(() => {\n      // Update key-target map\n      this.updateKeyTarget(key, scope, undefined);\n      // Remove actual key\n      this.doRemove(key, scope);\n    });\n  }\n  withPausedEmitters(fn) {\n    // Pause emitters\n    this._onDidChangeValue.pause();\n    this._onDidChangeTarget.pause();\n    try {\n      fn();\n    } finally {\n      // Resume emitters\n      this._onDidChangeValue.resume();\n      this._onDidChangeTarget.resume();\n    }\n  }\n  updateKeyTarget(key, scope, target) {\n    // Add\n    const keyTargets = this.getKeyTargets(scope);\n    if (typeof target === 'number') {\n      if (keyTargets[key] !== target) {\n        keyTargets[key] = target;\n        this.doStore(TARGET_KEY, JSON.stringify(keyTargets), scope);\n      }\n    }\n    // Remove\n    else {\n      if (typeof keyTargets[key] === 'number') {\n        delete keyTargets[key];\n        this.doStore(TARGET_KEY, JSON.stringify(keyTargets), scope);\n      }\n    }\n  }\n  get workspaceKeyTargets() {\n    if (!this._workspaceKeyTargets) {\n      this._workspaceKeyTargets = this.loadKeyTargets(1 /* WORKSPACE */);\n    }\n\n    return this._workspaceKeyTargets;\n  }\n  get globalKeyTargets() {\n    if (!this._globalKeyTargets) {\n      this._globalKeyTargets = this.loadKeyTargets(0 /* GLOBAL */);\n    }\n\n    return this._globalKeyTargets;\n  }\n  getKeyTargets(scope) {\n    return scope === 0 /* GLOBAL */ ? this.globalKeyTargets : this.workspaceKeyTargets;\n  }\n  loadKeyTargets(scope) {\n    const keysRaw = this.get(TARGET_KEY, scope);\n    if (keysRaw) {\n      try {\n        return JSON.parse(keysRaw);\n      } catch (error) {\n        // Fail gracefully\n      }\n    }\n    return Object.create(null);\n  }\n}\nexport class InMemoryStorageService extends AbstractStorageService {\n  constructor() {\n    super(...arguments);\n    this.globalCache = new Map();\n    this.workspaceCache = new Map();\n  }\n  getCache(scope) {\n    return scope === 0 /* GLOBAL */ ? this.globalCache : this.workspaceCache;\n  }\n  get(key, scope, fallbackValue) {\n    const value = this.getCache(scope).get(key);\n    if (isUndefinedOrNull(value)) {\n      return fallbackValue;\n    }\n    return value;\n  }\n  getBoolean(key, scope, fallbackValue) {\n    const value = this.getCache(scope).get(key);\n    if (isUndefinedOrNull(value)) {\n      return fallbackValue;\n    }\n    return value === 'true';\n  }\n  getNumber(key, scope, fallbackValue) {\n    const value = this.getCache(scope).get(key);\n    if (isUndefinedOrNull(value)) {\n      return fallbackValue;\n    }\n    return parseInt(value, 10);\n  }\n  doStore(key, value, scope) {\n    // Otherwise, convert to String and store\n    const valueStr = String(value);\n    // Return early if value already set\n    const currentValue = this.getCache(scope).get(key);\n    if (currentValue === valueStr) {\n      return;\n    }\n    // Update in cache\n    this.getCache(scope).set(key, valueStr);\n    // Events\n    this.emitDidChangeValue(scope, key);\n  }\n  doRemove(key, scope) {\n    const wasDeleted = this.getCache(scope).delete(key);\n    if (!wasDeleted) {\n      return; // Return early if value already deleted\n    }\n    // Events\n    this.emitDidChangeValue(scope, key);\n  }\n}","map":{"version":3,"names":["createDecorator","Emitter","PauseableEmitter","Disposable","isUndefinedOrNull","TARGET_KEY","IStorageService","WillSaveStateReason","AbstractStorageService","constructor","arguments","_onDidChangeValue","_register","_onDidChangeTarget","_onWillSaveState","onWillSaveState","event","_workspaceKeyTargets","undefined","_globalKeyTargets","emitDidChangeValue","scope","key","fire","target","getKeyTargets","store","value","remove","withPausedEmitters","updateKeyTarget","doStore","doRemove","fn","pause","resume","keyTargets","JSON","stringify","workspaceKeyTargets","loadKeyTargets","globalKeyTargets","keysRaw","get","parse","error","Object","create","InMemoryStorageService","globalCache","Map","workspaceCache","getCache","fallbackValue","getBoolean","getNumber","parseInt","valueStr","String","currentValue","set","wasDeleted","delete"],"sources":["C:/Users/Administrator/Desktop/sqllineage-master/sqllineagejs/node_modules/monaco-editor/esm/vs/platform/storage/common/storage.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\r\nimport { Emitter, PauseableEmitter } from '../../../base/common/event.js';\r\nimport { Disposable } from '../../../base/common/lifecycle.js';\r\nimport { isUndefinedOrNull } from '../../../base/common/types.js';\r\nconst TARGET_KEY = '__$__targetStorageMarker';\r\nexport const IStorageService = createDecorator('storageService');\r\nexport var WillSaveStateReason;\r\n(function (WillSaveStateReason) {\r\n    /**\r\n     * No specific reason to save state.\r\n     */\r\n    WillSaveStateReason[WillSaveStateReason[\"NONE\"] = 0] = \"NONE\";\r\n    /**\r\n     * A hint that the workbench is about to shutdown.\r\n     */\r\n    WillSaveStateReason[WillSaveStateReason[\"SHUTDOWN\"] = 1] = \"SHUTDOWN\";\r\n})(WillSaveStateReason || (WillSaveStateReason = {}));\r\nexport class AbstractStorageService extends Disposable {\r\n    constructor() {\r\n        super(...arguments);\r\n        this._onDidChangeValue = this._register(new PauseableEmitter());\r\n        this._onDidChangeTarget = this._register(new PauseableEmitter());\r\n        this._onWillSaveState = this._register(new Emitter());\r\n        this.onWillSaveState = this._onWillSaveState.event;\r\n        this._workspaceKeyTargets = undefined;\r\n        this._globalKeyTargets = undefined;\r\n    }\r\n    emitDidChangeValue(scope, key) {\r\n        // Specially handle `TARGET_KEY`\r\n        if (key === TARGET_KEY) {\r\n            // Clear our cached version which is now out of date\r\n            if (scope === 0 /* GLOBAL */) {\r\n                this._globalKeyTargets = undefined;\r\n            }\r\n            else if (scope === 1 /* WORKSPACE */) {\r\n                this._workspaceKeyTargets = undefined;\r\n            }\r\n            // Emit as `didChangeTarget` event\r\n            this._onDidChangeTarget.fire({ scope });\r\n        }\r\n        // Emit any other key to outside\r\n        else {\r\n            this._onDidChangeValue.fire({ scope, key, target: this.getKeyTargets(scope)[key] });\r\n        }\r\n    }\r\n    store(key, value, scope, target) {\r\n        // We remove the key for undefined/null values\r\n        if (isUndefinedOrNull(value)) {\r\n            this.remove(key, scope);\r\n            return;\r\n        }\r\n        // Update our datastructures but send events only after\r\n        this.withPausedEmitters(() => {\r\n            // Update key-target map\r\n            this.updateKeyTarget(key, scope, target);\r\n            // Store actual value\r\n            this.doStore(key, value, scope);\r\n        });\r\n    }\r\n    remove(key, scope) {\r\n        // Update our datastructures but send events only after\r\n        this.withPausedEmitters(() => {\r\n            // Update key-target map\r\n            this.updateKeyTarget(key, scope, undefined);\r\n            // Remove actual key\r\n            this.doRemove(key, scope);\r\n        });\r\n    }\r\n    withPausedEmitters(fn) {\r\n        // Pause emitters\r\n        this._onDidChangeValue.pause();\r\n        this._onDidChangeTarget.pause();\r\n        try {\r\n            fn();\r\n        }\r\n        finally {\r\n            // Resume emitters\r\n            this._onDidChangeValue.resume();\r\n            this._onDidChangeTarget.resume();\r\n        }\r\n    }\r\n    updateKeyTarget(key, scope, target) {\r\n        // Add\r\n        const keyTargets = this.getKeyTargets(scope);\r\n        if (typeof target === 'number') {\r\n            if (keyTargets[key] !== target) {\r\n                keyTargets[key] = target;\r\n                this.doStore(TARGET_KEY, JSON.stringify(keyTargets), scope);\r\n            }\r\n        }\r\n        // Remove\r\n        else {\r\n            if (typeof keyTargets[key] === 'number') {\r\n                delete keyTargets[key];\r\n                this.doStore(TARGET_KEY, JSON.stringify(keyTargets), scope);\r\n            }\r\n        }\r\n    }\r\n    get workspaceKeyTargets() {\r\n        if (!this._workspaceKeyTargets) {\r\n            this._workspaceKeyTargets = this.loadKeyTargets(1 /* WORKSPACE */);\r\n        }\r\n        return this._workspaceKeyTargets;\r\n    }\r\n    get globalKeyTargets() {\r\n        if (!this._globalKeyTargets) {\r\n            this._globalKeyTargets = this.loadKeyTargets(0 /* GLOBAL */);\r\n        }\r\n        return this._globalKeyTargets;\r\n    }\r\n    getKeyTargets(scope) {\r\n        return scope === 0 /* GLOBAL */ ? this.globalKeyTargets : this.workspaceKeyTargets;\r\n    }\r\n    loadKeyTargets(scope) {\r\n        const keysRaw = this.get(TARGET_KEY, scope);\r\n        if (keysRaw) {\r\n            try {\r\n                return JSON.parse(keysRaw);\r\n            }\r\n            catch (error) {\r\n                // Fail gracefully\r\n            }\r\n        }\r\n        return Object.create(null);\r\n    }\r\n}\r\nexport class InMemoryStorageService extends AbstractStorageService {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.globalCache = new Map();\r\n        this.workspaceCache = new Map();\r\n    }\r\n    getCache(scope) {\r\n        return scope === 0 /* GLOBAL */ ? this.globalCache : this.workspaceCache;\r\n    }\r\n    get(key, scope, fallbackValue) {\r\n        const value = this.getCache(scope).get(key);\r\n        if (isUndefinedOrNull(value)) {\r\n            return fallbackValue;\r\n        }\r\n        return value;\r\n    }\r\n    getBoolean(key, scope, fallbackValue) {\r\n        const value = this.getCache(scope).get(key);\r\n        if (isUndefinedOrNull(value)) {\r\n            return fallbackValue;\r\n        }\r\n        return value === 'true';\r\n    }\r\n    getNumber(key, scope, fallbackValue) {\r\n        const value = this.getCache(scope).get(key);\r\n        if (isUndefinedOrNull(value)) {\r\n            return fallbackValue;\r\n        }\r\n        return parseInt(value, 10);\r\n    }\r\n    doStore(key, value, scope) {\r\n        // Otherwise, convert to String and store\r\n        const valueStr = String(value);\r\n        // Return early if value already set\r\n        const currentValue = this.getCache(scope).get(key);\r\n        if (currentValue === valueStr) {\r\n            return;\r\n        }\r\n        // Update in cache\r\n        this.getCache(scope).set(key, valueStr);\r\n        // Events\r\n        this.emitDidChangeValue(scope, key);\r\n    }\r\n    doRemove(key, scope) {\r\n        const wasDeleted = this.getCache(scope).delete(key);\r\n        if (!wasDeleted) {\r\n            return; // Return early if value already deleted\r\n        }\r\n        // Events\r\n        this.emitDidChangeValue(scope, key);\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}