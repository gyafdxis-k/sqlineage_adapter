{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { Range } from '../../../common/range.js';\n/**\r\n * Returns the intersection between a ranged group and a range.\r\n * Returns `[]` if the intersection is empty.\r\n */\nexport function groupIntersect(range, groups) {\n  const result = [];\n  for (let r of groups) {\n    if (range.start >= r.range.end) {\n      continue;\n    }\n    if (range.end < r.range.start) {\n      break;\n    }\n    const intersection = Range.intersect(range, r.range);\n    if (Range.isEmpty(intersection)) {\n      continue;\n    }\n    result.push({\n      range: intersection,\n      size: r.size\n    });\n  }\n  return result;\n}\n/**\r\n * Shifts a range by that `much`.\r\n */\nexport function shift(_ref, much) {\n  let {\n    start,\n    end\n  } = _ref;\n  return {\n    start: start + much,\n    end: end + much\n  };\n}\n/**\r\n * Consolidates a collection of ranged groups.\r\n *\r\n * Consolidation is the process of merging consecutive ranged groups\r\n * that share the same `size`.\r\n */\nexport function consolidate(groups) {\n  const result = [];\n  let previousGroup = null;\n  for (let group of groups) {\n    const start = group.range.start;\n    const end = group.range.end;\n    const size = group.size;\n    if (previousGroup && size === previousGroup.size) {\n      previousGroup.range.end = end;\n      continue;\n    }\n    previousGroup = {\n      range: {\n        start,\n        end\n      },\n      size\n    };\n    result.push(previousGroup);\n  }\n  return result;\n}\n/**\r\n * Concatenates several collections of ranged groups into a single\r\n * collection.\r\n */\nfunction concat() {\n  for (var _len = arguments.length, groups = new Array(_len), _key = 0; _key < _len; _key++) {\n    groups[_key] = arguments[_key];\n  }\n  return consolidate(groups.reduce((r, g) => r.concat(g), []));\n}\nexport class RangeMap {\n  constructor() {\n    this.groups = [];\n    this._size = 0;\n  }\n  splice(index, deleteCount) {\n    let items = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    const diff = items.length - deleteCount;\n    const before = groupIntersect({\n      start: 0,\n      end: index\n    }, this.groups);\n    const after = groupIntersect({\n      start: index + deleteCount,\n      end: Number.POSITIVE_INFINITY\n    }, this.groups).map(g => ({\n      range: shift(g.range, diff),\n      size: g.size\n    }));\n    const middle = items.map((item, i) => ({\n      range: {\n        start: index + i,\n        end: index + i + 1\n      },\n      size: item.size\n    }));\n    this.groups = concat(before, middle, after);\n    this._size = this.groups.reduce((t, g) => t + g.size * (g.range.end - g.range.start), 0);\n  }\n  /**\r\n   * Returns the number of items in the range map.\r\n   */\n  get count() {\n    const len = this.groups.length;\n    if (!len) {\n      return 0;\n    }\n    return this.groups[len - 1].range.end;\n  }\n  /**\r\n   * Returns the sum of the sizes of all items in the range map.\r\n   */\n  get size() {\n    return this._size;\n  }\n  /**\r\n   * Returns the index of the item at the given position.\r\n   */\n  indexAt(position) {\n    if (position < 0) {\n      return -1;\n    }\n    let index = 0;\n    let size = 0;\n    for (let group of this.groups) {\n      const count = group.range.end - group.range.start;\n      const newSize = size + count * group.size;\n      if (position < newSize) {\n        return index + Math.floor((position - size) / group.size);\n      }\n      index += count;\n      size = newSize;\n    }\n    return index;\n  }\n  /**\r\n   * Returns the index of the item right after the item at the\r\n   * index of the given position.\r\n   */\n  indexAfter(position) {\n    return Math.min(this.indexAt(position) + 1, this.count);\n  }\n  /**\r\n   * Returns the start position of the item at the given index.\r\n   */\n  positionAt(index) {\n    if (index < 0) {\n      return -1;\n    }\n    let position = 0;\n    let count = 0;\n    for (let group of this.groups) {\n      const groupCount = group.range.end - group.range.start;\n      const newCount = count + groupCount;\n      if (index < newCount) {\n        return position + (index - count) * group.size;\n      }\n      position += groupCount * group.size;\n      count = newCount;\n    }\n    return -1;\n  }\n}","map":{"version":3,"names":["Range","groupIntersect","range","groups","result","r","start","end","intersection","intersect","isEmpty","push","size","shift","_ref","much","consolidate","previousGroup","group","concat","_len","arguments","length","Array","_key","reduce","g","RangeMap","constructor","_size","splice","index","deleteCount","items","undefined","diff","before","after","Number","POSITIVE_INFINITY","map","middle","item","i","t","count","len","indexAt","position","newSize","Math","floor","indexAfter","min","positionAt","groupCount","newCount"],"sources":["C:/Users/Administrator/Desktop/sqllineage-master/sqllineagejs/node_modules/monaco-editor/esm/vs/base/browser/ui/list/rangeMap.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { Range } from '../../../common/range.js';\r\n/**\r\n * Returns the intersection between a ranged group and a range.\r\n * Returns `[]` if the intersection is empty.\r\n */\r\nexport function groupIntersect(range, groups) {\r\n    const result = [];\r\n    for (let r of groups) {\r\n        if (range.start >= r.range.end) {\r\n            continue;\r\n        }\r\n        if (range.end < r.range.start) {\r\n            break;\r\n        }\r\n        const intersection = Range.intersect(range, r.range);\r\n        if (Range.isEmpty(intersection)) {\r\n            continue;\r\n        }\r\n        result.push({\r\n            range: intersection,\r\n            size: r.size\r\n        });\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * Shifts a range by that `much`.\r\n */\r\nexport function shift({ start, end }, much) {\r\n    return { start: start + much, end: end + much };\r\n}\r\n/**\r\n * Consolidates a collection of ranged groups.\r\n *\r\n * Consolidation is the process of merging consecutive ranged groups\r\n * that share the same `size`.\r\n */\r\nexport function consolidate(groups) {\r\n    const result = [];\r\n    let previousGroup = null;\r\n    for (let group of groups) {\r\n        const start = group.range.start;\r\n        const end = group.range.end;\r\n        const size = group.size;\r\n        if (previousGroup && size === previousGroup.size) {\r\n            previousGroup.range.end = end;\r\n            continue;\r\n        }\r\n        previousGroup = { range: { start, end }, size };\r\n        result.push(previousGroup);\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * Concatenates several collections of ranged groups into a single\r\n * collection.\r\n */\r\nfunction concat(...groups) {\r\n    return consolidate(groups.reduce((r, g) => r.concat(g), []));\r\n}\r\nexport class RangeMap {\r\n    constructor() {\r\n        this.groups = [];\r\n        this._size = 0;\r\n    }\r\n    splice(index, deleteCount, items = []) {\r\n        const diff = items.length - deleteCount;\r\n        const before = groupIntersect({ start: 0, end: index }, this.groups);\r\n        const after = groupIntersect({ start: index + deleteCount, end: Number.POSITIVE_INFINITY }, this.groups)\r\n            .map(g => ({ range: shift(g.range, diff), size: g.size }));\r\n        const middle = items.map((item, i) => ({\r\n            range: { start: index + i, end: index + i + 1 },\r\n            size: item.size\r\n        }));\r\n        this.groups = concat(before, middle, after);\r\n        this._size = this.groups.reduce((t, g) => t + (g.size * (g.range.end - g.range.start)), 0);\r\n    }\r\n    /**\r\n     * Returns the number of items in the range map.\r\n     */\r\n    get count() {\r\n        const len = this.groups.length;\r\n        if (!len) {\r\n            return 0;\r\n        }\r\n        return this.groups[len - 1].range.end;\r\n    }\r\n    /**\r\n     * Returns the sum of the sizes of all items in the range map.\r\n     */\r\n    get size() {\r\n        return this._size;\r\n    }\r\n    /**\r\n     * Returns the index of the item at the given position.\r\n     */\r\n    indexAt(position) {\r\n        if (position < 0) {\r\n            return -1;\r\n        }\r\n        let index = 0;\r\n        let size = 0;\r\n        for (let group of this.groups) {\r\n            const count = group.range.end - group.range.start;\r\n            const newSize = size + (count * group.size);\r\n            if (position < newSize) {\r\n                return index + Math.floor((position - size) / group.size);\r\n            }\r\n            index += count;\r\n            size = newSize;\r\n        }\r\n        return index;\r\n    }\r\n    /**\r\n     * Returns the index of the item right after the item at the\r\n     * index of the given position.\r\n     */\r\n    indexAfter(position) {\r\n        return Math.min(this.indexAt(position) + 1, this.count);\r\n    }\r\n    /**\r\n     * Returns the start position of the item at the given index.\r\n     */\r\n    positionAt(index) {\r\n        if (index < 0) {\r\n            return -1;\r\n        }\r\n        let position = 0;\r\n        let count = 0;\r\n        for (let group of this.groups) {\r\n            const groupCount = group.range.end - group.range.start;\r\n            const newCount = count + groupCount;\r\n            if (index < newCount) {\r\n                return position + ((index - count) * group.size);\r\n            }\r\n            position += groupCount * group.size;\r\n            count = newCount;\r\n        }\r\n        return -1;\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}