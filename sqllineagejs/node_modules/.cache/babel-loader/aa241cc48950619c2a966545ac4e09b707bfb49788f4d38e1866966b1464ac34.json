{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { TreeError } from './tree.js';\nimport { tail2 } from '../../../common/arrays.js';\nimport { LcsDiff } from '../../../common/diff/diff.js';\nimport { Emitter, EventBufferer } from '../../../common/event.js';\nimport { Iterable } from '../../../common/iterator.js';\nexport function isFilterResult(obj) {\n  return typeof obj === 'object' && 'visibility' in obj && 'data' in obj;\n}\nexport function getVisibleState(visibility) {\n  switch (visibility) {\n    case true:\n      return 1 /* Visible */;\n    case false:\n      return 0 /* Hidden */;\n    default:\n      return visibility;\n  }\n}\nfunction isCollapsibleStateUpdate(update) {\n  return typeof update.collapsible === 'boolean';\n}\nexport class IndexTreeModel {\n  constructor(user, list, rootElement) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    this.user = user;\n    this.list = list;\n    this.rootRef = [];\n    this.eventBufferer = new EventBufferer();\n    this._onDidChangeCollapseState = new Emitter();\n    this.onDidChangeCollapseState = this.eventBufferer.wrapEvent(this._onDidChangeCollapseState.event);\n    this._onDidChangeRenderNodeCount = new Emitter();\n    this.onDidChangeRenderNodeCount = this.eventBufferer.wrapEvent(this._onDidChangeRenderNodeCount.event);\n    this._onDidSplice = new Emitter();\n    this.onDidSplice = this._onDidSplice.event;\n    this.collapseByDefault = typeof options.collapseByDefault === 'undefined' ? false : options.collapseByDefault;\n    this.filter = options.filter;\n    this.autoExpandSingleChildren = typeof options.autoExpandSingleChildren === 'undefined' ? false : options.autoExpandSingleChildren;\n    this.root = {\n      parent: undefined,\n      element: rootElement,\n      children: [],\n      depth: 0,\n      visibleChildrenCount: 0,\n      visibleChildIndex: -1,\n      collapsible: false,\n      collapsed: false,\n      renderNodeCount: 0,\n      visibility: 1 /* Visible */,\n      visible: true,\n      filterData: undefined\n    };\n  }\n  splice(location, deleteCount) {\n    let toInsert = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Iterable.empty();\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    if (location.length === 0) {\n      throw new TreeError(this.user, 'Invalid tree location');\n    }\n    if (options.diffIdentityProvider) {\n      this.spliceSmart(options.diffIdentityProvider, location, deleteCount, toInsert, options);\n    } else {\n      this.spliceSimple(location, deleteCount, toInsert, options);\n    }\n  }\n  spliceSmart(identity, location, deleteCount, toInsertIterable, options, recurseLevels) {\n    var _a;\n    if (toInsertIterable === void 0) {\n      toInsertIterable = Iterable.empty();\n    }\n    if (recurseLevels === void 0) {\n      recurseLevels = (_a = options.diffDepth) !== null && _a !== void 0 ? _a : 0;\n    }\n    const {\n      parentNode\n    } = this.getParentNodeWithListIndex(location);\n    const toInsert = [...toInsertIterable];\n    const index = location[location.length - 1];\n    const diff = new LcsDiff({\n      getElements: () => parentNode.children.map(e => identity.getId(e.element).toString())\n    }, {\n      getElements: () => [...parentNode.children.slice(0, index), ...toInsert, ...parentNode.children.slice(index + deleteCount)].map(e => identity.getId(e.element).toString())\n    }).ComputeDiff(false);\n    // if we were given a 'best effort' diff, use default behavior\n    if (diff.quitEarly) {\n      return this.spliceSimple(location, deleteCount, toInsert, options);\n    }\n    const locationPrefix = location.slice(0, -1);\n    const recurseSplice = (fromOriginal, fromModified, count) => {\n      if (recurseLevels > 0) {\n        for (let i = 0; i < count; i++) {\n          fromOriginal--;\n          fromModified--;\n          this.spliceSmart(identity, [...locationPrefix, fromOriginal, 0], Number.MAX_SAFE_INTEGER, toInsert[fromModified].children, options, recurseLevels - 1);\n        }\n      }\n    };\n    let lastStartO = Math.min(parentNode.children.length, index + deleteCount);\n    let lastStartM = toInsert.length;\n    for (const change of diff.changes.sort((a, b) => b.originalStart - a.originalStart)) {\n      recurseSplice(lastStartO, lastStartM, lastStartO - (change.originalStart + change.originalLength));\n      lastStartO = change.originalStart;\n      lastStartM = change.modifiedStart - index;\n      this.spliceSimple([...locationPrefix, lastStartO], change.originalLength, Iterable.slice(toInsert, lastStartM, lastStartM + change.modifiedLength), options);\n    }\n    // at this point, startO === startM === count since any remaining prefix should match\n    recurseSplice(lastStartO, lastStartM, lastStartO);\n  }\n  spliceSimple(location, deleteCount) {\n    let toInsert = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Iterable.empty();\n    let {\n      onDidCreateNode,\n      onDidDeleteNode\n    } = arguments.length > 3 ? arguments[3] : undefined;\n    const {\n      parentNode,\n      listIndex,\n      revealed,\n      visible\n    } = this.getParentNodeWithListIndex(location);\n    const treeListElementsToInsert = [];\n    const nodesToInsertIterator = Iterable.map(toInsert, el => this.createTreeNode(el, parentNode, parentNode.visible ? 1 /* Visible */ : 0 /* Hidden */, revealed, treeListElementsToInsert, onDidCreateNode));\n    const lastIndex = location[location.length - 1];\n    const lastHadChildren = parentNode.children.length > 0;\n    // figure out what's the visible child start index right before the\n    // splice point\n    let visibleChildStartIndex = 0;\n    for (let i = lastIndex; i >= 0 && i < parentNode.children.length; i--) {\n      const child = parentNode.children[i];\n      if (child.visible) {\n        visibleChildStartIndex = child.visibleChildIndex;\n        break;\n      }\n    }\n    const nodesToInsert = [];\n    let insertedVisibleChildrenCount = 0;\n    let renderNodeCount = 0;\n    for (const child of nodesToInsertIterator) {\n      nodesToInsert.push(child);\n      renderNodeCount += child.renderNodeCount;\n      if (child.visible) {\n        child.visibleChildIndex = visibleChildStartIndex + insertedVisibleChildrenCount++;\n      }\n    }\n    const deletedNodes = parentNode.children.splice(lastIndex, deleteCount, ...nodesToInsert);\n    // figure out what is the count of deleted visible children\n    let deletedVisibleChildrenCount = 0;\n    for (const child of deletedNodes) {\n      if (child.visible) {\n        deletedVisibleChildrenCount++;\n      }\n    }\n    // and adjust for all visible children after the splice point\n    if (deletedVisibleChildrenCount !== 0) {\n      for (let i = lastIndex + nodesToInsert.length; i < parentNode.children.length; i++) {\n        const child = parentNode.children[i];\n        if (child.visible) {\n          child.visibleChildIndex -= deletedVisibleChildrenCount;\n        }\n      }\n    }\n    // update parent's visible children count\n    parentNode.visibleChildrenCount += insertedVisibleChildrenCount - deletedVisibleChildrenCount;\n    if (revealed && visible) {\n      const visibleDeleteCount = deletedNodes.reduce((r, node) => r + (node.visible ? node.renderNodeCount : 0), 0);\n      this._updateAncestorsRenderNodeCount(parentNode, renderNodeCount - visibleDeleteCount);\n      this.list.splice(listIndex, visibleDeleteCount, treeListElementsToInsert);\n    }\n    if (deletedNodes.length > 0 && onDidDeleteNode) {\n      const visit = node => {\n        onDidDeleteNode(node);\n        node.children.forEach(visit);\n      };\n      deletedNodes.forEach(visit);\n    }\n    const currentlyHasChildren = parentNode.children.length > 0;\n    if (lastHadChildren !== currentlyHasChildren) {\n      this.setCollapsible(location.slice(0, -1), currentlyHasChildren);\n    }\n    this._onDidSplice.fire({\n      insertedNodes: nodesToInsert,\n      deletedNodes\n    });\n    let node = parentNode;\n    while (node) {\n      if (node.visibility === 2 /* Recurse */) {\n        this.refilter();\n        break;\n      }\n      node = node.parent;\n    }\n  }\n  rerender(location) {\n    if (location.length === 0) {\n      throw new TreeError(this.user, 'Invalid tree location');\n    }\n    const {\n      node,\n      listIndex,\n      revealed\n    } = this.getTreeNodeWithListIndex(location);\n    if (node.visible && revealed) {\n      this.list.splice(listIndex, 1, [node]);\n    }\n  }\n  has(location) {\n    return this.hasTreeNode(location);\n  }\n  getListIndex(location) {\n    const {\n      listIndex,\n      visible,\n      revealed\n    } = this.getTreeNodeWithListIndex(location);\n    return visible && revealed ? listIndex : -1;\n  }\n  getListRenderCount(location) {\n    return this.getTreeNode(location).renderNodeCount;\n  }\n  isCollapsible(location) {\n    return this.getTreeNode(location).collapsible;\n  }\n  setCollapsible(location, collapsible) {\n    const node = this.getTreeNode(location);\n    if (typeof collapsible === 'undefined') {\n      collapsible = !node.collapsible;\n    }\n    const update = {\n      collapsible\n    };\n    return this.eventBufferer.bufferEvents(() => this._setCollapseState(location, update));\n  }\n  isCollapsed(location) {\n    return this.getTreeNode(location).collapsed;\n  }\n  setCollapsed(location, collapsed, recursive) {\n    const node = this.getTreeNode(location);\n    if (typeof collapsed === 'undefined') {\n      collapsed = !node.collapsed;\n    }\n    const update = {\n      collapsed,\n      recursive: recursive || false\n    };\n    return this.eventBufferer.bufferEvents(() => this._setCollapseState(location, update));\n  }\n  _setCollapseState(location, update) {\n    const {\n      node,\n      listIndex,\n      revealed\n    } = this.getTreeNodeWithListIndex(location);\n    const result = this._setListNodeCollapseState(node, listIndex, revealed, update);\n    if (node !== this.root && this.autoExpandSingleChildren && result && !isCollapsibleStateUpdate(update) && node.collapsible && !node.collapsed && !update.recursive) {\n      let onlyVisibleChildIndex = -1;\n      for (let i = 0; i < node.children.length; i++) {\n        const child = node.children[i];\n        if (child.visible) {\n          if (onlyVisibleChildIndex > -1) {\n            onlyVisibleChildIndex = -1;\n            break;\n          } else {\n            onlyVisibleChildIndex = i;\n          }\n        }\n      }\n      if (onlyVisibleChildIndex > -1) {\n        this._setCollapseState([...location, onlyVisibleChildIndex], update);\n      }\n    }\n    return result;\n  }\n  _setListNodeCollapseState(node, listIndex, revealed, update) {\n    const result = this._setNodeCollapseState(node, update, false);\n    if (!revealed || !node.visible || !result) {\n      return result;\n    }\n    const previousRenderNodeCount = node.renderNodeCount;\n    const toInsert = this.updateNodeAfterCollapseChange(node);\n    const deleteCount = previousRenderNodeCount - (listIndex === -1 ? 0 : 1);\n    this.list.splice(listIndex + 1, deleteCount, toInsert.slice(1));\n    return result;\n  }\n  _setNodeCollapseState(node, update, deep) {\n    let result;\n    if (node === this.root) {\n      result = false;\n    } else {\n      if (isCollapsibleStateUpdate(update)) {\n        result = node.collapsible !== update.collapsible;\n        node.collapsible = update.collapsible;\n      } else if (!node.collapsible) {\n        result = false;\n      } else {\n        result = node.collapsed !== update.collapsed;\n        node.collapsed = update.collapsed;\n      }\n      if (result) {\n        this._onDidChangeCollapseState.fire({\n          node,\n          deep\n        });\n      }\n    }\n    if (!isCollapsibleStateUpdate(update) && update.recursive) {\n      for (const child of node.children) {\n        result = this._setNodeCollapseState(child, update, true) || result;\n      }\n    }\n    return result;\n  }\n  expandTo(location) {\n    this.eventBufferer.bufferEvents(() => {\n      let node = this.getTreeNode(location);\n      while (node.parent) {\n        node = node.parent;\n        location = location.slice(0, location.length - 1);\n        if (node.collapsed) {\n          this._setCollapseState(location, {\n            collapsed: false,\n            recursive: false\n          });\n        }\n      }\n    });\n  }\n  refilter() {\n    const previousRenderNodeCount = this.root.renderNodeCount;\n    const toInsert = this.updateNodeAfterFilterChange(this.root);\n    this.list.splice(0, previousRenderNodeCount, toInsert);\n  }\n  createTreeNode(treeElement, parent, parentVisibility, revealed, treeListElements, onDidCreateNode) {\n    const node = {\n      parent,\n      element: treeElement.element,\n      children: [],\n      depth: parent.depth + 1,\n      visibleChildrenCount: 0,\n      visibleChildIndex: -1,\n      collapsible: typeof treeElement.collapsible === 'boolean' ? treeElement.collapsible : typeof treeElement.collapsed !== 'undefined',\n      collapsed: typeof treeElement.collapsed === 'undefined' ? this.collapseByDefault : treeElement.collapsed,\n      renderNodeCount: 1,\n      visibility: 1 /* Visible */,\n      visible: true,\n      filterData: undefined\n    };\n    const visibility = this._filterNode(node, parentVisibility);\n    node.visibility = visibility;\n    if (revealed) {\n      treeListElements.push(node);\n    }\n    const childElements = treeElement.children || Iterable.empty();\n    const childRevealed = revealed && visibility !== 0 /* Hidden */ && !node.collapsed;\n    const childNodes = Iterable.map(childElements, el => this.createTreeNode(el, node, visibility, childRevealed, treeListElements, onDidCreateNode));\n    let visibleChildrenCount = 0;\n    let renderNodeCount = 1;\n    for (const child of childNodes) {\n      node.children.push(child);\n      renderNodeCount += child.renderNodeCount;\n      if (child.visible) {\n        child.visibleChildIndex = visibleChildrenCount++;\n      }\n    }\n    node.collapsible = node.collapsible || node.children.length > 0;\n    node.visibleChildrenCount = visibleChildrenCount;\n    node.visible = visibility === 2 /* Recurse */ ? visibleChildrenCount > 0 : visibility === 1 /* Visible */;\n    if (!node.visible) {\n      node.renderNodeCount = 0;\n      if (revealed) {\n        treeListElements.pop();\n      }\n    } else if (!node.collapsed) {\n      node.renderNodeCount = renderNodeCount;\n    }\n    if (onDidCreateNode) {\n      onDidCreateNode(node);\n    }\n    return node;\n  }\n  updateNodeAfterCollapseChange(node) {\n    const previousRenderNodeCount = node.renderNodeCount;\n    const result = [];\n    this._updateNodeAfterCollapseChange(node, result);\n    this._updateAncestorsRenderNodeCount(node.parent, result.length - previousRenderNodeCount);\n    return result;\n  }\n  _updateNodeAfterCollapseChange(node, result) {\n    if (node.visible === false) {\n      return 0;\n    }\n    result.push(node);\n    node.renderNodeCount = 1;\n    if (!node.collapsed) {\n      for (const child of node.children) {\n        node.renderNodeCount += this._updateNodeAfterCollapseChange(child, result);\n      }\n    }\n    this._onDidChangeRenderNodeCount.fire(node);\n    return node.renderNodeCount;\n  }\n  updateNodeAfterFilterChange(node) {\n    const previousRenderNodeCount = node.renderNodeCount;\n    const result = [];\n    this._updateNodeAfterFilterChange(node, node.visible ? 1 /* Visible */ : 0 /* Hidden */, result);\n    this._updateAncestorsRenderNodeCount(node.parent, result.length - previousRenderNodeCount);\n    return result;\n  }\n  _updateNodeAfterFilterChange(node, parentVisibility, result) {\n    let revealed = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    let visibility;\n    if (node !== this.root) {\n      visibility = this._filterNode(node, parentVisibility);\n      if (visibility === 0 /* Hidden */) {\n        node.visible = false;\n        node.renderNodeCount = 0;\n        return false;\n      }\n      if (revealed) {\n        result.push(node);\n      }\n    }\n    const resultStartLength = result.length;\n    node.renderNodeCount = node === this.root ? 0 : 1;\n    let hasVisibleDescendants = false;\n    if (!node.collapsed || visibility !== 0 /* Hidden */) {\n      let visibleChildIndex = 0;\n      for (const child of node.children) {\n        hasVisibleDescendants = this._updateNodeAfterFilterChange(child, visibility, result, revealed && !node.collapsed) || hasVisibleDescendants;\n        if (child.visible) {\n          child.visibleChildIndex = visibleChildIndex++;\n        }\n      }\n      node.visibleChildrenCount = visibleChildIndex;\n    } else {\n      node.visibleChildrenCount = 0;\n    }\n    if (node !== this.root) {\n      node.visible = visibility === 2 /* Recurse */ ? hasVisibleDescendants : visibility === 1 /* Visible */;\n    }\n\n    if (!node.visible) {\n      node.renderNodeCount = 0;\n      if (revealed) {\n        result.pop();\n      }\n    } else if (!node.collapsed) {\n      node.renderNodeCount += result.length - resultStartLength;\n    }\n    this._onDidChangeRenderNodeCount.fire(node);\n    return node.visible;\n  }\n  _updateAncestorsRenderNodeCount(node, diff) {\n    if (diff === 0) {\n      return;\n    }\n    while (node) {\n      node.renderNodeCount += diff;\n      this._onDidChangeRenderNodeCount.fire(node);\n      node = node.parent;\n    }\n  }\n  _filterNode(node, parentVisibility) {\n    const result = this.filter ? this.filter.filter(node.element, parentVisibility) : 1 /* Visible */;\n    if (typeof result === 'boolean') {\n      node.filterData = undefined;\n      return result ? 1 /* Visible */ : 0 /* Hidden */;\n    } else if (isFilterResult(result)) {\n      node.filterData = result.data;\n      return getVisibleState(result.visibility);\n    } else {\n      node.filterData = undefined;\n      return getVisibleState(result);\n    }\n  }\n  // cheap\n  hasTreeNode(location) {\n    let node = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.root;\n    if (!location || location.length === 0) {\n      return true;\n    }\n    const [index, ...rest] = location;\n    if (index < 0 || index > node.children.length) {\n      return false;\n    }\n    return this.hasTreeNode(rest, node.children[index]);\n  }\n  // cheap\n  getTreeNode(location) {\n    let node = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.root;\n    if (!location || location.length === 0) {\n      return node;\n    }\n    const [index, ...rest] = location;\n    if (index < 0 || index > node.children.length) {\n      throw new TreeError(this.user, 'Invalid tree location');\n    }\n    return this.getTreeNode(rest, node.children[index]);\n  }\n  // expensive\n  getTreeNodeWithListIndex(location) {\n    if (location.length === 0) {\n      return {\n        node: this.root,\n        listIndex: -1,\n        revealed: true,\n        visible: false\n      };\n    }\n    const {\n      parentNode,\n      listIndex,\n      revealed,\n      visible\n    } = this.getParentNodeWithListIndex(location);\n    const index = location[location.length - 1];\n    if (index < 0 || index > parentNode.children.length) {\n      throw new TreeError(this.user, 'Invalid tree location');\n    }\n    const node = parentNode.children[index];\n    return {\n      node,\n      listIndex,\n      revealed,\n      visible: visible && node.visible\n    };\n  }\n  getParentNodeWithListIndex(location) {\n    let node = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.root;\n    let listIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    let revealed = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    let visible = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n    const [index, ...rest] = location;\n    if (index < 0 || index > node.children.length) {\n      throw new TreeError(this.user, 'Invalid tree location');\n    }\n    // TODO@joao perf!\n    for (let i = 0; i < index; i++) {\n      listIndex += node.children[i].renderNodeCount;\n    }\n    revealed = revealed && !node.collapsed;\n    visible = visible && node.visible;\n    if (rest.length === 0) {\n      return {\n        parentNode: node,\n        listIndex,\n        revealed,\n        visible\n      };\n    }\n    return this.getParentNodeWithListIndex(rest, node.children[index], listIndex + 1, revealed, visible);\n  }\n  getNode() {\n    let location = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    return this.getTreeNode(location);\n  }\n  // TODO@joao perf!\n  getNodeLocation(node) {\n    const location = [];\n    let indexTreeNode = node; // typing woes\n    while (indexTreeNode.parent) {\n      location.push(indexTreeNode.parent.children.indexOf(indexTreeNode));\n      indexTreeNode = indexTreeNode.parent;\n    }\n    return location.reverse();\n  }\n  getParentNodeLocation(location) {\n    if (location.length === 0) {\n      return undefined;\n    } else if (location.length === 1) {\n      return [];\n    } else {\n      return tail2(location)[0];\n    }\n  }\n}","map":{"version":3,"names":["TreeError","tail2","LcsDiff","Emitter","EventBufferer","Iterable","isFilterResult","obj","getVisibleState","visibility","isCollapsibleStateUpdate","update","collapsible","IndexTreeModel","constructor","user","list","rootElement","options","arguments","length","undefined","rootRef","eventBufferer","_onDidChangeCollapseState","onDidChangeCollapseState","wrapEvent","event","_onDidChangeRenderNodeCount","onDidChangeRenderNodeCount","_onDidSplice","onDidSplice","collapseByDefault","filter","autoExpandSingleChildren","root","parent","element","children","depth","visibleChildrenCount","visibleChildIndex","collapsed","renderNodeCount","visible","filterData","splice","location","deleteCount","toInsert","empty","diffIdentityProvider","spliceSmart","spliceSimple","identity","toInsertIterable","recurseLevels","_a","diffDepth","parentNode","getParentNodeWithListIndex","index","diff","getElements","map","e","getId","toString","slice","ComputeDiff","quitEarly","locationPrefix","recurseSplice","fromOriginal","fromModified","count","i","Number","MAX_SAFE_INTEGER","lastStartO","Math","min","lastStartM","change","changes","sort","a","b","originalStart","originalLength","modifiedStart","modifiedLength","onDidCreateNode","onDidDeleteNode","listIndex","revealed","treeListElementsToInsert","nodesToInsertIterator","el","createTreeNode","lastIndex","lastHadChildren","visibleChildStartIndex","child","nodesToInsert","insertedVisibleChildrenCount","push","deletedNodes","deletedVisibleChildrenCount","visibleDeleteCount","reduce","r","node","_updateAncestorsRenderNodeCount","visit","forEach","currentlyHasChildren","setCollapsible","fire","insertedNodes","refilter","rerender","getTreeNodeWithListIndex","has","hasTreeNode","getListIndex","getListRenderCount","getTreeNode","isCollapsible","bufferEvents","_setCollapseState","isCollapsed","setCollapsed","recursive","result","_setListNodeCollapseState","onlyVisibleChildIndex","_setNodeCollapseState","previousRenderNodeCount","updateNodeAfterCollapseChange","deep","expandTo","updateNodeAfterFilterChange","treeElement","parentVisibility","treeListElements","_filterNode","childElements","childRevealed","childNodes","pop","_updateNodeAfterCollapseChange","_updateNodeAfterFilterChange","resultStartLength","hasVisibleDescendants","data","rest","getNode","getNodeLocation","indexTreeNode","indexOf","reverse","getParentNodeLocation"],"sources":["C:/Users/Administrator/Desktop/sqllineage-master/sqllineagejs/node_modules/monaco-editor/esm/vs/base/browser/ui/tree/indexTreeModel.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { TreeError } from './tree.js';\r\nimport { tail2 } from '../../../common/arrays.js';\r\nimport { LcsDiff } from '../../../common/diff/diff.js';\r\nimport { Emitter, EventBufferer } from '../../../common/event.js';\r\nimport { Iterable } from '../../../common/iterator.js';\r\nexport function isFilterResult(obj) {\r\n    return typeof obj === 'object' && 'visibility' in obj && 'data' in obj;\r\n}\r\nexport function getVisibleState(visibility) {\r\n    switch (visibility) {\r\n        case true: return 1 /* Visible */;\r\n        case false: return 0 /* Hidden */;\r\n        default: return visibility;\r\n    }\r\n}\r\nfunction isCollapsibleStateUpdate(update) {\r\n    return typeof update.collapsible === 'boolean';\r\n}\r\nexport class IndexTreeModel {\r\n    constructor(user, list, rootElement, options = {}) {\r\n        this.user = user;\r\n        this.list = list;\r\n        this.rootRef = [];\r\n        this.eventBufferer = new EventBufferer();\r\n        this._onDidChangeCollapseState = new Emitter();\r\n        this.onDidChangeCollapseState = this.eventBufferer.wrapEvent(this._onDidChangeCollapseState.event);\r\n        this._onDidChangeRenderNodeCount = new Emitter();\r\n        this.onDidChangeRenderNodeCount = this.eventBufferer.wrapEvent(this._onDidChangeRenderNodeCount.event);\r\n        this._onDidSplice = new Emitter();\r\n        this.onDidSplice = this._onDidSplice.event;\r\n        this.collapseByDefault = typeof options.collapseByDefault === 'undefined' ? false : options.collapseByDefault;\r\n        this.filter = options.filter;\r\n        this.autoExpandSingleChildren = typeof options.autoExpandSingleChildren === 'undefined' ? false : options.autoExpandSingleChildren;\r\n        this.root = {\r\n            parent: undefined,\r\n            element: rootElement,\r\n            children: [],\r\n            depth: 0,\r\n            visibleChildrenCount: 0,\r\n            visibleChildIndex: -1,\r\n            collapsible: false,\r\n            collapsed: false,\r\n            renderNodeCount: 0,\r\n            visibility: 1 /* Visible */,\r\n            visible: true,\r\n            filterData: undefined\r\n        };\r\n    }\r\n    splice(location, deleteCount, toInsert = Iterable.empty(), options = {}) {\r\n        if (location.length === 0) {\r\n            throw new TreeError(this.user, 'Invalid tree location');\r\n        }\r\n        if (options.diffIdentityProvider) {\r\n            this.spliceSmart(options.diffIdentityProvider, location, deleteCount, toInsert, options);\r\n        }\r\n        else {\r\n            this.spliceSimple(location, deleteCount, toInsert, options);\r\n        }\r\n    }\r\n    spliceSmart(identity, location, deleteCount, toInsertIterable, options, recurseLevels) {\r\n        var _a;\r\n        if (toInsertIterable === void 0) { toInsertIterable = Iterable.empty(); }\r\n        if (recurseLevels === void 0) { recurseLevels = (_a = options.diffDepth) !== null && _a !== void 0 ? _a : 0; }\r\n        const { parentNode } = this.getParentNodeWithListIndex(location);\r\n        const toInsert = [...toInsertIterable];\r\n        const index = location[location.length - 1];\r\n        const diff = new LcsDiff({ getElements: () => parentNode.children.map(e => identity.getId(e.element).toString()) }, {\r\n            getElements: () => [\r\n                ...parentNode.children.slice(0, index),\r\n                ...toInsert,\r\n                ...parentNode.children.slice(index + deleteCount),\r\n            ].map(e => identity.getId(e.element).toString())\r\n        }).ComputeDiff(false);\r\n        // if we were given a 'best effort' diff, use default behavior\r\n        if (diff.quitEarly) {\r\n            return this.spliceSimple(location, deleteCount, toInsert, options);\r\n        }\r\n        const locationPrefix = location.slice(0, -1);\r\n        const recurseSplice = (fromOriginal, fromModified, count) => {\r\n            if (recurseLevels > 0) {\r\n                for (let i = 0; i < count; i++) {\r\n                    fromOriginal--;\r\n                    fromModified--;\r\n                    this.spliceSmart(identity, [...locationPrefix, fromOriginal, 0], Number.MAX_SAFE_INTEGER, toInsert[fromModified].children, options, recurseLevels - 1);\r\n                }\r\n            }\r\n        };\r\n        let lastStartO = Math.min(parentNode.children.length, index + deleteCount);\r\n        let lastStartM = toInsert.length;\r\n        for (const change of diff.changes.sort((a, b) => b.originalStart - a.originalStart)) {\r\n            recurseSplice(lastStartO, lastStartM, lastStartO - (change.originalStart + change.originalLength));\r\n            lastStartO = change.originalStart;\r\n            lastStartM = change.modifiedStart - index;\r\n            this.spliceSimple([...locationPrefix, lastStartO], change.originalLength, Iterable.slice(toInsert, lastStartM, lastStartM + change.modifiedLength), options);\r\n        }\r\n        // at this point, startO === startM === count since any remaining prefix should match\r\n        recurseSplice(lastStartO, lastStartM, lastStartO);\r\n    }\r\n    spliceSimple(location, deleteCount, toInsert = Iterable.empty(), { onDidCreateNode, onDidDeleteNode }) {\r\n        const { parentNode, listIndex, revealed, visible } = this.getParentNodeWithListIndex(location);\r\n        const treeListElementsToInsert = [];\r\n        const nodesToInsertIterator = Iterable.map(toInsert, el => this.createTreeNode(el, parentNode, parentNode.visible ? 1 /* Visible */ : 0 /* Hidden */, revealed, treeListElementsToInsert, onDidCreateNode));\r\n        const lastIndex = location[location.length - 1];\r\n        const lastHadChildren = parentNode.children.length > 0;\r\n        // figure out what's the visible child start index right before the\r\n        // splice point\r\n        let visibleChildStartIndex = 0;\r\n        for (let i = lastIndex; i >= 0 && i < parentNode.children.length; i--) {\r\n            const child = parentNode.children[i];\r\n            if (child.visible) {\r\n                visibleChildStartIndex = child.visibleChildIndex;\r\n                break;\r\n            }\r\n        }\r\n        const nodesToInsert = [];\r\n        let insertedVisibleChildrenCount = 0;\r\n        let renderNodeCount = 0;\r\n        for (const child of nodesToInsertIterator) {\r\n            nodesToInsert.push(child);\r\n            renderNodeCount += child.renderNodeCount;\r\n            if (child.visible) {\r\n                child.visibleChildIndex = visibleChildStartIndex + insertedVisibleChildrenCount++;\r\n            }\r\n        }\r\n        const deletedNodes = parentNode.children.splice(lastIndex, deleteCount, ...nodesToInsert);\r\n        // figure out what is the count of deleted visible children\r\n        let deletedVisibleChildrenCount = 0;\r\n        for (const child of deletedNodes) {\r\n            if (child.visible) {\r\n                deletedVisibleChildrenCount++;\r\n            }\r\n        }\r\n        // and adjust for all visible children after the splice point\r\n        if (deletedVisibleChildrenCount !== 0) {\r\n            for (let i = lastIndex + nodesToInsert.length; i < parentNode.children.length; i++) {\r\n                const child = parentNode.children[i];\r\n                if (child.visible) {\r\n                    child.visibleChildIndex -= deletedVisibleChildrenCount;\r\n                }\r\n            }\r\n        }\r\n        // update parent's visible children count\r\n        parentNode.visibleChildrenCount += insertedVisibleChildrenCount - deletedVisibleChildrenCount;\r\n        if (revealed && visible) {\r\n            const visibleDeleteCount = deletedNodes.reduce((r, node) => r + (node.visible ? node.renderNodeCount : 0), 0);\r\n            this._updateAncestorsRenderNodeCount(parentNode, renderNodeCount - visibleDeleteCount);\r\n            this.list.splice(listIndex, visibleDeleteCount, treeListElementsToInsert);\r\n        }\r\n        if (deletedNodes.length > 0 && onDidDeleteNode) {\r\n            const visit = (node) => {\r\n                onDidDeleteNode(node);\r\n                node.children.forEach(visit);\r\n            };\r\n            deletedNodes.forEach(visit);\r\n        }\r\n        const currentlyHasChildren = parentNode.children.length > 0;\r\n        if (lastHadChildren !== currentlyHasChildren) {\r\n            this.setCollapsible(location.slice(0, -1), currentlyHasChildren);\r\n        }\r\n        this._onDidSplice.fire({ insertedNodes: nodesToInsert, deletedNodes });\r\n        let node = parentNode;\r\n        while (node) {\r\n            if (node.visibility === 2 /* Recurse */) {\r\n                this.refilter();\r\n                break;\r\n            }\r\n            node = node.parent;\r\n        }\r\n    }\r\n    rerender(location) {\r\n        if (location.length === 0) {\r\n            throw new TreeError(this.user, 'Invalid tree location');\r\n        }\r\n        const { node, listIndex, revealed } = this.getTreeNodeWithListIndex(location);\r\n        if (node.visible && revealed) {\r\n            this.list.splice(listIndex, 1, [node]);\r\n        }\r\n    }\r\n    has(location) {\r\n        return this.hasTreeNode(location);\r\n    }\r\n    getListIndex(location) {\r\n        const { listIndex, visible, revealed } = this.getTreeNodeWithListIndex(location);\r\n        return visible && revealed ? listIndex : -1;\r\n    }\r\n    getListRenderCount(location) {\r\n        return this.getTreeNode(location).renderNodeCount;\r\n    }\r\n    isCollapsible(location) {\r\n        return this.getTreeNode(location).collapsible;\r\n    }\r\n    setCollapsible(location, collapsible) {\r\n        const node = this.getTreeNode(location);\r\n        if (typeof collapsible === 'undefined') {\r\n            collapsible = !node.collapsible;\r\n        }\r\n        const update = { collapsible };\r\n        return this.eventBufferer.bufferEvents(() => this._setCollapseState(location, update));\r\n    }\r\n    isCollapsed(location) {\r\n        return this.getTreeNode(location).collapsed;\r\n    }\r\n    setCollapsed(location, collapsed, recursive) {\r\n        const node = this.getTreeNode(location);\r\n        if (typeof collapsed === 'undefined') {\r\n            collapsed = !node.collapsed;\r\n        }\r\n        const update = { collapsed, recursive: recursive || false };\r\n        return this.eventBufferer.bufferEvents(() => this._setCollapseState(location, update));\r\n    }\r\n    _setCollapseState(location, update) {\r\n        const { node, listIndex, revealed } = this.getTreeNodeWithListIndex(location);\r\n        const result = this._setListNodeCollapseState(node, listIndex, revealed, update);\r\n        if (node !== this.root && this.autoExpandSingleChildren && result && !isCollapsibleStateUpdate(update) && node.collapsible && !node.collapsed && !update.recursive) {\r\n            let onlyVisibleChildIndex = -1;\r\n            for (let i = 0; i < node.children.length; i++) {\r\n                const child = node.children[i];\r\n                if (child.visible) {\r\n                    if (onlyVisibleChildIndex > -1) {\r\n                        onlyVisibleChildIndex = -1;\r\n                        break;\r\n                    }\r\n                    else {\r\n                        onlyVisibleChildIndex = i;\r\n                    }\r\n                }\r\n            }\r\n            if (onlyVisibleChildIndex > -1) {\r\n                this._setCollapseState([...location, onlyVisibleChildIndex], update);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    _setListNodeCollapseState(node, listIndex, revealed, update) {\r\n        const result = this._setNodeCollapseState(node, update, false);\r\n        if (!revealed || !node.visible || !result) {\r\n            return result;\r\n        }\r\n        const previousRenderNodeCount = node.renderNodeCount;\r\n        const toInsert = this.updateNodeAfterCollapseChange(node);\r\n        const deleteCount = previousRenderNodeCount - (listIndex === -1 ? 0 : 1);\r\n        this.list.splice(listIndex + 1, deleteCount, toInsert.slice(1));\r\n        return result;\r\n    }\r\n    _setNodeCollapseState(node, update, deep) {\r\n        let result;\r\n        if (node === this.root) {\r\n            result = false;\r\n        }\r\n        else {\r\n            if (isCollapsibleStateUpdate(update)) {\r\n                result = node.collapsible !== update.collapsible;\r\n                node.collapsible = update.collapsible;\r\n            }\r\n            else if (!node.collapsible) {\r\n                result = false;\r\n            }\r\n            else {\r\n                result = node.collapsed !== update.collapsed;\r\n                node.collapsed = update.collapsed;\r\n            }\r\n            if (result) {\r\n                this._onDidChangeCollapseState.fire({ node, deep });\r\n            }\r\n        }\r\n        if (!isCollapsibleStateUpdate(update) && update.recursive) {\r\n            for (const child of node.children) {\r\n                result = this._setNodeCollapseState(child, update, true) || result;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    expandTo(location) {\r\n        this.eventBufferer.bufferEvents(() => {\r\n            let node = this.getTreeNode(location);\r\n            while (node.parent) {\r\n                node = node.parent;\r\n                location = location.slice(0, location.length - 1);\r\n                if (node.collapsed) {\r\n                    this._setCollapseState(location, { collapsed: false, recursive: false });\r\n                }\r\n            }\r\n        });\r\n    }\r\n    refilter() {\r\n        const previousRenderNodeCount = this.root.renderNodeCount;\r\n        const toInsert = this.updateNodeAfterFilterChange(this.root);\r\n        this.list.splice(0, previousRenderNodeCount, toInsert);\r\n    }\r\n    createTreeNode(treeElement, parent, parentVisibility, revealed, treeListElements, onDidCreateNode) {\r\n        const node = {\r\n            parent,\r\n            element: treeElement.element,\r\n            children: [],\r\n            depth: parent.depth + 1,\r\n            visibleChildrenCount: 0,\r\n            visibleChildIndex: -1,\r\n            collapsible: typeof treeElement.collapsible === 'boolean' ? treeElement.collapsible : (typeof treeElement.collapsed !== 'undefined'),\r\n            collapsed: typeof treeElement.collapsed === 'undefined' ? this.collapseByDefault : treeElement.collapsed,\r\n            renderNodeCount: 1,\r\n            visibility: 1 /* Visible */,\r\n            visible: true,\r\n            filterData: undefined\r\n        };\r\n        const visibility = this._filterNode(node, parentVisibility);\r\n        node.visibility = visibility;\r\n        if (revealed) {\r\n            treeListElements.push(node);\r\n        }\r\n        const childElements = treeElement.children || Iterable.empty();\r\n        const childRevealed = revealed && visibility !== 0 /* Hidden */ && !node.collapsed;\r\n        const childNodes = Iterable.map(childElements, el => this.createTreeNode(el, node, visibility, childRevealed, treeListElements, onDidCreateNode));\r\n        let visibleChildrenCount = 0;\r\n        let renderNodeCount = 1;\r\n        for (const child of childNodes) {\r\n            node.children.push(child);\r\n            renderNodeCount += child.renderNodeCount;\r\n            if (child.visible) {\r\n                child.visibleChildIndex = visibleChildrenCount++;\r\n            }\r\n        }\r\n        node.collapsible = node.collapsible || node.children.length > 0;\r\n        node.visibleChildrenCount = visibleChildrenCount;\r\n        node.visible = visibility === 2 /* Recurse */ ? visibleChildrenCount > 0 : (visibility === 1 /* Visible */);\r\n        if (!node.visible) {\r\n            node.renderNodeCount = 0;\r\n            if (revealed) {\r\n                treeListElements.pop();\r\n            }\r\n        }\r\n        else if (!node.collapsed) {\r\n            node.renderNodeCount = renderNodeCount;\r\n        }\r\n        if (onDidCreateNode) {\r\n            onDidCreateNode(node);\r\n        }\r\n        return node;\r\n    }\r\n    updateNodeAfterCollapseChange(node) {\r\n        const previousRenderNodeCount = node.renderNodeCount;\r\n        const result = [];\r\n        this._updateNodeAfterCollapseChange(node, result);\r\n        this._updateAncestorsRenderNodeCount(node.parent, result.length - previousRenderNodeCount);\r\n        return result;\r\n    }\r\n    _updateNodeAfterCollapseChange(node, result) {\r\n        if (node.visible === false) {\r\n            return 0;\r\n        }\r\n        result.push(node);\r\n        node.renderNodeCount = 1;\r\n        if (!node.collapsed) {\r\n            for (const child of node.children) {\r\n                node.renderNodeCount += this._updateNodeAfterCollapseChange(child, result);\r\n            }\r\n        }\r\n        this._onDidChangeRenderNodeCount.fire(node);\r\n        return node.renderNodeCount;\r\n    }\r\n    updateNodeAfterFilterChange(node) {\r\n        const previousRenderNodeCount = node.renderNodeCount;\r\n        const result = [];\r\n        this._updateNodeAfterFilterChange(node, node.visible ? 1 /* Visible */ : 0 /* Hidden */, result);\r\n        this._updateAncestorsRenderNodeCount(node.parent, result.length - previousRenderNodeCount);\r\n        return result;\r\n    }\r\n    _updateNodeAfterFilterChange(node, parentVisibility, result, revealed = true) {\r\n        let visibility;\r\n        if (node !== this.root) {\r\n            visibility = this._filterNode(node, parentVisibility);\r\n            if (visibility === 0 /* Hidden */) {\r\n                node.visible = false;\r\n                node.renderNodeCount = 0;\r\n                return false;\r\n            }\r\n            if (revealed) {\r\n                result.push(node);\r\n            }\r\n        }\r\n        const resultStartLength = result.length;\r\n        node.renderNodeCount = node === this.root ? 0 : 1;\r\n        let hasVisibleDescendants = false;\r\n        if (!node.collapsed || visibility !== 0 /* Hidden */) {\r\n            let visibleChildIndex = 0;\r\n            for (const child of node.children) {\r\n                hasVisibleDescendants = this._updateNodeAfterFilterChange(child, visibility, result, revealed && !node.collapsed) || hasVisibleDescendants;\r\n                if (child.visible) {\r\n                    child.visibleChildIndex = visibleChildIndex++;\r\n                }\r\n            }\r\n            node.visibleChildrenCount = visibleChildIndex;\r\n        }\r\n        else {\r\n            node.visibleChildrenCount = 0;\r\n        }\r\n        if (node !== this.root) {\r\n            node.visible = visibility === 2 /* Recurse */ ? hasVisibleDescendants : (visibility === 1 /* Visible */);\r\n        }\r\n        if (!node.visible) {\r\n            node.renderNodeCount = 0;\r\n            if (revealed) {\r\n                result.pop();\r\n            }\r\n        }\r\n        else if (!node.collapsed) {\r\n            node.renderNodeCount += result.length - resultStartLength;\r\n        }\r\n        this._onDidChangeRenderNodeCount.fire(node);\r\n        return node.visible;\r\n    }\r\n    _updateAncestorsRenderNodeCount(node, diff) {\r\n        if (diff === 0) {\r\n            return;\r\n        }\r\n        while (node) {\r\n            node.renderNodeCount += diff;\r\n            this._onDidChangeRenderNodeCount.fire(node);\r\n            node = node.parent;\r\n        }\r\n    }\r\n    _filterNode(node, parentVisibility) {\r\n        const result = this.filter ? this.filter.filter(node.element, parentVisibility) : 1 /* Visible */;\r\n        if (typeof result === 'boolean') {\r\n            node.filterData = undefined;\r\n            return result ? 1 /* Visible */ : 0 /* Hidden */;\r\n        }\r\n        else if (isFilterResult(result)) {\r\n            node.filterData = result.data;\r\n            return getVisibleState(result.visibility);\r\n        }\r\n        else {\r\n            node.filterData = undefined;\r\n            return getVisibleState(result);\r\n        }\r\n    }\r\n    // cheap\r\n    hasTreeNode(location, node = this.root) {\r\n        if (!location || location.length === 0) {\r\n            return true;\r\n        }\r\n        const [index, ...rest] = location;\r\n        if (index < 0 || index > node.children.length) {\r\n            return false;\r\n        }\r\n        return this.hasTreeNode(rest, node.children[index]);\r\n    }\r\n    // cheap\r\n    getTreeNode(location, node = this.root) {\r\n        if (!location || location.length === 0) {\r\n            return node;\r\n        }\r\n        const [index, ...rest] = location;\r\n        if (index < 0 || index > node.children.length) {\r\n            throw new TreeError(this.user, 'Invalid tree location');\r\n        }\r\n        return this.getTreeNode(rest, node.children[index]);\r\n    }\r\n    // expensive\r\n    getTreeNodeWithListIndex(location) {\r\n        if (location.length === 0) {\r\n            return { node: this.root, listIndex: -1, revealed: true, visible: false };\r\n        }\r\n        const { parentNode, listIndex, revealed, visible } = this.getParentNodeWithListIndex(location);\r\n        const index = location[location.length - 1];\r\n        if (index < 0 || index > parentNode.children.length) {\r\n            throw new TreeError(this.user, 'Invalid tree location');\r\n        }\r\n        const node = parentNode.children[index];\r\n        return { node, listIndex, revealed, visible: visible && node.visible };\r\n    }\r\n    getParentNodeWithListIndex(location, node = this.root, listIndex = 0, revealed = true, visible = true) {\r\n        const [index, ...rest] = location;\r\n        if (index < 0 || index > node.children.length) {\r\n            throw new TreeError(this.user, 'Invalid tree location');\r\n        }\r\n        // TODO@joao perf!\r\n        for (let i = 0; i < index; i++) {\r\n            listIndex += node.children[i].renderNodeCount;\r\n        }\r\n        revealed = revealed && !node.collapsed;\r\n        visible = visible && node.visible;\r\n        if (rest.length === 0) {\r\n            return { parentNode: node, listIndex, revealed, visible };\r\n        }\r\n        return this.getParentNodeWithListIndex(rest, node.children[index], listIndex + 1, revealed, visible);\r\n    }\r\n    getNode(location = []) {\r\n        return this.getTreeNode(location);\r\n    }\r\n    // TODO@joao perf!\r\n    getNodeLocation(node) {\r\n        const location = [];\r\n        let indexTreeNode = node; // typing woes\r\n        while (indexTreeNode.parent) {\r\n            location.push(indexTreeNode.parent.children.indexOf(indexTreeNode));\r\n            indexTreeNode = indexTreeNode.parent;\r\n        }\r\n        return location.reverse();\r\n    }\r\n    getParentNodeLocation(location) {\r\n        if (location.length === 0) {\r\n            return undefined;\r\n        }\r\n        else if (location.length === 1) {\r\n            return [];\r\n        }\r\n        else {\r\n            return tail2(location)[0];\r\n        }\r\n    }\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,SAAS,QAAQ,WAAW;AACrC,SAASC,KAAK,QAAQ,2BAA2B;AACjD,SAASC,OAAO,QAAQ,8BAA8B;AACtD,SAASC,OAAO,EAAEC,aAAa,QAAQ,0BAA0B;AACjE,SAASC,QAAQ,QAAQ,6BAA6B;AACtD,OAAO,SAASC,cAAcA,CAACC,GAAG,EAAE;EAChC,OAAO,OAAOA,GAAG,KAAK,QAAQ,IAAI,YAAY,IAAIA,GAAG,IAAI,MAAM,IAAIA,GAAG;AAC1E;AACA,OAAO,SAASC,eAAeA,CAACC,UAAU,EAAE;EACxC,QAAQA,UAAU;IACd,KAAK,IAAI;MAAE,OAAO,CAAC,CAAC;IACpB,KAAK,KAAK;MAAE,OAAO,CAAC,CAAC;IACrB;MAAS,OAAOA,UAAU;EAC9B;AACJ;AACA,SAASC,wBAAwBA,CAACC,MAAM,EAAE;EACtC,OAAO,OAAOA,MAAM,CAACC,WAAW,KAAK,SAAS;AAClD;AACA,OAAO,MAAMC,cAAc,CAAC;EACxBC,WAAWA,CAACC,IAAI,EAAEC,IAAI,EAAEC,WAAW,EAAgB;IAAA,IAAdC,OAAO,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;IAC7C,IAAI,CAACJ,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACM,OAAO,GAAG,EAAE;IACjB,IAAI,CAACC,aAAa,GAAG,IAAInB,aAAa,CAAC,CAAC;IACxC,IAAI,CAACoB,yBAAyB,GAAG,IAAIrB,OAAO,CAAC,CAAC;IAC9C,IAAI,CAACsB,wBAAwB,GAAG,IAAI,CAACF,aAAa,CAACG,SAAS,CAAC,IAAI,CAACF,yBAAyB,CAACG,KAAK,CAAC;IAClG,IAAI,CAACC,2BAA2B,GAAG,IAAIzB,OAAO,CAAC,CAAC;IAChD,IAAI,CAAC0B,0BAA0B,GAAG,IAAI,CAACN,aAAa,CAACG,SAAS,CAAC,IAAI,CAACE,2BAA2B,CAACD,KAAK,CAAC;IACtG,IAAI,CAACG,YAAY,GAAG,IAAI3B,OAAO,CAAC,CAAC;IACjC,IAAI,CAAC4B,WAAW,GAAG,IAAI,CAACD,YAAY,CAACH,KAAK;IAC1C,IAAI,CAACK,iBAAiB,GAAG,OAAOd,OAAO,CAACc,iBAAiB,KAAK,WAAW,GAAG,KAAK,GAAGd,OAAO,CAACc,iBAAiB;IAC7G,IAAI,CAACC,MAAM,GAAGf,OAAO,CAACe,MAAM;IAC5B,IAAI,CAACC,wBAAwB,GAAG,OAAOhB,OAAO,CAACgB,wBAAwB,KAAK,WAAW,GAAG,KAAK,GAAGhB,OAAO,CAACgB,wBAAwB;IAClI,IAAI,CAACC,IAAI,GAAG;MACRC,MAAM,EAAEf,SAAS;MACjBgB,OAAO,EAAEpB,WAAW;MACpBqB,QAAQ,EAAE,EAAE;MACZC,KAAK,EAAE,CAAC;MACRC,oBAAoB,EAAE,CAAC;MACvBC,iBAAiB,EAAE,CAAC,CAAC;MACrB7B,WAAW,EAAE,KAAK;MAClB8B,SAAS,EAAE,KAAK;MAChBC,eAAe,EAAE,CAAC;MAClBlC,UAAU,EAAE,CAAC,CAAC;MACdmC,OAAO,EAAE,IAAI;MACbC,UAAU,EAAExB;IAChB,CAAC;EACL;EACAyB,MAAMA,CAACC,QAAQ,EAAEC,WAAW,EAA6C;IAAA,IAA3CC,QAAQ,GAAA9B,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGd,QAAQ,CAAC6C,KAAK,CAAC,CAAC;IAAA,IAAEhC,OAAO,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;IACnE,IAAI4B,QAAQ,CAAC3B,MAAM,KAAK,CAAC,EAAE;MACvB,MAAM,IAAIpB,SAAS,CAAC,IAAI,CAACe,IAAI,EAAE,uBAAuB,CAAC;IAC3D;IACA,IAAIG,OAAO,CAACiC,oBAAoB,EAAE;MAC9B,IAAI,CAACC,WAAW,CAAClC,OAAO,CAACiC,oBAAoB,EAAEJ,QAAQ,EAAEC,WAAW,EAAEC,QAAQ,EAAE/B,OAAO,CAAC;IAC5F,CAAC,MACI;MACD,IAAI,CAACmC,YAAY,CAACN,QAAQ,EAAEC,WAAW,EAAEC,QAAQ,EAAE/B,OAAO,CAAC;IAC/D;EACJ;EACAkC,WAAWA,CAACE,QAAQ,EAAEP,QAAQ,EAAEC,WAAW,EAAEO,gBAAgB,EAAErC,OAAO,EAAEsC,aAAa,EAAE;IACnF,IAAIC,EAAE;IACN,IAAIF,gBAAgB,KAAK,KAAK,CAAC,EAAE;MAAEA,gBAAgB,GAAGlD,QAAQ,CAAC6C,KAAK,CAAC,CAAC;IAAE;IACxE,IAAIM,aAAa,KAAK,KAAK,CAAC,EAAE;MAAEA,aAAa,GAAG,CAACC,EAAE,GAAGvC,OAAO,CAACwC,SAAS,MAAM,IAAI,IAAID,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG,CAAC;IAAE;IAC7G,MAAM;MAAEE;IAAW,CAAC,GAAG,IAAI,CAACC,0BAA0B,CAACb,QAAQ,CAAC;IAChE,MAAME,QAAQ,GAAG,CAAC,GAAGM,gBAAgB,CAAC;IACtC,MAAMM,KAAK,GAAGd,QAAQ,CAACA,QAAQ,CAAC3B,MAAM,GAAG,CAAC,CAAC;IAC3C,MAAM0C,IAAI,GAAG,IAAI5D,OAAO,CAAC;MAAE6D,WAAW,EAAEA,CAAA,KAAMJ,UAAU,CAACrB,QAAQ,CAAC0B,GAAG,CAACC,CAAC,IAAIX,QAAQ,CAACY,KAAK,CAACD,CAAC,CAAC5B,OAAO,CAAC,CAAC8B,QAAQ,CAAC,CAAC;IAAE,CAAC,EAAE;MAChHJ,WAAW,EAAEA,CAAA,KAAM,CACf,GAAGJ,UAAU,CAACrB,QAAQ,CAAC8B,KAAK,CAAC,CAAC,EAAEP,KAAK,CAAC,EACtC,GAAGZ,QAAQ,EACX,GAAGU,UAAU,CAACrB,QAAQ,CAAC8B,KAAK,CAACP,KAAK,GAAGb,WAAW,CAAC,CACpD,CAACgB,GAAG,CAACC,CAAC,IAAIX,QAAQ,CAACY,KAAK,CAACD,CAAC,CAAC5B,OAAO,CAAC,CAAC8B,QAAQ,CAAC,CAAC;IACnD,CAAC,CAAC,CAACE,WAAW,CAAC,KAAK,CAAC;IACrB;IACA,IAAIP,IAAI,CAACQ,SAAS,EAAE;MAChB,OAAO,IAAI,CAACjB,YAAY,CAACN,QAAQ,EAAEC,WAAW,EAAEC,QAAQ,EAAE/B,OAAO,CAAC;IACtE;IACA,MAAMqD,cAAc,GAAGxB,QAAQ,CAACqB,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAC5C,MAAMI,aAAa,GAAGA,CAACC,YAAY,EAAEC,YAAY,EAAEC,KAAK,KAAK;MACzD,IAAInB,aAAa,GAAG,CAAC,EAAE;QACnB,KAAK,IAAIoB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,KAAK,EAAEC,CAAC,EAAE,EAAE;UAC5BH,YAAY,EAAE;UACdC,YAAY,EAAE;UACd,IAAI,CAACtB,WAAW,CAACE,QAAQ,EAAE,CAAC,GAAGiB,cAAc,EAAEE,YAAY,EAAE,CAAC,CAAC,EAAEI,MAAM,CAACC,gBAAgB,EAAE7B,QAAQ,CAACyB,YAAY,CAAC,CAACpC,QAAQ,EAAEpB,OAAO,EAAEsC,aAAa,GAAG,CAAC,CAAC;QAC1J;MACJ;IACJ,CAAC;IACD,IAAIuB,UAAU,GAAGC,IAAI,CAACC,GAAG,CAACtB,UAAU,CAACrB,QAAQ,CAAClB,MAAM,EAAEyC,KAAK,GAAGb,WAAW,CAAC;IAC1E,IAAIkC,UAAU,GAAGjC,QAAQ,CAAC7B,MAAM;IAChC,KAAK,MAAM+D,MAAM,IAAIrB,IAAI,CAACsB,OAAO,CAACC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAACC,aAAa,GAAGF,CAAC,CAACE,aAAa,CAAC,EAAE;MACjFhB,aAAa,CAACO,UAAU,EAAEG,UAAU,EAAEH,UAAU,IAAII,MAAM,CAACK,aAAa,GAAGL,MAAM,CAACM,cAAc,CAAC,CAAC;MAClGV,UAAU,GAAGI,MAAM,CAACK,aAAa;MACjCN,UAAU,GAAGC,MAAM,CAACO,aAAa,GAAG7B,KAAK;MACzC,IAAI,CAACR,YAAY,CAAC,CAAC,GAAGkB,cAAc,EAAEQ,UAAU,CAAC,EAAEI,MAAM,CAACM,cAAc,EAAEpF,QAAQ,CAAC+D,KAAK,CAACnB,QAAQ,EAAEiC,UAAU,EAAEA,UAAU,GAAGC,MAAM,CAACQ,cAAc,CAAC,EAAEzE,OAAO,CAAC;IAChK;IACA;IACAsD,aAAa,CAACO,UAAU,EAAEG,UAAU,EAAEH,UAAU,CAAC;EACrD;EACA1B,YAAYA,CAACN,QAAQ,EAAEC,WAAW,EAAqE;IAAA,IAAnEC,QAAQ,GAAA9B,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGd,QAAQ,CAAC6C,KAAK,CAAC,CAAC;IAAA,IAAE;MAAE0C,eAAe;MAAEC;IAAgB,CAAC,GAAA1E,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;IACjG,MAAM;MAAEsC,UAAU;MAAEmC,SAAS;MAAEC,QAAQ;MAAEnD;IAAQ,CAAC,GAAG,IAAI,CAACgB,0BAA0B,CAACb,QAAQ,CAAC;IAC9F,MAAMiD,wBAAwB,GAAG,EAAE;IACnC,MAAMC,qBAAqB,GAAG5F,QAAQ,CAAC2D,GAAG,CAACf,QAAQ,EAAEiD,EAAE,IAAI,IAAI,CAACC,cAAc,CAACD,EAAE,EAAEvC,UAAU,EAAEA,UAAU,CAACf,OAAO,GAAG,CAAC,CAAC,gBAAgB,CAAC,CAAC,cAAcmD,QAAQ,EAAEC,wBAAwB,EAAEJ,eAAe,CAAC,CAAC;IAC3M,MAAMQ,SAAS,GAAGrD,QAAQ,CAACA,QAAQ,CAAC3B,MAAM,GAAG,CAAC,CAAC;IAC/C,MAAMiF,eAAe,GAAG1C,UAAU,CAACrB,QAAQ,CAAClB,MAAM,GAAG,CAAC;IACtD;IACA;IACA,IAAIkF,sBAAsB,GAAG,CAAC;IAC9B,KAAK,IAAI1B,CAAC,GAAGwB,SAAS,EAAExB,CAAC,IAAI,CAAC,IAAIA,CAAC,GAAGjB,UAAU,CAACrB,QAAQ,CAAClB,MAAM,EAAEwD,CAAC,EAAE,EAAE;MACnE,MAAM2B,KAAK,GAAG5C,UAAU,CAACrB,QAAQ,CAACsC,CAAC,CAAC;MACpC,IAAI2B,KAAK,CAAC3D,OAAO,EAAE;QACf0D,sBAAsB,GAAGC,KAAK,CAAC9D,iBAAiB;QAChD;MACJ;IACJ;IACA,MAAM+D,aAAa,GAAG,EAAE;IACxB,IAAIC,4BAA4B,GAAG,CAAC;IACpC,IAAI9D,eAAe,GAAG,CAAC;IACvB,KAAK,MAAM4D,KAAK,IAAIN,qBAAqB,EAAE;MACvCO,aAAa,CAACE,IAAI,CAACH,KAAK,CAAC;MACzB5D,eAAe,IAAI4D,KAAK,CAAC5D,eAAe;MACxC,IAAI4D,KAAK,CAAC3D,OAAO,EAAE;QACf2D,KAAK,CAAC9D,iBAAiB,GAAG6D,sBAAsB,GAAGG,4BAA4B,EAAE;MACrF;IACJ;IACA,MAAME,YAAY,GAAGhD,UAAU,CAACrB,QAAQ,CAACQ,MAAM,CAACsD,SAAS,EAAEpD,WAAW,EAAE,GAAGwD,aAAa,CAAC;IACzF;IACA,IAAII,2BAA2B,GAAG,CAAC;IACnC,KAAK,MAAML,KAAK,IAAII,YAAY,EAAE;MAC9B,IAAIJ,KAAK,CAAC3D,OAAO,EAAE;QACfgE,2BAA2B,EAAE;MACjC;IACJ;IACA;IACA,IAAIA,2BAA2B,KAAK,CAAC,EAAE;MACnC,KAAK,IAAIhC,CAAC,GAAGwB,SAAS,GAAGI,aAAa,CAACpF,MAAM,EAAEwD,CAAC,GAAGjB,UAAU,CAACrB,QAAQ,CAAClB,MAAM,EAAEwD,CAAC,EAAE,EAAE;QAChF,MAAM2B,KAAK,GAAG5C,UAAU,CAACrB,QAAQ,CAACsC,CAAC,CAAC;QACpC,IAAI2B,KAAK,CAAC3D,OAAO,EAAE;UACf2D,KAAK,CAAC9D,iBAAiB,IAAImE,2BAA2B;QAC1D;MACJ;IACJ;IACA;IACAjD,UAAU,CAACnB,oBAAoB,IAAIiE,4BAA4B,GAAGG,2BAA2B;IAC7F,IAAIb,QAAQ,IAAInD,OAAO,EAAE;MACrB,MAAMiE,kBAAkB,GAAGF,YAAY,CAACG,MAAM,CAAC,CAACC,CAAC,EAAEC,IAAI,KAAKD,CAAC,IAAIC,IAAI,CAACpE,OAAO,GAAGoE,IAAI,CAACrE,eAAe,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;MAC7G,IAAI,CAACsE,+BAA+B,CAACtD,UAAU,EAAEhB,eAAe,GAAGkE,kBAAkB,CAAC;MACtF,IAAI,CAAC7F,IAAI,CAAC8B,MAAM,CAACgD,SAAS,EAAEe,kBAAkB,EAAEb,wBAAwB,CAAC;IAC7E;IACA,IAAIW,YAAY,CAACvF,MAAM,GAAG,CAAC,IAAIyE,eAAe,EAAE;MAC5C,MAAMqB,KAAK,GAAIF,IAAI,IAAK;QACpBnB,eAAe,CAACmB,IAAI,CAAC;QACrBA,IAAI,CAAC1E,QAAQ,CAAC6E,OAAO,CAACD,KAAK,CAAC;MAChC,CAAC;MACDP,YAAY,CAACQ,OAAO,CAACD,KAAK,CAAC;IAC/B;IACA,MAAME,oBAAoB,GAAGzD,UAAU,CAACrB,QAAQ,CAAClB,MAAM,GAAG,CAAC;IAC3D,IAAIiF,eAAe,KAAKe,oBAAoB,EAAE;MAC1C,IAAI,CAACC,cAAc,CAACtE,QAAQ,CAACqB,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAEgD,oBAAoB,CAAC;IACpE;IACA,IAAI,CAACtF,YAAY,CAACwF,IAAI,CAAC;MAAEC,aAAa,EAAEf,aAAa;MAAEG;IAAa,CAAC,CAAC;IACtE,IAAIK,IAAI,GAAGrD,UAAU;IACrB,OAAOqD,IAAI,EAAE;MACT,IAAIA,IAAI,CAACvG,UAAU,KAAK,CAAC,CAAC,eAAe;QACrC,IAAI,CAAC+G,QAAQ,CAAC,CAAC;QACf;MACJ;MACAR,IAAI,GAAGA,IAAI,CAAC5E,MAAM;IACtB;EACJ;EACAqF,QAAQA,CAAC1E,QAAQ,EAAE;IACf,IAAIA,QAAQ,CAAC3B,MAAM,KAAK,CAAC,EAAE;MACvB,MAAM,IAAIpB,SAAS,CAAC,IAAI,CAACe,IAAI,EAAE,uBAAuB,CAAC;IAC3D;IACA,MAAM;MAAEiG,IAAI;MAAElB,SAAS;MAAEC;IAAS,CAAC,GAAG,IAAI,CAAC2B,wBAAwB,CAAC3E,QAAQ,CAAC;IAC7E,IAAIiE,IAAI,CAACpE,OAAO,IAAImD,QAAQ,EAAE;MAC1B,IAAI,CAAC/E,IAAI,CAAC8B,MAAM,CAACgD,SAAS,EAAE,CAAC,EAAE,CAACkB,IAAI,CAAC,CAAC;IAC1C;EACJ;EACAW,GAAGA,CAAC5E,QAAQ,EAAE;IACV,OAAO,IAAI,CAAC6E,WAAW,CAAC7E,QAAQ,CAAC;EACrC;EACA8E,YAAYA,CAAC9E,QAAQ,EAAE;IACnB,MAAM;MAAE+C,SAAS;MAAElD,OAAO;MAAEmD;IAAS,CAAC,GAAG,IAAI,CAAC2B,wBAAwB,CAAC3E,QAAQ,CAAC;IAChF,OAAOH,OAAO,IAAImD,QAAQ,GAAGD,SAAS,GAAG,CAAC,CAAC;EAC/C;EACAgC,kBAAkBA,CAAC/E,QAAQ,EAAE;IACzB,OAAO,IAAI,CAACgF,WAAW,CAAChF,QAAQ,CAAC,CAACJ,eAAe;EACrD;EACAqF,aAAaA,CAACjF,QAAQ,EAAE;IACpB,OAAO,IAAI,CAACgF,WAAW,CAAChF,QAAQ,CAAC,CAACnC,WAAW;EACjD;EACAyG,cAAcA,CAACtE,QAAQ,EAAEnC,WAAW,EAAE;IAClC,MAAMoG,IAAI,GAAG,IAAI,CAACe,WAAW,CAAChF,QAAQ,CAAC;IACvC,IAAI,OAAOnC,WAAW,KAAK,WAAW,EAAE;MACpCA,WAAW,GAAG,CAACoG,IAAI,CAACpG,WAAW;IACnC;IACA,MAAMD,MAAM,GAAG;MAAEC;IAAY,CAAC;IAC9B,OAAO,IAAI,CAACW,aAAa,CAAC0G,YAAY,CAAC,MAAM,IAAI,CAACC,iBAAiB,CAACnF,QAAQ,EAAEpC,MAAM,CAAC,CAAC;EAC1F;EACAwH,WAAWA,CAACpF,QAAQ,EAAE;IAClB,OAAO,IAAI,CAACgF,WAAW,CAAChF,QAAQ,CAAC,CAACL,SAAS;EAC/C;EACA0F,YAAYA,CAACrF,QAAQ,EAAEL,SAAS,EAAE2F,SAAS,EAAE;IACzC,MAAMrB,IAAI,GAAG,IAAI,CAACe,WAAW,CAAChF,QAAQ,CAAC;IACvC,IAAI,OAAOL,SAAS,KAAK,WAAW,EAAE;MAClCA,SAAS,GAAG,CAACsE,IAAI,CAACtE,SAAS;IAC/B;IACA,MAAM/B,MAAM,GAAG;MAAE+B,SAAS;MAAE2F,SAAS,EAAEA,SAAS,IAAI;IAAM,CAAC;IAC3D,OAAO,IAAI,CAAC9G,aAAa,CAAC0G,YAAY,CAAC,MAAM,IAAI,CAACC,iBAAiB,CAACnF,QAAQ,EAAEpC,MAAM,CAAC,CAAC;EAC1F;EACAuH,iBAAiBA,CAACnF,QAAQ,EAAEpC,MAAM,EAAE;IAChC,MAAM;MAAEqG,IAAI;MAAElB,SAAS;MAAEC;IAAS,CAAC,GAAG,IAAI,CAAC2B,wBAAwB,CAAC3E,QAAQ,CAAC;IAC7E,MAAMuF,MAAM,GAAG,IAAI,CAACC,yBAAyB,CAACvB,IAAI,EAAElB,SAAS,EAAEC,QAAQ,EAAEpF,MAAM,CAAC;IAChF,IAAIqG,IAAI,KAAK,IAAI,CAAC7E,IAAI,IAAI,IAAI,CAACD,wBAAwB,IAAIoG,MAAM,IAAI,CAAC5H,wBAAwB,CAACC,MAAM,CAAC,IAAIqG,IAAI,CAACpG,WAAW,IAAI,CAACoG,IAAI,CAACtE,SAAS,IAAI,CAAC/B,MAAM,CAAC0H,SAAS,EAAE;MAChK,IAAIG,qBAAqB,GAAG,CAAC,CAAC;MAC9B,KAAK,IAAI5D,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGoC,IAAI,CAAC1E,QAAQ,CAAClB,MAAM,EAAEwD,CAAC,EAAE,EAAE;QAC3C,MAAM2B,KAAK,GAAGS,IAAI,CAAC1E,QAAQ,CAACsC,CAAC,CAAC;QAC9B,IAAI2B,KAAK,CAAC3D,OAAO,EAAE;UACf,IAAI4F,qBAAqB,GAAG,CAAC,CAAC,EAAE;YAC5BA,qBAAqB,GAAG,CAAC,CAAC;YAC1B;UACJ,CAAC,MACI;YACDA,qBAAqB,GAAG5D,CAAC;UAC7B;QACJ;MACJ;MACA,IAAI4D,qBAAqB,GAAG,CAAC,CAAC,EAAE;QAC5B,IAAI,CAACN,iBAAiB,CAAC,CAAC,GAAGnF,QAAQ,EAAEyF,qBAAqB,CAAC,EAAE7H,MAAM,CAAC;MACxE;IACJ;IACA,OAAO2H,MAAM;EACjB;EACAC,yBAAyBA,CAACvB,IAAI,EAAElB,SAAS,EAAEC,QAAQ,EAAEpF,MAAM,EAAE;IACzD,MAAM2H,MAAM,GAAG,IAAI,CAACG,qBAAqB,CAACzB,IAAI,EAAErG,MAAM,EAAE,KAAK,CAAC;IAC9D,IAAI,CAACoF,QAAQ,IAAI,CAACiB,IAAI,CAACpE,OAAO,IAAI,CAAC0F,MAAM,EAAE;MACvC,OAAOA,MAAM;IACjB;IACA,MAAMI,uBAAuB,GAAG1B,IAAI,CAACrE,eAAe;IACpD,MAAMM,QAAQ,GAAG,IAAI,CAAC0F,6BAA6B,CAAC3B,IAAI,CAAC;IACzD,MAAMhE,WAAW,GAAG0F,uBAAuB,IAAI5C,SAAS,KAAK,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IACxE,IAAI,CAAC9E,IAAI,CAAC8B,MAAM,CAACgD,SAAS,GAAG,CAAC,EAAE9C,WAAW,EAAEC,QAAQ,CAACmB,KAAK,CAAC,CAAC,CAAC,CAAC;IAC/D,OAAOkE,MAAM;EACjB;EACAG,qBAAqBA,CAACzB,IAAI,EAAErG,MAAM,EAAEiI,IAAI,EAAE;IACtC,IAAIN,MAAM;IACV,IAAItB,IAAI,KAAK,IAAI,CAAC7E,IAAI,EAAE;MACpBmG,MAAM,GAAG,KAAK;IAClB,CAAC,MACI;MACD,IAAI5H,wBAAwB,CAACC,MAAM,CAAC,EAAE;QAClC2H,MAAM,GAAGtB,IAAI,CAACpG,WAAW,KAAKD,MAAM,CAACC,WAAW;QAChDoG,IAAI,CAACpG,WAAW,GAAGD,MAAM,CAACC,WAAW;MACzC,CAAC,MACI,IAAI,CAACoG,IAAI,CAACpG,WAAW,EAAE;QACxB0H,MAAM,GAAG,KAAK;MAClB,CAAC,MACI;QACDA,MAAM,GAAGtB,IAAI,CAACtE,SAAS,KAAK/B,MAAM,CAAC+B,SAAS;QAC5CsE,IAAI,CAACtE,SAAS,GAAG/B,MAAM,CAAC+B,SAAS;MACrC;MACA,IAAI4F,MAAM,EAAE;QACR,IAAI,CAAC9G,yBAAyB,CAAC8F,IAAI,CAAC;UAAEN,IAAI;UAAE4B;QAAK,CAAC,CAAC;MACvD;IACJ;IACA,IAAI,CAAClI,wBAAwB,CAACC,MAAM,CAAC,IAAIA,MAAM,CAAC0H,SAAS,EAAE;MACvD,KAAK,MAAM9B,KAAK,IAAIS,IAAI,CAAC1E,QAAQ,EAAE;QAC/BgG,MAAM,GAAG,IAAI,CAACG,qBAAqB,CAAClC,KAAK,EAAE5F,MAAM,EAAE,IAAI,CAAC,IAAI2H,MAAM;MACtE;IACJ;IACA,OAAOA,MAAM;EACjB;EACAO,QAAQA,CAAC9F,QAAQ,EAAE;IACf,IAAI,CAACxB,aAAa,CAAC0G,YAAY,CAAC,MAAM;MAClC,IAAIjB,IAAI,GAAG,IAAI,CAACe,WAAW,CAAChF,QAAQ,CAAC;MACrC,OAAOiE,IAAI,CAAC5E,MAAM,EAAE;QAChB4E,IAAI,GAAGA,IAAI,CAAC5E,MAAM;QAClBW,QAAQ,GAAGA,QAAQ,CAACqB,KAAK,CAAC,CAAC,EAAErB,QAAQ,CAAC3B,MAAM,GAAG,CAAC,CAAC;QACjD,IAAI4F,IAAI,CAACtE,SAAS,EAAE;UAChB,IAAI,CAACwF,iBAAiB,CAACnF,QAAQ,EAAE;YAAEL,SAAS,EAAE,KAAK;YAAE2F,SAAS,EAAE;UAAM,CAAC,CAAC;QAC5E;MACJ;IACJ,CAAC,CAAC;EACN;EACAb,QAAQA,CAAA,EAAG;IACP,MAAMkB,uBAAuB,GAAG,IAAI,CAACvG,IAAI,CAACQ,eAAe;IACzD,MAAMM,QAAQ,GAAG,IAAI,CAAC6F,2BAA2B,CAAC,IAAI,CAAC3G,IAAI,CAAC;IAC5D,IAAI,CAACnB,IAAI,CAAC8B,MAAM,CAAC,CAAC,EAAE4F,uBAAuB,EAAEzF,QAAQ,CAAC;EAC1D;EACAkD,cAAcA,CAAC4C,WAAW,EAAE3G,MAAM,EAAE4G,gBAAgB,EAAEjD,QAAQ,EAAEkD,gBAAgB,EAAErD,eAAe,EAAE;IAC/F,MAAMoB,IAAI,GAAG;MACT5E,MAAM;MACNC,OAAO,EAAE0G,WAAW,CAAC1G,OAAO;MAC5BC,QAAQ,EAAE,EAAE;MACZC,KAAK,EAAEH,MAAM,CAACG,KAAK,GAAG,CAAC;MACvBC,oBAAoB,EAAE,CAAC;MACvBC,iBAAiB,EAAE,CAAC,CAAC;MACrB7B,WAAW,EAAE,OAAOmI,WAAW,CAACnI,WAAW,KAAK,SAAS,GAAGmI,WAAW,CAACnI,WAAW,GAAI,OAAOmI,WAAW,CAACrG,SAAS,KAAK,WAAY;MACpIA,SAAS,EAAE,OAAOqG,WAAW,CAACrG,SAAS,KAAK,WAAW,GAAG,IAAI,CAACV,iBAAiB,GAAG+G,WAAW,CAACrG,SAAS;MACxGC,eAAe,EAAE,CAAC;MAClBlC,UAAU,EAAE,CAAC,CAAC;MACdmC,OAAO,EAAE,IAAI;MACbC,UAAU,EAAExB;IAChB,CAAC;IACD,MAAMZ,UAAU,GAAG,IAAI,CAACyI,WAAW,CAAClC,IAAI,EAAEgC,gBAAgB,CAAC;IAC3DhC,IAAI,CAACvG,UAAU,GAAGA,UAAU;IAC5B,IAAIsF,QAAQ,EAAE;MACVkD,gBAAgB,CAACvC,IAAI,CAACM,IAAI,CAAC;IAC/B;IACA,MAAMmC,aAAa,GAAGJ,WAAW,CAACzG,QAAQ,IAAIjC,QAAQ,CAAC6C,KAAK,CAAC,CAAC;IAC9D,MAAMkG,aAAa,GAAGrD,QAAQ,IAAItF,UAAU,KAAK,CAAC,CAAC,gBAAgB,CAACuG,IAAI,CAACtE,SAAS;IAClF,MAAM2G,UAAU,GAAGhJ,QAAQ,CAAC2D,GAAG,CAACmF,aAAa,EAAEjD,EAAE,IAAI,IAAI,CAACC,cAAc,CAACD,EAAE,EAAEc,IAAI,EAAEvG,UAAU,EAAE2I,aAAa,EAAEH,gBAAgB,EAAErD,eAAe,CAAC,CAAC;IACjJ,IAAIpD,oBAAoB,GAAG,CAAC;IAC5B,IAAIG,eAAe,GAAG,CAAC;IACvB,KAAK,MAAM4D,KAAK,IAAI8C,UAAU,EAAE;MAC5BrC,IAAI,CAAC1E,QAAQ,CAACoE,IAAI,CAACH,KAAK,CAAC;MACzB5D,eAAe,IAAI4D,KAAK,CAAC5D,eAAe;MACxC,IAAI4D,KAAK,CAAC3D,OAAO,EAAE;QACf2D,KAAK,CAAC9D,iBAAiB,GAAGD,oBAAoB,EAAE;MACpD;IACJ;IACAwE,IAAI,CAACpG,WAAW,GAAGoG,IAAI,CAACpG,WAAW,IAAIoG,IAAI,CAAC1E,QAAQ,CAAClB,MAAM,GAAG,CAAC;IAC/D4F,IAAI,CAACxE,oBAAoB,GAAGA,oBAAoB;IAChDwE,IAAI,CAACpE,OAAO,GAAGnC,UAAU,KAAK,CAAC,CAAC,gBAAgB+B,oBAAoB,GAAG,CAAC,GAAI/B,UAAU,KAAK,CAAC,CAAC,aAAc;IAC3G,IAAI,CAACuG,IAAI,CAACpE,OAAO,EAAE;MACfoE,IAAI,CAACrE,eAAe,GAAG,CAAC;MACxB,IAAIoD,QAAQ,EAAE;QACVkD,gBAAgB,CAACK,GAAG,CAAC,CAAC;MAC1B;IACJ,CAAC,MACI,IAAI,CAACtC,IAAI,CAACtE,SAAS,EAAE;MACtBsE,IAAI,CAACrE,eAAe,GAAGA,eAAe;IAC1C;IACA,IAAIiD,eAAe,EAAE;MACjBA,eAAe,CAACoB,IAAI,CAAC;IACzB;IACA,OAAOA,IAAI;EACf;EACA2B,6BAA6BA,CAAC3B,IAAI,EAAE;IAChC,MAAM0B,uBAAuB,GAAG1B,IAAI,CAACrE,eAAe;IACpD,MAAM2F,MAAM,GAAG,EAAE;IACjB,IAAI,CAACiB,8BAA8B,CAACvC,IAAI,EAAEsB,MAAM,CAAC;IACjD,IAAI,CAACrB,+BAA+B,CAACD,IAAI,CAAC5E,MAAM,EAAEkG,MAAM,CAAClH,MAAM,GAAGsH,uBAAuB,CAAC;IAC1F,OAAOJ,MAAM;EACjB;EACAiB,8BAA8BA,CAACvC,IAAI,EAAEsB,MAAM,EAAE;IACzC,IAAItB,IAAI,CAACpE,OAAO,KAAK,KAAK,EAAE;MACxB,OAAO,CAAC;IACZ;IACA0F,MAAM,CAAC5B,IAAI,CAACM,IAAI,CAAC;IACjBA,IAAI,CAACrE,eAAe,GAAG,CAAC;IACxB,IAAI,CAACqE,IAAI,CAACtE,SAAS,EAAE;MACjB,KAAK,MAAM6D,KAAK,IAAIS,IAAI,CAAC1E,QAAQ,EAAE;QAC/B0E,IAAI,CAACrE,eAAe,IAAI,IAAI,CAAC4G,8BAA8B,CAAChD,KAAK,EAAE+B,MAAM,CAAC;MAC9E;IACJ;IACA,IAAI,CAAC1G,2BAA2B,CAAC0F,IAAI,CAACN,IAAI,CAAC;IAC3C,OAAOA,IAAI,CAACrE,eAAe;EAC/B;EACAmG,2BAA2BA,CAAC9B,IAAI,EAAE;IAC9B,MAAM0B,uBAAuB,GAAG1B,IAAI,CAACrE,eAAe;IACpD,MAAM2F,MAAM,GAAG,EAAE;IACjB,IAAI,CAACkB,4BAA4B,CAACxC,IAAI,EAAEA,IAAI,CAACpE,OAAO,GAAG,CAAC,CAAC,gBAAgB,CAAC,CAAC,cAAc0F,MAAM,CAAC;IAChG,IAAI,CAACrB,+BAA+B,CAACD,IAAI,CAAC5E,MAAM,EAAEkG,MAAM,CAAClH,MAAM,GAAGsH,uBAAuB,CAAC;IAC1F,OAAOJ,MAAM;EACjB;EACAkB,4BAA4BA,CAACxC,IAAI,EAAEgC,gBAAgB,EAAEV,MAAM,EAAmB;IAAA,IAAjBvC,QAAQ,GAAA5E,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI;IACxE,IAAIV,UAAU;IACd,IAAIuG,IAAI,KAAK,IAAI,CAAC7E,IAAI,EAAE;MACpB1B,UAAU,GAAG,IAAI,CAACyI,WAAW,CAAClC,IAAI,EAAEgC,gBAAgB,CAAC;MACrD,IAAIvI,UAAU,KAAK,CAAC,CAAC,cAAc;QAC/BuG,IAAI,CAACpE,OAAO,GAAG,KAAK;QACpBoE,IAAI,CAACrE,eAAe,GAAG,CAAC;QACxB,OAAO,KAAK;MAChB;MACA,IAAIoD,QAAQ,EAAE;QACVuC,MAAM,CAAC5B,IAAI,CAACM,IAAI,CAAC;MACrB;IACJ;IACA,MAAMyC,iBAAiB,GAAGnB,MAAM,CAAClH,MAAM;IACvC4F,IAAI,CAACrE,eAAe,GAAGqE,IAAI,KAAK,IAAI,CAAC7E,IAAI,GAAG,CAAC,GAAG,CAAC;IACjD,IAAIuH,qBAAqB,GAAG,KAAK;IACjC,IAAI,CAAC1C,IAAI,CAACtE,SAAS,IAAIjC,UAAU,KAAK,CAAC,CAAC,cAAc;MAClD,IAAIgC,iBAAiB,GAAG,CAAC;MACzB,KAAK,MAAM8D,KAAK,IAAIS,IAAI,CAAC1E,QAAQ,EAAE;QAC/BoH,qBAAqB,GAAG,IAAI,CAACF,4BAA4B,CAACjD,KAAK,EAAE9F,UAAU,EAAE6H,MAAM,EAAEvC,QAAQ,IAAI,CAACiB,IAAI,CAACtE,SAAS,CAAC,IAAIgH,qBAAqB;QAC1I,IAAInD,KAAK,CAAC3D,OAAO,EAAE;UACf2D,KAAK,CAAC9D,iBAAiB,GAAGA,iBAAiB,EAAE;QACjD;MACJ;MACAuE,IAAI,CAACxE,oBAAoB,GAAGC,iBAAiB;IACjD,CAAC,MACI;MACDuE,IAAI,CAACxE,oBAAoB,GAAG,CAAC;IACjC;IACA,IAAIwE,IAAI,KAAK,IAAI,CAAC7E,IAAI,EAAE;MACpB6E,IAAI,CAACpE,OAAO,GAAGnC,UAAU,KAAK,CAAC,CAAC,gBAAgBiJ,qBAAqB,GAAIjJ,UAAU,KAAK,CAAC,CAAC,aAAc;IAC5G;;IACA,IAAI,CAACuG,IAAI,CAACpE,OAAO,EAAE;MACfoE,IAAI,CAACrE,eAAe,GAAG,CAAC;MACxB,IAAIoD,QAAQ,EAAE;QACVuC,MAAM,CAACgB,GAAG,CAAC,CAAC;MAChB;IACJ,CAAC,MACI,IAAI,CAACtC,IAAI,CAACtE,SAAS,EAAE;MACtBsE,IAAI,CAACrE,eAAe,IAAI2F,MAAM,CAAClH,MAAM,GAAGqI,iBAAiB;IAC7D;IACA,IAAI,CAAC7H,2BAA2B,CAAC0F,IAAI,CAACN,IAAI,CAAC;IAC3C,OAAOA,IAAI,CAACpE,OAAO;EACvB;EACAqE,+BAA+BA,CAACD,IAAI,EAAElD,IAAI,EAAE;IACxC,IAAIA,IAAI,KAAK,CAAC,EAAE;MACZ;IACJ;IACA,OAAOkD,IAAI,EAAE;MACTA,IAAI,CAACrE,eAAe,IAAImB,IAAI;MAC5B,IAAI,CAAClC,2BAA2B,CAAC0F,IAAI,CAACN,IAAI,CAAC;MAC3CA,IAAI,GAAGA,IAAI,CAAC5E,MAAM;IACtB;EACJ;EACA8G,WAAWA,CAAClC,IAAI,EAAEgC,gBAAgB,EAAE;IAChC,MAAMV,MAAM,GAAG,IAAI,CAACrG,MAAM,GAAG,IAAI,CAACA,MAAM,CAACA,MAAM,CAAC+E,IAAI,CAAC3E,OAAO,EAAE2G,gBAAgB,CAAC,GAAG,CAAC,CAAC;IACpF,IAAI,OAAOV,MAAM,KAAK,SAAS,EAAE;MAC7BtB,IAAI,CAACnE,UAAU,GAAGxB,SAAS;MAC3B,OAAOiH,MAAM,GAAG,CAAC,CAAC,gBAAgB,CAAC,CAAC;IACxC,CAAC,MACI,IAAIhI,cAAc,CAACgI,MAAM,CAAC,EAAE;MAC7BtB,IAAI,CAACnE,UAAU,GAAGyF,MAAM,CAACqB,IAAI;MAC7B,OAAOnJ,eAAe,CAAC8H,MAAM,CAAC7H,UAAU,CAAC;IAC7C,CAAC,MACI;MACDuG,IAAI,CAACnE,UAAU,GAAGxB,SAAS;MAC3B,OAAOb,eAAe,CAAC8H,MAAM,CAAC;IAClC;EACJ;EACA;EACAV,WAAWA,CAAC7E,QAAQ,EAAoB;IAAA,IAAlBiE,IAAI,GAAA7F,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI,CAACgB,IAAI;IAClC,IAAI,CAACY,QAAQ,IAAIA,QAAQ,CAAC3B,MAAM,KAAK,CAAC,EAAE;MACpC,OAAO,IAAI;IACf;IACA,MAAM,CAACyC,KAAK,EAAE,GAAG+F,IAAI,CAAC,GAAG7G,QAAQ;IACjC,IAAIc,KAAK,GAAG,CAAC,IAAIA,KAAK,GAAGmD,IAAI,CAAC1E,QAAQ,CAAClB,MAAM,EAAE;MAC3C,OAAO,KAAK;IAChB;IACA,OAAO,IAAI,CAACwG,WAAW,CAACgC,IAAI,EAAE5C,IAAI,CAAC1E,QAAQ,CAACuB,KAAK,CAAC,CAAC;EACvD;EACA;EACAkE,WAAWA,CAAChF,QAAQ,EAAoB;IAAA,IAAlBiE,IAAI,GAAA7F,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI,CAACgB,IAAI;IAClC,IAAI,CAACY,QAAQ,IAAIA,QAAQ,CAAC3B,MAAM,KAAK,CAAC,EAAE;MACpC,OAAO4F,IAAI;IACf;IACA,MAAM,CAACnD,KAAK,EAAE,GAAG+F,IAAI,CAAC,GAAG7G,QAAQ;IACjC,IAAIc,KAAK,GAAG,CAAC,IAAIA,KAAK,GAAGmD,IAAI,CAAC1E,QAAQ,CAAClB,MAAM,EAAE;MAC3C,MAAM,IAAIpB,SAAS,CAAC,IAAI,CAACe,IAAI,EAAE,uBAAuB,CAAC;IAC3D;IACA,OAAO,IAAI,CAACgH,WAAW,CAAC6B,IAAI,EAAE5C,IAAI,CAAC1E,QAAQ,CAACuB,KAAK,CAAC,CAAC;EACvD;EACA;EACA6D,wBAAwBA,CAAC3E,QAAQ,EAAE;IAC/B,IAAIA,QAAQ,CAAC3B,MAAM,KAAK,CAAC,EAAE;MACvB,OAAO;QAAE4F,IAAI,EAAE,IAAI,CAAC7E,IAAI;QAAE2D,SAAS,EAAE,CAAC,CAAC;QAAEC,QAAQ,EAAE,IAAI;QAAEnD,OAAO,EAAE;MAAM,CAAC;IAC7E;IACA,MAAM;MAAEe,UAAU;MAAEmC,SAAS;MAAEC,QAAQ;MAAEnD;IAAQ,CAAC,GAAG,IAAI,CAACgB,0BAA0B,CAACb,QAAQ,CAAC;IAC9F,MAAMc,KAAK,GAAGd,QAAQ,CAACA,QAAQ,CAAC3B,MAAM,GAAG,CAAC,CAAC;IAC3C,IAAIyC,KAAK,GAAG,CAAC,IAAIA,KAAK,GAAGF,UAAU,CAACrB,QAAQ,CAAClB,MAAM,EAAE;MACjD,MAAM,IAAIpB,SAAS,CAAC,IAAI,CAACe,IAAI,EAAE,uBAAuB,CAAC;IAC3D;IACA,MAAMiG,IAAI,GAAGrD,UAAU,CAACrB,QAAQ,CAACuB,KAAK,CAAC;IACvC,OAAO;MAAEmD,IAAI;MAAElB,SAAS;MAAEC,QAAQ;MAAEnD,OAAO,EAAEA,OAAO,IAAIoE,IAAI,CAACpE;IAAQ,CAAC;EAC1E;EACAgB,0BAA0BA,CAACb,QAAQ,EAAoE;IAAA,IAAlEiE,IAAI,GAAA7F,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI,CAACgB,IAAI;IAAA,IAAE2D,SAAS,GAAA3E,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC;IAAA,IAAE4E,QAAQ,GAAA5E,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI;IAAA,IAAEyB,OAAO,GAAAzB,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI;IACjG,MAAM,CAAC0C,KAAK,EAAE,GAAG+F,IAAI,CAAC,GAAG7G,QAAQ;IACjC,IAAIc,KAAK,GAAG,CAAC,IAAIA,KAAK,GAAGmD,IAAI,CAAC1E,QAAQ,CAAClB,MAAM,EAAE;MAC3C,MAAM,IAAIpB,SAAS,CAAC,IAAI,CAACe,IAAI,EAAE,uBAAuB,CAAC;IAC3D;IACA;IACA,KAAK,IAAI6D,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGf,KAAK,EAAEe,CAAC,EAAE,EAAE;MAC5BkB,SAAS,IAAIkB,IAAI,CAAC1E,QAAQ,CAACsC,CAAC,CAAC,CAACjC,eAAe;IACjD;IACAoD,QAAQ,GAAGA,QAAQ,IAAI,CAACiB,IAAI,CAACtE,SAAS;IACtCE,OAAO,GAAGA,OAAO,IAAIoE,IAAI,CAACpE,OAAO;IACjC,IAAIgH,IAAI,CAACxI,MAAM,KAAK,CAAC,EAAE;MACnB,OAAO;QAAEuC,UAAU,EAAEqD,IAAI;QAAElB,SAAS;QAAEC,QAAQ;QAAEnD;MAAQ,CAAC;IAC7D;IACA,OAAO,IAAI,CAACgB,0BAA0B,CAACgG,IAAI,EAAE5C,IAAI,CAAC1E,QAAQ,CAACuB,KAAK,CAAC,EAAEiC,SAAS,GAAG,CAAC,EAAEC,QAAQ,EAAEnD,OAAO,CAAC;EACxG;EACAiH,OAAOA,CAAA,EAAgB;IAAA,IAAf9G,QAAQ,GAAA5B,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;IACjB,OAAO,IAAI,CAAC4G,WAAW,CAAChF,QAAQ,CAAC;EACrC;EACA;EACA+G,eAAeA,CAAC9C,IAAI,EAAE;IAClB,MAAMjE,QAAQ,GAAG,EAAE;IACnB,IAAIgH,aAAa,GAAG/C,IAAI,CAAC,CAAC;IAC1B,OAAO+C,aAAa,CAAC3H,MAAM,EAAE;MACzBW,QAAQ,CAAC2D,IAAI,CAACqD,aAAa,CAAC3H,MAAM,CAACE,QAAQ,CAAC0H,OAAO,CAACD,aAAa,CAAC,CAAC;MACnEA,aAAa,GAAGA,aAAa,CAAC3H,MAAM;IACxC;IACA,OAAOW,QAAQ,CAACkH,OAAO,CAAC,CAAC;EAC7B;EACAC,qBAAqBA,CAACnH,QAAQ,EAAE;IAC5B,IAAIA,QAAQ,CAAC3B,MAAM,KAAK,CAAC,EAAE;MACvB,OAAOC,SAAS;IACpB,CAAC,MACI,IAAI0B,QAAQ,CAAC3B,MAAM,KAAK,CAAC,EAAE;MAC5B,OAAO,EAAE;IACb,CAAC,MACI;MACD,OAAOnB,KAAK,CAAC8C,QAAQ,CAAC,CAAC,CAAC,CAAC;IAC7B;EACJ;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}