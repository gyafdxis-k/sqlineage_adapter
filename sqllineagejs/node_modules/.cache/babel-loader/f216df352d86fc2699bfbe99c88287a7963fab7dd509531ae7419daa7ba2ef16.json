{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\n// Avoid circular dependency on EventEmitter by implementing a subset of the interface.\nexport class ErrorHandler {\n  constructor() {\n    this.listeners = [];\n    this.unexpectedErrorHandler = function (e) {\n      setTimeout(() => {\n        if (e.stack) {\n          throw new Error(e.message + '\\n\\n' + e.stack);\n        }\n        throw e;\n      }, 0);\n    };\n  }\n  emit(e) {\n    this.listeners.forEach(listener => {\n      listener(e);\n    });\n  }\n  onUnexpectedError(e) {\n    this.unexpectedErrorHandler(e);\n    this.emit(e);\n  }\n  // For external errors, we don't want the listeners to be called\n  onUnexpectedExternalError(e) {\n    this.unexpectedErrorHandler(e);\n  }\n}\nexport const errorHandler = new ErrorHandler();\nexport function onUnexpectedError(e) {\n  // ignore errors from cancelled promises\n  if (!isPromiseCanceledError(e)) {\n    errorHandler.onUnexpectedError(e);\n  }\n  return undefined;\n}\nexport function onUnexpectedExternalError(e) {\n  // ignore errors from cancelled promises\n  if (!isPromiseCanceledError(e)) {\n    errorHandler.onUnexpectedExternalError(e);\n  }\n  return undefined;\n}\nexport function transformErrorForSerialization(error) {\n  if (error instanceof Error) {\n    let {\n      name,\n      message\n    } = error;\n    const stack = error.stacktrace || error.stack;\n    return {\n      $isError: true,\n      name,\n      message,\n      stack\n    };\n  }\n  // return as is\n  return error;\n}\nconst canceledName = 'Canceled';\n/**\r\n * Checks if the given error is a promise in canceled state\r\n */\nexport function isPromiseCanceledError(error) {\n  return error instanceof Error && error.name === canceledName && error.message === canceledName;\n}\n/**\r\n * Returns an error that signals cancellation.\r\n */\nexport function canceled() {\n  const error = new Error(canceledName);\n  error.name = error.message;\n  return error;\n}\nexport function illegalArgument(name) {\n  if (name) {\n    return new Error(\"Illegal argument: \".concat(name));\n  } else {\n    return new Error('Illegal argument');\n  }\n}\nexport function illegalState(name) {\n  if (name) {\n    return new Error(\"Illegal state: \".concat(name));\n  } else {\n    return new Error('Illegal state');\n  }\n}","map":{"version":3,"names":["ErrorHandler","constructor","listeners","unexpectedErrorHandler","e","setTimeout","stack","Error","message","emit","forEach","listener","onUnexpectedError","onUnexpectedExternalError","errorHandler","isPromiseCanceledError","undefined","transformErrorForSerialization","error","name","stacktrace","$isError","canceledName","canceled","illegalArgument","concat","illegalState"],"sources":["C:/Users/Administrator/Desktop/sqllineage-master/sqllineagejs/node_modules/monaco-editor/esm/vs/base/common/errors.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n// Avoid circular dependency on EventEmitter by implementing a subset of the interface.\r\nexport class ErrorHandler {\r\n    constructor() {\r\n        this.listeners = [];\r\n        this.unexpectedErrorHandler = function (e) {\r\n            setTimeout(() => {\r\n                if (e.stack) {\r\n                    throw new Error(e.message + '\\n\\n' + e.stack);\r\n                }\r\n                throw e;\r\n            }, 0);\r\n        };\r\n    }\r\n    emit(e) {\r\n        this.listeners.forEach((listener) => {\r\n            listener(e);\r\n        });\r\n    }\r\n    onUnexpectedError(e) {\r\n        this.unexpectedErrorHandler(e);\r\n        this.emit(e);\r\n    }\r\n    // For external errors, we don't want the listeners to be called\r\n    onUnexpectedExternalError(e) {\r\n        this.unexpectedErrorHandler(e);\r\n    }\r\n}\r\nexport const errorHandler = new ErrorHandler();\r\nexport function onUnexpectedError(e) {\r\n    // ignore errors from cancelled promises\r\n    if (!isPromiseCanceledError(e)) {\r\n        errorHandler.onUnexpectedError(e);\r\n    }\r\n    return undefined;\r\n}\r\nexport function onUnexpectedExternalError(e) {\r\n    // ignore errors from cancelled promises\r\n    if (!isPromiseCanceledError(e)) {\r\n        errorHandler.onUnexpectedExternalError(e);\r\n    }\r\n    return undefined;\r\n}\r\nexport function transformErrorForSerialization(error) {\r\n    if (error instanceof Error) {\r\n        let { name, message } = error;\r\n        const stack = error.stacktrace || error.stack;\r\n        return {\r\n            $isError: true,\r\n            name,\r\n            message,\r\n            stack\r\n        };\r\n    }\r\n    // return as is\r\n    return error;\r\n}\r\nconst canceledName = 'Canceled';\r\n/**\r\n * Checks if the given error is a promise in canceled state\r\n */\r\nexport function isPromiseCanceledError(error) {\r\n    return error instanceof Error && error.name === canceledName && error.message === canceledName;\r\n}\r\n/**\r\n * Returns an error that signals cancellation.\r\n */\r\nexport function canceled() {\r\n    const error = new Error(canceledName);\r\n    error.name = error.message;\r\n    return error;\r\n}\r\nexport function illegalArgument(name) {\r\n    if (name) {\r\n        return new Error(`Illegal argument: ${name}`);\r\n    }\r\n    else {\r\n        return new Error('Illegal argument');\r\n    }\r\n}\r\nexport function illegalState(name) {\r\n    if (name) {\r\n        return new Error(`Illegal state: ${name}`);\r\n    }\r\n    else {\r\n        return new Error('Illegal state');\r\n    }\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,YAAY,CAAC;EACtBC,WAAWA,CAAA,EAAG;IACV,IAAI,CAACC,SAAS,GAAG,EAAE;IACnB,IAAI,CAACC,sBAAsB,GAAG,UAAUC,CAAC,EAAE;MACvCC,UAAU,CAAC,MAAM;QACb,IAAID,CAAC,CAACE,KAAK,EAAE;UACT,MAAM,IAAIC,KAAK,CAACH,CAAC,CAACI,OAAO,GAAG,MAAM,GAAGJ,CAAC,CAACE,KAAK,CAAC;QACjD;QACA,MAAMF,CAAC;MACX,CAAC,EAAE,CAAC,CAAC;IACT,CAAC;EACL;EACAK,IAAIA,CAACL,CAAC,EAAE;IACJ,IAAI,CAACF,SAAS,CAACQ,OAAO,CAAEC,QAAQ,IAAK;MACjCA,QAAQ,CAACP,CAAC,CAAC;IACf,CAAC,CAAC;EACN;EACAQ,iBAAiBA,CAACR,CAAC,EAAE;IACjB,IAAI,CAACD,sBAAsB,CAACC,CAAC,CAAC;IAC9B,IAAI,CAACK,IAAI,CAACL,CAAC,CAAC;EAChB;EACA;EACAS,yBAAyBA,CAACT,CAAC,EAAE;IACzB,IAAI,CAACD,sBAAsB,CAACC,CAAC,CAAC;EAClC;AACJ;AACA,OAAO,MAAMU,YAAY,GAAG,IAAId,YAAY,CAAC,CAAC;AAC9C,OAAO,SAASY,iBAAiBA,CAACR,CAAC,EAAE;EACjC;EACA,IAAI,CAACW,sBAAsB,CAACX,CAAC,CAAC,EAAE;IAC5BU,YAAY,CAACF,iBAAiB,CAACR,CAAC,CAAC;EACrC;EACA,OAAOY,SAAS;AACpB;AACA,OAAO,SAASH,yBAAyBA,CAACT,CAAC,EAAE;EACzC;EACA,IAAI,CAACW,sBAAsB,CAACX,CAAC,CAAC,EAAE;IAC5BU,YAAY,CAACD,yBAAyB,CAACT,CAAC,CAAC;EAC7C;EACA,OAAOY,SAAS;AACpB;AACA,OAAO,SAASC,8BAA8BA,CAACC,KAAK,EAAE;EAClD,IAAIA,KAAK,YAAYX,KAAK,EAAE;IACxB,IAAI;MAAEY,IAAI;MAAEX;IAAQ,CAAC,GAAGU,KAAK;IAC7B,MAAMZ,KAAK,GAAGY,KAAK,CAACE,UAAU,IAAIF,KAAK,CAACZ,KAAK;IAC7C,OAAO;MACHe,QAAQ,EAAE,IAAI;MACdF,IAAI;MACJX,OAAO;MACPF;IACJ,CAAC;EACL;EACA;EACA,OAAOY,KAAK;AAChB;AACA,MAAMI,YAAY,GAAG,UAAU;AAC/B;AACA;AACA;AACA,OAAO,SAASP,sBAAsBA,CAACG,KAAK,EAAE;EAC1C,OAAOA,KAAK,YAAYX,KAAK,IAAIW,KAAK,CAACC,IAAI,KAAKG,YAAY,IAAIJ,KAAK,CAACV,OAAO,KAAKc,YAAY;AAClG;AACA;AACA;AACA;AACA,OAAO,SAASC,QAAQA,CAAA,EAAG;EACvB,MAAML,KAAK,GAAG,IAAIX,KAAK,CAACe,YAAY,CAAC;EACrCJ,KAAK,CAACC,IAAI,GAAGD,KAAK,CAACV,OAAO;EAC1B,OAAOU,KAAK;AAChB;AACA,OAAO,SAASM,eAAeA,CAACL,IAAI,EAAE;EAClC,IAAIA,IAAI,EAAE;IACN,OAAO,IAAIZ,KAAK,sBAAAkB,MAAA,CAAsBN,IAAI,CAAE,CAAC;EACjD,CAAC,MACI;IACD,OAAO,IAAIZ,KAAK,CAAC,kBAAkB,CAAC;EACxC;AACJ;AACA,OAAO,SAASmB,YAAYA,CAACP,IAAI,EAAE;EAC/B,IAAIA,IAAI,EAAE;IACN,OAAO,IAAIZ,KAAK,mBAAAkB,MAAA,CAAmBN,IAAI,CAAE,CAAC;EAC9C,CAAC,MACI;IACD,OAAO,IAAIZ,KAAK,CAAC,eAAe,CAAC;EACrC;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}