{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport { InlineDecoration, ViewModelDecoration } from './viewModel.js';\nimport { filterValidationDecorations } from '../config/editorOptions.js';\nexport class ViewModelDecorations {\n  constructor(editorId, model, configuration, linesCollection, coordinatesConverter) {\n    this.editorId = editorId;\n    this.model = model;\n    this.configuration = configuration;\n    this._linesCollection = linesCollection;\n    this._coordinatesConverter = coordinatesConverter;\n    this._decorationsCache = Object.create(null);\n    this._cachedModelDecorationsResolver = null;\n    this._cachedModelDecorationsResolverViewRange = null;\n  }\n  _clearCachedModelDecorationsResolver() {\n    this._cachedModelDecorationsResolver = null;\n    this._cachedModelDecorationsResolverViewRange = null;\n  }\n  dispose() {\n    this._decorationsCache = Object.create(null);\n    this._clearCachedModelDecorationsResolver();\n  }\n  reset() {\n    this._decorationsCache = Object.create(null);\n    this._clearCachedModelDecorationsResolver();\n  }\n  onModelDecorationsChanged() {\n    this._decorationsCache = Object.create(null);\n    this._clearCachedModelDecorationsResolver();\n  }\n  onLineMappingChanged() {\n    this._decorationsCache = Object.create(null);\n    this._clearCachedModelDecorationsResolver();\n  }\n  _getOrCreateViewModelDecoration(modelDecoration) {\n    const id = modelDecoration.id;\n    let r = this._decorationsCache[id];\n    if (!r) {\n      const modelRange = modelDecoration.range;\n      const options = modelDecoration.options;\n      let viewRange;\n      if (options.isWholeLine) {\n        const start = this._coordinatesConverter.convertModelPositionToViewPosition(new Position(modelRange.startLineNumber, 1));\n        const end = this._coordinatesConverter.convertModelPositionToViewPosition(new Position(modelRange.endLineNumber, this.model.getLineMaxColumn(modelRange.endLineNumber)));\n        viewRange = new Range(start.lineNumber, start.column, end.lineNumber, end.column);\n      } else {\n        viewRange = this._coordinatesConverter.convertModelRangeToViewRange(modelRange);\n      }\n      r = new ViewModelDecoration(viewRange, options);\n      this._decorationsCache[id] = r;\n    }\n    return r;\n  }\n  getDecorationsViewportData(viewRange) {\n    let cacheIsValid = this._cachedModelDecorationsResolver !== null;\n    cacheIsValid = cacheIsValid && viewRange.equalsRange(this._cachedModelDecorationsResolverViewRange);\n    if (!cacheIsValid) {\n      this._cachedModelDecorationsResolver = this._getDecorationsViewportData(viewRange);\n      this._cachedModelDecorationsResolverViewRange = viewRange;\n    }\n    return this._cachedModelDecorationsResolver;\n  }\n  _getDecorationsViewportData(viewportRange) {\n    const modelDecorations = this._linesCollection.getDecorationsInRange(viewportRange, this.editorId, filterValidationDecorations(this.configuration.options));\n    const startLineNumber = viewportRange.startLineNumber;\n    const endLineNumber = viewportRange.endLineNumber;\n    let decorationsInViewport = [],\n      decorationsInViewportLen = 0;\n    let inlineDecorations = [];\n    for (let j = startLineNumber; j <= endLineNumber; j++) {\n      inlineDecorations[j - startLineNumber] = [];\n    }\n    for (let i = 0, len = modelDecorations.length; i < len; i++) {\n      let modelDecoration = modelDecorations[i];\n      let decorationOptions = modelDecoration.options;\n      let viewModelDecoration = this._getOrCreateViewModelDecoration(modelDecoration);\n      let viewRange = viewModelDecoration.range;\n      decorationsInViewport[decorationsInViewportLen++] = viewModelDecoration;\n      if (decorationOptions.inlineClassName) {\n        let inlineDecoration = new InlineDecoration(viewRange, decorationOptions.inlineClassName, decorationOptions.inlineClassNameAffectsLetterSpacing ? 3 /* RegularAffectingLetterSpacing */ : 0 /* Regular */);\n        let intersectedStartLineNumber = Math.max(startLineNumber, viewRange.startLineNumber);\n        let intersectedEndLineNumber = Math.min(endLineNumber, viewRange.endLineNumber);\n        for (let j = intersectedStartLineNumber; j <= intersectedEndLineNumber; j++) {\n          inlineDecorations[j - startLineNumber].push(inlineDecoration);\n        }\n      }\n      if (decorationOptions.beforeContentClassName) {\n        if (startLineNumber <= viewRange.startLineNumber && viewRange.startLineNumber <= endLineNumber) {\n          let inlineDecoration = new InlineDecoration(new Range(viewRange.startLineNumber, viewRange.startColumn, viewRange.startLineNumber, viewRange.startColumn), decorationOptions.beforeContentClassName, 1 /* Before */);\n          inlineDecorations[viewRange.startLineNumber - startLineNumber].push(inlineDecoration);\n        }\n      }\n      if (decorationOptions.afterContentClassName) {\n        if (startLineNumber <= viewRange.endLineNumber && viewRange.endLineNumber <= endLineNumber) {\n          let inlineDecoration = new InlineDecoration(new Range(viewRange.endLineNumber, viewRange.endColumn, viewRange.endLineNumber, viewRange.endColumn), decorationOptions.afterContentClassName, 2 /* After */);\n          inlineDecorations[viewRange.endLineNumber - startLineNumber].push(inlineDecoration);\n        }\n      }\n    }\n    return {\n      decorations: decorationsInViewport,\n      inlineDecorations: inlineDecorations\n    };\n  }\n}","map":{"version":3,"names":["Position","Range","InlineDecoration","ViewModelDecoration","filterValidationDecorations","ViewModelDecorations","constructor","editorId","model","configuration","linesCollection","coordinatesConverter","_linesCollection","_coordinatesConverter","_decorationsCache","Object","create","_cachedModelDecorationsResolver","_cachedModelDecorationsResolverViewRange","_clearCachedModelDecorationsResolver","dispose","reset","onModelDecorationsChanged","onLineMappingChanged","_getOrCreateViewModelDecoration","modelDecoration","id","r","modelRange","range","options","viewRange","isWholeLine","start","convertModelPositionToViewPosition","startLineNumber","end","endLineNumber","getLineMaxColumn","lineNumber","column","convertModelRangeToViewRange","getDecorationsViewportData","cacheIsValid","equalsRange","_getDecorationsViewportData","viewportRange","modelDecorations","getDecorationsInRange","decorationsInViewport","decorationsInViewportLen","inlineDecorations","j","i","len","length","decorationOptions","viewModelDecoration","inlineClassName","inlineDecoration","inlineClassNameAffectsLetterSpacing","intersectedStartLineNumber","Math","max","intersectedEndLineNumber","min","push","beforeContentClassName","startColumn","afterContentClassName","endColumn","decorations"],"sources":["C:/Users/Administrator/Desktop/sqllineage-master/sqllineagejs/node_modules/monaco-editor/esm/vs/editor/common/viewModel/viewModelDecorations.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { Position } from '../core/position.js';\r\nimport { Range } from '../core/range.js';\r\nimport { InlineDecoration, ViewModelDecoration } from './viewModel.js';\r\nimport { filterValidationDecorations } from '../config/editorOptions.js';\r\nexport class ViewModelDecorations {\r\n    constructor(editorId, model, configuration, linesCollection, coordinatesConverter) {\r\n        this.editorId = editorId;\r\n        this.model = model;\r\n        this.configuration = configuration;\r\n        this._linesCollection = linesCollection;\r\n        this._coordinatesConverter = coordinatesConverter;\r\n        this._decorationsCache = Object.create(null);\r\n        this._cachedModelDecorationsResolver = null;\r\n        this._cachedModelDecorationsResolverViewRange = null;\r\n    }\r\n    _clearCachedModelDecorationsResolver() {\r\n        this._cachedModelDecorationsResolver = null;\r\n        this._cachedModelDecorationsResolverViewRange = null;\r\n    }\r\n    dispose() {\r\n        this._decorationsCache = Object.create(null);\r\n        this._clearCachedModelDecorationsResolver();\r\n    }\r\n    reset() {\r\n        this._decorationsCache = Object.create(null);\r\n        this._clearCachedModelDecorationsResolver();\r\n    }\r\n    onModelDecorationsChanged() {\r\n        this._decorationsCache = Object.create(null);\r\n        this._clearCachedModelDecorationsResolver();\r\n    }\r\n    onLineMappingChanged() {\r\n        this._decorationsCache = Object.create(null);\r\n        this._clearCachedModelDecorationsResolver();\r\n    }\r\n    _getOrCreateViewModelDecoration(modelDecoration) {\r\n        const id = modelDecoration.id;\r\n        let r = this._decorationsCache[id];\r\n        if (!r) {\r\n            const modelRange = modelDecoration.range;\r\n            const options = modelDecoration.options;\r\n            let viewRange;\r\n            if (options.isWholeLine) {\r\n                const start = this._coordinatesConverter.convertModelPositionToViewPosition(new Position(modelRange.startLineNumber, 1));\r\n                const end = this._coordinatesConverter.convertModelPositionToViewPosition(new Position(modelRange.endLineNumber, this.model.getLineMaxColumn(modelRange.endLineNumber)));\r\n                viewRange = new Range(start.lineNumber, start.column, end.lineNumber, end.column);\r\n            }\r\n            else {\r\n                viewRange = this._coordinatesConverter.convertModelRangeToViewRange(modelRange);\r\n            }\r\n            r = new ViewModelDecoration(viewRange, options);\r\n            this._decorationsCache[id] = r;\r\n        }\r\n        return r;\r\n    }\r\n    getDecorationsViewportData(viewRange) {\r\n        let cacheIsValid = (this._cachedModelDecorationsResolver !== null);\r\n        cacheIsValid = cacheIsValid && (viewRange.equalsRange(this._cachedModelDecorationsResolverViewRange));\r\n        if (!cacheIsValid) {\r\n            this._cachedModelDecorationsResolver = this._getDecorationsViewportData(viewRange);\r\n            this._cachedModelDecorationsResolverViewRange = viewRange;\r\n        }\r\n        return this._cachedModelDecorationsResolver;\r\n    }\r\n    _getDecorationsViewportData(viewportRange) {\r\n        const modelDecorations = this._linesCollection.getDecorationsInRange(viewportRange, this.editorId, filterValidationDecorations(this.configuration.options));\r\n        const startLineNumber = viewportRange.startLineNumber;\r\n        const endLineNumber = viewportRange.endLineNumber;\r\n        let decorationsInViewport = [], decorationsInViewportLen = 0;\r\n        let inlineDecorations = [];\r\n        for (let j = startLineNumber; j <= endLineNumber; j++) {\r\n            inlineDecorations[j - startLineNumber] = [];\r\n        }\r\n        for (let i = 0, len = modelDecorations.length; i < len; i++) {\r\n            let modelDecoration = modelDecorations[i];\r\n            let decorationOptions = modelDecoration.options;\r\n            let viewModelDecoration = this._getOrCreateViewModelDecoration(modelDecoration);\r\n            let viewRange = viewModelDecoration.range;\r\n            decorationsInViewport[decorationsInViewportLen++] = viewModelDecoration;\r\n            if (decorationOptions.inlineClassName) {\r\n                let inlineDecoration = new InlineDecoration(viewRange, decorationOptions.inlineClassName, decorationOptions.inlineClassNameAffectsLetterSpacing ? 3 /* RegularAffectingLetterSpacing */ : 0 /* Regular */);\r\n                let intersectedStartLineNumber = Math.max(startLineNumber, viewRange.startLineNumber);\r\n                let intersectedEndLineNumber = Math.min(endLineNumber, viewRange.endLineNumber);\r\n                for (let j = intersectedStartLineNumber; j <= intersectedEndLineNumber; j++) {\r\n                    inlineDecorations[j - startLineNumber].push(inlineDecoration);\r\n                }\r\n            }\r\n            if (decorationOptions.beforeContentClassName) {\r\n                if (startLineNumber <= viewRange.startLineNumber && viewRange.startLineNumber <= endLineNumber) {\r\n                    let inlineDecoration = new InlineDecoration(new Range(viewRange.startLineNumber, viewRange.startColumn, viewRange.startLineNumber, viewRange.startColumn), decorationOptions.beforeContentClassName, 1 /* Before */);\r\n                    inlineDecorations[viewRange.startLineNumber - startLineNumber].push(inlineDecoration);\r\n                }\r\n            }\r\n            if (decorationOptions.afterContentClassName) {\r\n                if (startLineNumber <= viewRange.endLineNumber && viewRange.endLineNumber <= endLineNumber) {\r\n                    let inlineDecoration = new InlineDecoration(new Range(viewRange.endLineNumber, viewRange.endColumn, viewRange.endLineNumber, viewRange.endColumn), decorationOptions.afterContentClassName, 2 /* After */);\r\n                    inlineDecorations[viewRange.endLineNumber - startLineNumber].push(inlineDecoration);\r\n                }\r\n            }\r\n        }\r\n        return {\r\n            decorations: decorationsInViewport,\r\n            inlineDecorations: inlineDecorations\r\n        };\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}