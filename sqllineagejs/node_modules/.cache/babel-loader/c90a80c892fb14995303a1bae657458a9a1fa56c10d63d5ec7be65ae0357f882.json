{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { ignoreBracketsInToken } from '../supports.js';\nimport { BracketsUtils } from './richEditBrackets.js';\nexport class BracketElectricCharacterSupport {\n  constructor(richEditBrackets) {\n    this._richEditBrackets = richEditBrackets;\n  }\n  getElectricCharacters() {\n    let result = [];\n    if (this._richEditBrackets) {\n      for (const bracket of this._richEditBrackets.brackets) {\n        for (const close of bracket.close) {\n          const lastChar = close.charAt(close.length - 1);\n          result.push(lastChar);\n        }\n      }\n    }\n    // Filter duplicate entries\n    result = result.filter((item, pos, array) => {\n      return array.indexOf(item) === pos;\n    });\n    return result;\n  }\n  onElectricCharacter(character, context, column) {\n    if (!this._richEditBrackets || this._richEditBrackets.brackets.length === 0) {\n      return null;\n    }\n    const tokenIndex = context.findTokenIndexAtOffset(column - 1);\n    if (ignoreBracketsInToken(context.getStandardTokenType(tokenIndex))) {\n      return null;\n    }\n    const reversedBracketRegex = this._richEditBrackets.reversedRegex;\n    const text = context.getLineContent().substring(0, column - 1) + character;\n    const r = BracketsUtils.findPrevBracketInRange(reversedBracketRegex, 1, text, 0, text.length);\n    if (!r) {\n      return null;\n    }\n    const bracketText = text.substring(r.startColumn - 1, r.endColumn - 1).toLowerCase();\n    const isOpen = this._richEditBrackets.textIsOpenBracket[bracketText];\n    if (isOpen) {\n      return null;\n    }\n    const textBeforeBracket = context.getActualLineContentBefore(r.startColumn - 1);\n    if (!/^\\s*$/.test(textBeforeBracket)) {\n      // There is other text on the line before the bracket\n      return null;\n    }\n    return {\n      matchOpenBracket: bracketText\n    };\n  }\n}","map":{"version":3,"names":["ignoreBracketsInToken","BracketsUtils","BracketElectricCharacterSupport","constructor","richEditBrackets","_richEditBrackets","getElectricCharacters","result","bracket","brackets","close","lastChar","charAt","length","push","filter","item","pos","array","indexOf","onElectricCharacter","character","context","column","tokenIndex","findTokenIndexAtOffset","getStandardTokenType","reversedBracketRegex","reversedRegex","text","getLineContent","substring","r","findPrevBracketInRange","bracketText","startColumn","endColumn","toLowerCase","isOpen","textIsOpenBracket","textBeforeBracket","getActualLineContentBefore","test","matchOpenBracket"],"sources":["C:/Users/Administrator/Desktop/sqllineage-master/sqllineagejs/node_modules/monaco-editor/esm/vs/editor/common/modes/supports/electricCharacter.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { ignoreBracketsInToken } from '../supports.js';\r\nimport { BracketsUtils } from './richEditBrackets.js';\r\nexport class BracketElectricCharacterSupport {\r\n    constructor(richEditBrackets) {\r\n        this._richEditBrackets = richEditBrackets;\r\n    }\r\n    getElectricCharacters() {\r\n        let result = [];\r\n        if (this._richEditBrackets) {\r\n            for (const bracket of this._richEditBrackets.brackets) {\r\n                for (const close of bracket.close) {\r\n                    const lastChar = close.charAt(close.length - 1);\r\n                    result.push(lastChar);\r\n                }\r\n            }\r\n        }\r\n        // Filter duplicate entries\r\n        result = result.filter((item, pos, array) => {\r\n            return array.indexOf(item) === pos;\r\n        });\r\n        return result;\r\n    }\r\n    onElectricCharacter(character, context, column) {\r\n        if (!this._richEditBrackets || this._richEditBrackets.brackets.length === 0) {\r\n            return null;\r\n        }\r\n        const tokenIndex = context.findTokenIndexAtOffset(column - 1);\r\n        if (ignoreBracketsInToken(context.getStandardTokenType(tokenIndex))) {\r\n            return null;\r\n        }\r\n        const reversedBracketRegex = this._richEditBrackets.reversedRegex;\r\n        const text = context.getLineContent().substring(0, column - 1) + character;\r\n        const r = BracketsUtils.findPrevBracketInRange(reversedBracketRegex, 1, text, 0, text.length);\r\n        if (!r) {\r\n            return null;\r\n        }\r\n        const bracketText = text.substring(r.startColumn - 1, r.endColumn - 1).toLowerCase();\r\n        const isOpen = this._richEditBrackets.textIsOpenBracket[bracketText];\r\n        if (isOpen) {\r\n            return null;\r\n        }\r\n        const textBeforeBracket = context.getActualLineContentBefore(r.startColumn - 1);\r\n        if (!/^\\s*$/.test(textBeforeBracket)) {\r\n            // There is other text on the line before the bracket\r\n            return null;\r\n        }\r\n        return {\r\n            matchOpenBracket: bracketText\r\n        };\r\n    }\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,qBAAqB,QAAQ,gBAAgB;AACtD,SAASC,aAAa,QAAQ,uBAAuB;AACrD,OAAO,MAAMC,+BAA+B,CAAC;EACzCC,WAAWA,CAACC,gBAAgB,EAAE;IAC1B,IAAI,CAACC,iBAAiB,GAAGD,gBAAgB;EAC7C;EACAE,qBAAqBA,CAAA,EAAG;IACpB,IAAIC,MAAM,GAAG,EAAE;IACf,IAAI,IAAI,CAACF,iBAAiB,EAAE;MACxB,KAAK,MAAMG,OAAO,IAAI,IAAI,CAACH,iBAAiB,CAACI,QAAQ,EAAE;QACnD,KAAK,MAAMC,KAAK,IAAIF,OAAO,CAACE,KAAK,EAAE;UAC/B,MAAMC,QAAQ,GAAGD,KAAK,CAACE,MAAM,CAACF,KAAK,CAACG,MAAM,GAAG,CAAC,CAAC;UAC/CN,MAAM,CAACO,IAAI,CAACH,QAAQ,CAAC;QACzB;MACJ;IACJ;IACA;IACAJ,MAAM,GAAGA,MAAM,CAACQ,MAAM,CAAC,CAACC,IAAI,EAAEC,GAAG,EAAEC,KAAK,KAAK;MACzC,OAAOA,KAAK,CAACC,OAAO,CAACH,IAAI,CAAC,KAAKC,GAAG;IACtC,CAAC,CAAC;IACF,OAAOV,MAAM;EACjB;EACAa,mBAAmBA,CAACC,SAAS,EAAEC,OAAO,EAAEC,MAAM,EAAE;IAC5C,IAAI,CAAC,IAAI,CAAClB,iBAAiB,IAAI,IAAI,CAACA,iBAAiB,CAACI,QAAQ,CAACI,MAAM,KAAK,CAAC,EAAE;MACzE,OAAO,IAAI;IACf;IACA,MAAMW,UAAU,GAAGF,OAAO,CAACG,sBAAsB,CAACF,MAAM,GAAG,CAAC,CAAC;IAC7D,IAAIvB,qBAAqB,CAACsB,OAAO,CAACI,oBAAoB,CAACF,UAAU,CAAC,CAAC,EAAE;MACjE,OAAO,IAAI;IACf;IACA,MAAMG,oBAAoB,GAAG,IAAI,CAACtB,iBAAiB,CAACuB,aAAa;IACjE,MAAMC,IAAI,GAAGP,OAAO,CAACQ,cAAc,CAAC,CAAC,CAACC,SAAS,CAAC,CAAC,EAAER,MAAM,GAAG,CAAC,CAAC,GAAGF,SAAS;IAC1E,MAAMW,CAAC,GAAG/B,aAAa,CAACgC,sBAAsB,CAACN,oBAAoB,EAAE,CAAC,EAAEE,IAAI,EAAE,CAAC,EAAEA,IAAI,CAAChB,MAAM,CAAC;IAC7F,IAAI,CAACmB,CAAC,EAAE;MACJ,OAAO,IAAI;IACf;IACA,MAAME,WAAW,GAAGL,IAAI,CAACE,SAAS,CAACC,CAAC,CAACG,WAAW,GAAG,CAAC,EAAEH,CAAC,CAACI,SAAS,GAAG,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;IACpF,MAAMC,MAAM,GAAG,IAAI,CAACjC,iBAAiB,CAACkC,iBAAiB,CAACL,WAAW,CAAC;IACpE,IAAII,MAAM,EAAE;MACR,OAAO,IAAI;IACf;IACA,MAAME,iBAAiB,GAAGlB,OAAO,CAACmB,0BAA0B,CAACT,CAAC,CAACG,WAAW,GAAG,CAAC,CAAC;IAC/E,IAAI,CAAC,OAAO,CAACO,IAAI,CAACF,iBAAiB,CAAC,EAAE;MAClC;MACA,OAAO,IAAI;IACf;IACA,OAAO;MACHG,gBAAgB,EAAET;IACtB,CAAC;EACL;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}