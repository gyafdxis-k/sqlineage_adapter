{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../nls.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { Registry } from '../../registry/common/platform.js';\nimport * as types from '../../../base/common/types.js';\nimport { Extensions as JSONExtensions } from '../../jsonschemas/common/jsonContributionRegistry.js';\nexport const Extensions = {\n  Configuration: 'base.contributions.configuration'\n};\nexport const allSettings = {\n  properties: {},\n  patternProperties: {}\n};\nexport const applicationSettings = {\n  properties: {},\n  patternProperties: {}\n};\nexport const machineSettings = {\n  properties: {},\n  patternProperties: {}\n};\nexport const machineOverridableSettings = {\n  properties: {},\n  patternProperties: {}\n};\nexport const windowSettings = {\n  properties: {},\n  patternProperties: {}\n};\nexport const resourceSettings = {\n  properties: {},\n  patternProperties: {}\n};\nexport const resourceLanguageSettingsSchemaId = 'vscode://schemas/settings/resourceLanguage';\nconst contributionRegistry = Registry.as(JSONExtensions.JSONContribution);\nclass ConfigurationRegistry {\n  constructor() {\n    this.overrideIdentifiers = new Set();\n    this._onDidSchemaChange = new Emitter();\n    this._onDidUpdateConfiguration = new Emitter();\n    this.defaultValues = {};\n    this.defaultLanguageConfigurationOverridesNode = {\n      id: 'defaultOverrides',\n      title: nls.localize('defaultLanguageConfigurationOverrides.title', \"Default Language Configuration Overrides\"),\n      properties: {}\n    };\n    this.configurationContributors = [this.defaultLanguageConfigurationOverridesNode];\n    this.resourceLanguageSettingsSchema = {\n      properties: {},\n      patternProperties: {},\n      additionalProperties: false,\n      errorMessage: 'Unknown editor configuration setting',\n      allowTrailingCommas: true,\n      allowComments: true\n    };\n    this.configurationProperties = {};\n    this.excludedConfigurationProperties = {};\n    contributionRegistry.registerSchema(resourceLanguageSettingsSchemaId, this.resourceLanguageSettingsSchema);\n  }\n  registerConfiguration(configuration) {\n    let validate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    this.registerConfigurations([configuration], validate);\n  }\n  registerConfigurations(configurations) {\n    let validate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    const properties = [];\n    configurations.forEach(configuration => {\n      properties.push(...this.validateAndRegisterProperties(configuration, validate)); // fills in defaults\n      this.configurationContributors.push(configuration);\n      this.registerJSONConfiguration(configuration);\n    });\n    contributionRegistry.registerSchema(resourceLanguageSettingsSchemaId, this.resourceLanguageSettingsSchema);\n    this._onDidSchemaChange.fire();\n    this._onDidUpdateConfiguration.fire(properties);\n  }\n  registerOverrideIdentifiers(overrideIdentifiers) {\n    for (const overrideIdentifier of overrideIdentifiers) {\n      this.overrideIdentifiers.add(overrideIdentifier);\n    }\n    this.updateOverridePropertyPatternKey();\n  }\n  validateAndRegisterProperties(configuration) {\n    let validate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    let scope = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 3;\n    scope = types.isUndefinedOrNull(configuration.scope) ? scope : configuration.scope;\n    let propertyKeys = [];\n    let properties = configuration.properties;\n    if (properties) {\n      for (let key in properties) {\n        if (validate && validateProperty(key)) {\n          delete properties[key];\n          continue;\n        }\n        const property = properties[key];\n        // update default value\n        this.updatePropertyDefaultValue(key, property);\n        // update scope\n        if (OVERRIDE_PROPERTY_PATTERN.test(key)) {\n          property.scope = undefined; // No scope for overridable properties `[${identifier}]`\n        } else {\n          property.scope = types.isUndefinedOrNull(property.scope) ? scope : property.scope;\n        }\n        // Add to properties maps\n        // Property is included by default if 'included' is unspecified\n        if (properties[key].hasOwnProperty('included') && !properties[key].included) {\n          this.excludedConfigurationProperties[key] = properties[key];\n          delete properties[key];\n          continue;\n        } else {\n          this.configurationProperties[key] = properties[key];\n        }\n        if (!properties[key].deprecationMessage && properties[key].markdownDeprecationMessage) {\n          // If not set, default deprecationMessage to the markdown source\n          properties[key].deprecationMessage = properties[key].markdownDeprecationMessage;\n        }\n        propertyKeys.push(key);\n      }\n    }\n    let subNodes = configuration.allOf;\n    if (subNodes) {\n      for (let node of subNodes) {\n        propertyKeys.push(...this.validateAndRegisterProperties(node, validate, scope));\n      }\n    }\n    return propertyKeys;\n  }\n  getConfigurationProperties() {\n    return this.configurationProperties;\n  }\n  registerJSONConfiguration(configuration) {\n    const register = configuration => {\n      let properties = configuration.properties;\n      if (properties) {\n        for (const key in properties) {\n          this.updateSchema(key, properties[key]);\n        }\n      }\n      let subNodes = configuration.allOf;\n      if (subNodes) {\n        subNodes.forEach(register);\n      }\n    };\n    register(configuration);\n  }\n  updateSchema(key, property) {\n    allSettings.properties[key] = property;\n    switch (property.scope) {\n      case 1 /* APPLICATION */:\n        applicationSettings.properties[key] = property;\n        break;\n      case 2 /* MACHINE */:\n        machineSettings.properties[key] = property;\n        break;\n      case 6 /* MACHINE_OVERRIDABLE */:\n        machineOverridableSettings.properties[key] = property;\n        break;\n      case 3 /* WINDOW */:\n        windowSettings.properties[key] = property;\n        break;\n      case 4 /* RESOURCE */:\n        resourceSettings.properties[key] = property;\n        break;\n      case 5 /* LANGUAGE_OVERRIDABLE */:\n        resourceSettings.properties[key] = property;\n        this.resourceLanguageSettingsSchema.properties[key] = property;\n        break;\n    }\n  }\n  updateOverridePropertyPatternKey() {\n    for (const overrideIdentifier of this.overrideIdentifiers.values()) {\n      const overrideIdentifierProperty = \"[\".concat(overrideIdentifier, \"]\");\n      const resourceLanguagePropertiesSchema = {\n        type: 'object',\n        description: nls.localize('overrideSettings.defaultDescription', \"Configure editor settings to be overridden for a language.\"),\n        errorMessage: nls.localize('overrideSettings.errorMessage', \"This setting does not support per-language configuration.\"),\n        $ref: resourceLanguageSettingsSchemaId\n      };\n      this.updatePropertyDefaultValue(overrideIdentifierProperty, resourceLanguagePropertiesSchema);\n      allSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n      applicationSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n      machineSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n      machineOverridableSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n      windowSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n      resourceSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n    }\n    this._onDidSchemaChange.fire();\n  }\n  updatePropertyDefaultValue(key, property) {\n    let defaultValue = this.defaultValues[key];\n    if (types.isUndefined(defaultValue)) {\n      defaultValue = property.default;\n    }\n    if (types.isUndefined(defaultValue)) {\n      defaultValue = getDefaultValue(property.type);\n    }\n    property.default = defaultValue;\n  }\n}\nconst OVERRIDE_PROPERTY = '\\\\[.*\\\\]$';\nexport const OVERRIDE_PROPERTY_PATTERN = new RegExp(OVERRIDE_PROPERTY);\nexport function overrideIdentifierFromKey(key) {\n  return key.substring(1, key.length - 1);\n}\nexport function getDefaultValue(type) {\n  const t = Array.isArray(type) ? type[0] : type;\n  switch (t) {\n    case 'boolean':\n      return false;\n    case 'integer':\n    case 'number':\n      return 0;\n    case 'string':\n      return '';\n    case 'array':\n      return [];\n    case 'object':\n      return {};\n    default:\n      return null;\n  }\n}\nconst configurationRegistry = new ConfigurationRegistry();\nRegistry.add(Extensions.Configuration, configurationRegistry);\nexport function validateProperty(property) {\n  if (!property.trim()) {\n    return nls.localize('config.property.empty', \"Cannot register an empty property\");\n  }\n  if (OVERRIDE_PROPERTY_PATTERN.test(property)) {\n    return nls.localize('config.property.languageDefault', \"Cannot register '{0}'. This matches property pattern '\\\\\\\\[.*\\\\\\\\]$' for describing language specific editor settings. Use 'configurationDefaults' contribution.\", property);\n  }\n  if (configurationRegistry.getConfigurationProperties()[property] !== undefined) {\n    return nls.localize('config.property.duplicate', \"Cannot register '{0}'. This property is already registered.\", property);\n  }\n  return null;\n}","map":{"version":3,"names":["nls","Emitter","Registry","types","Extensions","JSONExtensions","Configuration","allSettings","properties","patternProperties","applicationSettings","machineSettings","machineOverridableSettings","windowSettings","resourceSettings","resourceLanguageSettingsSchemaId","contributionRegistry","as","JSONContribution","ConfigurationRegistry","constructor","overrideIdentifiers","Set","_onDidSchemaChange","_onDidUpdateConfiguration","defaultValues","defaultLanguageConfigurationOverridesNode","id","title","localize","configurationContributors","resourceLanguageSettingsSchema","additionalProperties","errorMessage","allowTrailingCommas","allowComments","configurationProperties","excludedConfigurationProperties","registerSchema","registerConfiguration","configuration","validate","arguments","length","undefined","registerConfigurations","configurations","forEach","push","validateAndRegisterProperties","registerJSONConfiguration","fire","registerOverrideIdentifiers","overrideIdentifier","add","updateOverridePropertyPatternKey","scope","isUndefinedOrNull","propertyKeys","key","validateProperty","property","updatePropertyDefaultValue","OVERRIDE_PROPERTY_PATTERN","test","hasOwnProperty","included","deprecationMessage","markdownDeprecationMessage","subNodes","allOf","node","getConfigurationProperties","register","updateSchema","values","overrideIdentifierProperty","concat","resourceLanguagePropertiesSchema","type","description","$ref","defaultValue","isUndefined","default","getDefaultValue","OVERRIDE_PROPERTY","RegExp","overrideIdentifierFromKey","substring","t","Array","isArray","configurationRegistry","trim"],"sources":["C:/Users/Administrator/Desktop/sqllineage-master/sqllineagejs/node_modules/monaco-editor/esm/vs/platform/configuration/common/configurationRegistry.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport * as nls from '../../../nls.js';\r\nimport { Emitter } from '../../../base/common/event.js';\r\nimport { Registry } from '../../registry/common/platform.js';\r\nimport * as types from '../../../base/common/types.js';\r\nimport { Extensions as JSONExtensions } from '../../jsonschemas/common/jsonContributionRegistry.js';\r\nexport const Extensions = {\r\n    Configuration: 'base.contributions.configuration'\r\n};\r\nexport const allSettings = { properties: {}, patternProperties: {} };\r\nexport const applicationSettings = { properties: {}, patternProperties: {} };\r\nexport const machineSettings = { properties: {}, patternProperties: {} };\r\nexport const machineOverridableSettings = { properties: {}, patternProperties: {} };\r\nexport const windowSettings = { properties: {}, patternProperties: {} };\r\nexport const resourceSettings = { properties: {}, patternProperties: {} };\r\nexport const resourceLanguageSettingsSchemaId = 'vscode://schemas/settings/resourceLanguage';\r\nconst contributionRegistry = Registry.as(JSONExtensions.JSONContribution);\r\nclass ConfigurationRegistry {\r\n    constructor() {\r\n        this.overrideIdentifiers = new Set();\r\n        this._onDidSchemaChange = new Emitter();\r\n        this._onDidUpdateConfiguration = new Emitter();\r\n        this.defaultValues = {};\r\n        this.defaultLanguageConfigurationOverridesNode = {\r\n            id: 'defaultOverrides',\r\n            title: nls.localize('defaultLanguageConfigurationOverrides.title', \"Default Language Configuration Overrides\"),\r\n            properties: {}\r\n        };\r\n        this.configurationContributors = [this.defaultLanguageConfigurationOverridesNode];\r\n        this.resourceLanguageSettingsSchema = { properties: {}, patternProperties: {}, additionalProperties: false, errorMessage: 'Unknown editor configuration setting', allowTrailingCommas: true, allowComments: true };\r\n        this.configurationProperties = {};\r\n        this.excludedConfigurationProperties = {};\r\n        contributionRegistry.registerSchema(resourceLanguageSettingsSchemaId, this.resourceLanguageSettingsSchema);\r\n    }\r\n    registerConfiguration(configuration, validate = true) {\r\n        this.registerConfigurations([configuration], validate);\r\n    }\r\n    registerConfigurations(configurations, validate = true) {\r\n        const properties = [];\r\n        configurations.forEach(configuration => {\r\n            properties.push(...this.validateAndRegisterProperties(configuration, validate)); // fills in defaults\r\n            this.configurationContributors.push(configuration);\r\n            this.registerJSONConfiguration(configuration);\r\n        });\r\n        contributionRegistry.registerSchema(resourceLanguageSettingsSchemaId, this.resourceLanguageSettingsSchema);\r\n        this._onDidSchemaChange.fire();\r\n        this._onDidUpdateConfiguration.fire(properties);\r\n    }\r\n    registerOverrideIdentifiers(overrideIdentifiers) {\r\n        for (const overrideIdentifier of overrideIdentifiers) {\r\n            this.overrideIdentifiers.add(overrideIdentifier);\r\n        }\r\n        this.updateOverridePropertyPatternKey();\r\n    }\r\n    validateAndRegisterProperties(configuration, validate = true, scope = 3 /* WINDOW */) {\r\n        scope = types.isUndefinedOrNull(configuration.scope) ? scope : configuration.scope;\r\n        let propertyKeys = [];\r\n        let properties = configuration.properties;\r\n        if (properties) {\r\n            for (let key in properties) {\r\n                if (validate && validateProperty(key)) {\r\n                    delete properties[key];\r\n                    continue;\r\n                }\r\n                const property = properties[key];\r\n                // update default value\r\n                this.updatePropertyDefaultValue(key, property);\r\n                // update scope\r\n                if (OVERRIDE_PROPERTY_PATTERN.test(key)) {\r\n                    property.scope = undefined; // No scope for overridable properties `[${identifier}]`\r\n                }\r\n                else {\r\n                    property.scope = types.isUndefinedOrNull(property.scope) ? scope : property.scope;\r\n                }\r\n                // Add to properties maps\r\n                // Property is included by default if 'included' is unspecified\r\n                if (properties[key].hasOwnProperty('included') && !properties[key].included) {\r\n                    this.excludedConfigurationProperties[key] = properties[key];\r\n                    delete properties[key];\r\n                    continue;\r\n                }\r\n                else {\r\n                    this.configurationProperties[key] = properties[key];\r\n                }\r\n                if (!properties[key].deprecationMessage && properties[key].markdownDeprecationMessage) {\r\n                    // If not set, default deprecationMessage to the markdown source\r\n                    properties[key].deprecationMessage = properties[key].markdownDeprecationMessage;\r\n                }\r\n                propertyKeys.push(key);\r\n            }\r\n        }\r\n        let subNodes = configuration.allOf;\r\n        if (subNodes) {\r\n            for (let node of subNodes) {\r\n                propertyKeys.push(...this.validateAndRegisterProperties(node, validate, scope));\r\n            }\r\n        }\r\n        return propertyKeys;\r\n    }\r\n    getConfigurationProperties() {\r\n        return this.configurationProperties;\r\n    }\r\n    registerJSONConfiguration(configuration) {\r\n        const register = (configuration) => {\r\n            let properties = configuration.properties;\r\n            if (properties) {\r\n                for (const key in properties) {\r\n                    this.updateSchema(key, properties[key]);\r\n                }\r\n            }\r\n            let subNodes = configuration.allOf;\r\n            if (subNodes) {\r\n                subNodes.forEach(register);\r\n            }\r\n        };\r\n        register(configuration);\r\n    }\r\n    updateSchema(key, property) {\r\n        allSettings.properties[key] = property;\r\n        switch (property.scope) {\r\n            case 1 /* APPLICATION */:\r\n                applicationSettings.properties[key] = property;\r\n                break;\r\n            case 2 /* MACHINE */:\r\n                machineSettings.properties[key] = property;\r\n                break;\r\n            case 6 /* MACHINE_OVERRIDABLE */:\r\n                machineOverridableSettings.properties[key] = property;\r\n                break;\r\n            case 3 /* WINDOW */:\r\n                windowSettings.properties[key] = property;\r\n                break;\r\n            case 4 /* RESOURCE */:\r\n                resourceSettings.properties[key] = property;\r\n                break;\r\n            case 5 /* LANGUAGE_OVERRIDABLE */:\r\n                resourceSettings.properties[key] = property;\r\n                this.resourceLanguageSettingsSchema.properties[key] = property;\r\n                break;\r\n        }\r\n    }\r\n    updateOverridePropertyPatternKey() {\r\n        for (const overrideIdentifier of this.overrideIdentifiers.values()) {\r\n            const overrideIdentifierProperty = `[${overrideIdentifier}]`;\r\n            const resourceLanguagePropertiesSchema = {\r\n                type: 'object',\r\n                description: nls.localize('overrideSettings.defaultDescription', \"Configure editor settings to be overridden for a language.\"),\r\n                errorMessage: nls.localize('overrideSettings.errorMessage', \"This setting does not support per-language configuration.\"),\r\n                $ref: resourceLanguageSettingsSchemaId,\r\n            };\r\n            this.updatePropertyDefaultValue(overrideIdentifierProperty, resourceLanguagePropertiesSchema);\r\n            allSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\r\n            applicationSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\r\n            machineSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\r\n            machineOverridableSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\r\n            windowSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\r\n            resourceSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\r\n        }\r\n        this._onDidSchemaChange.fire();\r\n    }\r\n    updatePropertyDefaultValue(key, property) {\r\n        let defaultValue = this.defaultValues[key];\r\n        if (types.isUndefined(defaultValue)) {\r\n            defaultValue = property.default;\r\n        }\r\n        if (types.isUndefined(defaultValue)) {\r\n            defaultValue = getDefaultValue(property.type);\r\n        }\r\n        property.default = defaultValue;\r\n    }\r\n}\r\nconst OVERRIDE_PROPERTY = '\\\\[.*\\\\]$';\r\nexport const OVERRIDE_PROPERTY_PATTERN = new RegExp(OVERRIDE_PROPERTY);\r\nexport function overrideIdentifierFromKey(key) {\r\n    return key.substring(1, key.length - 1);\r\n}\r\nexport function getDefaultValue(type) {\r\n    const t = Array.isArray(type) ? type[0] : type;\r\n    switch (t) {\r\n        case 'boolean':\r\n            return false;\r\n        case 'integer':\r\n        case 'number':\r\n            return 0;\r\n        case 'string':\r\n            return '';\r\n        case 'array':\r\n            return [];\r\n        case 'object':\r\n            return {};\r\n        default:\r\n            return null;\r\n    }\r\n}\r\nconst configurationRegistry = new ConfigurationRegistry();\r\nRegistry.add(Extensions.Configuration, configurationRegistry);\r\nexport function validateProperty(property) {\r\n    if (!property.trim()) {\r\n        return nls.localize('config.property.empty', \"Cannot register an empty property\");\r\n    }\r\n    if (OVERRIDE_PROPERTY_PATTERN.test(property)) {\r\n        return nls.localize('config.property.languageDefault', \"Cannot register '{0}'. This matches property pattern '\\\\\\\\[.*\\\\\\\\]$' for describing language specific editor settings. Use 'configurationDefaults' contribution.\", property);\r\n    }\r\n    if (configurationRegistry.getConfigurationProperties()[property] !== undefined) {\r\n        return nls.localize('config.property.duplicate', \"Cannot register '{0}'. This property is already registered.\", property);\r\n    }\r\n    return null;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}