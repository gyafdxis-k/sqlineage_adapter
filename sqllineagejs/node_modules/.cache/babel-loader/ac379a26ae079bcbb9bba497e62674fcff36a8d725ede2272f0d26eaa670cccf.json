{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../../../base/common/event.js';\nimport { Range } from '../../common/core/range.js';\nimport { findFirstInSorted } from '../../../base/common/arrays.js';\nexport class HiddenRangeModel {\n  constructor(model) {\n    this._updateEventEmitter = new Emitter();\n    this._foldingModel = model;\n    this._foldingModelListener = model.onDidChange(_ => this.updateHiddenRanges());\n    this._hiddenRanges = [];\n    if (model.regions.length) {\n      this.updateHiddenRanges();\n    }\n  }\n  get onDidChange() {\n    return this._updateEventEmitter.event;\n  }\n  get hiddenRanges() {\n    return this._hiddenRanges;\n  }\n  updateHiddenRanges() {\n    let updateHiddenAreas = false;\n    let newHiddenAreas = [];\n    let i = 0; // index into hidden\n    let k = 0;\n    let lastCollapsedStart = Number.MAX_VALUE;\n    let lastCollapsedEnd = -1;\n    let ranges = this._foldingModel.regions;\n    for (; i < ranges.length; i++) {\n      if (!ranges.isCollapsed(i)) {\n        continue;\n      }\n      let startLineNumber = ranges.getStartLineNumber(i) + 1; // the first line is not hidden\n      let endLineNumber = ranges.getEndLineNumber(i);\n      if (lastCollapsedStart <= startLineNumber && endLineNumber <= lastCollapsedEnd) {\n        // ignore ranges contained in collapsed regions\n        continue;\n      }\n      if (!updateHiddenAreas && k < this._hiddenRanges.length && this._hiddenRanges[k].startLineNumber === startLineNumber && this._hiddenRanges[k].endLineNumber === endLineNumber) {\n        // reuse the old ranges\n        newHiddenAreas.push(this._hiddenRanges[k]);\n        k++;\n      } else {\n        updateHiddenAreas = true;\n        newHiddenAreas.push(new Range(startLineNumber, 1, endLineNumber, 1));\n      }\n      lastCollapsedStart = startLineNumber;\n      lastCollapsedEnd = endLineNumber;\n    }\n    if (updateHiddenAreas || k < this._hiddenRanges.length) {\n      this.applyHiddenRanges(newHiddenAreas);\n    }\n  }\n  applyMemento(state) {\n    if (!Array.isArray(state) || state.length === 0) {\n      return false;\n    }\n    let hiddenRanges = [];\n    for (let r of state) {\n      if (!r.startLineNumber || !r.endLineNumber) {\n        return false;\n      }\n      hiddenRanges.push(new Range(r.startLineNumber + 1, 1, r.endLineNumber, 1));\n    }\n    this.applyHiddenRanges(hiddenRanges);\n    return true;\n  }\n  /**\r\n   * Collapse state memento, for persistence only, only used if folding model is not yet initialized\r\n   */\n  getMemento() {\n    return this._hiddenRanges.map(r => ({\n      startLineNumber: r.startLineNumber - 1,\n      endLineNumber: r.endLineNumber\n    }));\n  }\n  applyHiddenRanges(newHiddenAreas) {\n    this._hiddenRanges = newHiddenAreas;\n    this._updateEventEmitter.fire(newHiddenAreas);\n  }\n  hasRanges() {\n    return this._hiddenRanges.length > 0;\n  }\n  isHidden(line) {\n    return findRange(this._hiddenRanges, line) !== null;\n  }\n  adjustSelections(selections) {\n    let hasChanges = false;\n    let editorModel = this._foldingModel.textModel;\n    let lastRange = null;\n    let adjustLine = line => {\n      if (!lastRange || !isInside(line, lastRange)) {\n        lastRange = findRange(this._hiddenRanges, line);\n      }\n      if (lastRange) {\n        return lastRange.startLineNumber - 1;\n      }\n      return null;\n    };\n    for (let i = 0, len = selections.length; i < len; i++) {\n      let selection = selections[i];\n      let adjustedStartLine = adjustLine(selection.startLineNumber);\n      if (adjustedStartLine) {\n        selection = selection.setStartPosition(adjustedStartLine, editorModel.getLineMaxColumn(adjustedStartLine));\n        hasChanges = true;\n      }\n      let adjustedEndLine = adjustLine(selection.endLineNumber);\n      if (adjustedEndLine) {\n        selection = selection.setEndPosition(adjustedEndLine, editorModel.getLineMaxColumn(adjustedEndLine));\n        hasChanges = true;\n      }\n      selections[i] = selection;\n    }\n    return hasChanges;\n  }\n  dispose() {\n    if (this.hiddenRanges.length > 0) {\n      this._hiddenRanges = [];\n      this._updateEventEmitter.fire(this._hiddenRanges);\n    }\n    if (this._foldingModelListener) {\n      this._foldingModelListener.dispose();\n      this._foldingModelListener = null;\n    }\n  }\n}\nfunction isInside(line, range) {\n  return line >= range.startLineNumber && line <= range.endLineNumber;\n}\nfunction findRange(ranges, line) {\n  let i = findFirstInSorted(ranges, r => line < r.startLineNumber) - 1;\n  if (i >= 0 && ranges[i].endLineNumber >= line) {\n    return ranges[i];\n  }\n  return null;\n}","map":{"version":3,"names":["Emitter","Range","findFirstInSorted","HiddenRangeModel","constructor","model","_updateEventEmitter","_foldingModel","_foldingModelListener","onDidChange","_","updateHiddenRanges","_hiddenRanges","regions","length","event","hiddenRanges","updateHiddenAreas","newHiddenAreas","i","k","lastCollapsedStart","Number","MAX_VALUE","lastCollapsedEnd","ranges","isCollapsed","startLineNumber","getStartLineNumber","endLineNumber","getEndLineNumber","push","applyHiddenRanges","applyMemento","state","Array","isArray","r","getMemento","map","fire","hasRanges","isHidden","line","findRange","adjustSelections","selections","hasChanges","editorModel","textModel","lastRange","adjustLine","isInside","len","selection","adjustedStartLine","setStartPosition","getLineMaxColumn","adjustedEndLine","setEndPosition","dispose","range"],"sources":["C:/Users/Administrator/Desktop/sqllineage-master/sqllineagejs/node_modules/monaco-editor/esm/vs/editor/contrib/folding/hiddenRangeModel.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { Emitter } from '../../../base/common/event.js';\r\nimport { Range } from '../../common/core/range.js';\r\nimport { findFirstInSorted } from '../../../base/common/arrays.js';\r\nexport class HiddenRangeModel {\r\n    constructor(model) {\r\n        this._updateEventEmitter = new Emitter();\r\n        this._foldingModel = model;\r\n        this._foldingModelListener = model.onDidChange(_ => this.updateHiddenRanges());\r\n        this._hiddenRanges = [];\r\n        if (model.regions.length) {\r\n            this.updateHiddenRanges();\r\n        }\r\n    }\r\n    get onDidChange() { return this._updateEventEmitter.event; }\r\n    get hiddenRanges() { return this._hiddenRanges; }\r\n    updateHiddenRanges() {\r\n        let updateHiddenAreas = false;\r\n        let newHiddenAreas = [];\r\n        let i = 0; // index into hidden\r\n        let k = 0;\r\n        let lastCollapsedStart = Number.MAX_VALUE;\r\n        let lastCollapsedEnd = -1;\r\n        let ranges = this._foldingModel.regions;\r\n        for (; i < ranges.length; i++) {\r\n            if (!ranges.isCollapsed(i)) {\r\n                continue;\r\n            }\r\n            let startLineNumber = ranges.getStartLineNumber(i) + 1; // the first line is not hidden\r\n            let endLineNumber = ranges.getEndLineNumber(i);\r\n            if (lastCollapsedStart <= startLineNumber && endLineNumber <= lastCollapsedEnd) {\r\n                // ignore ranges contained in collapsed regions\r\n                continue;\r\n            }\r\n            if (!updateHiddenAreas && k < this._hiddenRanges.length && this._hiddenRanges[k].startLineNumber === startLineNumber && this._hiddenRanges[k].endLineNumber === endLineNumber) {\r\n                // reuse the old ranges\r\n                newHiddenAreas.push(this._hiddenRanges[k]);\r\n                k++;\r\n            }\r\n            else {\r\n                updateHiddenAreas = true;\r\n                newHiddenAreas.push(new Range(startLineNumber, 1, endLineNumber, 1));\r\n            }\r\n            lastCollapsedStart = startLineNumber;\r\n            lastCollapsedEnd = endLineNumber;\r\n        }\r\n        if (updateHiddenAreas || k < this._hiddenRanges.length) {\r\n            this.applyHiddenRanges(newHiddenAreas);\r\n        }\r\n    }\r\n    applyMemento(state) {\r\n        if (!Array.isArray(state) || state.length === 0) {\r\n            return false;\r\n        }\r\n        let hiddenRanges = [];\r\n        for (let r of state) {\r\n            if (!r.startLineNumber || !r.endLineNumber) {\r\n                return false;\r\n            }\r\n            hiddenRanges.push(new Range(r.startLineNumber + 1, 1, r.endLineNumber, 1));\r\n        }\r\n        this.applyHiddenRanges(hiddenRanges);\r\n        return true;\r\n    }\r\n    /**\r\n     * Collapse state memento, for persistence only, only used if folding model is not yet initialized\r\n     */\r\n    getMemento() {\r\n        return this._hiddenRanges.map(r => ({ startLineNumber: r.startLineNumber - 1, endLineNumber: r.endLineNumber }));\r\n    }\r\n    applyHiddenRanges(newHiddenAreas) {\r\n        this._hiddenRanges = newHiddenAreas;\r\n        this._updateEventEmitter.fire(newHiddenAreas);\r\n    }\r\n    hasRanges() {\r\n        return this._hiddenRanges.length > 0;\r\n    }\r\n    isHidden(line) {\r\n        return findRange(this._hiddenRanges, line) !== null;\r\n    }\r\n    adjustSelections(selections) {\r\n        let hasChanges = false;\r\n        let editorModel = this._foldingModel.textModel;\r\n        let lastRange = null;\r\n        let adjustLine = (line) => {\r\n            if (!lastRange || !isInside(line, lastRange)) {\r\n                lastRange = findRange(this._hiddenRanges, line);\r\n            }\r\n            if (lastRange) {\r\n                return lastRange.startLineNumber - 1;\r\n            }\r\n            return null;\r\n        };\r\n        for (let i = 0, len = selections.length; i < len; i++) {\r\n            let selection = selections[i];\r\n            let adjustedStartLine = adjustLine(selection.startLineNumber);\r\n            if (adjustedStartLine) {\r\n                selection = selection.setStartPosition(adjustedStartLine, editorModel.getLineMaxColumn(adjustedStartLine));\r\n                hasChanges = true;\r\n            }\r\n            let adjustedEndLine = adjustLine(selection.endLineNumber);\r\n            if (adjustedEndLine) {\r\n                selection = selection.setEndPosition(adjustedEndLine, editorModel.getLineMaxColumn(adjustedEndLine));\r\n                hasChanges = true;\r\n            }\r\n            selections[i] = selection;\r\n        }\r\n        return hasChanges;\r\n    }\r\n    dispose() {\r\n        if (this.hiddenRanges.length > 0) {\r\n            this._hiddenRanges = [];\r\n            this._updateEventEmitter.fire(this._hiddenRanges);\r\n        }\r\n        if (this._foldingModelListener) {\r\n            this._foldingModelListener.dispose();\r\n            this._foldingModelListener = null;\r\n        }\r\n    }\r\n}\r\nfunction isInside(line, range) {\r\n    return line >= range.startLineNumber && line <= range.endLineNumber;\r\n}\r\nfunction findRange(ranges, line) {\r\n    let i = findFirstInSorted(ranges, r => line < r.startLineNumber) - 1;\r\n    if (i >= 0 && ranges[i].endLineNumber >= line) {\r\n        return ranges[i];\r\n    }\r\n    return null;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}