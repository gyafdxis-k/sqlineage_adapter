{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\nimport { LRUCache, TernarySearchTree } from '../../../base/common/map.js';\nimport { IStorageService, WillSaveStateReason } from '../../../platform/storage/common/storage.js';\nimport { completionKindFromString } from '../../common/modes.js';\nimport { DisposableStore } from '../../../base/common/lifecycle.js';\nimport { RunOnceScheduler } from '../../../base/common/async.js';\nimport { createDecorator } from '../../../platform/instantiation/common/instantiation.js';\nimport { IConfigurationService } from '../../../platform/configuration/common/configuration.js';\nimport { registerSingleton } from '../../../platform/instantiation/common/extensions.js';\nimport { IModeService } from '../../common/services/modeService.js';\nexport class Memory {\n  constructor(name) {\n    this.name = name;\n  }\n  select(model, pos, items) {\n    if (items.length === 0) {\n      return 0;\n    }\n    let topScore = items[0].score[0];\n    for (let i = 0; i < items.length; i++) {\n      const {\n        score,\n        completion: suggestion\n      } = items[i];\n      if (score[0] !== topScore) {\n        // stop when leaving the group of top matches\n        break;\n      }\n      if (suggestion.preselect) {\n        // stop when seeing an auto-select-item\n        return i;\n      }\n    }\n    return 0;\n  }\n}\nexport class NoMemory extends Memory {\n  constructor() {\n    super('first');\n  }\n  memorize(model, pos, item) {\n    // no-op\n  }\n  toJSON() {\n    return undefined;\n  }\n  fromJSON() {\n    //\n  }\n}\nexport class LRUMemory extends Memory {\n  constructor() {\n    super('recentlyUsed');\n    this._cache = new LRUCache(300, 0.66);\n    this._seq = 0;\n  }\n  memorize(model, pos, item) {\n    const key = \"\".concat(model.getLanguageIdentifier().language, \"/\").concat(item.textLabel);\n    this._cache.set(key, {\n      touch: this._seq++,\n      type: item.completion.kind,\n      insertText: item.completion.insertText\n    });\n  }\n  select(model, pos, items) {\n    if (items.length === 0) {\n      return 0;\n    }\n    const lineSuffix = model.getLineContent(pos.lineNumber).substr(pos.column - 10, pos.column - 1);\n    if (/\\s$/.test(lineSuffix)) {\n      return super.select(model, pos, items);\n    }\n    let topScore = items[0].score[0];\n    let indexPreselect = -1;\n    let indexRecency = -1;\n    let seq = -1;\n    for (let i = 0; i < items.length; i++) {\n      if (items[i].score[0] !== topScore) {\n        // consider only top items\n        break;\n      }\n      const key = \"\".concat(model.getLanguageIdentifier().language, \"/\").concat(items[i].textLabel);\n      const item = this._cache.peek(key);\n      if (item && item.touch > seq && item.type === items[i].completion.kind && item.insertText === items[i].completion.insertText) {\n        seq = item.touch;\n        indexRecency = i;\n      }\n      if (items[i].completion.preselect && indexPreselect === -1) {\n        // stop when seeing an auto-select-item\n        return indexPreselect = i;\n      }\n    }\n    if (indexRecency !== -1) {\n      return indexRecency;\n    } else if (indexPreselect !== -1) {\n      return indexPreselect;\n    } else {\n      return 0;\n    }\n  }\n  toJSON() {\n    return this._cache.toJSON();\n  }\n  fromJSON(data) {\n    this._cache.clear();\n    let seq = 0;\n    for (const [key, value] of data) {\n      value.touch = seq;\n      value.type = typeof value.type === 'number' ? value.type : completionKindFromString(value.type);\n      this._cache.set(key, value);\n    }\n    this._seq = this._cache.size;\n  }\n}\nexport class PrefixMemory extends Memory {\n  constructor() {\n    super('recentlyUsedByPrefix');\n    this._trie = TernarySearchTree.forStrings();\n    this._seq = 0;\n  }\n  memorize(model, pos, item) {\n    const {\n      word\n    } = model.getWordUntilPosition(pos);\n    const key = \"\".concat(model.getLanguageIdentifier().language, \"/\").concat(word);\n    this._trie.set(key, {\n      type: item.completion.kind,\n      insertText: item.completion.insertText,\n      touch: this._seq++\n    });\n  }\n  select(model, pos, items) {\n    let {\n      word\n    } = model.getWordUntilPosition(pos);\n    if (!word) {\n      return super.select(model, pos, items);\n    }\n    let key = \"\".concat(model.getLanguageIdentifier().language, \"/\").concat(word);\n    let item = this._trie.get(key);\n    if (!item) {\n      item = this._trie.findSubstr(key);\n    }\n    if (item) {\n      for (let i = 0; i < items.length; i++) {\n        let {\n          kind,\n          insertText\n        } = items[i].completion;\n        if (kind === item.type && insertText === item.insertText) {\n          return i;\n        }\n      }\n    }\n    return super.select(model, pos, items);\n  }\n  toJSON() {\n    let entries = [];\n    this._trie.forEach((value, key) => entries.push([key, value]));\n    // sort by last recently used (touch), then\n    // take the top 200 item and normalize their\n    // touch\n    entries.sort((a, b) => -(a[1].touch - b[1].touch)).forEach((value, i) => value[1].touch = i);\n    return entries.slice(0, 200);\n  }\n  fromJSON(data) {\n    this._trie.clear();\n    if (data.length > 0) {\n      this._seq = data[0][1].touch + 1;\n      for (const [key, value] of data) {\n        value.type = typeof value.type === 'number' ? value.type : completionKindFromString(value.type);\n        this._trie.set(key, value);\n      }\n    }\n  }\n}\nlet SuggestMemoryService = class SuggestMemoryService {\n  constructor(_storageService, _modeService, _configService) {\n    this._storageService = _storageService;\n    this._modeService = _modeService;\n    this._configService = _configService;\n    this._disposables = new DisposableStore();\n    this._persistSoon = new RunOnceScheduler(() => this._saveState(), 500);\n    this._disposables.add(_storageService.onWillSaveState(e => {\n      if (e.reason === WillSaveStateReason.SHUTDOWN) {\n        this._saveState();\n      }\n    }));\n  }\n  dispose() {\n    this._disposables.dispose();\n    this._persistSoon.dispose();\n  }\n  memorize(model, pos, item) {\n    this._withStrategy(model, pos).memorize(model, pos, item);\n    this._persistSoon.schedule();\n  }\n  select(model, pos, items) {\n    return this._withStrategy(model, pos).select(model, pos, items);\n  }\n  _withStrategy(model, pos) {\n    var _a, _b;\n    const mode = this._configService.getValue('editor.suggestSelection', {\n      overrideIdentifier: (_a = this._modeService.getLanguageIdentifier(model.getLanguageIdAtPosition(pos.lineNumber, pos.column))) === null || _a === void 0 ? void 0 : _a.language,\n      resource: model.uri\n    });\n    if (((_b = this._strategy) === null || _b === void 0 ? void 0 : _b.name) !== mode) {\n      this._saveState();\n      const ctor = SuggestMemoryService._strategyCtors.get(mode) || NoMemory;\n      this._strategy = new ctor();\n      try {\n        const share = this._configService.getValue('editor.suggest.shareSuggestSelections');\n        const scope = share ? 0 /* GLOBAL */ : 1 /* WORKSPACE */;\n        const raw = this._storageService.get(\"\".concat(SuggestMemoryService._storagePrefix, \"/\").concat(mode), scope);\n        if (raw) {\n          this._strategy.fromJSON(JSON.parse(raw));\n        }\n      } catch (e) {\n        // things can go wrong with JSON...\n      }\n    }\n    return this._strategy;\n  }\n  _saveState() {\n    if (this._strategy) {\n      const share = this._configService.getValue('editor.suggest.shareSuggestSelections');\n      const scope = share ? 0 /* GLOBAL */ : 1 /* WORKSPACE */;\n      const raw = JSON.stringify(this._strategy);\n      this._storageService.store(\"\".concat(SuggestMemoryService._storagePrefix, \"/\").concat(this._strategy.name), raw, scope, 1 /* MACHINE */);\n    }\n  }\n};\n\nSuggestMemoryService._strategyCtors = new Map([['recentlyUsedByPrefix', PrefixMemory], ['recentlyUsed', LRUMemory], ['first', NoMemory]]);\nSuggestMemoryService._storagePrefix = 'suggest/memories';\nSuggestMemoryService = __decorate([__param(0, IStorageService), __param(1, IModeService), __param(2, IConfigurationService)], SuggestMemoryService);\nexport { SuggestMemoryService };\nexport const ISuggestMemoryService = createDecorator('ISuggestMemories');\nregisterSingleton(ISuggestMemoryService, SuggestMemoryService, true);","map":{"version":3,"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","LRUCache","TernarySearchTree","IStorageService","WillSaveStateReason","completionKindFromString","DisposableStore","RunOnceScheduler","createDecorator","IConfigurationService","registerSingleton","IModeService","Memory","constructor","name","select","model","pos","items","topScore","score","completion","suggestion","preselect","NoMemory","memorize","item","toJSON","undefined","fromJSON","LRUMemory","_cache","_seq","concat","getLanguageIdentifier","language","textLabel","set","touch","type","kind","insertText","lineSuffix","getLineContent","lineNumber","substr","column","test","indexPreselect","indexRecency","seq","peek","data","clear","value","size","PrefixMemory","_trie","forStrings","word","getWordUntilPosition","get","findSubstr","entries","forEach","push","sort","a","b","slice","SuggestMemoryService","_storageService","_modeService","_configService","_disposables","_persistSoon","_saveState","add","onWillSaveState","e","reason","SHUTDOWN","dispose","_withStrategy","schedule","_a","_b","mode","getValue","overrideIdentifier","getLanguageIdAtPosition","resource","uri","_strategy","ctor","_strategyCtors","share","scope","raw","_storagePrefix","JSON","parse","stringify","store","Map","ISuggestMemoryService"],"sources":["C:/Users/Administrator/Desktop/sqllineage-master/sqllineagejs/node_modules/monaco-editor/esm/vs/editor/contrib/suggest/suggestMemory.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n};\r\nimport { LRUCache, TernarySearchTree } from '../../../base/common/map.js';\r\nimport { IStorageService, WillSaveStateReason } from '../../../platform/storage/common/storage.js';\r\nimport { completionKindFromString } from '../../common/modes.js';\r\nimport { DisposableStore } from '../../../base/common/lifecycle.js';\r\nimport { RunOnceScheduler } from '../../../base/common/async.js';\r\nimport { createDecorator } from '../../../platform/instantiation/common/instantiation.js';\r\nimport { IConfigurationService } from '../../../platform/configuration/common/configuration.js';\r\nimport { registerSingleton } from '../../../platform/instantiation/common/extensions.js';\r\nimport { IModeService } from '../../common/services/modeService.js';\r\nexport class Memory {\r\n    constructor(name) {\r\n        this.name = name;\r\n    }\r\n    select(model, pos, items) {\r\n        if (items.length === 0) {\r\n            return 0;\r\n        }\r\n        let topScore = items[0].score[0];\r\n        for (let i = 0; i < items.length; i++) {\r\n            const { score, completion: suggestion } = items[i];\r\n            if (score[0] !== topScore) {\r\n                // stop when leaving the group of top matches\r\n                break;\r\n            }\r\n            if (suggestion.preselect) {\r\n                // stop when seeing an auto-select-item\r\n                return i;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n}\r\nexport class NoMemory extends Memory {\r\n    constructor() {\r\n        super('first');\r\n    }\r\n    memorize(model, pos, item) {\r\n        // no-op\r\n    }\r\n    toJSON() {\r\n        return undefined;\r\n    }\r\n    fromJSON() {\r\n        //\r\n    }\r\n}\r\nexport class LRUMemory extends Memory {\r\n    constructor() {\r\n        super('recentlyUsed');\r\n        this._cache = new LRUCache(300, 0.66);\r\n        this._seq = 0;\r\n    }\r\n    memorize(model, pos, item) {\r\n        const key = `${model.getLanguageIdentifier().language}/${item.textLabel}`;\r\n        this._cache.set(key, {\r\n            touch: this._seq++,\r\n            type: item.completion.kind,\r\n            insertText: item.completion.insertText\r\n        });\r\n    }\r\n    select(model, pos, items) {\r\n        if (items.length === 0) {\r\n            return 0;\r\n        }\r\n        const lineSuffix = model.getLineContent(pos.lineNumber).substr(pos.column - 10, pos.column - 1);\r\n        if (/\\s$/.test(lineSuffix)) {\r\n            return super.select(model, pos, items);\r\n        }\r\n        let topScore = items[0].score[0];\r\n        let indexPreselect = -1;\r\n        let indexRecency = -1;\r\n        let seq = -1;\r\n        for (let i = 0; i < items.length; i++) {\r\n            if (items[i].score[0] !== topScore) {\r\n                // consider only top items\r\n                break;\r\n            }\r\n            const key = `${model.getLanguageIdentifier().language}/${items[i].textLabel}`;\r\n            const item = this._cache.peek(key);\r\n            if (item && item.touch > seq && item.type === items[i].completion.kind && item.insertText === items[i].completion.insertText) {\r\n                seq = item.touch;\r\n                indexRecency = i;\r\n            }\r\n            if (items[i].completion.preselect && indexPreselect === -1) {\r\n                // stop when seeing an auto-select-item\r\n                return indexPreselect = i;\r\n            }\r\n        }\r\n        if (indexRecency !== -1) {\r\n            return indexRecency;\r\n        }\r\n        else if (indexPreselect !== -1) {\r\n            return indexPreselect;\r\n        }\r\n        else {\r\n            return 0;\r\n        }\r\n    }\r\n    toJSON() {\r\n        return this._cache.toJSON();\r\n    }\r\n    fromJSON(data) {\r\n        this._cache.clear();\r\n        let seq = 0;\r\n        for (const [key, value] of data) {\r\n            value.touch = seq;\r\n            value.type = typeof value.type === 'number' ? value.type : completionKindFromString(value.type);\r\n            this._cache.set(key, value);\r\n        }\r\n        this._seq = this._cache.size;\r\n    }\r\n}\r\nexport class PrefixMemory extends Memory {\r\n    constructor() {\r\n        super('recentlyUsedByPrefix');\r\n        this._trie = TernarySearchTree.forStrings();\r\n        this._seq = 0;\r\n    }\r\n    memorize(model, pos, item) {\r\n        const { word } = model.getWordUntilPosition(pos);\r\n        const key = `${model.getLanguageIdentifier().language}/${word}`;\r\n        this._trie.set(key, {\r\n            type: item.completion.kind,\r\n            insertText: item.completion.insertText,\r\n            touch: this._seq++\r\n        });\r\n    }\r\n    select(model, pos, items) {\r\n        let { word } = model.getWordUntilPosition(pos);\r\n        if (!word) {\r\n            return super.select(model, pos, items);\r\n        }\r\n        let key = `${model.getLanguageIdentifier().language}/${word}`;\r\n        let item = this._trie.get(key);\r\n        if (!item) {\r\n            item = this._trie.findSubstr(key);\r\n        }\r\n        if (item) {\r\n            for (let i = 0; i < items.length; i++) {\r\n                let { kind, insertText } = items[i].completion;\r\n                if (kind === item.type && insertText === item.insertText) {\r\n                    return i;\r\n                }\r\n            }\r\n        }\r\n        return super.select(model, pos, items);\r\n    }\r\n    toJSON() {\r\n        let entries = [];\r\n        this._trie.forEach((value, key) => entries.push([key, value]));\r\n        // sort by last recently used (touch), then\r\n        // take the top 200 item and normalize their\r\n        // touch\r\n        entries\r\n            .sort((a, b) => -(a[1].touch - b[1].touch))\r\n            .forEach((value, i) => value[1].touch = i);\r\n        return entries.slice(0, 200);\r\n    }\r\n    fromJSON(data) {\r\n        this._trie.clear();\r\n        if (data.length > 0) {\r\n            this._seq = data[0][1].touch + 1;\r\n            for (const [key, value] of data) {\r\n                value.type = typeof value.type === 'number' ? value.type : completionKindFromString(value.type);\r\n                this._trie.set(key, value);\r\n            }\r\n        }\r\n    }\r\n}\r\nlet SuggestMemoryService = class SuggestMemoryService {\r\n    constructor(_storageService, _modeService, _configService) {\r\n        this._storageService = _storageService;\r\n        this._modeService = _modeService;\r\n        this._configService = _configService;\r\n        this._disposables = new DisposableStore();\r\n        this._persistSoon = new RunOnceScheduler(() => this._saveState(), 500);\r\n        this._disposables.add(_storageService.onWillSaveState(e => {\r\n            if (e.reason === WillSaveStateReason.SHUTDOWN) {\r\n                this._saveState();\r\n            }\r\n        }));\r\n    }\r\n    dispose() {\r\n        this._disposables.dispose();\r\n        this._persistSoon.dispose();\r\n    }\r\n    memorize(model, pos, item) {\r\n        this._withStrategy(model, pos).memorize(model, pos, item);\r\n        this._persistSoon.schedule();\r\n    }\r\n    select(model, pos, items) {\r\n        return this._withStrategy(model, pos).select(model, pos, items);\r\n    }\r\n    _withStrategy(model, pos) {\r\n        var _a, _b;\r\n        const mode = this._configService.getValue('editor.suggestSelection', {\r\n            overrideIdentifier: (_a = this._modeService.getLanguageIdentifier(model.getLanguageIdAtPosition(pos.lineNumber, pos.column))) === null || _a === void 0 ? void 0 : _a.language,\r\n            resource: model.uri\r\n        });\r\n        if (((_b = this._strategy) === null || _b === void 0 ? void 0 : _b.name) !== mode) {\r\n            this._saveState();\r\n            const ctor = SuggestMemoryService._strategyCtors.get(mode) || NoMemory;\r\n            this._strategy = new ctor();\r\n            try {\r\n                const share = this._configService.getValue('editor.suggest.shareSuggestSelections');\r\n                const scope = share ? 0 /* GLOBAL */ : 1 /* WORKSPACE */;\r\n                const raw = this._storageService.get(`${SuggestMemoryService._storagePrefix}/${mode}`, scope);\r\n                if (raw) {\r\n                    this._strategy.fromJSON(JSON.parse(raw));\r\n                }\r\n            }\r\n            catch (e) {\r\n                // things can go wrong with JSON...\r\n            }\r\n        }\r\n        return this._strategy;\r\n    }\r\n    _saveState() {\r\n        if (this._strategy) {\r\n            const share = this._configService.getValue('editor.suggest.shareSuggestSelections');\r\n            const scope = share ? 0 /* GLOBAL */ : 1 /* WORKSPACE */;\r\n            const raw = JSON.stringify(this._strategy);\r\n            this._storageService.store(`${SuggestMemoryService._storagePrefix}/${this._strategy.name}`, raw, scope, 1 /* MACHINE */);\r\n        }\r\n    }\r\n};\r\nSuggestMemoryService._strategyCtors = new Map([\r\n    ['recentlyUsedByPrefix', PrefixMemory],\r\n    ['recentlyUsed', LRUMemory],\r\n    ['first', NoMemory]\r\n]);\r\nSuggestMemoryService._storagePrefix = 'suggest/memories';\r\nSuggestMemoryService = __decorate([\r\n    __param(0, IStorageService),\r\n    __param(1, IModeService),\r\n    __param(2, IConfigurationService)\r\n], SuggestMemoryService);\r\nexport { SuggestMemoryService };\r\nexport const ISuggestMemoryService = createDecorator('ISuggestMemories');\r\nregisterSingleton(ISuggestMemoryService, SuggestMemoryService, true);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}