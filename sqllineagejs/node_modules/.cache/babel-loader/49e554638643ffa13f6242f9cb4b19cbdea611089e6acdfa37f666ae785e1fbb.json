{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { $ } from '../../dom.js';\nfunction removeFromParent(element) {\n  try {\n    if (element.parentElement) {\n      element.parentElement.removeChild(element);\n    }\n  } catch (e) {\n    // this will throw if this happens due to a blur event, nasty business\n  }\n}\nexport class RowCache {\n  constructor(renderers) {\n    this.renderers = renderers;\n    this.cache = new Map();\n  }\n  /**\r\n   * Returns a row either by creating a new one or reusing\r\n   * a previously released row which shares the same templateId.\r\n   */\n  alloc(templateId) {\n    let result = this.getTemplateCache(templateId).pop();\n    if (!result) {\n      const domNode = $('.monaco-list-row');\n      const renderer = this.getRenderer(templateId);\n      const templateData = renderer.renderTemplate(domNode);\n      result = {\n        domNode,\n        templateId,\n        templateData\n      };\n    }\n    return result;\n  }\n  /**\r\n   * Releases the row for eventual reuse.\r\n   */\n  release(row) {\n    if (!row) {\n      return;\n    }\n    this.releaseRow(row);\n  }\n  releaseRow(row) {\n    const {\n      domNode,\n      templateId\n    } = row;\n    if (domNode) {\n      domNode.classList.remove('scrolling');\n      removeFromParent(domNode);\n    }\n    const cache = this.getTemplateCache(templateId);\n    cache.push(row);\n  }\n  getTemplateCache(templateId) {\n    let result = this.cache.get(templateId);\n    if (!result) {\n      result = [];\n      this.cache.set(templateId, result);\n    }\n    return result;\n  }\n  dispose() {\n    this.cache.forEach((cachedRows, templateId) => {\n      for (const cachedRow of cachedRows) {\n        const renderer = this.getRenderer(templateId);\n        renderer.disposeTemplate(cachedRow.templateData);\n        cachedRow.templateData = null;\n      }\n    });\n    this.cache.clear();\n  }\n  getRenderer(templateId) {\n    const renderer = this.renderers.get(templateId);\n    if (!renderer) {\n      throw new Error(\"No renderer found for \".concat(templateId));\n    }\n    return renderer;\n  }\n}","map":{"version":3,"names":["$","removeFromParent","element","parentElement","removeChild","e","RowCache","constructor","renderers","cache","Map","alloc","templateId","result","getTemplateCache","pop","domNode","renderer","getRenderer","templateData","renderTemplate","release","row","releaseRow","classList","remove","push","get","set","dispose","forEach","cachedRows","cachedRow","disposeTemplate","clear","Error","concat"],"sources":["C:/Users/Administrator/Desktop/sqllineage-master/sqllineagejs/node_modules/monaco-editor/esm/vs/base/browser/ui/list/rowCache.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { $ } from '../../dom.js';\r\nfunction removeFromParent(element) {\r\n    try {\r\n        if (element.parentElement) {\r\n            element.parentElement.removeChild(element);\r\n        }\r\n    }\r\n    catch (e) {\r\n        // this will throw if this happens due to a blur event, nasty business\r\n    }\r\n}\r\nexport class RowCache {\r\n    constructor(renderers) {\r\n        this.renderers = renderers;\r\n        this.cache = new Map();\r\n    }\r\n    /**\r\n     * Returns a row either by creating a new one or reusing\r\n     * a previously released row which shares the same templateId.\r\n     */\r\n    alloc(templateId) {\r\n        let result = this.getTemplateCache(templateId).pop();\r\n        if (!result) {\r\n            const domNode = $('.monaco-list-row');\r\n            const renderer = this.getRenderer(templateId);\r\n            const templateData = renderer.renderTemplate(domNode);\r\n            result = { domNode, templateId, templateData };\r\n        }\r\n        return result;\r\n    }\r\n    /**\r\n     * Releases the row for eventual reuse.\r\n     */\r\n    release(row) {\r\n        if (!row) {\r\n            return;\r\n        }\r\n        this.releaseRow(row);\r\n    }\r\n    releaseRow(row) {\r\n        const { domNode, templateId } = row;\r\n        if (domNode) {\r\n            domNode.classList.remove('scrolling');\r\n            removeFromParent(domNode);\r\n        }\r\n        const cache = this.getTemplateCache(templateId);\r\n        cache.push(row);\r\n    }\r\n    getTemplateCache(templateId) {\r\n        let result = this.cache.get(templateId);\r\n        if (!result) {\r\n            result = [];\r\n            this.cache.set(templateId, result);\r\n        }\r\n        return result;\r\n    }\r\n    dispose() {\r\n        this.cache.forEach((cachedRows, templateId) => {\r\n            for (const cachedRow of cachedRows) {\r\n                const renderer = this.getRenderer(templateId);\r\n                renderer.disposeTemplate(cachedRow.templateData);\r\n                cachedRow.templateData = null;\r\n            }\r\n        });\r\n        this.cache.clear();\r\n    }\r\n    getRenderer(templateId) {\r\n        const renderer = this.renderers.get(templateId);\r\n        if (!renderer) {\r\n            throw new Error(`No renderer found for ${templateId}`);\r\n        }\r\n        return renderer;\r\n    }\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,CAAC,QAAQ,cAAc;AAChC,SAASC,gBAAgBA,CAACC,OAAO,EAAE;EAC/B,IAAI;IACA,IAAIA,OAAO,CAACC,aAAa,EAAE;MACvBD,OAAO,CAACC,aAAa,CAACC,WAAW,CAACF,OAAO,CAAC;IAC9C;EACJ,CAAC,CACD,OAAOG,CAAC,EAAE;IACN;EAAA;AAER;AACA,OAAO,MAAMC,QAAQ,CAAC;EAClBC,WAAWA,CAACC,SAAS,EAAE;IACnB,IAAI,CAACA,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACC,KAAK,GAAG,IAAIC,GAAG,CAAC,CAAC;EAC1B;EACA;AACJ;AACA;AACA;EACIC,KAAKA,CAACC,UAAU,EAAE;IACd,IAAIC,MAAM,GAAG,IAAI,CAACC,gBAAgB,CAACF,UAAU,CAAC,CAACG,GAAG,CAAC,CAAC;IACpD,IAAI,CAACF,MAAM,EAAE;MACT,MAAMG,OAAO,GAAGhB,CAAC,CAAC,kBAAkB,CAAC;MACrC,MAAMiB,QAAQ,GAAG,IAAI,CAACC,WAAW,CAACN,UAAU,CAAC;MAC7C,MAAMO,YAAY,GAAGF,QAAQ,CAACG,cAAc,CAACJ,OAAO,CAAC;MACrDH,MAAM,GAAG;QAAEG,OAAO;QAAEJ,UAAU;QAAEO;MAAa,CAAC;IAClD;IACA,OAAON,MAAM;EACjB;EACA;AACJ;AACA;EACIQ,OAAOA,CAACC,GAAG,EAAE;IACT,IAAI,CAACA,GAAG,EAAE;MACN;IACJ;IACA,IAAI,CAACC,UAAU,CAACD,GAAG,CAAC;EACxB;EACAC,UAAUA,CAACD,GAAG,EAAE;IACZ,MAAM;MAAEN,OAAO;MAAEJ;IAAW,CAAC,GAAGU,GAAG;IACnC,IAAIN,OAAO,EAAE;MACTA,OAAO,CAACQ,SAAS,CAACC,MAAM,CAAC,WAAW,CAAC;MACrCxB,gBAAgB,CAACe,OAAO,CAAC;IAC7B;IACA,MAAMP,KAAK,GAAG,IAAI,CAACK,gBAAgB,CAACF,UAAU,CAAC;IAC/CH,KAAK,CAACiB,IAAI,CAACJ,GAAG,CAAC;EACnB;EACAR,gBAAgBA,CAACF,UAAU,EAAE;IACzB,IAAIC,MAAM,GAAG,IAAI,CAACJ,KAAK,CAACkB,GAAG,CAACf,UAAU,CAAC;IACvC,IAAI,CAACC,MAAM,EAAE;MACTA,MAAM,GAAG,EAAE;MACX,IAAI,CAACJ,KAAK,CAACmB,GAAG,CAAChB,UAAU,EAAEC,MAAM,CAAC;IACtC;IACA,OAAOA,MAAM;EACjB;EACAgB,OAAOA,CAAA,EAAG;IACN,IAAI,CAACpB,KAAK,CAACqB,OAAO,CAAC,CAACC,UAAU,EAAEnB,UAAU,KAAK;MAC3C,KAAK,MAAMoB,SAAS,IAAID,UAAU,EAAE;QAChC,MAAMd,QAAQ,GAAG,IAAI,CAACC,WAAW,CAACN,UAAU,CAAC;QAC7CK,QAAQ,CAACgB,eAAe,CAACD,SAAS,CAACb,YAAY,CAAC;QAChDa,SAAS,CAACb,YAAY,GAAG,IAAI;MACjC;IACJ,CAAC,CAAC;IACF,IAAI,CAACV,KAAK,CAACyB,KAAK,CAAC,CAAC;EACtB;EACAhB,WAAWA,CAACN,UAAU,EAAE;IACpB,MAAMK,QAAQ,GAAG,IAAI,CAACT,SAAS,CAACmB,GAAG,CAACf,UAAU,CAAC;IAC/C,IAAI,CAACK,QAAQ,EAAE;MACX,MAAM,IAAIkB,KAAK,0BAAAC,MAAA,CAA0BxB,UAAU,CAAE,CAAC;IAC1D;IACA,OAAOK,QAAQ;EACnB;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}