{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { DisposableStore } from '../../../base/common/lifecycle.js';\nexport class OvertypingCapturer {\n  constructor(editor, suggestModel) {\n    this._disposables = new DisposableStore();\n    this._lastOvertyped = [];\n    this._empty = true;\n    this._disposables.add(editor.onWillType(() => {\n      if (!this._empty) {\n        return;\n      }\n      if (!editor.hasModel()) {\n        return;\n      }\n      const selections = editor.getSelections();\n      const selectionsLength = selections.length;\n      // Check if it will overtype any selections\n      let willOvertype = false;\n      for (let i = 0; i < selectionsLength; i++) {\n        if (!selections[i].isEmpty()) {\n          willOvertype = true;\n          break;\n        }\n      }\n      if (!willOvertype) {\n        return;\n      }\n      this._lastOvertyped = [];\n      const model = editor.getModel();\n      for (let i = 0; i < selectionsLength; i++) {\n        const selection = selections[i];\n        // Check for overtyping capturer restrictions\n        if (model.getValueLengthInRange(selection) > OvertypingCapturer._maxSelectionLength) {\n          return;\n        }\n        this._lastOvertyped[i] = {\n          value: model.getValueInRange(selection),\n          multiline: selection.startLineNumber !== selection.endLineNumber\n        };\n      }\n      this._empty = false;\n    }));\n    this._disposables.add(suggestModel.onDidCancel(e => {\n      if (!this._empty && !e.retrigger) {\n        this._empty = true;\n      }\n    }));\n  }\n  getLastOvertypedInfo(idx) {\n    if (!this._empty && idx >= 0 && idx < this._lastOvertyped.length) {\n      return this._lastOvertyped[idx];\n    }\n    return undefined;\n  }\n  dispose() {\n    this._disposables.dispose();\n  }\n}\nOvertypingCapturer._maxSelectionLength = 51200;","map":{"version":3,"names":["DisposableStore","OvertypingCapturer","constructor","editor","suggestModel","_disposables","_lastOvertyped","_empty","add","onWillType","hasModel","selections","getSelections","selectionsLength","length","willOvertype","i","isEmpty","model","getModel","selection","getValueLengthInRange","_maxSelectionLength","value","getValueInRange","multiline","startLineNumber","endLineNumber","onDidCancel","e","retrigger","getLastOvertypedInfo","idx","undefined","dispose"],"sources":["C:/Users/Administrator/Desktop/sqllineage-master/sqllineagejs/node_modules/monaco-editor/esm/vs/editor/contrib/suggest/suggestOvertypingCapturer.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { DisposableStore } from '../../../base/common/lifecycle.js';\r\nexport class OvertypingCapturer {\r\n    constructor(editor, suggestModel) {\r\n        this._disposables = new DisposableStore();\r\n        this._lastOvertyped = [];\r\n        this._empty = true;\r\n        this._disposables.add(editor.onWillType(() => {\r\n            if (!this._empty) {\r\n                return;\r\n            }\r\n            if (!editor.hasModel()) {\r\n                return;\r\n            }\r\n            const selections = editor.getSelections();\r\n            const selectionsLength = selections.length;\r\n            // Check if it will overtype any selections\r\n            let willOvertype = false;\r\n            for (let i = 0; i < selectionsLength; i++) {\r\n                if (!selections[i].isEmpty()) {\r\n                    willOvertype = true;\r\n                    break;\r\n                }\r\n            }\r\n            if (!willOvertype) {\r\n                return;\r\n            }\r\n            this._lastOvertyped = [];\r\n            const model = editor.getModel();\r\n            for (let i = 0; i < selectionsLength; i++) {\r\n                const selection = selections[i];\r\n                // Check for overtyping capturer restrictions\r\n                if (model.getValueLengthInRange(selection) > OvertypingCapturer._maxSelectionLength) {\r\n                    return;\r\n                }\r\n                this._lastOvertyped[i] = { value: model.getValueInRange(selection), multiline: selection.startLineNumber !== selection.endLineNumber };\r\n            }\r\n            this._empty = false;\r\n        }));\r\n        this._disposables.add(suggestModel.onDidCancel(e => {\r\n            if (!this._empty && !e.retrigger) {\r\n                this._empty = true;\r\n            }\r\n        }));\r\n    }\r\n    getLastOvertypedInfo(idx) {\r\n        if (!this._empty && idx >= 0 && idx < this._lastOvertyped.length) {\r\n            return this._lastOvertyped[idx];\r\n        }\r\n        return undefined;\r\n    }\r\n    dispose() {\r\n        this._disposables.dispose();\r\n    }\r\n}\r\nOvertypingCapturer._maxSelectionLength = 51200;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,eAAe,QAAQ,mCAAmC;AACnE,OAAO,MAAMC,kBAAkB,CAAC;EAC5BC,WAAWA,CAACC,MAAM,EAAEC,YAAY,EAAE;IAC9B,IAAI,CAACC,YAAY,GAAG,IAAIL,eAAe,CAAC,CAAC;IACzC,IAAI,CAACM,cAAc,GAAG,EAAE;IACxB,IAAI,CAACC,MAAM,GAAG,IAAI;IAClB,IAAI,CAACF,YAAY,CAACG,GAAG,CAACL,MAAM,CAACM,UAAU,CAAC,MAAM;MAC1C,IAAI,CAAC,IAAI,CAACF,MAAM,EAAE;QACd;MACJ;MACA,IAAI,CAACJ,MAAM,CAACO,QAAQ,CAAC,CAAC,EAAE;QACpB;MACJ;MACA,MAAMC,UAAU,GAAGR,MAAM,CAACS,aAAa,CAAC,CAAC;MACzC,MAAMC,gBAAgB,GAAGF,UAAU,CAACG,MAAM;MAC1C;MACA,IAAIC,YAAY,GAAG,KAAK;MACxB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,gBAAgB,EAAEG,CAAC,EAAE,EAAE;QACvC,IAAI,CAACL,UAAU,CAACK,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC,EAAE;UAC1BF,YAAY,GAAG,IAAI;UACnB;QACJ;MACJ;MACA,IAAI,CAACA,YAAY,EAAE;QACf;MACJ;MACA,IAAI,CAACT,cAAc,GAAG,EAAE;MACxB,MAAMY,KAAK,GAAGf,MAAM,CAACgB,QAAQ,CAAC,CAAC;MAC/B,KAAK,IAAIH,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,gBAAgB,EAAEG,CAAC,EAAE,EAAE;QACvC,MAAMI,SAAS,GAAGT,UAAU,CAACK,CAAC,CAAC;QAC/B;QACA,IAAIE,KAAK,CAACG,qBAAqB,CAACD,SAAS,CAAC,GAAGnB,kBAAkB,CAACqB,mBAAmB,EAAE;UACjF;QACJ;QACA,IAAI,CAAChB,cAAc,CAACU,CAAC,CAAC,GAAG;UAAEO,KAAK,EAAEL,KAAK,CAACM,eAAe,CAACJ,SAAS,CAAC;UAAEK,SAAS,EAAEL,SAAS,CAACM,eAAe,KAAKN,SAAS,CAACO;QAAc,CAAC;MAC1I;MACA,IAAI,CAACpB,MAAM,GAAG,KAAK;IACvB,CAAC,CAAC,CAAC;IACH,IAAI,CAACF,YAAY,CAACG,GAAG,CAACJ,YAAY,CAACwB,WAAW,CAACC,CAAC,IAAI;MAChD,IAAI,CAAC,IAAI,CAACtB,MAAM,IAAI,CAACsB,CAAC,CAACC,SAAS,EAAE;QAC9B,IAAI,CAACvB,MAAM,GAAG,IAAI;MACtB;IACJ,CAAC,CAAC,CAAC;EACP;EACAwB,oBAAoBA,CAACC,GAAG,EAAE;IACtB,IAAI,CAAC,IAAI,CAACzB,MAAM,IAAIyB,GAAG,IAAI,CAAC,IAAIA,GAAG,GAAG,IAAI,CAAC1B,cAAc,CAACQ,MAAM,EAAE;MAC9D,OAAO,IAAI,CAACR,cAAc,CAAC0B,GAAG,CAAC;IACnC;IACA,OAAOC,SAAS;EACpB;EACAC,OAAOA,CAAA,EAAG;IACN,IAAI,CAAC7B,YAAY,CAAC6B,OAAO,CAAC,CAAC;EAC/B;AACJ;AACAjC,kBAAkB,CAACqB,mBAAmB,GAAG,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}