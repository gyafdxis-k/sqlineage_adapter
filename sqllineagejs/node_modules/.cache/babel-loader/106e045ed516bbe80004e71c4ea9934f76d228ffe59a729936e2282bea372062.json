{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../nls.js';\nimport { KeyChord } from '../../../base/common/keyCodes.js';\nimport { CoreEditingCommands } from '../../browser/controller/coreCommands.js';\nimport { EditorAction, registerEditorAction } from '../../browser/editorExtensions.js';\nimport { ReplaceCommand, ReplaceCommandThatPreservesSelection, ReplaceCommandThatSelectsText } from '../../common/commands/replaceCommand.js';\nimport { TrimTrailingWhitespaceCommand } from '../../common/commands/trimTrailingWhitespaceCommand.js';\nimport { TypeOperations } from '../../common/controller/cursorTypeOperations.js';\nimport { EditOperation } from '../../common/core/editOperation.js';\nimport { Position } from '../../common/core/position.js';\nimport { Range } from '../../common/core/range.js';\nimport { Selection } from '../../common/core/selection.js';\nimport { EditorContextKeys } from '../../common/editorContextKeys.js';\nimport { CopyLinesCommand } from './copyLinesCommand.js';\nimport { MoveLinesCommand } from './moveLinesCommand.js';\nimport { SortLinesCommand } from './sortLinesCommand.js';\nimport { MenuId } from '../../../platform/actions/common/actions.js';\n// copy lines\nclass AbstractCopyLinesAction extends EditorAction {\n  constructor(down, opts) {\n    super(opts);\n    this.down = down;\n  }\n  run(_accessor, editor) {\n    if (!editor.hasModel()) {\n      return;\n    }\n    const selections = editor.getSelections().map((selection, index) => ({\n      selection,\n      index,\n      ignore: false\n    }));\n    selections.sort((a, b) => Range.compareRangesUsingStarts(a.selection, b.selection));\n    // Remove selections that would result in copying the same line\n    let prev = selections[0];\n    for (let i = 1; i < selections.length; i++) {\n      const curr = selections[i];\n      if (prev.selection.endLineNumber === curr.selection.startLineNumber) {\n        // these two selections would copy the same line\n        if (prev.index < curr.index) {\n          // prev wins\n          curr.ignore = true;\n        } else {\n          // curr wins\n          prev.ignore = true;\n          prev = curr;\n        }\n      }\n    }\n    const commands = [];\n    for (const selection of selections) {\n      commands.push(new CopyLinesCommand(selection.selection, this.down, selection.ignore));\n    }\n    editor.pushUndoStop();\n    editor.executeCommands(this.id, commands);\n    editor.pushUndoStop();\n  }\n}\nclass CopyLinesUpAction extends AbstractCopyLinesAction {\n  constructor() {\n    super(false, {\n      id: 'editor.action.copyLinesUpAction',\n      label: nls.localize('lines.copyUp', \"Copy Line Up\"),\n      alias: 'Copy Line Up',\n      precondition: EditorContextKeys.writable,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: 512 /* Alt */ | 1024 /* Shift */ | 16 /* UpArrow */,\n        linux: {\n          primary: 2048 /* CtrlCmd */ | 512 /* Alt */ | 1024 /* Shift */ | 16 /* UpArrow */\n        },\n        weight: 100 /* EditorContrib */\n      },\n\n      menuOpts: {\n        menuId: MenuId.MenubarSelectionMenu,\n        group: '2_line',\n        title: nls.localize({\n          key: 'miCopyLinesUp',\n          comment: ['&& denotes a mnemonic']\n        }, \"&&Copy Line Up\"),\n        order: 1\n      }\n    });\n  }\n}\nclass CopyLinesDownAction extends AbstractCopyLinesAction {\n  constructor() {\n    super(true, {\n      id: 'editor.action.copyLinesDownAction',\n      label: nls.localize('lines.copyDown', \"Copy Line Down\"),\n      alias: 'Copy Line Down',\n      precondition: EditorContextKeys.writable,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: 512 /* Alt */ | 1024 /* Shift */ | 18 /* DownArrow */,\n        linux: {\n          primary: 2048 /* CtrlCmd */ | 512 /* Alt */ | 1024 /* Shift */ | 18 /* DownArrow */\n        },\n        weight: 100 /* EditorContrib */\n      },\n\n      menuOpts: {\n        menuId: MenuId.MenubarSelectionMenu,\n        group: '2_line',\n        title: nls.localize({\n          key: 'miCopyLinesDown',\n          comment: ['&& denotes a mnemonic']\n        }, \"Co&&py Line Down\"),\n        order: 2\n      }\n    });\n  }\n}\nexport class DuplicateSelectionAction extends EditorAction {\n  constructor() {\n    super({\n      id: 'editor.action.duplicateSelection',\n      label: nls.localize('duplicateSelection', \"Duplicate Selection\"),\n      alias: 'Duplicate Selection',\n      precondition: EditorContextKeys.writable,\n      menuOpts: {\n        menuId: MenuId.MenubarSelectionMenu,\n        group: '2_line',\n        title: nls.localize({\n          key: 'miDuplicateSelection',\n          comment: ['&& denotes a mnemonic']\n        }, \"&&Duplicate Selection\"),\n        order: 5\n      }\n    });\n  }\n  run(accessor, editor, args) {\n    if (!editor.hasModel()) {\n      return;\n    }\n    const commands = [];\n    const selections = editor.getSelections();\n    const model = editor.getModel();\n    for (const selection of selections) {\n      if (selection.isEmpty()) {\n        commands.push(new CopyLinesCommand(selection, true));\n      } else {\n        const insertSelection = new Selection(selection.endLineNumber, selection.endColumn, selection.endLineNumber, selection.endColumn);\n        commands.push(new ReplaceCommandThatSelectsText(insertSelection, model.getValueInRange(selection)));\n      }\n    }\n    editor.pushUndoStop();\n    editor.executeCommands(this.id, commands);\n    editor.pushUndoStop();\n  }\n}\n// move lines\nclass AbstractMoveLinesAction extends EditorAction {\n  constructor(down, opts) {\n    super(opts);\n    this.down = down;\n  }\n  run(_accessor, editor) {\n    let commands = [];\n    let selections = editor.getSelections() || [];\n    const autoIndent = editor.getOption(8 /* autoIndent */);\n    for (const selection of selections) {\n      commands.push(new MoveLinesCommand(selection, this.down, autoIndent));\n    }\n    editor.pushUndoStop();\n    editor.executeCommands(this.id, commands);\n    editor.pushUndoStop();\n  }\n}\nclass MoveLinesUpAction extends AbstractMoveLinesAction {\n  constructor() {\n    super(false, {\n      id: 'editor.action.moveLinesUpAction',\n      label: nls.localize('lines.moveUp', \"Move Line Up\"),\n      alias: 'Move Line Up',\n      precondition: EditorContextKeys.writable,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: 512 /* Alt */ | 16 /* UpArrow */,\n        linux: {\n          primary: 512 /* Alt */ | 16 /* UpArrow */\n        },\n        weight: 100 /* EditorContrib */\n      },\n\n      menuOpts: {\n        menuId: MenuId.MenubarSelectionMenu,\n        group: '2_line',\n        title: nls.localize({\n          key: 'miMoveLinesUp',\n          comment: ['&& denotes a mnemonic']\n        }, \"Mo&&ve Line Up\"),\n        order: 3\n      }\n    });\n  }\n}\nclass MoveLinesDownAction extends AbstractMoveLinesAction {\n  constructor() {\n    super(true, {\n      id: 'editor.action.moveLinesDownAction',\n      label: nls.localize('lines.moveDown', \"Move Line Down\"),\n      alias: 'Move Line Down',\n      precondition: EditorContextKeys.writable,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: 512 /* Alt */ | 18 /* DownArrow */,\n        linux: {\n          primary: 512 /* Alt */ | 18 /* DownArrow */\n        },\n        weight: 100 /* EditorContrib */\n      },\n\n      menuOpts: {\n        menuId: MenuId.MenubarSelectionMenu,\n        group: '2_line',\n        title: nls.localize({\n          key: 'miMoveLinesDown',\n          comment: ['&& denotes a mnemonic']\n        }, \"Move &&Line Down\"),\n        order: 4\n      }\n    });\n  }\n}\nexport class AbstractSortLinesAction extends EditorAction {\n  constructor(descending, opts) {\n    super(opts);\n    this.descending = descending;\n  }\n  run(_accessor, editor) {\n    const selections = editor.getSelections() || [];\n    for (const selection of selections) {\n      if (!SortLinesCommand.canRun(editor.getModel(), selection, this.descending)) {\n        return;\n      }\n    }\n    let commands = [];\n    for (let i = 0, len = selections.length; i < len; i++) {\n      commands[i] = new SortLinesCommand(selections[i], this.descending);\n    }\n    editor.pushUndoStop();\n    editor.executeCommands(this.id, commands);\n    editor.pushUndoStop();\n  }\n}\nexport class SortLinesAscendingAction extends AbstractSortLinesAction {\n  constructor() {\n    super(false, {\n      id: 'editor.action.sortLinesAscending',\n      label: nls.localize('lines.sortAscending', \"Sort Lines Ascending\"),\n      alias: 'Sort Lines Ascending',\n      precondition: EditorContextKeys.writable\n    });\n  }\n}\nexport class SortLinesDescendingAction extends AbstractSortLinesAction {\n  constructor() {\n    super(true, {\n      id: 'editor.action.sortLinesDescending',\n      label: nls.localize('lines.sortDescending', \"Sort Lines Descending\"),\n      alias: 'Sort Lines Descending',\n      precondition: EditorContextKeys.writable\n    });\n  }\n}\nexport class TrimTrailingWhitespaceAction extends EditorAction {\n  constructor() {\n    super({\n      id: TrimTrailingWhitespaceAction.ID,\n      label: nls.localize('lines.trimTrailingWhitespace', \"Trim Trailing Whitespace\"),\n      alias: 'Trim Trailing Whitespace',\n      precondition: EditorContextKeys.writable,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: KeyChord(2048 /* CtrlCmd */ | 41 /* KEY_K */, 2048 /* CtrlCmd */ | 54 /* KEY_X */),\n        weight: 100 /* EditorContrib */\n      }\n    });\n  }\n\n  run(_accessor, editor, args) {\n    let cursors = [];\n    if (args.reason === 'auto-save') {\n      // See https://github.com/editorconfig/editorconfig-vscode/issues/47\n      // It is very convenient for the editor config extension to invoke this action.\n      // So, if we get a reason:'auto-save' passed in, let's preserve cursor positions.\n      cursors = (editor.getSelections() || []).map(s => new Position(s.positionLineNumber, s.positionColumn));\n    }\n    let selection = editor.getSelection();\n    if (selection === null) {\n      return;\n    }\n    let command = new TrimTrailingWhitespaceCommand(selection, cursors);\n    editor.pushUndoStop();\n    editor.executeCommands(this.id, [command]);\n    editor.pushUndoStop();\n  }\n}\nTrimTrailingWhitespaceAction.ID = 'editor.action.trimTrailingWhitespace';\nexport class DeleteLinesAction extends EditorAction {\n  constructor() {\n    super({\n      id: 'editor.action.deleteLines',\n      label: nls.localize('lines.delete', \"Delete Line\"),\n      alias: 'Delete Line',\n      precondition: EditorContextKeys.writable,\n      kbOpts: {\n        kbExpr: EditorContextKeys.textInputFocus,\n        primary: 2048 /* CtrlCmd */ | 1024 /* Shift */ | 41 /* KEY_K */,\n        weight: 100 /* EditorContrib */\n      }\n    });\n  }\n\n  run(_accessor, editor) {\n    if (!editor.hasModel()) {\n      return;\n    }\n    let ops = this._getLinesToRemove(editor);\n    let model = editor.getModel();\n    if (model.getLineCount() === 1 && model.getLineMaxColumn(1) === 1) {\n      // Model is empty\n      return;\n    }\n    let linesDeleted = 0;\n    let edits = [];\n    let cursorState = [];\n    for (let i = 0, len = ops.length; i < len; i++) {\n      const op = ops[i];\n      let startLineNumber = op.startLineNumber;\n      let endLineNumber = op.endLineNumber;\n      let startColumn = 1;\n      let endColumn = model.getLineMaxColumn(endLineNumber);\n      if (endLineNumber < model.getLineCount()) {\n        endLineNumber += 1;\n        endColumn = 1;\n      } else if (startLineNumber > 1) {\n        startLineNumber -= 1;\n        startColumn = model.getLineMaxColumn(startLineNumber);\n      }\n      edits.push(EditOperation.replace(new Selection(startLineNumber, startColumn, endLineNumber, endColumn), ''));\n      cursorState.push(new Selection(startLineNumber - linesDeleted, op.positionColumn, startLineNumber - linesDeleted, op.positionColumn));\n      linesDeleted += op.endLineNumber - op.startLineNumber + 1;\n    }\n    editor.pushUndoStop();\n    editor.executeEdits(this.id, edits, cursorState);\n    editor.pushUndoStop();\n  }\n  _getLinesToRemove(editor) {\n    // Construct delete operations\n    let operations = editor.getSelections().map(s => {\n      let endLineNumber = s.endLineNumber;\n      if (s.startLineNumber < s.endLineNumber && s.endColumn === 1) {\n        endLineNumber -= 1;\n      }\n      return {\n        startLineNumber: s.startLineNumber,\n        selectionStartColumn: s.selectionStartColumn,\n        endLineNumber: endLineNumber,\n        positionColumn: s.positionColumn\n      };\n    });\n    // Sort delete operations\n    operations.sort((a, b) => {\n      if (a.startLineNumber === b.startLineNumber) {\n        return a.endLineNumber - b.endLineNumber;\n      }\n      return a.startLineNumber - b.startLineNumber;\n    });\n    // Merge delete operations which are adjacent or overlapping\n    let mergedOperations = [];\n    let previousOperation = operations[0];\n    for (let i = 1; i < operations.length; i++) {\n      if (previousOperation.endLineNumber + 1 >= operations[i].startLineNumber) {\n        // Merge current operations into the previous one\n        previousOperation.endLineNumber = operations[i].endLineNumber;\n      } else {\n        // Push previous operation\n        mergedOperations.push(previousOperation);\n        previousOperation = operations[i];\n      }\n    }\n    // Push the last operation\n    mergedOperations.push(previousOperation);\n    return mergedOperations;\n  }\n}\nexport class IndentLinesAction extends EditorAction {\n  constructor() {\n    super({\n      id: 'editor.action.indentLines',\n      label: nls.localize('lines.indent', \"Indent Line\"),\n      alias: 'Indent Line',\n      precondition: EditorContextKeys.writable,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: 2048 /* CtrlCmd */ | 89 /* US_CLOSE_SQUARE_BRACKET */,\n        weight: 100 /* EditorContrib */\n      }\n    });\n  }\n\n  run(_accessor, editor) {\n    const viewModel = editor._getViewModel();\n    if (!viewModel) {\n      return;\n    }\n    editor.pushUndoStop();\n    editor.executeCommands(this.id, TypeOperations.indent(viewModel.cursorConfig, editor.getModel(), editor.getSelections()));\n    editor.pushUndoStop();\n  }\n}\nclass OutdentLinesAction extends EditorAction {\n  constructor() {\n    super({\n      id: 'editor.action.outdentLines',\n      label: nls.localize('lines.outdent', \"Outdent Line\"),\n      alias: 'Outdent Line',\n      precondition: EditorContextKeys.writable,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: 2048 /* CtrlCmd */ | 87 /* US_OPEN_SQUARE_BRACKET */,\n        weight: 100 /* EditorContrib */\n      }\n    });\n  }\n\n  run(_accessor, editor) {\n    CoreEditingCommands.Outdent.runEditorCommand(_accessor, editor, null);\n  }\n}\nexport class InsertLineBeforeAction extends EditorAction {\n  constructor() {\n    super({\n      id: 'editor.action.insertLineBefore',\n      label: nls.localize('lines.insertBefore', \"Insert Line Above\"),\n      alias: 'Insert Line Above',\n      precondition: EditorContextKeys.writable,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: 2048 /* CtrlCmd */ | 1024 /* Shift */ | 3 /* Enter */,\n        weight: 100 /* EditorContrib */\n      }\n    });\n  }\n\n  run(_accessor, editor) {\n    const viewModel = editor._getViewModel();\n    if (!viewModel) {\n      return;\n    }\n    editor.pushUndoStop();\n    editor.executeCommands(this.id, TypeOperations.lineInsertBefore(viewModel.cursorConfig, editor.getModel(), editor.getSelections()));\n  }\n}\nexport class InsertLineAfterAction extends EditorAction {\n  constructor() {\n    super({\n      id: 'editor.action.insertLineAfter',\n      label: nls.localize('lines.insertAfter', \"Insert Line Below\"),\n      alias: 'Insert Line Below',\n      precondition: EditorContextKeys.writable,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: 2048 /* CtrlCmd */ | 3 /* Enter */,\n        weight: 100 /* EditorContrib */\n      }\n    });\n  }\n\n  run(_accessor, editor) {\n    const viewModel = editor._getViewModel();\n    if (!viewModel) {\n      return;\n    }\n    editor.pushUndoStop();\n    editor.executeCommands(this.id, TypeOperations.lineInsertAfter(viewModel.cursorConfig, editor.getModel(), editor.getSelections()));\n  }\n}\nexport class AbstractDeleteAllToBoundaryAction extends EditorAction {\n  run(_accessor, editor) {\n    if (!editor.hasModel()) {\n      return;\n    }\n    const primaryCursor = editor.getSelection();\n    let rangesToDelete = this._getRangesToDelete(editor);\n    // merge overlapping selections\n    let effectiveRanges = [];\n    for (let i = 0, count = rangesToDelete.length - 1; i < count; i++) {\n      let range = rangesToDelete[i];\n      let nextRange = rangesToDelete[i + 1];\n      if (Range.intersectRanges(range, nextRange) === null) {\n        effectiveRanges.push(range);\n      } else {\n        rangesToDelete[i + 1] = Range.plusRange(range, nextRange);\n      }\n    }\n    effectiveRanges.push(rangesToDelete[rangesToDelete.length - 1]);\n    let endCursorState = this._getEndCursorState(primaryCursor, effectiveRanges);\n    let edits = effectiveRanges.map(range => {\n      return EditOperation.replace(range, '');\n    });\n    editor.pushUndoStop();\n    editor.executeEdits(this.id, edits, endCursorState);\n    editor.pushUndoStop();\n  }\n}\nexport class DeleteAllLeftAction extends AbstractDeleteAllToBoundaryAction {\n  constructor() {\n    super({\n      id: 'deleteAllLeft',\n      label: nls.localize('lines.deleteAllLeft', \"Delete All Left\"),\n      alias: 'Delete All Left',\n      precondition: EditorContextKeys.writable,\n      kbOpts: {\n        kbExpr: EditorContextKeys.textInputFocus,\n        primary: 0,\n        mac: {\n          primary: 2048 /* CtrlCmd */ | 1 /* Backspace */\n        },\n        weight: 100 /* EditorContrib */\n      }\n    });\n  }\n\n  _getEndCursorState(primaryCursor, rangesToDelete) {\n    let endPrimaryCursor = null;\n    let endCursorState = [];\n    let deletedLines = 0;\n    rangesToDelete.forEach(range => {\n      let endCursor;\n      if (range.endColumn === 1 && deletedLines > 0) {\n        let newStartLine = range.startLineNumber - deletedLines;\n        endCursor = new Selection(newStartLine, range.startColumn, newStartLine, range.startColumn);\n      } else {\n        endCursor = new Selection(range.startLineNumber, range.startColumn, range.startLineNumber, range.startColumn);\n      }\n      deletedLines += range.endLineNumber - range.startLineNumber;\n      if (range.intersectRanges(primaryCursor)) {\n        endPrimaryCursor = endCursor;\n      } else {\n        endCursorState.push(endCursor);\n      }\n    });\n    if (endPrimaryCursor) {\n      endCursorState.unshift(endPrimaryCursor);\n    }\n    return endCursorState;\n  }\n  _getRangesToDelete(editor) {\n    let selections = editor.getSelections();\n    if (selections === null) {\n      return [];\n    }\n    let rangesToDelete = selections;\n    let model = editor.getModel();\n    if (model === null) {\n      return [];\n    }\n    rangesToDelete.sort(Range.compareRangesUsingStarts);\n    rangesToDelete = rangesToDelete.map(selection => {\n      if (selection.isEmpty()) {\n        if (selection.startColumn === 1) {\n          let deleteFromLine = Math.max(1, selection.startLineNumber - 1);\n          let deleteFromColumn = selection.startLineNumber === 1 ? 1 : model.getLineContent(deleteFromLine).length + 1;\n          return new Range(deleteFromLine, deleteFromColumn, selection.startLineNumber, 1);\n        } else {\n          return new Range(selection.startLineNumber, 1, selection.startLineNumber, selection.startColumn);\n        }\n      } else {\n        return new Range(selection.startLineNumber, 1, selection.endLineNumber, selection.endColumn);\n      }\n    });\n    return rangesToDelete;\n  }\n}\nexport class DeleteAllRightAction extends AbstractDeleteAllToBoundaryAction {\n  constructor() {\n    super({\n      id: 'deleteAllRight',\n      label: nls.localize('lines.deleteAllRight', \"Delete All Right\"),\n      alias: 'Delete All Right',\n      precondition: EditorContextKeys.writable,\n      kbOpts: {\n        kbExpr: EditorContextKeys.textInputFocus,\n        primary: 0,\n        mac: {\n          primary: 256 /* WinCtrl */ | 41 /* KEY_K */,\n          secondary: [2048 /* CtrlCmd */ | 20 /* Delete */]\n        },\n        weight: 100 /* EditorContrib */\n      }\n    });\n  }\n\n  _getEndCursorState(primaryCursor, rangesToDelete) {\n    let endPrimaryCursor = null;\n    let endCursorState = [];\n    for (let i = 0, len = rangesToDelete.length, offset = 0; i < len; i++) {\n      let range = rangesToDelete[i];\n      let endCursor = new Selection(range.startLineNumber - offset, range.startColumn, range.startLineNumber - offset, range.startColumn);\n      if (range.intersectRanges(primaryCursor)) {\n        endPrimaryCursor = endCursor;\n      } else {\n        endCursorState.push(endCursor);\n      }\n    }\n    if (endPrimaryCursor) {\n      endCursorState.unshift(endPrimaryCursor);\n    }\n    return endCursorState;\n  }\n  _getRangesToDelete(editor) {\n    let model = editor.getModel();\n    if (model === null) {\n      return [];\n    }\n    let selections = editor.getSelections();\n    if (selections === null) {\n      return [];\n    }\n    let rangesToDelete = selections.map(sel => {\n      if (sel.isEmpty()) {\n        const maxColumn = model.getLineMaxColumn(sel.startLineNumber);\n        if (sel.startColumn === maxColumn) {\n          return new Range(sel.startLineNumber, sel.startColumn, sel.startLineNumber + 1, 1);\n        } else {\n          return new Range(sel.startLineNumber, sel.startColumn, sel.startLineNumber, maxColumn);\n        }\n      }\n      return sel;\n    });\n    rangesToDelete.sort(Range.compareRangesUsingStarts);\n    return rangesToDelete;\n  }\n}\nexport class JoinLinesAction extends EditorAction {\n  constructor() {\n    super({\n      id: 'editor.action.joinLines',\n      label: nls.localize('lines.joinLines', \"Join Lines\"),\n      alias: 'Join Lines',\n      precondition: EditorContextKeys.writable,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: 0,\n        mac: {\n          primary: 256 /* WinCtrl */ | 40 /* KEY_J */\n        },\n        weight: 100 /* EditorContrib */\n      }\n    });\n  }\n\n  run(_accessor, editor) {\n    let selections = editor.getSelections();\n    if (selections === null) {\n      return;\n    }\n    let primaryCursor = editor.getSelection();\n    if (primaryCursor === null) {\n      return;\n    }\n    selections.sort(Range.compareRangesUsingStarts);\n    let reducedSelections = [];\n    let lastSelection = selections.reduce((previousValue, currentValue) => {\n      if (previousValue.isEmpty()) {\n        if (previousValue.endLineNumber === currentValue.startLineNumber) {\n          if (primaryCursor.equalsSelection(previousValue)) {\n            primaryCursor = currentValue;\n          }\n          return currentValue;\n        }\n        if (currentValue.startLineNumber > previousValue.endLineNumber + 1) {\n          reducedSelections.push(previousValue);\n          return currentValue;\n        } else {\n          return new Selection(previousValue.startLineNumber, previousValue.startColumn, currentValue.endLineNumber, currentValue.endColumn);\n        }\n      } else {\n        if (currentValue.startLineNumber > previousValue.endLineNumber) {\n          reducedSelections.push(previousValue);\n          return currentValue;\n        } else {\n          return new Selection(previousValue.startLineNumber, previousValue.startColumn, currentValue.endLineNumber, currentValue.endColumn);\n        }\n      }\n    });\n    reducedSelections.push(lastSelection);\n    let model = editor.getModel();\n    if (model === null) {\n      return;\n    }\n    let edits = [];\n    let endCursorState = [];\n    let endPrimaryCursor = primaryCursor;\n    let lineOffset = 0;\n    for (let i = 0, len = reducedSelections.length; i < len; i++) {\n      let selection = reducedSelections[i];\n      let startLineNumber = selection.startLineNumber;\n      let startColumn = 1;\n      let columnDeltaOffset = 0;\n      let endLineNumber, endColumn;\n      let selectionEndPositionOffset = model.getLineContent(selection.endLineNumber).length - selection.endColumn;\n      if (selection.isEmpty() || selection.startLineNumber === selection.endLineNumber) {\n        let position = selection.getStartPosition();\n        if (position.lineNumber < model.getLineCount()) {\n          endLineNumber = startLineNumber + 1;\n          endColumn = model.getLineMaxColumn(endLineNumber);\n        } else {\n          endLineNumber = position.lineNumber;\n          endColumn = model.getLineMaxColumn(position.lineNumber);\n        }\n      } else {\n        endLineNumber = selection.endLineNumber;\n        endColumn = model.getLineMaxColumn(endLineNumber);\n      }\n      let trimmedLinesContent = model.getLineContent(startLineNumber);\n      for (let i = startLineNumber + 1; i <= endLineNumber; i++) {\n        let lineText = model.getLineContent(i);\n        let firstNonWhitespaceIdx = model.getLineFirstNonWhitespaceColumn(i);\n        if (firstNonWhitespaceIdx >= 1) {\n          let insertSpace = true;\n          if (trimmedLinesContent === '') {\n            insertSpace = false;\n          }\n          if (insertSpace && (trimmedLinesContent.charAt(trimmedLinesContent.length - 1) === ' ' || trimmedLinesContent.charAt(trimmedLinesContent.length - 1) === '\\t')) {\n            insertSpace = false;\n            trimmedLinesContent = trimmedLinesContent.replace(/[\\s\\uFEFF\\xA0]+$/g, ' ');\n          }\n          let lineTextWithoutIndent = lineText.substr(firstNonWhitespaceIdx - 1);\n          trimmedLinesContent += (insertSpace ? ' ' : '') + lineTextWithoutIndent;\n          if (insertSpace) {\n            columnDeltaOffset = lineTextWithoutIndent.length + 1;\n          } else {\n            columnDeltaOffset = lineTextWithoutIndent.length;\n          }\n        } else {\n          columnDeltaOffset = 0;\n        }\n      }\n      let deleteSelection = new Range(startLineNumber, startColumn, endLineNumber, endColumn);\n      if (!deleteSelection.isEmpty()) {\n        let resultSelection;\n        if (selection.isEmpty()) {\n          edits.push(EditOperation.replace(deleteSelection, trimmedLinesContent));\n          resultSelection = new Selection(deleteSelection.startLineNumber - lineOffset, trimmedLinesContent.length - columnDeltaOffset + 1, startLineNumber - lineOffset, trimmedLinesContent.length - columnDeltaOffset + 1);\n        } else {\n          if (selection.startLineNumber === selection.endLineNumber) {\n            edits.push(EditOperation.replace(deleteSelection, trimmedLinesContent));\n            resultSelection = new Selection(selection.startLineNumber - lineOffset, selection.startColumn, selection.endLineNumber - lineOffset, selection.endColumn);\n          } else {\n            edits.push(EditOperation.replace(deleteSelection, trimmedLinesContent));\n            resultSelection = new Selection(selection.startLineNumber - lineOffset, selection.startColumn, selection.startLineNumber - lineOffset, trimmedLinesContent.length - selectionEndPositionOffset);\n          }\n        }\n        if (Range.intersectRanges(deleteSelection, primaryCursor) !== null) {\n          endPrimaryCursor = resultSelection;\n        } else {\n          endCursorState.push(resultSelection);\n        }\n      }\n      lineOffset += deleteSelection.endLineNumber - deleteSelection.startLineNumber;\n    }\n    endCursorState.unshift(endPrimaryCursor);\n    editor.pushUndoStop();\n    editor.executeEdits(this.id, edits, endCursorState);\n    editor.pushUndoStop();\n  }\n}\nexport class TransposeAction extends EditorAction {\n  constructor() {\n    super({\n      id: 'editor.action.transpose',\n      label: nls.localize('editor.transpose', \"Transpose characters around the cursor\"),\n      alias: 'Transpose characters around the cursor',\n      precondition: EditorContextKeys.writable\n    });\n  }\n  run(_accessor, editor) {\n    let selections = editor.getSelections();\n    if (selections === null) {\n      return;\n    }\n    let model = editor.getModel();\n    if (model === null) {\n      return;\n    }\n    let commands = [];\n    for (let i = 0, len = selections.length; i < len; i++) {\n      let selection = selections[i];\n      if (!selection.isEmpty()) {\n        continue;\n      }\n      let cursor = selection.getStartPosition();\n      let maxColumn = model.getLineMaxColumn(cursor.lineNumber);\n      if (cursor.column >= maxColumn) {\n        if (cursor.lineNumber === model.getLineCount()) {\n          continue;\n        }\n        // The cursor is at the end of current line and current line is not empty\n        // then we transpose the character before the cursor and the line break if there is any following line.\n        let deleteSelection = new Range(cursor.lineNumber, Math.max(1, cursor.column - 1), cursor.lineNumber + 1, 1);\n        let chars = model.getValueInRange(deleteSelection).split('').reverse().join('');\n        commands.push(new ReplaceCommand(new Selection(cursor.lineNumber, Math.max(1, cursor.column - 1), cursor.lineNumber + 1, 1), chars));\n      } else {\n        let deleteSelection = new Range(cursor.lineNumber, Math.max(1, cursor.column - 1), cursor.lineNumber, cursor.column + 1);\n        let chars = model.getValueInRange(deleteSelection).split('').reverse().join('');\n        commands.push(new ReplaceCommandThatPreservesSelection(deleteSelection, chars, new Selection(cursor.lineNumber, cursor.column + 1, cursor.lineNumber, cursor.column + 1)));\n      }\n    }\n    editor.pushUndoStop();\n    editor.executeCommands(this.id, commands);\n    editor.pushUndoStop();\n  }\n}\nexport class AbstractCaseAction extends EditorAction {\n  run(_accessor, editor) {\n    const selections = editor.getSelections();\n    if (selections === null) {\n      return;\n    }\n    const model = editor.getModel();\n    if (model === null) {\n      return;\n    }\n    const wordSeparators = editor.getOption(110 /* wordSeparators */);\n    const textEdits = [];\n    for (const selection of selections) {\n      if (selection.isEmpty()) {\n        const cursor = selection.getStartPosition();\n        const word = editor.getConfiguredWordAtPosition(cursor);\n        if (!word) {\n          continue;\n        }\n        const wordRange = new Range(cursor.lineNumber, word.startColumn, cursor.lineNumber, word.endColumn);\n        const text = model.getValueInRange(wordRange);\n        textEdits.push(EditOperation.replace(wordRange, this._modifyText(text, wordSeparators)));\n      } else {\n        const text = model.getValueInRange(selection);\n        textEdits.push(EditOperation.replace(selection, this._modifyText(text, wordSeparators)));\n      }\n    }\n    editor.pushUndoStop();\n    editor.executeEdits(this.id, textEdits);\n    editor.pushUndoStop();\n  }\n}\nexport class UpperCaseAction extends AbstractCaseAction {\n  constructor() {\n    super({\n      id: 'editor.action.transformToUppercase',\n      label: nls.localize('editor.transformToUppercase', \"Transform to Uppercase\"),\n      alias: 'Transform to Uppercase',\n      precondition: EditorContextKeys.writable\n    });\n  }\n  _modifyText(text, wordSeparators) {\n    return text.toLocaleUpperCase();\n  }\n}\nexport class LowerCaseAction extends AbstractCaseAction {\n  constructor() {\n    super({\n      id: 'editor.action.transformToLowercase',\n      label: nls.localize('editor.transformToLowercase', \"Transform to Lowercase\"),\n      alias: 'Transform to Lowercase',\n      precondition: EditorContextKeys.writable\n    });\n  }\n  _modifyText(text, wordSeparators) {\n    return text.toLocaleLowerCase();\n  }\n}\nexport class TitleCaseAction extends AbstractCaseAction {\n  constructor() {\n    super({\n      id: 'editor.action.transformToTitlecase',\n      label: nls.localize('editor.transformToTitlecase', \"Transform to Title Case\"),\n      alias: 'Transform to Title Case',\n      precondition: EditorContextKeys.writable\n    });\n  }\n  _modifyText(text, wordSeparators) {\n    const separators = '\\r\\n\\t ' + wordSeparators;\n    const excludedChars = separators.split('');\n    let title = '';\n    let startUpperCase = true;\n    for (let i = 0; i < text.length; i++) {\n      let currentChar = text[i];\n      if (excludedChars.indexOf(currentChar) >= 0) {\n        startUpperCase = true;\n        title += currentChar;\n      } else if (startUpperCase) {\n        startUpperCase = false;\n        title += currentChar.toLocaleUpperCase();\n      } else {\n        title += currentChar.toLocaleLowerCase();\n      }\n    }\n    return title;\n  }\n}\nexport class SnakeCaseAction extends AbstractCaseAction {\n  constructor() {\n    super({\n      id: 'editor.action.transformToSnakecase',\n      label: nls.localize('editor.transformToSnakecase', \"Transform to Snake Case\"),\n      alias: 'Transform to Snake Case',\n      precondition: EditorContextKeys.writable\n    });\n  }\n  _modifyText(text, wordSeparators) {\n    return text.replace(/(\\p{Ll})(\\p{Lu})/gmu, '$1_$2').replace(/([^\\b_])(\\p{Lu})(\\p{Ll})/gmu, '$1_$2$3').toLocaleLowerCase();\n  }\n}\nregisterEditorAction(CopyLinesUpAction);\nregisterEditorAction(CopyLinesDownAction);\nregisterEditorAction(DuplicateSelectionAction);\nregisterEditorAction(MoveLinesUpAction);\nregisterEditorAction(MoveLinesDownAction);\nregisterEditorAction(SortLinesAscendingAction);\nregisterEditorAction(SortLinesDescendingAction);\nregisterEditorAction(TrimTrailingWhitespaceAction);\nregisterEditorAction(DeleteLinesAction);\nregisterEditorAction(IndentLinesAction);\nregisterEditorAction(OutdentLinesAction);\nregisterEditorAction(InsertLineBeforeAction);\nregisterEditorAction(InsertLineAfterAction);\nregisterEditorAction(DeleteAllLeftAction);\nregisterEditorAction(DeleteAllRightAction);\nregisterEditorAction(JoinLinesAction);\nregisterEditorAction(TransposeAction);\nregisterEditorAction(UpperCaseAction);\nregisterEditorAction(LowerCaseAction);\nregisterEditorAction(TitleCaseAction);\nregisterEditorAction(SnakeCaseAction);","map":{"version":3,"names":["nls","KeyChord","CoreEditingCommands","EditorAction","registerEditorAction","ReplaceCommand","ReplaceCommandThatPreservesSelection","ReplaceCommandThatSelectsText","TrimTrailingWhitespaceCommand","TypeOperations","EditOperation","Position","Range","Selection","EditorContextKeys","CopyLinesCommand","MoveLinesCommand","SortLinesCommand","MenuId","AbstractCopyLinesAction","constructor","down","opts","run","_accessor","editor","hasModel","selections","getSelections","map","selection","index","ignore","sort","a","b","compareRangesUsingStarts","prev","i","length","curr","endLineNumber","startLineNumber","commands","push","pushUndoStop","executeCommands","id","CopyLinesUpAction","label","localize","alias","precondition","writable","kbOpts","kbExpr","editorTextFocus","primary","linux","weight","menuOpts","menuId","MenubarSelectionMenu","group","title","key","comment","order","CopyLinesDownAction","DuplicateSelectionAction","accessor","args","model","getModel","isEmpty","insertSelection","endColumn","getValueInRange","AbstractMoveLinesAction","autoIndent","getOption","MoveLinesUpAction","MoveLinesDownAction","AbstractSortLinesAction","descending","canRun","len","SortLinesAscendingAction","SortLinesDescendingAction","TrimTrailingWhitespaceAction","ID","cursors","reason","s","positionLineNumber","positionColumn","getSelection","command","DeleteLinesAction","textInputFocus","ops","_getLinesToRemove","getLineCount","getLineMaxColumn","linesDeleted","edits","cursorState","op","startColumn","replace","executeEdits","operations","selectionStartColumn","mergedOperations","previousOperation","IndentLinesAction","viewModel","_getViewModel","indent","cursorConfig","OutdentLinesAction","Outdent","runEditorCommand","InsertLineBeforeAction","lineInsertBefore","InsertLineAfterAction","lineInsertAfter","AbstractDeleteAllToBoundaryAction","primaryCursor","rangesToDelete","_getRangesToDelete","effectiveRanges","count","range","nextRange","intersectRanges","plusRange","endCursorState","_getEndCursorState","DeleteAllLeftAction","mac","endPrimaryCursor","deletedLines","forEach","endCursor","newStartLine","unshift","deleteFromLine","Math","max","deleteFromColumn","getLineContent","DeleteAllRightAction","secondary","offset","sel","maxColumn","JoinLinesAction","reducedSelections","lastSelection","reduce","previousValue","currentValue","equalsSelection","lineOffset","columnDeltaOffset","selectionEndPositionOffset","position","getStartPosition","lineNumber","trimmedLinesContent","lineText","firstNonWhitespaceIdx","getLineFirstNonWhitespaceColumn","insertSpace","charAt","lineTextWithoutIndent","substr","deleteSelection","resultSelection","TransposeAction","cursor","column","chars","split","reverse","join","AbstractCaseAction","wordSeparators","textEdits","word","getConfiguredWordAtPosition","wordRange","text","_modifyText","UpperCaseAction","toLocaleUpperCase","LowerCaseAction","toLocaleLowerCase","TitleCaseAction","separators","excludedChars","startUpperCase","currentChar","indexOf","SnakeCaseAction"],"sources":["C:/Users/Administrator/Desktop/sqllineage-master/sqllineagejs/node_modules/monaco-editor/esm/vs/editor/contrib/linesOperations/linesOperations.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport * as nls from '../../../nls.js';\r\nimport { KeyChord } from '../../../base/common/keyCodes.js';\r\nimport { CoreEditingCommands } from '../../browser/controller/coreCommands.js';\r\nimport { EditorAction, registerEditorAction } from '../../browser/editorExtensions.js';\r\nimport { ReplaceCommand, ReplaceCommandThatPreservesSelection, ReplaceCommandThatSelectsText } from '../../common/commands/replaceCommand.js';\r\nimport { TrimTrailingWhitespaceCommand } from '../../common/commands/trimTrailingWhitespaceCommand.js';\r\nimport { TypeOperations } from '../../common/controller/cursorTypeOperations.js';\r\nimport { EditOperation } from '../../common/core/editOperation.js';\r\nimport { Position } from '../../common/core/position.js';\r\nimport { Range } from '../../common/core/range.js';\r\nimport { Selection } from '../../common/core/selection.js';\r\nimport { EditorContextKeys } from '../../common/editorContextKeys.js';\r\nimport { CopyLinesCommand } from './copyLinesCommand.js';\r\nimport { MoveLinesCommand } from './moveLinesCommand.js';\r\nimport { SortLinesCommand } from './sortLinesCommand.js';\r\nimport { MenuId } from '../../../platform/actions/common/actions.js';\r\n// copy lines\r\nclass AbstractCopyLinesAction extends EditorAction {\r\n    constructor(down, opts) {\r\n        super(opts);\r\n        this.down = down;\r\n    }\r\n    run(_accessor, editor) {\r\n        if (!editor.hasModel()) {\r\n            return;\r\n        }\r\n        const selections = editor.getSelections().map((selection, index) => ({ selection, index, ignore: false }));\r\n        selections.sort((a, b) => Range.compareRangesUsingStarts(a.selection, b.selection));\r\n        // Remove selections that would result in copying the same line\r\n        let prev = selections[0];\r\n        for (let i = 1; i < selections.length; i++) {\r\n            const curr = selections[i];\r\n            if (prev.selection.endLineNumber === curr.selection.startLineNumber) {\r\n                // these two selections would copy the same line\r\n                if (prev.index < curr.index) {\r\n                    // prev wins\r\n                    curr.ignore = true;\r\n                }\r\n                else {\r\n                    // curr wins\r\n                    prev.ignore = true;\r\n                    prev = curr;\r\n                }\r\n            }\r\n        }\r\n        const commands = [];\r\n        for (const selection of selections) {\r\n            commands.push(new CopyLinesCommand(selection.selection, this.down, selection.ignore));\r\n        }\r\n        editor.pushUndoStop();\r\n        editor.executeCommands(this.id, commands);\r\n        editor.pushUndoStop();\r\n    }\r\n}\r\nclass CopyLinesUpAction extends AbstractCopyLinesAction {\r\n    constructor() {\r\n        super(false, {\r\n            id: 'editor.action.copyLinesUpAction',\r\n            label: nls.localize('lines.copyUp', \"Copy Line Up\"),\r\n            alias: 'Copy Line Up',\r\n            precondition: EditorContextKeys.writable,\r\n            kbOpts: {\r\n                kbExpr: EditorContextKeys.editorTextFocus,\r\n                primary: 512 /* Alt */ | 1024 /* Shift */ | 16 /* UpArrow */,\r\n                linux: { primary: 2048 /* CtrlCmd */ | 512 /* Alt */ | 1024 /* Shift */ | 16 /* UpArrow */ },\r\n                weight: 100 /* EditorContrib */\r\n            },\r\n            menuOpts: {\r\n                menuId: MenuId.MenubarSelectionMenu,\r\n                group: '2_line',\r\n                title: nls.localize({ key: 'miCopyLinesUp', comment: ['&& denotes a mnemonic'] }, \"&&Copy Line Up\"),\r\n                order: 1\r\n            }\r\n        });\r\n    }\r\n}\r\nclass CopyLinesDownAction extends AbstractCopyLinesAction {\r\n    constructor() {\r\n        super(true, {\r\n            id: 'editor.action.copyLinesDownAction',\r\n            label: nls.localize('lines.copyDown', \"Copy Line Down\"),\r\n            alias: 'Copy Line Down',\r\n            precondition: EditorContextKeys.writable,\r\n            kbOpts: {\r\n                kbExpr: EditorContextKeys.editorTextFocus,\r\n                primary: 512 /* Alt */ | 1024 /* Shift */ | 18 /* DownArrow */,\r\n                linux: { primary: 2048 /* CtrlCmd */ | 512 /* Alt */ | 1024 /* Shift */ | 18 /* DownArrow */ },\r\n                weight: 100 /* EditorContrib */\r\n            },\r\n            menuOpts: {\r\n                menuId: MenuId.MenubarSelectionMenu,\r\n                group: '2_line',\r\n                title: nls.localize({ key: 'miCopyLinesDown', comment: ['&& denotes a mnemonic'] }, \"Co&&py Line Down\"),\r\n                order: 2\r\n            }\r\n        });\r\n    }\r\n}\r\nexport class DuplicateSelectionAction extends EditorAction {\r\n    constructor() {\r\n        super({\r\n            id: 'editor.action.duplicateSelection',\r\n            label: nls.localize('duplicateSelection', \"Duplicate Selection\"),\r\n            alias: 'Duplicate Selection',\r\n            precondition: EditorContextKeys.writable,\r\n            menuOpts: {\r\n                menuId: MenuId.MenubarSelectionMenu,\r\n                group: '2_line',\r\n                title: nls.localize({ key: 'miDuplicateSelection', comment: ['&& denotes a mnemonic'] }, \"&&Duplicate Selection\"),\r\n                order: 5\r\n            }\r\n        });\r\n    }\r\n    run(accessor, editor, args) {\r\n        if (!editor.hasModel()) {\r\n            return;\r\n        }\r\n        const commands = [];\r\n        const selections = editor.getSelections();\r\n        const model = editor.getModel();\r\n        for (const selection of selections) {\r\n            if (selection.isEmpty()) {\r\n                commands.push(new CopyLinesCommand(selection, true));\r\n            }\r\n            else {\r\n                const insertSelection = new Selection(selection.endLineNumber, selection.endColumn, selection.endLineNumber, selection.endColumn);\r\n                commands.push(new ReplaceCommandThatSelectsText(insertSelection, model.getValueInRange(selection)));\r\n            }\r\n        }\r\n        editor.pushUndoStop();\r\n        editor.executeCommands(this.id, commands);\r\n        editor.pushUndoStop();\r\n    }\r\n}\r\n// move lines\r\nclass AbstractMoveLinesAction extends EditorAction {\r\n    constructor(down, opts) {\r\n        super(opts);\r\n        this.down = down;\r\n    }\r\n    run(_accessor, editor) {\r\n        let commands = [];\r\n        let selections = editor.getSelections() || [];\r\n        const autoIndent = editor.getOption(8 /* autoIndent */);\r\n        for (const selection of selections) {\r\n            commands.push(new MoveLinesCommand(selection, this.down, autoIndent));\r\n        }\r\n        editor.pushUndoStop();\r\n        editor.executeCommands(this.id, commands);\r\n        editor.pushUndoStop();\r\n    }\r\n}\r\nclass MoveLinesUpAction extends AbstractMoveLinesAction {\r\n    constructor() {\r\n        super(false, {\r\n            id: 'editor.action.moveLinesUpAction',\r\n            label: nls.localize('lines.moveUp', \"Move Line Up\"),\r\n            alias: 'Move Line Up',\r\n            precondition: EditorContextKeys.writable,\r\n            kbOpts: {\r\n                kbExpr: EditorContextKeys.editorTextFocus,\r\n                primary: 512 /* Alt */ | 16 /* UpArrow */,\r\n                linux: { primary: 512 /* Alt */ | 16 /* UpArrow */ },\r\n                weight: 100 /* EditorContrib */\r\n            },\r\n            menuOpts: {\r\n                menuId: MenuId.MenubarSelectionMenu,\r\n                group: '2_line',\r\n                title: nls.localize({ key: 'miMoveLinesUp', comment: ['&& denotes a mnemonic'] }, \"Mo&&ve Line Up\"),\r\n                order: 3\r\n            }\r\n        });\r\n    }\r\n}\r\nclass MoveLinesDownAction extends AbstractMoveLinesAction {\r\n    constructor() {\r\n        super(true, {\r\n            id: 'editor.action.moveLinesDownAction',\r\n            label: nls.localize('lines.moveDown', \"Move Line Down\"),\r\n            alias: 'Move Line Down',\r\n            precondition: EditorContextKeys.writable,\r\n            kbOpts: {\r\n                kbExpr: EditorContextKeys.editorTextFocus,\r\n                primary: 512 /* Alt */ | 18 /* DownArrow */,\r\n                linux: { primary: 512 /* Alt */ | 18 /* DownArrow */ },\r\n                weight: 100 /* EditorContrib */\r\n            },\r\n            menuOpts: {\r\n                menuId: MenuId.MenubarSelectionMenu,\r\n                group: '2_line',\r\n                title: nls.localize({ key: 'miMoveLinesDown', comment: ['&& denotes a mnemonic'] }, \"Move &&Line Down\"),\r\n                order: 4\r\n            }\r\n        });\r\n    }\r\n}\r\nexport class AbstractSortLinesAction extends EditorAction {\r\n    constructor(descending, opts) {\r\n        super(opts);\r\n        this.descending = descending;\r\n    }\r\n    run(_accessor, editor) {\r\n        const selections = editor.getSelections() || [];\r\n        for (const selection of selections) {\r\n            if (!SortLinesCommand.canRun(editor.getModel(), selection, this.descending)) {\r\n                return;\r\n            }\r\n        }\r\n        let commands = [];\r\n        for (let i = 0, len = selections.length; i < len; i++) {\r\n            commands[i] = new SortLinesCommand(selections[i], this.descending);\r\n        }\r\n        editor.pushUndoStop();\r\n        editor.executeCommands(this.id, commands);\r\n        editor.pushUndoStop();\r\n    }\r\n}\r\nexport class SortLinesAscendingAction extends AbstractSortLinesAction {\r\n    constructor() {\r\n        super(false, {\r\n            id: 'editor.action.sortLinesAscending',\r\n            label: nls.localize('lines.sortAscending', \"Sort Lines Ascending\"),\r\n            alias: 'Sort Lines Ascending',\r\n            precondition: EditorContextKeys.writable\r\n        });\r\n    }\r\n}\r\nexport class SortLinesDescendingAction extends AbstractSortLinesAction {\r\n    constructor() {\r\n        super(true, {\r\n            id: 'editor.action.sortLinesDescending',\r\n            label: nls.localize('lines.sortDescending', \"Sort Lines Descending\"),\r\n            alias: 'Sort Lines Descending',\r\n            precondition: EditorContextKeys.writable\r\n        });\r\n    }\r\n}\r\nexport class TrimTrailingWhitespaceAction extends EditorAction {\r\n    constructor() {\r\n        super({\r\n            id: TrimTrailingWhitespaceAction.ID,\r\n            label: nls.localize('lines.trimTrailingWhitespace', \"Trim Trailing Whitespace\"),\r\n            alias: 'Trim Trailing Whitespace',\r\n            precondition: EditorContextKeys.writable,\r\n            kbOpts: {\r\n                kbExpr: EditorContextKeys.editorTextFocus,\r\n                primary: KeyChord(2048 /* CtrlCmd */ | 41 /* KEY_K */, 2048 /* CtrlCmd */ | 54 /* KEY_X */),\r\n                weight: 100 /* EditorContrib */\r\n            }\r\n        });\r\n    }\r\n    run(_accessor, editor, args) {\r\n        let cursors = [];\r\n        if (args.reason === 'auto-save') {\r\n            // See https://github.com/editorconfig/editorconfig-vscode/issues/47\r\n            // It is very convenient for the editor config extension to invoke this action.\r\n            // So, if we get a reason:'auto-save' passed in, let's preserve cursor positions.\r\n            cursors = (editor.getSelections() || []).map(s => new Position(s.positionLineNumber, s.positionColumn));\r\n        }\r\n        let selection = editor.getSelection();\r\n        if (selection === null) {\r\n            return;\r\n        }\r\n        let command = new TrimTrailingWhitespaceCommand(selection, cursors);\r\n        editor.pushUndoStop();\r\n        editor.executeCommands(this.id, [command]);\r\n        editor.pushUndoStop();\r\n    }\r\n}\r\nTrimTrailingWhitespaceAction.ID = 'editor.action.trimTrailingWhitespace';\r\nexport class DeleteLinesAction extends EditorAction {\r\n    constructor() {\r\n        super({\r\n            id: 'editor.action.deleteLines',\r\n            label: nls.localize('lines.delete', \"Delete Line\"),\r\n            alias: 'Delete Line',\r\n            precondition: EditorContextKeys.writable,\r\n            kbOpts: {\r\n                kbExpr: EditorContextKeys.textInputFocus,\r\n                primary: 2048 /* CtrlCmd */ | 1024 /* Shift */ | 41 /* KEY_K */,\r\n                weight: 100 /* EditorContrib */\r\n            }\r\n        });\r\n    }\r\n    run(_accessor, editor) {\r\n        if (!editor.hasModel()) {\r\n            return;\r\n        }\r\n        let ops = this._getLinesToRemove(editor);\r\n        let model = editor.getModel();\r\n        if (model.getLineCount() === 1 && model.getLineMaxColumn(1) === 1) {\r\n            // Model is empty\r\n            return;\r\n        }\r\n        let linesDeleted = 0;\r\n        let edits = [];\r\n        let cursorState = [];\r\n        for (let i = 0, len = ops.length; i < len; i++) {\r\n            const op = ops[i];\r\n            let startLineNumber = op.startLineNumber;\r\n            let endLineNumber = op.endLineNumber;\r\n            let startColumn = 1;\r\n            let endColumn = model.getLineMaxColumn(endLineNumber);\r\n            if (endLineNumber < model.getLineCount()) {\r\n                endLineNumber += 1;\r\n                endColumn = 1;\r\n            }\r\n            else if (startLineNumber > 1) {\r\n                startLineNumber -= 1;\r\n                startColumn = model.getLineMaxColumn(startLineNumber);\r\n            }\r\n            edits.push(EditOperation.replace(new Selection(startLineNumber, startColumn, endLineNumber, endColumn), ''));\r\n            cursorState.push(new Selection(startLineNumber - linesDeleted, op.positionColumn, startLineNumber - linesDeleted, op.positionColumn));\r\n            linesDeleted += (op.endLineNumber - op.startLineNumber + 1);\r\n        }\r\n        editor.pushUndoStop();\r\n        editor.executeEdits(this.id, edits, cursorState);\r\n        editor.pushUndoStop();\r\n    }\r\n    _getLinesToRemove(editor) {\r\n        // Construct delete operations\r\n        let operations = editor.getSelections().map((s) => {\r\n            let endLineNumber = s.endLineNumber;\r\n            if (s.startLineNumber < s.endLineNumber && s.endColumn === 1) {\r\n                endLineNumber -= 1;\r\n            }\r\n            return {\r\n                startLineNumber: s.startLineNumber,\r\n                selectionStartColumn: s.selectionStartColumn,\r\n                endLineNumber: endLineNumber,\r\n                positionColumn: s.positionColumn\r\n            };\r\n        });\r\n        // Sort delete operations\r\n        operations.sort((a, b) => {\r\n            if (a.startLineNumber === b.startLineNumber) {\r\n                return a.endLineNumber - b.endLineNumber;\r\n            }\r\n            return a.startLineNumber - b.startLineNumber;\r\n        });\r\n        // Merge delete operations which are adjacent or overlapping\r\n        let mergedOperations = [];\r\n        let previousOperation = operations[0];\r\n        for (let i = 1; i < operations.length; i++) {\r\n            if (previousOperation.endLineNumber + 1 >= operations[i].startLineNumber) {\r\n                // Merge current operations into the previous one\r\n                previousOperation.endLineNumber = operations[i].endLineNumber;\r\n            }\r\n            else {\r\n                // Push previous operation\r\n                mergedOperations.push(previousOperation);\r\n                previousOperation = operations[i];\r\n            }\r\n        }\r\n        // Push the last operation\r\n        mergedOperations.push(previousOperation);\r\n        return mergedOperations;\r\n    }\r\n}\r\nexport class IndentLinesAction extends EditorAction {\r\n    constructor() {\r\n        super({\r\n            id: 'editor.action.indentLines',\r\n            label: nls.localize('lines.indent', \"Indent Line\"),\r\n            alias: 'Indent Line',\r\n            precondition: EditorContextKeys.writable,\r\n            kbOpts: {\r\n                kbExpr: EditorContextKeys.editorTextFocus,\r\n                primary: 2048 /* CtrlCmd */ | 89 /* US_CLOSE_SQUARE_BRACKET */,\r\n                weight: 100 /* EditorContrib */\r\n            }\r\n        });\r\n    }\r\n    run(_accessor, editor) {\r\n        const viewModel = editor._getViewModel();\r\n        if (!viewModel) {\r\n            return;\r\n        }\r\n        editor.pushUndoStop();\r\n        editor.executeCommands(this.id, TypeOperations.indent(viewModel.cursorConfig, editor.getModel(), editor.getSelections()));\r\n        editor.pushUndoStop();\r\n    }\r\n}\r\nclass OutdentLinesAction extends EditorAction {\r\n    constructor() {\r\n        super({\r\n            id: 'editor.action.outdentLines',\r\n            label: nls.localize('lines.outdent', \"Outdent Line\"),\r\n            alias: 'Outdent Line',\r\n            precondition: EditorContextKeys.writable,\r\n            kbOpts: {\r\n                kbExpr: EditorContextKeys.editorTextFocus,\r\n                primary: 2048 /* CtrlCmd */ | 87 /* US_OPEN_SQUARE_BRACKET */,\r\n                weight: 100 /* EditorContrib */\r\n            }\r\n        });\r\n    }\r\n    run(_accessor, editor) {\r\n        CoreEditingCommands.Outdent.runEditorCommand(_accessor, editor, null);\r\n    }\r\n}\r\nexport class InsertLineBeforeAction extends EditorAction {\r\n    constructor() {\r\n        super({\r\n            id: 'editor.action.insertLineBefore',\r\n            label: nls.localize('lines.insertBefore', \"Insert Line Above\"),\r\n            alias: 'Insert Line Above',\r\n            precondition: EditorContextKeys.writable,\r\n            kbOpts: {\r\n                kbExpr: EditorContextKeys.editorTextFocus,\r\n                primary: 2048 /* CtrlCmd */ | 1024 /* Shift */ | 3 /* Enter */,\r\n                weight: 100 /* EditorContrib */\r\n            }\r\n        });\r\n    }\r\n    run(_accessor, editor) {\r\n        const viewModel = editor._getViewModel();\r\n        if (!viewModel) {\r\n            return;\r\n        }\r\n        editor.pushUndoStop();\r\n        editor.executeCommands(this.id, TypeOperations.lineInsertBefore(viewModel.cursorConfig, editor.getModel(), editor.getSelections()));\r\n    }\r\n}\r\nexport class InsertLineAfterAction extends EditorAction {\r\n    constructor() {\r\n        super({\r\n            id: 'editor.action.insertLineAfter',\r\n            label: nls.localize('lines.insertAfter', \"Insert Line Below\"),\r\n            alias: 'Insert Line Below',\r\n            precondition: EditorContextKeys.writable,\r\n            kbOpts: {\r\n                kbExpr: EditorContextKeys.editorTextFocus,\r\n                primary: 2048 /* CtrlCmd */ | 3 /* Enter */,\r\n                weight: 100 /* EditorContrib */\r\n            }\r\n        });\r\n    }\r\n    run(_accessor, editor) {\r\n        const viewModel = editor._getViewModel();\r\n        if (!viewModel) {\r\n            return;\r\n        }\r\n        editor.pushUndoStop();\r\n        editor.executeCommands(this.id, TypeOperations.lineInsertAfter(viewModel.cursorConfig, editor.getModel(), editor.getSelections()));\r\n    }\r\n}\r\nexport class AbstractDeleteAllToBoundaryAction extends EditorAction {\r\n    run(_accessor, editor) {\r\n        if (!editor.hasModel()) {\r\n            return;\r\n        }\r\n        const primaryCursor = editor.getSelection();\r\n        let rangesToDelete = this._getRangesToDelete(editor);\r\n        // merge overlapping selections\r\n        let effectiveRanges = [];\r\n        for (let i = 0, count = rangesToDelete.length - 1; i < count; i++) {\r\n            let range = rangesToDelete[i];\r\n            let nextRange = rangesToDelete[i + 1];\r\n            if (Range.intersectRanges(range, nextRange) === null) {\r\n                effectiveRanges.push(range);\r\n            }\r\n            else {\r\n                rangesToDelete[i + 1] = Range.plusRange(range, nextRange);\r\n            }\r\n        }\r\n        effectiveRanges.push(rangesToDelete[rangesToDelete.length - 1]);\r\n        let endCursorState = this._getEndCursorState(primaryCursor, effectiveRanges);\r\n        let edits = effectiveRanges.map(range => {\r\n            return EditOperation.replace(range, '');\r\n        });\r\n        editor.pushUndoStop();\r\n        editor.executeEdits(this.id, edits, endCursorState);\r\n        editor.pushUndoStop();\r\n    }\r\n}\r\nexport class DeleteAllLeftAction extends AbstractDeleteAllToBoundaryAction {\r\n    constructor() {\r\n        super({\r\n            id: 'deleteAllLeft',\r\n            label: nls.localize('lines.deleteAllLeft', \"Delete All Left\"),\r\n            alias: 'Delete All Left',\r\n            precondition: EditorContextKeys.writable,\r\n            kbOpts: {\r\n                kbExpr: EditorContextKeys.textInputFocus,\r\n                primary: 0,\r\n                mac: { primary: 2048 /* CtrlCmd */ | 1 /* Backspace */ },\r\n                weight: 100 /* EditorContrib */\r\n            }\r\n        });\r\n    }\r\n    _getEndCursorState(primaryCursor, rangesToDelete) {\r\n        let endPrimaryCursor = null;\r\n        let endCursorState = [];\r\n        let deletedLines = 0;\r\n        rangesToDelete.forEach(range => {\r\n            let endCursor;\r\n            if (range.endColumn === 1 && deletedLines > 0) {\r\n                let newStartLine = range.startLineNumber - deletedLines;\r\n                endCursor = new Selection(newStartLine, range.startColumn, newStartLine, range.startColumn);\r\n            }\r\n            else {\r\n                endCursor = new Selection(range.startLineNumber, range.startColumn, range.startLineNumber, range.startColumn);\r\n            }\r\n            deletedLines += range.endLineNumber - range.startLineNumber;\r\n            if (range.intersectRanges(primaryCursor)) {\r\n                endPrimaryCursor = endCursor;\r\n            }\r\n            else {\r\n                endCursorState.push(endCursor);\r\n            }\r\n        });\r\n        if (endPrimaryCursor) {\r\n            endCursorState.unshift(endPrimaryCursor);\r\n        }\r\n        return endCursorState;\r\n    }\r\n    _getRangesToDelete(editor) {\r\n        let selections = editor.getSelections();\r\n        if (selections === null) {\r\n            return [];\r\n        }\r\n        let rangesToDelete = selections;\r\n        let model = editor.getModel();\r\n        if (model === null) {\r\n            return [];\r\n        }\r\n        rangesToDelete.sort(Range.compareRangesUsingStarts);\r\n        rangesToDelete = rangesToDelete.map(selection => {\r\n            if (selection.isEmpty()) {\r\n                if (selection.startColumn === 1) {\r\n                    let deleteFromLine = Math.max(1, selection.startLineNumber - 1);\r\n                    let deleteFromColumn = selection.startLineNumber === 1 ? 1 : model.getLineContent(deleteFromLine).length + 1;\r\n                    return new Range(deleteFromLine, deleteFromColumn, selection.startLineNumber, 1);\r\n                }\r\n                else {\r\n                    return new Range(selection.startLineNumber, 1, selection.startLineNumber, selection.startColumn);\r\n                }\r\n            }\r\n            else {\r\n                return new Range(selection.startLineNumber, 1, selection.endLineNumber, selection.endColumn);\r\n            }\r\n        });\r\n        return rangesToDelete;\r\n    }\r\n}\r\nexport class DeleteAllRightAction extends AbstractDeleteAllToBoundaryAction {\r\n    constructor() {\r\n        super({\r\n            id: 'deleteAllRight',\r\n            label: nls.localize('lines.deleteAllRight', \"Delete All Right\"),\r\n            alias: 'Delete All Right',\r\n            precondition: EditorContextKeys.writable,\r\n            kbOpts: {\r\n                kbExpr: EditorContextKeys.textInputFocus,\r\n                primary: 0,\r\n                mac: { primary: 256 /* WinCtrl */ | 41 /* KEY_K */, secondary: [2048 /* CtrlCmd */ | 20 /* Delete */] },\r\n                weight: 100 /* EditorContrib */\r\n            }\r\n        });\r\n    }\r\n    _getEndCursorState(primaryCursor, rangesToDelete) {\r\n        let endPrimaryCursor = null;\r\n        let endCursorState = [];\r\n        for (let i = 0, len = rangesToDelete.length, offset = 0; i < len; i++) {\r\n            let range = rangesToDelete[i];\r\n            let endCursor = new Selection(range.startLineNumber - offset, range.startColumn, range.startLineNumber - offset, range.startColumn);\r\n            if (range.intersectRanges(primaryCursor)) {\r\n                endPrimaryCursor = endCursor;\r\n            }\r\n            else {\r\n                endCursorState.push(endCursor);\r\n            }\r\n        }\r\n        if (endPrimaryCursor) {\r\n            endCursorState.unshift(endPrimaryCursor);\r\n        }\r\n        return endCursorState;\r\n    }\r\n    _getRangesToDelete(editor) {\r\n        let model = editor.getModel();\r\n        if (model === null) {\r\n            return [];\r\n        }\r\n        let selections = editor.getSelections();\r\n        if (selections === null) {\r\n            return [];\r\n        }\r\n        let rangesToDelete = selections.map((sel) => {\r\n            if (sel.isEmpty()) {\r\n                const maxColumn = model.getLineMaxColumn(sel.startLineNumber);\r\n                if (sel.startColumn === maxColumn) {\r\n                    return new Range(sel.startLineNumber, sel.startColumn, sel.startLineNumber + 1, 1);\r\n                }\r\n                else {\r\n                    return new Range(sel.startLineNumber, sel.startColumn, sel.startLineNumber, maxColumn);\r\n                }\r\n            }\r\n            return sel;\r\n        });\r\n        rangesToDelete.sort(Range.compareRangesUsingStarts);\r\n        return rangesToDelete;\r\n    }\r\n}\r\nexport class JoinLinesAction extends EditorAction {\r\n    constructor() {\r\n        super({\r\n            id: 'editor.action.joinLines',\r\n            label: nls.localize('lines.joinLines', \"Join Lines\"),\r\n            alias: 'Join Lines',\r\n            precondition: EditorContextKeys.writable,\r\n            kbOpts: {\r\n                kbExpr: EditorContextKeys.editorTextFocus,\r\n                primary: 0,\r\n                mac: { primary: 256 /* WinCtrl */ | 40 /* KEY_J */ },\r\n                weight: 100 /* EditorContrib */\r\n            }\r\n        });\r\n    }\r\n    run(_accessor, editor) {\r\n        let selections = editor.getSelections();\r\n        if (selections === null) {\r\n            return;\r\n        }\r\n        let primaryCursor = editor.getSelection();\r\n        if (primaryCursor === null) {\r\n            return;\r\n        }\r\n        selections.sort(Range.compareRangesUsingStarts);\r\n        let reducedSelections = [];\r\n        let lastSelection = selections.reduce((previousValue, currentValue) => {\r\n            if (previousValue.isEmpty()) {\r\n                if (previousValue.endLineNumber === currentValue.startLineNumber) {\r\n                    if (primaryCursor.equalsSelection(previousValue)) {\r\n                        primaryCursor = currentValue;\r\n                    }\r\n                    return currentValue;\r\n                }\r\n                if (currentValue.startLineNumber > previousValue.endLineNumber + 1) {\r\n                    reducedSelections.push(previousValue);\r\n                    return currentValue;\r\n                }\r\n                else {\r\n                    return new Selection(previousValue.startLineNumber, previousValue.startColumn, currentValue.endLineNumber, currentValue.endColumn);\r\n                }\r\n            }\r\n            else {\r\n                if (currentValue.startLineNumber > previousValue.endLineNumber) {\r\n                    reducedSelections.push(previousValue);\r\n                    return currentValue;\r\n                }\r\n                else {\r\n                    return new Selection(previousValue.startLineNumber, previousValue.startColumn, currentValue.endLineNumber, currentValue.endColumn);\r\n                }\r\n            }\r\n        });\r\n        reducedSelections.push(lastSelection);\r\n        let model = editor.getModel();\r\n        if (model === null) {\r\n            return;\r\n        }\r\n        let edits = [];\r\n        let endCursorState = [];\r\n        let endPrimaryCursor = primaryCursor;\r\n        let lineOffset = 0;\r\n        for (let i = 0, len = reducedSelections.length; i < len; i++) {\r\n            let selection = reducedSelections[i];\r\n            let startLineNumber = selection.startLineNumber;\r\n            let startColumn = 1;\r\n            let columnDeltaOffset = 0;\r\n            let endLineNumber, endColumn;\r\n            let selectionEndPositionOffset = model.getLineContent(selection.endLineNumber).length - selection.endColumn;\r\n            if (selection.isEmpty() || selection.startLineNumber === selection.endLineNumber) {\r\n                let position = selection.getStartPosition();\r\n                if (position.lineNumber < model.getLineCount()) {\r\n                    endLineNumber = startLineNumber + 1;\r\n                    endColumn = model.getLineMaxColumn(endLineNumber);\r\n                }\r\n                else {\r\n                    endLineNumber = position.lineNumber;\r\n                    endColumn = model.getLineMaxColumn(position.lineNumber);\r\n                }\r\n            }\r\n            else {\r\n                endLineNumber = selection.endLineNumber;\r\n                endColumn = model.getLineMaxColumn(endLineNumber);\r\n            }\r\n            let trimmedLinesContent = model.getLineContent(startLineNumber);\r\n            for (let i = startLineNumber + 1; i <= endLineNumber; i++) {\r\n                let lineText = model.getLineContent(i);\r\n                let firstNonWhitespaceIdx = model.getLineFirstNonWhitespaceColumn(i);\r\n                if (firstNonWhitespaceIdx >= 1) {\r\n                    let insertSpace = true;\r\n                    if (trimmedLinesContent === '') {\r\n                        insertSpace = false;\r\n                    }\r\n                    if (insertSpace && (trimmedLinesContent.charAt(trimmedLinesContent.length - 1) === ' ' ||\r\n                        trimmedLinesContent.charAt(trimmedLinesContent.length - 1) === '\\t')) {\r\n                        insertSpace = false;\r\n                        trimmedLinesContent = trimmedLinesContent.replace(/[\\s\\uFEFF\\xA0]+$/g, ' ');\r\n                    }\r\n                    let lineTextWithoutIndent = lineText.substr(firstNonWhitespaceIdx - 1);\r\n                    trimmedLinesContent += (insertSpace ? ' ' : '') + lineTextWithoutIndent;\r\n                    if (insertSpace) {\r\n                        columnDeltaOffset = lineTextWithoutIndent.length + 1;\r\n                    }\r\n                    else {\r\n                        columnDeltaOffset = lineTextWithoutIndent.length;\r\n                    }\r\n                }\r\n                else {\r\n                    columnDeltaOffset = 0;\r\n                }\r\n            }\r\n            let deleteSelection = new Range(startLineNumber, startColumn, endLineNumber, endColumn);\r\n            if (!deleteSelection.isEmpty()) {\r\n                let resultSelection;\r\n                if (selection.isEmpty()) {\r\n                    edits.push(EditOperation.replace(deleteSelection, trimmedLinesContent));\r\n                    resultSelection = new Selection(deleteSelection.startLineNumber - lineOffset, trimmedLinesContent.length - columnDeltaOffset + 1, startLineNumber - lineOffset, trimmedLinesContent.length - columnDeltaOffset + 1);\r\n                }\r\n                else {\r\n                    if (selection.startLineNumber === selection.endLineNumber) {\r\n                        edits.push(EditOperation.replace(deleteSelection, trimmedLinesContent));\r\n                        resultSelection = new Selection(selection.startLineNumber - lineOffset, selection.startColumn, selection.endLineNumber - lineOffset, selection.endColumn);\r\n                    }\r\n                    else {\r\n                        edits.push(EditOperation.replace(deleteSelection, trimmedLinesContent));\r\n                        resultSelection = new Selection(selection.startLineNumber - lineOffset, selection.startColumn, selection.startLineNumber - lineOffset, trimmedLinesContent.length - selectionEndPositionOffset);\r\n                    }\r\n                }\r\n                if (Range.intersectRanges(deleteSelection, primaryCursor) !== null) {\r\n                    endPrimaryCursor = resultSelection;\r\n                }\r\n                else {\r\n                    endCursorState.push(resultSelection);\r\n                }\r\n            }\r\n            lineOffset += deleteSelection.endLineNumber - deleteSelection.startLineNumber;\r\n        }\r\n        endCursorState.unshift(endPrimaryCursor);\r\n        editor.pushUndoStop();\r\n        editor.executeEdits(this.id, edits, endCursorState);\r\n        editor.pushUndoStop();\r\n    }\r\n}\r\nexport class TransposeAction extends EditorAction {\r\n    constructor() {\r\n        super({\r\n            id: 'editor.action.transpose',\r\n            label: nls.localize('editor.transpose', \"Transpose characters around the cursor\"),\r\n            alias: 'Transpose characters around the cursor',\r\n            precondition: EditorContextKeys.writable\r\n        });\r\n    }\r\n    run(_accessor, editor) {\r\n        let selections = editor.getSelections();\r\n        if (selections === null) {\r\n            return;\r\n        }\r\n        let model = editor.getModel();\r\n        if (model === null) {\r\n            return;\r\n        }\r\n        let commands = [];\r\n        for (let i = 0, len = selections.length; i < len; i++) {\r\n            let selection = selections[i];\r\n            if (!selection.isEmpty()) {\r\n                continue;\r\n            }\r\n            let cursor = selection.getStartPosition();\r\n            let maxColumn = model.getLineMaxColumn(cursor.lineNumber);\r\n            if (cursor.column >= maxColumn) {\r\n                if (cursor.lineNumber === model.getLineCount()) {\r\n                    continue;\r\n                }\r\n                // The cursor is at the end of current line and current line is not empty\r\n                // then we transpose the character before the cursor and the line break if there is any following line.\r\n                let deleteSelection = new Range(cursor.lineNumber, Math.max(1, cursor.column - 1), cursor.lineNumber + 1, 1);\r\n                let chars = model.getValueInRange(deleteSelection).split('').reverse().join('');\r\n                commands.push(new ReplaceCommand(new Selection(cursor.lineNumber, Math.max(1, cursor.column - 1), cursor.lineNumber + 1, 1), chars));\r\n            }\r\n            else {\r\n                let deleteSelection = new Range(cursor.lineNumber, Math.max(1, cursor.column - 1), cursor.lineNumber, cursor.column + 1);\r\n                let chars = model.getValueInRange(deleteSelection).split('').reverse().join('');\r\n                commands.push(new ReplaceCommandThatPreservesSelection(deleteSelection, chars, new Selection(cursor.lineNumber, cursor.column + 1, cursor.lineNumber, cursor.column + 1)));\r\n            }\r\n        }\r\n        editor.pushUndoStop();\r\n        editor.executeCommands(this.id, commands);\r\n        editor.pushUndoStop();\r\n    }\r\n}\r\nexport class AbstractCaseAction extends EditorAction {\r\n    run(_accessor, editor) {\r\n        const selections = editor.getSelections();\r\n        if (selections === null) {\r\n            return;\r\n        }\r\n        const model = editor.getModel();\r\n        if (model === null) {\r\n            return;\r\n        }\r\n        const wordSeparators = editor.getOption(110 /* wordSeparators */);\r\n        const textEdits = [];\r\n        for (const selection of selections) {\r\n            if (selection.isEmpty()) {\r\n                const cursor = selection.getStartPosition();\r\n                const word = editor.getConfiguredWordAtPosition(cursor);\r\n                if (!word) {\r\n                    continue;\r\n                }\r\n                const wordRange = new Range(cursor.lineNumber, word.startColumn, cursor.lineNumber, word.endColumn);\r\n                const text = model.getValueInRange(wordRange);\r\n                textEdits.push(EditOperation.replace(wordRange, this._modifyText(text, wordSeparators)));\r\n            }\r\n            else {\r\n                const text = model.getValueInRange(selection);\r\n                textEdits.push(EditOperation.replace(selection, this._modifyText(text, wordSeparators)));\r\n            }\r\n        }\r\n        editor.pushUndoStop();\r\n        editor.executeEdits(this.id, textEdits);\r\n        editor.pushUndoStop();\r\n    }\r\n}\r\nexport class UpperCaseAction extends AbstractCaseAction {\r\n    constructor() {\r\n        super({\r\n            id: 'editor.action.transformToUppercase',\r\n            label: nls.localize('editor.transformToUppercase', \"Transform to Uppercase\"),\r\n            alias: 'Transform to Uppercase',\r\n            precondition: EditorContextKeys.writable\r\n        });\r\n    }\r\n    _modifyText(text, wordSeparators) {\r\n        return text.toLocaleUpperCase();\r\n    }\r\n}\r\nexport class LowerCaseAction extends AbstractCaseAction {\r\n    constructor() {\r\n        super({\r\n            id: 'editor.action.transformToLowercase',\r\n            label: nls.localize('editor.transformToLowercase', \"Transform to Lowercase\"),\r\n            alias: 'Transform to Lowercase',\r\n            precondition: EditorContextKeys.writable\r\n        });\r\n    }\r\n    _modifyText(text, wordSeparators) {\r\n        return text.toLocaleLowerCase();\r\n    }\r\n}\r\nexport class TitleCaseAction extends AbstractCaseAction {\r\n    constructor() {\r\n        super({\r\n            id: 'editor.action.transformToTitlecase',\r\n            label: nls.localize('editor.transformToTitlecase', \"Transform to Title Case\"),\r\n            alias: 'Transform to Title Case',\r\n            precondition: EditorContextKeys.writable\r\n        });\r\n    }\r\n    _modifyText(text, wordSeparators) {\r\n        const separators = '\\r\\n\\t ' + wordSeparators;\r\n        const excludedChars = separators.split('');\r\n        let title = '';\r\n        let startUpperCase = true;\r\n        for (let i = 0; i < text.length; i++) {\r\n            let currentChar = text[i];\r\n            if (excludedChars.indexOf(currentChar) >= 0) {\r\n                startUpperCase = true;\r\n                title += currentChar;\r\n            }\r\n            else if (startUpperCase) {\r\n                startUpperCase = false;\r\n                title += currentChar.toLocaleUpperCase();\r\n            }\r\n            else {\r\n                title += currentChar.toLocaleLowerCase();\r\n            }\r\n        }\r\n        return title;\r\n    }\r\n}\r\nexport class SnakeCaseAction extends AbstractCaseAction {\r\n    constructor() {\r\n        super({\r\n            id: 'editor.action.transformToSnakecase',\r\n            label: nls.localize('editor.transformToSnakecase', \"Transform to Snake Case\"),\r\n            alias: 'Transform to Snake Case',\r\n            precondition: EditorContextKeys.writable\r\n        });\r\n    }\r\n    _modifyText(text, wordSeparators) {\r\n        return (text\r\n            .replace(/(\\p{Ll})(\\p{Lu})/gmu, '$1_$2')\r\n            .replace(/([^\\b_])(\\p{Lu})(\\p{Ll})/gmu, '$1_$2$3')\r\n            .toLocaleLowerCase());\r\n    }\r\n}\r\nregisterEditorAction(CopyLinesUpAction);\r\nregisterEditorAction(CopyLinesDownAction);\r\nregisterEditorAction(DuplicateSelectionAction);\r\nregisterEditorAction(MoveLinesUpAction);\r\nregisterEditorAction(MoveLinesDownAction);\r\nregisterEditorAction(SortLinesAscendingAction);\r\nregisterEditorAction(SortLinesDescendingAction);\r\nregisterEditorAction(TrimTrailingWhitespaceAction);\r\nregisterEditorAction(DeleteLinesAction);\r\nregisterEditorAction(IndentLinesAction);\r\nregisterEditorAction(OutdentLinesAction);\r\nregisterEditorAction(InsertLineBeforeAction);\r\nregisterEditorAction(InsertLineAfterAction);\r\nregisterEditorAction(DeleteAllLeftAction);\r\nregisterEditorAction(DeleteAllRightAction);\r\nregisterEditorAction(JoinLinesAction);\r\nregisterEditorAction(TransposeAction);\r\nregisterEditorAction(UpperCaseAction);\r\nregisterEditorAction(LowerCaseAction);\r\nregisterEditorAction(TitleCaseAction);\r\nregisterEditorAction(SnakeCaseAction);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}