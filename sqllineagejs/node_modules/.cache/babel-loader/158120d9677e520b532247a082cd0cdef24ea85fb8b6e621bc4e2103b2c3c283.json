{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../base/common/strings.js';\nimport { LineTokens } from '../core/lineTokens.js';\nimport { NULL_STATE, nullTokenize2 } from './nullMode.js';\nconst fallback = {\n  getInitialState: () => NULL_STATE,\n  tokenize2: (buffer, hasEOL, state, deltaOffset) => nullTokenize2(0 /* Null */, buffer, state, deltaOffset)\n};\nexport function tokenizeToString(text) {\n  let tokenizationSupport = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : fallback;\n  return _tokenizeToString(text, tokenizationSupport || fallback);\n}\nexport function tokenizeLineToHTML(text, viewLineTokens, colorMap, startOffset, endOffset, tabSize, useNbsp) {\n  let result = \"<div>\";\n  let charIndex = startOffset;\n  let tabsCharDelta = 0;\n  for (let tokenIndex = 0, tokenCount = viewLineTokens.getCount(); tokenIndex < tokenCount; tokenIndex++) {\n    const tokenEndIndex = viewLineTokens.getEndOffset(tokenIndex);\n    if (tokenEndIndex <= startOffset) {\n      continue;\n    }\n    let partContent = '';\n    for (; charIndex < tokenEndIndex && charIndex < endOffset; charIndex++) {\n      const charCode = text.charCodeAt(charIndex);\n      switch (charCode) {\n        case 9 /* Tab */:\n          let insertSpacesCount = tabSize - (charIndex + tabsCharDelta) % tabSize;\n          tabsCharDelta += insertSpacesCount - 1;\n          while (insertSpacesCount > 0) {\n            partContent += useNbsp ? '&#160;' : ' ';\n            insertSpacesCount--;\n          }\n          break;\n        case 60 /* LessThan */:\n          partContent += '&lt;';\n          break;\n        case 62 /* GreaterThan */:\n          partContent += '&gt;';\n          break;\n        case 38 /* Ampersand */:\n          partContent += '&amp;';\n          break;\n        case 0 /* Null */:\n          partContent += '&#00;';\n          break;\n        case 65279 /* UTF8_BOM */:\n        case 8232 /* LINE_SEPARATOR */:\n        case 8233 /* PARAGRAPH_SEPARATOR */:\n        case 133 /* NEXT_LINE */:\n          partContent += '\\ufffd';\n          break;\n        case 13 /* CarriageReturn */:\n          // zero width space, because carriage return would introduce a line break\n          partContent += '&#8203';\n          break;\n        case 32 /* Space */:\n          partContent += useNbsp ? '&#160;' : ' ';\n          break;\n        default:\n          partContent += String.fromCharCode(charCode);\n      }\n    }\n    result += \"<span style=\\\"\".concat(viewLineTokens.getInlineStyle(tokenIndex, colorMap), \"\\\">\").concat(partContent, \"</span>\");\n    if (tokenEndIndex > endOffset || charIndex >= endOffset) {\n      break;\n    }\n  }\n  result += \"</div>\";\n  return result;\n}\nfunction _tokenizeToString(text, tokenizationSupport) {\n  let result = \"<div class=\\\"monaco-tokenized-source\\\">\";\n  let lines = strings.splitLines(text);\n  let currentState = tokenizationSupport.getInitialState();\n  for (let i = 0, len = lines.length; i < len; i++) {\n    let line = lines[i];\n    if (i > 0) {\n      result += \"<br/>\";\n    }\n    let tokenizationResult = tokenizationSupport.tokenize2(line, true, currentState, 0);\n    LineTokens.convertToEndOffset(tokenizationResult.tokens, line.length);\n    let lineTokens = new LineTokens(tokenizationResult.tokens, line);\n    let viewLineTokens = lineTokens.inflate();\n    let startOffset = 0;\n    for (let j = 0, lenJ = viewLineTokens.getCount(); j < lenJ; j++) {\n      const type = viewLineTokens.getClassName(j);\n      const endIndex = viewLineTokens.getEndOffset(j);\n      result += \"<span class=\\\"\".concat(type, \"\\\">\").concat(strings.escape(line.substring(startOffset, endIndex)), \"</span>\");\n      startOffset = endIndex;\n    }\n    currentState = tokenizationResult.endState;\n  }\n  result += \"</div>\";\n  return result;\n}","map":{"version":3,"names":["strings","LineTokens","NULL_STATE","nullTokenize2","fallback","getInitialState","tokenize2","buffer","hasEOL","state","deltaOffset","tokenizeToString","text","tokenizationSupport","arguments","length","undefined","_tokenizeToString","tokenizeLineToHTML","viewLineTokens","colorMap","startOffset","endOffset","tabSize","useNbsp","result","charIndex","tabsCharDelta","tokenIndex","tokenCount","getCount","tokenEndIndex","getEndOffset","partContent","charCode","charCodeAt","insertSpacesCount","String","fromCharCode","concat","getInlineStyle","lines","splitLines","currentState","i","len","line","tokenizationResult","convertToEndOffset","tokens","lineTokens","inflate","j","lenJ","type","getClassName","endIndex","escape","substring","endState"],"sources":["C:/Users/Administrator/Desktop/sqllineage-master/sqllineagejs/node_modules/monaco-editor/esm/vs/editor/common/modes/textToHtmlTokenizer.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport * as strings from '../../../base/common/strings.js';\r\nimport { LineTokens } from '../core/lineTokens.js';\r\nimport { NULL_STATE, nullTokenize2 } from './nullMode.js';\r\nconst fallback = {\r\n    getInitialState: () => NULL_STATE,\r\n    tokenize2: (buffer, hasEOL, state, deltaOffset) => nullTokenize2(0 /* Null */, buffer, state, deltaOffset)\r\n};\r\nexport function tokenizeToString(text, tokenizationSupport = fallback) {\r\n    return _tokenizeToString(text, tokenizationSupport || fallback);\r\n}\r\nexport function tokenizeLineToHTML(text, viewLineTokens, colorMap, startOffset, endOffset, tabSize, useNbsp) {\r\n    let result = `<div>`;\r\n    let charIndex = startOffset;\r\n    let tabsCharDelta = 0;\r\n    for (let tokenIndex = 0, tokenCount = viewLineTokens.getCount(); tokenIndex < tokenCount; tokenIndex++) {\r\n        const tokenEndIndex = viewLineTokens.getEndOffset(tokenIndex);\r\n        if (tokenEndIndex <= startOffset) {\r\n            continue;\r\n        }\r\n        let partContent = '';\r\n        for (; charIndex < tokenEndIndex && charIndex < endOffset; charIndex++) {\r\n            const charCode = text.charCodeAt(charIndex);\r\n            switch (charCode) {\r\n                case 9 /* Tab */:\r\n                    let insertSpacesCount = tabSize - (charIndex + tabsCharDelta) % tabSize;\r\n                    tabsCharDelta += insertSpacesCount - 1;\r\n                    while (insertSpacesCount > 0) {\r\n                        partContent += useNbsp ? '&#160;' : ' ';\r\n                        insertSpacesCount--;\r\n                    }\r\n                    break;\r\n                case 60 /* LessThan */:\r\n                    partContent += '&lt;';\r\n                    break;\r\n                case 62 /* GreaterThan */:\r\n                    partContent += '&gt;';\r\n                    break;\r\n                case 38 /* Ampersand */:\r\n                    partContent += '&amp;';\r\n                    break;\r\n                case 0 /* Null */:\r\n                    partContent += '&#00;';\r\n                    break;\r\n                case 65279 /* UTF8_BOM */:\r\n                case 8232 /* LINE_SEPARATOR */:\r\n                case 8233 /* PARAGRAPH_SEPARATOR */:\r\n                case 133 /* NEXT_LINE */:\r\n                    partContent += '\\ufffd';\r\n                    break;\r\n                case 13 /* CarriageReturn */:\r\n                    // zero width space, because carriage return would introduce a line break\r\n                    partContent += '&#8203';\r\n                    break;\r\n                case 32 /* Space */:\r\n                    partContent += useNbsp ? '&#160;' : ' ';\r\n                    break;\r\n                default:\r\n                    partContent += String.fromCharCode(charCode);\r\n            }\r\n        }\r\n        result += `<span style=\"${viewLineTokens.getInlineStyle(tokenIndex, colorMap)}\">${partContent}</span>`;\r\n        if (tokenEndIndex > endOffset || charIndex >= endOffset) {\r\n            break;\r\n        }\r\n    }\r\n    result += `</div>`;\r\n    return result;\r\n}\r\nfunction _tokenizeToString(text, tokenizationSupport) {\r\n    let result = `<div class=\"monaco-tokenized-source\">`;\r\n    let lines = strings.splitLines(text);\r\n    let currentState = tokenizationSupport.getInitialState();\r\n    for (let i = 0, len = lines.length; i < len; i++) {\r\n        let line = lines[i];\r\n        if (i > 0) {\r\n            result += `<br/>`;\r\n        }\r\n        let tokenizationResult = tokenizationSupport.tokenize2(line, true, currentState, 0);\r\n        LineTokens.convertToEndOffset(tokenizationResult.tokens, line.length);\r\n        let lineTokens = new LineTokens(tokenizationResult.tokens, line);\r\n        let viewLineTokens = lineTokens.inflate();\r\n        let startOffset = 0;\r\n        for (let j = 0, lenJ = viewLineTokens.getCount(); j < lenJ; j++) {\r\n            const type = viewLineTokens.getClassName(j);\r\n            const endIndex = viewLineTokens.getEndOffset(j);\r\n            result += `<span class=\"${type}\">${strings.escape(line.substring(startOffset, endIndex))}</span>`;\r\n            startOffset = endIndex;\r\n        }\r\n        currentState = tokenizationResult.endState;\r\n    }\r\n    result += `</div>`;\r\n    return result;\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,OAAO,KAAKA,OAAO,MAAM,iCAAiC;AAC1D,SAASC,UAAU,QAAQ,uBAAuB;AAClD,SAASC,UAAU,EAAEC,aAAa,QAAQ,eAAe;AACzD,MAAMC,QAAQ,GAAG;EACbC,eAAe,EAAEA,CAAA,KAAMH,UAAU;EACjCI,SAAS,EAAEA,CAACC,MAAM,EAAEC,MAAM,EAAEC,KAAK,EAAEC,WAAW,KAAKP,aAAa,CAAC,CAAC,CAAC,YAAYI,MAAM,EAAEE,KAAK,EAAEC,WAAW;AAC7G,CAAC;AACD,OAAO,SAASC,gBAAgBA,CAACC,IAAI,EAAkC;EAAA,IAAhCC,mBAAmB,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGV,QAAQ;EACjE,OAAOa,iBAAiB,CAACL,IAAI,EAAEC,mBAAmB,IAAIT,QAAQ,CAAC;AACnE;AACA,OAAO,SAASc,kBAAkBA,CAACN,IAAI,EAAEO,cAAc,EAAEC,QAAQ,EAAEC,WAAW,EAAEC,SAAS,EAAEC,OAAO,EAAEC,OAAO,EAAE;EACzG,IAAIC,MAAM,UAAU;EACpB,IAAIC,SAAS,GAAGL,WAAW;EAC3B,IAAIM,aAAa,GAAG,CAAC;EACrB,KAAK,IAAIC,UAAU,GAAG,CAAC,EAAEC,UAAU,GAAGV,cAAc,CAACW,QAAQ,CAAC,CAAC,EAAEF,UAAU,GAAGC,UAAU,EAAED,UAAU,EAAE,EAAE;IACpG,MAAMG,aAAa,GAAGZ,cAAc,CAACa,YAAY,CAACJ,UAAU,CAAC;IAC7D,IAAIG,aAAa,IAAIV,WAAW,EAAE;MAC9B;IACJ;IACA,IAAIY,WAAW,GAAG,EAAE;IACpB,OAAOP,SAAS,GAAGK,aAAa,IAAIL,SAAS,GAAGJ,SAAS,EAAEI,SAAS,EAAE,EAAE;MACpE,MAAMQ,QAAQ,GAAGtB,IAAI,CAACuB,UAAU,CAACT,SAAS,CAAC;MAC3C,QAAQQ,QAAQ;QACZ,KAAK,CAAC,CAAC;UACH,IAAIE,iBAAiB,GAAGb,OAAO,GAAG,CAACG,SAAS,GAAGC,aAAa,IAAIJ,OAAO;UACvEI,aAAa,IAAIS,iBAAiB,GAAG,CAAC;UACtC,OAAOA,iBAAiB,GAAG,CAAC,EAAE;YAC1BH,WAAW,IAAIT,OAAO,GAAG,QAAQ,GAAG,GAAG;YACvCY,iBAAiB,EAAE;UACvB;UACA;QACJ,KAAK,EAAE,CAAC;UACJH,WAAW,IAAI,MAAM;UACrB;QACJ,KAAK,EAAE,CAAC;UACJA,WAAW,IAAI,MAAM;UACrB;QACJ,KAAK,EAAE,CAAC;UACJA,WAAW,IAAI,OAAO;UACtB;QACJ,KAAK,CAAC,CAAC;UACHA,WAAW,IAAI,OAAO;UACtB;QACJ,KAAK,KAAK,CAAC;QACX,KAAK,IAAI,CAAC;QACV,KAAK,IAAI,CAAC;QACV,KAAK,GAAG,CAAC;UACLA,WAAW,IAAI,QAAQ;UACvB;QACJ,KAAK,EAAE,CAAC;UACJ;UACAA,WAAW,IAAI,QAAQ;UACvB;QACJ,KAAK,EAAE,CAAC;UACJA,WAAW,IAAIT,OAAO,GAAG,QAAQ,GAAG,GAAG;UACvC;QACJ;UACIS,WAAW,IAAII,MAAM,CAACC,YAAY,CAACJ,QAAQ,CAAC;MACpD;IACJ;IACAT,MAAM,qBAAAc,MAAA,CAAoBpB,cAAc,CAACqB,cAAc,CAACZ,UAAU,EAAER,QAAQ,CAAC,SAAAmB,MAAA,CAAKN,WAAW,YAAS;IACtG,IAAIF,aAAa,GAAGT,SAAS,IAAII,SAAS,IAAIJ,SAAS,EAAE;MACrD;IACJ;EACJ;EACAG,MAAM,YAAY;EAClB,OAAOA,MAAM;AACjB;AACA,SAASR,iBAAiBA,CAACL,IAAI,EAAEC,mBAAmB,EAAE;EAClD,IAAIY,MAAM,4CAA0C;EACpD,IAAIgB,KAAK,GAAGzC,OAAO,CAAC0C,UAAU,CAAC9B,IAAI,CAAC;EACpC,IAAI+B,YAAY,GAAG9B,mBAAmB,CAACR,eAAe,CAAC,CAAC;EACxD,KAAK,IAAIuC,CAAC,GAAG,CAAC,EAAEC,GAAG,GAAGJ,KAAK,CAAC1B,MAAM,EAAE6B,CAAC,GAAGC,GAAG,EAAED,CAAC,EAAE,EAAE;IAC9C,IAAIE,IAAI,GAAGL,KAAK,CAACG,CAAC,CAAC;IACnB,IAAIA,CAAC,GAAG,CAAC,EAAE;MACPnB,MAAM,WAAW;IACrB;IACA,IAAIsB,kBAAkB,GAAGlC,mBAAmB,CAACP,SAAS,CAACwC,IAAI,EAAE,IAAI,EAAEH,YAAY,EAAE,CAAC,CAAC;IACnF1C,UAAU,CAAC+C,kBAAkB,CAACD,kBAAkB,CAACE,MAAM,EAAEH,IAAI,CAAC/B,MAAM,CAAC;IACrE,IAAImC,UAAU,GAAG,IAAIjD,UAAU,CAAC8C,kBAAkB,CAACE,MAAM,EAAEH,IAAI,CAAC;IAChE,IAAI3B,cAAc,GAAG+B,UAAU,CAACC,OAAO,CAAC,CAAC;IACzC,IAAI9B,WAAW,GAAG,CAAC;IACnB,KAAK,IAAI+B,CAAC,GAAG,CAAC,EAAEC,IAAI,GAAGlC,cAAc,CAACW,QAAQ,CAAC,CAAC,EAAEsB,CAAC,GAAGC,IAAI,EAAED,CAAC,EAAE,EAAE;MAC7D,MAAME,IAAI,GAAGnC,cAAc,CAACoC,YAAY,CAACH,CAAC,CAAC;MAC3C,MAAMI,QAAQ,GAAGrC,cAAc,CAACa,YAAY,CAACoB,CAAC,CAAC;MAC/C3B,MAAM,qBAAAc,MAAA,CAAoBe,IAAI,SAAAf,MAAA,CAAKvC,OAAO,CAACyD,MAAM,CAACX,IAAI,CAACY,SAAS,CAACrC,WAAW,EAAEmC,QAAQ,CAAC,CAAC,YAAS;MACjGnC,WAAW,GAAGmC,QAAQ;IAC1B;IACAb,YAAY,GAAGI,kBAAkB,CAACY,QAAQ;EAC9C;EACAlC,MAAM,YAAY;EAClB,OAAOA,MAAM;AACjB"},"metadata":{},"sourceType":"module","externalDependencies":[]}