{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { toDisposable } from '../../../base/common/lifecycle.js';\nimport { validateConstraints } from '../../../base/common/types.js';\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { LinkedList } from '../../../base/common/linkedList.js';\nimport { Iterable } from '../../../base/common/iterator.js';\nexport const ICommandService = createDecorator('commandService');\nexport const CommandsRegistry = new class {\n  constructor() {\n    this._commands = new Map();\n    this._onDidRegisterCommand = new Emitter();\n    this.onDidRegisterCommand = this._onDidRegisterCommand.event;\n  }\n  registerCommand(idOrCommand, handler) {\n    if (!idOrCommand) {\n      throw new Error(\"invalid command\");\n    }\n    if (typeof idOrCommand === 'string') {\n      if (!handler) {\n        throw new Error(\"invalid command\");\n      }\n      return this.registerCommand({\n        id: idOrCommand,\n        handler\n      });\n    }\n    // add argument validation if rich command metadata is provided\n    if (idOrCommand.description) {\n      const constraints = [];\n      for (let arg of idOrCommand.description.args) {\n        constraints.push(arg.constraint);\n      }\n      const actualHandler = idOrCommand.handler;\n      idOrCommand.handler = function (accessor) {\n        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          args[_key - 1] = arguments[_key];\n        }\n        validateConstraints(args, constraints);\n        return actualHandler(accessor, ...args);\n      };\n    }\n    // find a place to store the command\n    const {\n      id\n    } = idOrCommand;\n    let commands = this._commands.get(id);\n    if (!commands) {\n      commands = new LinkedList();\n      this._commands.set(id, commands);\n    }\n    let removeFn = commands.unshift(idOrCommand);\n    let ret = toDisposable(() => {\n      removeFn();\n      const command = this._commands.get(id);\n      if (command === null || command === void 0 ? void 0 : command.isEmpty()) {\n        this._commands.delete(id);\n      }\n    });\n    // tell the world about this command\n    this._onDidRegisterCommand.fire(id);\n    return ret;\n  }\n  registerCommandAlias(oldId, newId) {\n    return CommandsRegistry.registerCommand(oldId, function (accessor) {\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n      return accessor.get(ICommandService).executeCommand(newId, ...args);\n    });\n  }\n  getCommand(id) {\n    const list = this._commands.get(id);\n    if (!list || list.isEmpty()) {\n      return undefined;\n    }\n    return Iterable.first(list);\n  }\n  getCommands() {\n    const result = new Map();\n    for (const key of this._commands.keys()) {\n      const command = this.getCommand(key);\n      if (command) {\n        result.set(key, command);\n      }\n    }\n    return result;\n  }\n}();","map":{"version":3,"names":["toDisposable","validateConstraints","createDecorator","Emitter","LinkedList","Iterable","ICommandService","CommandsRegistry","constructor","_commands","Map","_onDidRegisterCommand","onDidRegisterCommand","event","registerCommand","idOrCommand","handler","Error","id","description","constraints","arg","args","push","constraint","actualHandler","accessor","_len","arguments","length","Array","_key","commands","get","set","removeFn","unshift","ret","command","isEmpty","delete","fire","registerCommandAlias","oldId","newId","_len2","_key2","executeCommand","getCommand","list","undefined","first","getCommands","result","key","keys"],"sources":["C:/Users/Administrator/Desktop/sqllineage-master/sqllineagejs/node_modules/monaco-editor/esm/vs/platform/commands/common/commands.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { toDisposable } from '../../../base/common/lifecycle.js';\r\nimport { validateConstraints } from '../../../base/common/types.js';\r\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\r\nimport { Emitter } from '../../../base/common/event.js';\r\nimport { LinkedList } from '../../../base/common/linkedList.js';\r\nimport { Iterable } from '../../../base/common/iterator.js';\r\nexport const ICommandService = createDecorator('commandService');\r\nexport const CommandsRegistry = new class {\r\n    constructor() {\r\n        this._commands = new Map();\r\n        this._onDidRegisterCommand = new Emitter();\r\n        this.onDidRegisterCommand = this._onDidRegisterCommand.event;\r\n    }\r\n    registerCommand(idOrCommand, handler) {\r\n        if (!idOrCommand) {\r\n            throw new Error(`invalid command`);\r\n        }\r\n        if (typeof idOrCommand === 'string') {\r\n            if (!handler) {\r\n                throw new Error(`invalid command`);\r\n            }\r\n            return this.registerCommand({ id: idOrCommand, handler });\r\n        }\r\n        // add argument validation if rich command metadata is provided\r\n        if (idOrCommand.description) {\r\n            const constraints = [];\r\n            for (let arg of idOrCommand.description.args) {\r\n                constraints.push(arg.constraint);\r\n            }\r\n            const actualHandler = idOrCommand.handler;\r\n            idOrCommand.handler = function (accessor, ...args) {\r\n                validateConstraints(args, constraints);\r\n                return actualHandler(accessor, ...args);\r\n            };\r\n        }\r\n        // find a place to store the command\r\n        const { id } = idOrCommand;\r\n        let commands = this._commands.get(id);\r\n        if (!commands) {\r\n            commands = new LinkedList();\r\n            this._commands.set(id, commands);\r\n        }\r\n        let removeFn = commands.unshift(idOrCommand);\r\n        let ret = toDisposable(() => {\r\n            removeFn();\r\n            const command = this._commands.get(id);\r\n            if (command === null || command === void 0 ? void 0 : command.isEmpty()) {\r\n                this._commands.delete(id);\r\n            }\r\n        });\r\n        // tell the world about this command\r\n        this._onDidRegisterCommand.fire(id);\r\n        return ret;\r\n    }\r\n    registerCommandAlias(oldId, newId) {\r\n        return CommandsRegistry.registerCommand(oldId, (accessor, ...args) => accessor.get(ICommandService).executeCommand(newId, ...args));\r\n    }\r\n    getCommand(id) {\r\n        const list = this._commands.get(id);\r\n        if (!list || list.isEmpty()) {\r\n            return undefined;\r\n        }\r\n        return Iterable.first(list);\r\n    }\r\n    getCommands() {\r\n        const result = new Map();\r\n        for (const key of this._commands.keys()) {\r\n            const command = this.getCommand(key);\r\n            if (command) {\r\n                result.set(key, command);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n};\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,YAAY,QAAQ,mCAAmC;AAChE,SAASC,mBAAmB,QAAQ,+BAA+B;AACnE,SAASC,eAAe,QAAQ,6CAA6C;AAC7E,SAASC,OAAO,QAAQ,+BAA+B;AACvD,SAASC,UAAU,QAAQ,oCAAoC;AAC/D,SAASC,QAAQ,QAAQ,kCAAkC;AAC3D,OAAO,MAAMC,eAAe,GAAGJ,eAAe,CAAC,gBAAgB,CAAC;AAChE,OAAO,MAAMK,gBAAgB,GAAG,IAAI,MAAM;EACtCC,WAAWA,CAAA,EAAG;IACV,IAAI,CAACC,SAAS,GAAG,IAAIC,GAAG,CAAC,CAAC;IAC1B,IAAI,CAACC,qBAAqB,GAAG,IAAIR,OAAO,CAAC,CAAC;IAC1C,IAAI,CAACS,oBAAoB,GAAG,IAAI,CAACD,qBAAqB,CAACE,KAAK;EAChE;EACAC,eAAeA,CAACC,WAAW,EAAEC,OAAO,EAAE;IAClC,IAAI,CAACD,WAAW,EAAE;MACd,MAAM,IAAIE,KAAK,kBAAkB,CAAC;IACtC;IACA,IAAI,OAAOF,WAAW,KAAK,QAAQ,EAAE;MACjC,IAAI,CAACC,OAAO,EAAE;QACV,MAAM,IAAIC,KAAK,kBAAkB,CAAC;MACtC;MACA,OAAO,IAAI,CAACH,eAAe,CAAC;QAAEI,EAAE,EAAEH,WAAW;QAAEC;MAAQ,CAAC,CAAC;IAC7D;IACA;IACA,IAAID,WAAW,CAACI,WAAW,EAAE;MACzB,MAAMC,WAAW,GAAG,EAAE;MACtB,KAAK,IAAIC,GAAG,IAAIN,WAAW,CAACI,WAAW,CAACG,IAAI,EAAE;QAC1CF,WAAW,CAACG,IAAI,CAACF,GAAG,CAACG,UAAU,CAAC;MACpC;MACA,MAAMC,aAAa,GAAGV,WAAW,CAACC,OAAO;MACzCD,WAAW,CAACC,OAAO,GAAG,UAAUU,QAAQ,EAAW;QAAA,SAAAC,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAANP,IAAI,OAAAQ,KAAA,CAAAH,IAAA,OAAAA,IAAA,WAAAI,IAAA,MAAAA,IAAA,GAAAJ,IAAA,EAAAI,IAAA;UAAJT,IAAI,CAAAS,IAAA,QAAAH,SAAA,CAAAG,IAAA;QAAA;QAC7C9B,mBAAmB,CAACqB,IAAI,EAAEF,WAAW,CAAC;QACtC,OAAOK,aAAa,CAACC,QAAQ,EAAE,GAAGJ,IAAI,CAAC;MAC3C,CAAC;IACL;IACA;IACA,MAAM;MAAEJ;IAAG,CAAC,GAAGH,WAAW;IAC1B,IAAIiB,QAAQ,GAAG,IAAI,CAACvB,SAAS,CAACwB,GAAG,CAACf,EAAE,CAAC;IACrC,IAAI,CAACc,QAAQ,EAAE;MACXA,QAAQ,GAAG,IAAI5B,UAAU,CAAC,CAAC;MAC3B,IAAI,CAACK,SAAS,CAACyB,GAAG,CAAChB,EAAE,EAAEc,QAAQ,CAAC;IACpC;IACA,IAAIG,QAAQ,GAAGH,QAAQ,CAACI,OAAO,CAACrB,WAAW,CAAC;IAC5C,IAAIsB,GAAG,GAAGrC,YAAY,CAAC,MAAM;MACzBmC,QAAQ,CAAC,CAAC;MACV,MAAMG,OAAO,GAAG,IAAI,CAAC7B,SAAS,CAACwB,GAAG,CAACf,EAAE,CAAC;MACtC,IAAIoB,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,OAAO,CAACC,OAAO,CAAC,CAAC,EAAE;QACrE,IAAI,CAAC9B,SAAS,CAAC+B,MAAM,CAACtB,EAAE,CAAC;MAC7B;IACJ,CAAC,CAAC;IACF;IACA,IAAI,CAACP,qBAAqB,CAAC8B,IAAI,CAACvB,EAAE,CAAC;IACnC,OAAOmB,GAAG;EACd;EACAK,oBAAoBA,CAACC,KAAK,EAAEC,KAAK,EAAE;IAC/B,OAAOrC,gBAAgB,CAACO,eAAe,CAAC6B,KAAK,EAAE,UAACjB,QAAQ;MAAA,SAAAmB,KAAA,GAAAjB,SAAA,CAAAC,MAAA,EAAKP,IAAI,OAAAQ,KAAA,CAAAe,KAAA,OAAAA,KAAA,WAAAC,KAAA,MAAAA,KAAA,GAAAD,KAAA,EAAAC,KAAA;QAAJxB,IAAI,CAAAwB,KAAA,QAAAlB,SAAA,CAAAkB,KAAA;MAAA;MAAA,OAAKpB,QAAQ,CAACO,GAAG,CAAC3B,eAAe,CAAC,CAACyC,cAAc,CAACH,KAAK,EAAE,GAAGtB,IAAI,CAAC;IAAA,EAAC;EACvI;EACA0B,UAAUA,CAAC9B,EAAE,EAAE;IACX,MAAM+B,IAAI,GAAG,IAAI,CAACxC,SAAS,CAACwB,GAAG,CAACf,EAAE,CAAC;IACnC,IAAI,CAAC+B,IAAI,IAAIA,IAAI,CAACV,OAAO,CAAC,CAAC,EAAE;MACzB,OAAOW,SAAS;IACpB;IACA,OAAO7C,QAAQ,CAAC8C,KAAK,CAACF,IAAI,CAAC;EAC/B;EACAG,WAAWA,CAAA,EAAG;IACV,MAAMC,MAAM,GAAG,IAAI3C,GAAG,CAAC,CAAC;IACxB,KAAK,MAAM4C,GAAG,IAAI,IAAI,CAAC7C,SAAS,CAAC8C,IAAI,CAAC,CAAC,EAAE;MACrC,MAAMjB,OAAO,GAAG,IAAI,CAACU,UAAU,CAACM,GAAG,CAAC;MACpC,IAAIhB,OAAO,EAAE;QACTe,MAAM,CAACnB,GAAG,CAACoB,GAAG,EAAEhB,OAAO,CAAC;MAC5B;IACJ;IACA,OAAOe,MAAM;EACjB;AACJ,CAAC,CAAD,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}