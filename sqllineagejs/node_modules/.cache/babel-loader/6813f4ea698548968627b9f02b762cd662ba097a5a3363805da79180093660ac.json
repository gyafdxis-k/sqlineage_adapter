{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../base/common/strings.js';\nexport class Viewport {\n  constructor(top, left, width, height) {\n    this.top = top | 0;\n    this.left = left | 0;\n    this.width = width | 0;\n    this.height = height | 0;\n  }\n}\nexport class OutputPosition {\n  constructor(outputLineIndex, outputOffset) {\n    this.outputLineIndex = outputLineIndex;\n    this.outputOffset = outputOffset;\n  }\n}\nexport class LineBreakData {\n  constructor(breakOffsets, breakOffsetsVisibleColumn, wrappedTextIndentLength) {\n    this.breakOffsets = breakOffsets;\n    this.breakOffsetsVisibleColumn = breakOffsetsVisibleColumn;\n    this.wrappedTextIndentLength = wrappedTextIndentLength;\n  }\n  static getInputOffsetOfOutputPosition(breakOffsets, outputLineIndex, outputOffset) {\n    if (outputLineIndex === 0) {\n      return outputOffset;\n    } else {\n      return breakOffsets[outputLineIndex - 1] + outputOffset;\n    }\n  }\n  static getOutputPositionOfInputOffset(breakOffsets, inputOffset) {\n    let low = 0;\n    let high = breakOffsets.length - 1;\n    let mid = 0;\n    let midStart = 0;\n    while (low <= high) {\n      mid = low + (high - low) / 2 | 0;\n      const midStop = breakOffsets[mid];\n      midStart = mid > 0 ? breakOffsets[mid - 1] : 0;\n      if (inputOffset < midStart) {\n        high = mid - 1;\n      } else if (inputOffset >= midStop) {\n        low = mid + 1;\n      } else {\n        break;\n      }\n    }\n    return new OutputPosition(mid, inputOffset - midStart);\n  }\n}\nexport class MinimapLinesRenderingData {\n  constructor(tabSize, data) {\n    this.tabSize = tabSize;\n    this.data = data;\n  }\n}\nexport class ViewLineData {\n  constructor(content, continuesWithWrappedLine, minColumn, maxColumn, startVisibleColumn, tokens) {\n    this.content = content;\n    this.continuesWithWrappedLine = continuesWithWrappedLine;\n    this.minColumn = minColumn;\n    this.maxColumn = maxColumn;\n    this.startVisibleColumn = startVisibleColumn;\n    this.tokens = tokens;\n  }\n}\nexport class ViewLineRenderingData {\n  constructor(minColumn, maxColumn, content, continuesWithWrappedLine, mightContainRTL, mightContainNonBasicASCII, tokens, inlineDecorations, tabSize, startVisibleColumn) {\n    this.minColumn = minColumn;\n    this.maxColumn = maxColumn;\n    this.content = content;\n    this.continuesWithWrappedLine = continuesWithWrappedLine;\n    this.isBasicASCII = ViewLineRenderingData.isBasicASCII(content, mightContainNonBasicASCII);\n    this.containsRTL = ViewLineRenderingData.containsRTL(content, this.isBasicASCII, mightContainRTL);\n    this.tokens = tokens;\n    this.inlineDecorations = inlineDecorations;\n    this.tabSize = tabSize;\n    this.startVisibleColumn = startVisibleColumn;\n  }\n  static isBasicASCII(lineContent, mightContainNonBasicASCII) {\n    if (mightContainNonBasicASCII) {\n      return strings.isBasicASCII(lineContent);\n    }\n    return true;\n  }\n  static containsRTL(lineContent, isBasicASCII, mightContainRTL) {\n    if (!isBasicASCII && mightContainRTL) {\n      return strings.containsRTL(lineContent);\n    }\n    return false;\n  }\n}\nexport class InlineDecoration {\n  constructor(range, inlineClassName, type) {\n    this.range = range;\n    this.inlineClassName = inlineClassName;\n    this.type = type;\n  }\n}\nexport class ViewModelDecoration {\n  constructor(range, options) {\n    this.range = range;\n    this.options = options;\n  }\n}","map":{"version":3,"names":["strings","Viewport","constructor","top","left","width","height","OutputPosition","outputLineIndex","outputOffset","LineBreakData","breakOffsets","breakOffsetsVisibleColumn","wrappedTextIndentLength","getInputOffsetOfOutputPosition","getOutputPositionOfInputOffset","inputOffset","low","high","length","mid","midStart","midStop","MinimapLinesRenderingData","tabSize","data","ViewLineData","content","continuesWithWrappedLine","minColumn","maxColumn","startVisibleColumn","tokens","ViewLineRenderingData","mightContainRTL","mightContainNonBasicASCII","inlineDecorations","isBasicASCII","containsRTL","lineContent","InlineDecoration","range","inlineClassName","type","ViewModelDecoration","options"],"sources":["C:/Users/Administrator/Desktop/sqllineage-master/sqllineagejs/node_modules/monaco-editor/esm/vs/editor/common/viewModel/viewModel.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport * as strings from '../../../base/common/strings.js';\r\nexport class Viewport {\r\n    constructor(top, left, width, height) {\r\n        this.top = top | 0;\r\n        this.left = left | 0;\r\n        this.width = width | 0;\r\n        this.height = height | 0;\r\n    }\r\n}\r\nexport class OutputPosition {\r\n    constructor(outputLineIndex, outputOffset) {\r\n        this.outputLineIndex = outputLineIndex;\r\n        this.outputOffset = outputOffset;\r\n    }\r\n}\r\nexport class LineBreakData {\r\n    constructor(breakOffsets, breakOffsetsVisibleColumn, wrappedTextIndentLength) {\r\n        this.breakOffsets = breakOffsets;\r\n        this.breakOffsetsVisibleColumn = breakOffsetsVisibleColumn;\r\n        this.wrappedTextIndentLength = wrappedTextIndentLength;\r\n    }\r\n    static getInputOffsetOfOutputPosition(breakOffsets, outputLineIndex, outputOffset) {\r\n        if (outputLineIndex === 0) {\r\n            return outputOffset;\r\n        }\r\n        else {\r\n            return breakOffsets[outputLineIndex - 1] + outputOffset;\r\n        }\r\n    }\r\n    static getOutputPositionOfInputOffset(breakOffsets, inputOffset) {\r\n        let low = 0;\r\n        let high = breakOffsets.length - 1;\r\n        let mid = 0;\r\n        let midStart = 0;\r\n        while (low <= high) {\r\n            mid = low + ((high - low) / 2) | 0;\r\n            const midStop = breakOffsets[mid];\r\n            midStart = mid > 0 ? breakOffsets[mid - 1] : 0;\r\n            if (inputOffset < midStart) {\r\n                high = mid - 1;\r\n            }\r\n            else if (inputOffset >= midStop) {\r\n                low = mid + 1;\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        return new OutputPosition(mid, inputOffset - midStart);\r\n    }\r\n}\r\nexport class MinimapLinesRenderingData {\r\n    constructor(tabSize, data) {\r\n        this.tabSize = tabSize;\r\n        this.data = data;\r\n    }\r\n}\r\nexport class ViewLineData {\r\n    constructor(content, continuesWithWrappedLine, minColumn, maxColumn, startVisibleColumn, tokens) {\r\n        this.content = content;\r\n        this.continuesWithWrappedLine = continuesWithWrappedLine;\r\n        this.minColumn = minColumn;\r\n        this.maxColumn = maxColumn;\r\n        this.startVisibleColumn = startVisibleColumn;\r\n        this.tokens = tokens;\r\n    }\r\n}\r\nexport class ViewLineRenderingData {\r\n    constructor(minColumn, maxColumn, content, continuesWithWrappedLine, mightContainRTL, mightContainNonBasicASCII, tokens, inlineDecorations, tabSize, startVisibleColumn) {\r\n        this.minColumn = minColumn;\r\n        this.maxColumn = maxColumn;\r\n        this.content = content;\r\n        this.continuesWithWrappedLine = continuesWithWrappedLine;\r\n        this.isBasicASCII = ViewLineRenderingData.isBasicASCII(content, mightContainNonBasicASCII);\r\n        this.containsRTL = ViewLineRenderingData.containsRTL(content, this.isBasicASCII, mightContainRTL);\r\n        this.tokens = tokens;\r\n        this.inlineDecorations = inlineDecorations;\r\n        this.tabSize = tabSize;\r\n        this.startVisibleColumn = startVisibleColumn;\r\n    }\r\n    static isBasicASCII(lineContent, mightContainNonBasicASCII) {\r\n        if (mightContainNonBasicASCII) {\r\n            return strings.isBasicASCII(lineContent);\r\n        }\r\n        return true;\r\n    }\r\n    static containsRTL(lineContent, isBasicASCII, mightContainRTL) {\r\n        if (!isBasicASCII && mightContainRTL) {\r\n            return strings.containsRTL(lineContent);\r\n        }\r\n        return false;\r\n    }\r\n}\r\nexport class InlineDecoration {\r\n    constructor(range, inlineClassName, type) {\r\n        this.range = range;\r\n        this.inlineClassName = inlineClassName;\r\n        this.type = type;\r\n    }\r\n}\r\nexport class ViewModelDecoration {\r\n    constructor(range, options) {\r\n        this.range = range;\r\n        this.options = options;\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}