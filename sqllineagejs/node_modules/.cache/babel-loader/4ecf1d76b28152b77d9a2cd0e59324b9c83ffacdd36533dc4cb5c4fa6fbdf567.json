{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport * as dom from '../../../../base/browser/dom.js';\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { PartFingerprints, ViewPart } from '../../view/viewPart.js';\nclass Coordinate {\n  constructor(top, left) {\n    this.top = top;\n    this.left = left;\n  }\n}\nexport class ViewContentWidgets extends ViewPart {\n  constructor(context, viewDomNode) {\n    super(context);\n    this._viewDomNode = viewDomNode;\n    this._widgets = {};\n    this.domNode = createFastDomNode(document.createElement('div'));\n    PartFingerprints.write(this.domNode, 1 /* ContentWidgets */);\n    this.domNode.setClassName('contentWidgets');\n    this.domNode.setPosition('absolute');\n    this.domNode.setTop(0);\n    this.overflowingContentWidgetsDomNode = createFastDomNode(document.createElement('div'));\n    PartFingerprints.write(this.overflowingContentWidgetsDomNode, 2 /* OverflowingContentWidgets */);\n    this.overflowingContentWidgetsDomNode.setClassName('overflowingContentWidgets');\n  }\n  dispose() {\n    super.dispose();\n    this._widgets = {};\n  }\n  // --- begin event handlers\n  onConfigurationChanged(e) {\n    const keys = Object.keys(this._widgets);\n    for (const widgetId of keys) {\n      this._widgets[widgetId].onConfigurationChanged(e);\n    }\n    return true;\n  }\n  onDecorationsChanged(e) {\n    // true for inline decorations that can end up relayouting text\n    return true;\n  }\n  onFlushed(e) {\n    return true;\n  }\n  onLineMappingChanged(e) {\n    const keys = Object.keys(this._widgets);\n    for (const widgetId of keys) {\n      this._widgets[widgetId].onLineMappingChanged(e);\n    }\n    return true;\n  }\n  onLinesChanged(e) {\n    return true;\n  }\n  onLinesDeleted(e) {\n    return true;\n  }\n  onLinesInserted(e) {\n    return true;\n  }\n  onScrollChanged(e) {\n    return true;\n  }\n  onZonesChanged(e) {\n    return true;\n  }\n  // ---- end view event handlers\n  addWidget(_widget) {\n    const myWidget = new Widget(this._context, this._viewDomNode, _widget);\n    this._widgets[myWidget.id] = myWidget;\n    if (myWidget.allowEditorOverflow) {\n      this.overflowingContentWidgetsDomNode.appendChild(myWidget.domNode);\n    } else {\n      this.domNode.appendChild(myWidget.domNode);\n    }\n    this.setShouldRender();\n  }\n  setWidgetPosition(widget, range, preference) {\n    const myWidget = this._widgets[widget.getId()];\n    myWidget.setPosition(range, preference);\n    this.setShouldRender();\n  }\n  removeWidget(widget) {\n    const widgetId = widget.getId();\n    if (this._widgets.hasOwnProperty(widgetId)) {\n      const myWidget = this._widgets[widgetId];\n      delete this._widgets[widgetId];\n      const domNode = myWidget.domNode.domNode;\n      domNode.parentNode.removeChild(domNode);\n      domNode.removeAttribute('monaco-visible-content-widget');\n      this.setShouldRender();\n    }\n  }\n  shouldSuppressMouseDownOnWidget(widgetId) {\n    if (this._widgets.hasOwnProperty(widgetId)) {\n      return this._widgets[widgetId].suppressMouseDown;\n    }\n    return false;\n  }\n  onBeforeRender(viewportData) {\n    const keys = Object.keys(this._widgets);\n    for (const widgetId of keys) {\n      this._widgets[widgetId].onBeforeRender(viewportData);\n    }\n  }\n  prepareRender(ctx) {\n    const keys = Object.keys(this._widgets);\n    for (const widgetId of keys) {\n      this._widgets[widgetId].prepareRender(ctx);\n    }\n  }\n  render(ctx) {\n    const keys = Object.keys(this._widgets);\n    for (const widgetId of keys) {\n      this._widgets[widgetId].render(ctx);\n    }\n  }\n}\nclass Widget {\n  constructor(context, viewDomNode, actual) {\n    this._context = context;\n    this._viewDomNode = viewDomNode;\n    this._actual = actual;\n    this.domNode = createFastDomNode(this._actual.getDomNode());\n    this.id = this._actual.getId();\n    this.allowEditorOverflow = this._actual.allowEditorOverflow || false;\n    this.suppressMouseDown = this._actual.suppressMouseDown || false;\n    const options = this._context.configuration.options;\n    const layoutInfo = options.get(124 /* layoutInfo */);\n    this._fixedOverflowWidgets = options.get(32 /* fixedOverflowWidgets */);\n    this._contentWidth = layoutInfo.contentWidth;\n    this._contentLeft = layoutInfo.contentLeft;\n    this._lineHeight = options.get(53 /* lineHeight */);\n    this._range = null;\n    this._viewRange = null;\n    this._preference = [];\n    this._cachedDomNodeClientWidth = -1;\n    this._cachedDomNodeClientHeight = -1;\n    this._maxWidth = this._getMaxWidth();\n    this._isVisible = false;\n    this._renderData = null;\n    this.domNode.setPosition(this._fixedOverflowWidgets && this.allowEditorOverflow ? 'fixed' : 'absolute');\n    this.domNode.setVisibility('hidden');\n    this.domNode.setAttribute('widgetId', this.id);\n    this.domNode.setMaxWidth(this._maxWidth);\n  }\n  onConfigurationChanged(e) {\n    const options = this._context.configuration.options;\n    this._lineHeight = options.get(53 /* lineHeight */);\n    if (e.hasChanged(124 /* layoutInfo */)) {\n      const layoutInfo = options.get(124 /* layoutInfo */);\n      this._contentLeft = layoutInfo.contentLeft;\n      this._contentWidth = layoutInfo.contentWidth;\n      this._maxWidth = this._getMaxWidth();\n    }\n  }\n  onLineMappingChanged(e) {\n    this._setPosition(this._range);\n  }\n  _setPosition(range) {\n    this._range = range;\n    this._viewRange = null;\n    if (this._range) {\n      // Do not trust that widgets give a valid position\n      const validModelRange = this._context.model.validateModelRange(this._range);\n      if (this._context.model.coordinatesConverter.modelPositionIsVisible(validModelRange.getStartPosition()) || this._context.model.coordinatesConverter.modelPositionIsVisible(validModelRange.getEndPosition())) {\n        this._viewRange = this._context.model.coordinatesConverter.convertModelRangeToViewRange(validModelRange);\n      }\n    }\n  }\n  _getMaxWidth() {\n    return this.allowEditorOverflow ? window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth : this._contentWidth;\n  }\n  setPosition(range, preference) {\n    this._setPosition(range);\n    this._preference = preference;\n    this._cachedDomNodeClientWidth = -1;\n    this._cachedDomNodeClientHeight = -1;\n  }\n  _layoutBoxInViewport(topLeft, bottomLeft, width, height, ctx) {\n    // Our visible box is split horizontally by the current line => 2 boxes\n    // a) the box above the line\n    const aboveLineTop = topLeft.top;\n    const heightAboveLine = aboveLineTop;\n    // b) the box under the line\n    const underLineTop = bottomLeft.top + this._lineHeight;\n    const heightUnderLine = ctx.viewportHeight - underLineTop;\n    const aboveTop = aboveLineTop - height;\n    const fitsAbove = heightAboveLine >= height;\n    const belowTop = underLineTop;\n    const fitsBelow = heightUnderLine >= height;\n    // And its left\n    let actualAboveLeft = topLeft.left;\n    let actualBelowLeft = bottomLeft.left;\n    if (actualAboveLeft + width > ctx.scrollLeft + ctx.viewportWidth) {\n      actualAboveLeft = ctx.scrollLeft + ctx.viewportWidth - width;\n    }\n    if (actualBelowLeft + width > ctx.scrollLeft + ctx.viewportWidth) {\n      actualBelowLeft = ctx.scrollLeft + ctx.viewportWidth - width;\n    }\n    if (actualAboveLeft < ctx.scrollLeft) {\n      actualAboveLeft = ctx.scrollLeft;\n    }\n    if (actualBelowLeft < ctx.scrollLeft) {\n      actualBelowLeft = ctx.scrollLeft;\n    }\n    return {\n      fitsAbove: fitsAbove,\n      aboveTop: aboveTop,\n      aboveLeft: actualAboveLeft,\n      fitsBelow: fitsBelow,\n      belowTop: belowTop,\n      belowLeft: actualBelowLeft\n    };\n  }\n  _layoutHorizontalSegmentInPage(windowSize, domNodePosition, left, width) {\n    // Initially, the limits are defined as the dom node limits\n    const MIN_LIMIT = Math.max(0, domNodePosition.left - width);\n    const MAX_LIMIT = Math.min(domNodePosition.left + domNodePosition.width + width, windowSize.width);\n    let absoluteLeft = domNodePosition.left + left - dom.StandardWindow.scrollX;\n    if (absoluteLeft + width > MAX_LIMIT) {\n      const delta = absoluteLeft - (MAX_LIMIT - width);\n      absoluteLeft -= delta;\n      left -= delta;\n    }\n    if (absoluteLeft < MIN_LIMIT) {\n      const delta = absoluteLeft - MIN_LIMIT;\n      absoluteLeft -= delta;\n      left -= delta;\n    }\n    return [left, absoluteLeft];\n  }\n  _layoutBoxInPage(topLeft, bottomLeft, width, height, ctx) {\n    const aboveTop = topLeft.top - height;\n    const belowTop = bottomLeft.top + this._lineHeight;\n    const domNodePosition = dom.getDomNodePagePosition(this._viewDomNode.domNode);\n    const absoluteAboveTop = domNodePosition.top + aboveTop - dom.StandardWindow.scrollY;\n    const absoluteBelowTop = domNodePosition.top + belowTop - dom.StandardWindow.scrollY;\n    const windowSize = dom.getClientArea(document.body);\n    const [aboveLeft, absoluteAboveLeft] = this._layoutHorizontalSegmentInPage(windowSize, domNodePosition, topLeft.left - ctx.scrollLeft + this._contentLeft, width);\n    const [belowLeft, absoluteBelowLeft] = this._layoutHorizontalSegmentInPage(windowSize, domNodePosition, bottomLeft.left - ctx.scrollLeft + this._contentLeft, width);\n    // Leave some clearance to the top/bottom\n    const TOP_PADDING = 22;\n    const BOTTOM_PADDING = 22;\n    const fitsAbove = absoluteAboveTop >= TOP_PADDING;\n    const fitsBelow = absoluteBelowTop + height <= windowSize.height - BOTTOM_PADDING;\n    if (this._fixedOverflowWidgets) {\n      return {\n        fitsAbove,\n        aboveTop: Math.max(absoluteAboveTop, TOP_PADDING),\n        aboveLeft: absoluteAboveLeft,\n        fitsBelow,\n        belowTop: absoluteBelowTop,\n        belowLeft: absoluteBelowLeft\n      };\n    }\n    return {\n      fitsAbove,\n      aboveTop: aboveTop,\n      aboveLeft,\n      fitsBelow,\n      belowTop,\n      belowLeft\n    };\n  }\n  _prepareRenderWidgetAtExactPositionOverflowing(topLeft) {\n    return new Coordinate(topLeft.top, topLeft.left + this._contentLeft);\n  }\n  /**\r\n   * Compute `this._topLeft`\r\n   */\n  _getTopAndBottomLeft(ctx) {\n    if (!this._viewRange) {\n      return [null, null];\n    }\n    const visibleRangesForRange = ctx.linesVisibleRangesForRange(this._viewRange, false);\n    if (!visibleRangesForRange || visibleRangesForRange.length === 0) {\n      return [null, null];\n    }\n    let firstLine = visibleRangesForRange[0];\n    let lastLine = visibleRangesForRange[0];\n    for (const visibleRangesForLine of visibleRangesForRange) {\n      if (visibleRangesForLine.lineNumber < firstLine.lineNumber) {\n        firstLine = visibleRangesForLine;\n      }\n      if (visibleRangesForLine.lineNumber > lastLine.lineNumber) {\n        lastLine = visibleRangesForLine;\n      }\n    }\n    let firstLineMinLeft = 1073741824 /* MAX_SAFE_SMALL_INTEGER */; //firstLine.Constants.MAX_SAFE_SMALL_INTEGER;\n    for (const visibleRange of firstLine.ranges) {\n      if (visibleRange.left < firstLineMinLeft) {\n        firstLineMinLeft = visibleRange.left;\n      }\n    }\n    let lastLineMinLeft = 1073741824 /* MAX_SAFE_SMALL_INTEGER */; //lastLine.Constants.MAX_SAFE_SMALL_INTEGER;\n    for (const visibleRange of lastLine.ranges) {\n      if (visibleRange.left < lastLineMinLeft) {\n        lastLineMinLeft = visibleRange.left;\n      }\n    }\n    const topForPosition = ctx.getVerticalOffsetForLineNumber(firstLine.lineNumber) - ctx.scrollTop;\n    const topLeft = new Coordinate(topForPosition, firstLineMinLeft);\n    const topForBottomLine = ctx.getVerticalOffsetForLineNumber(lastLine.lineNumber) - ctx.scrollTop;\n    const bottomLeft = new Coordinate(topForBottomLine, lastLineMinLeft);\n    return [topLeft, bottomLeft];\n  }\n  _prepareRenderWidget(ctx) {\n    const [topLeft, bottomLeft] = this._getTopAndBottomLeft(ctx);\n    if (!topLeft || !bottomLeft) {\n      return null;\n    }\n    if (this._cachedDomNodeClientWidth === -1 || this._cachedDomNodeClientHeight === -1) {\n      let preferredDimensions = null;\n      if (typeof this._actual.beforeRender === 'function') {\n        preferredDimensions = safeInvoke(this._actual.beforeRender, this._actual);\n      }\n      if (preferredDimensions) {\n        this._cachedDomNodeClientWidth = preferredDimensions.width;\n        this._cachedDomNodeClientHeight = preferredDimensions.height;\n      } else {\n        const domNode = this.domNode.domNode;\n        this._cachedDomNodeClientWidth = domNode.clientWidth;\n        this._cachedDomNodeClientHeight = domNode.clientHeight;\n      }\n    }\n    let placement;\n    if (this.allowEditorOverflow) {\n      placement = this._layoutBoxInPage(topLeft, bottomLeft, this._cachedDomNodeClientWidth, this._cachedDomNodeClientHeight, ctx);\n    } else {\n      placement = this._layoutBoxInViewport(topLeft, bottomLeft, this._cachedDomNodeClientWidth, this._cachedDomNodeClientHeight, ctx);\n    }\n    // Do two passes, first for perfect fit, second picks first option\n    if (this._preference) {\n      for (let pass = 1; pass <= 2; pass++) {\n        for (const pref of this._preference) {\n          // placement\n          if (pref === 1 /* ABOVE */) {\n            if (!placement) {\n              // Widget outside of viewport\n              return null;\n            }\n            if (pass === 2 || placement.fitsAbove) {\n              return {\n                coordinate: new Coordinate(placement.aboveTop, placement.aboveLeft),\n                position: 1 /* ABOVE */\n              };\n            }\n          } else if (pref === 2 /* BELOW */) {\n            if (!placement) {\n              // Widget outside of viewport\n              return null;\n            }\n            if (pass === 2 || placement.fitsBelow) {\n              return {\n                coordinate: new Coordinate(placement.belowTop, placement.belowLeft),\n                position: 2 /* BELOW */\n              };\n            }\n          } else {\n            if (this.allowEditorOverflow) {\n              return {\n                coordinate: this._prepareRenderWidgetAtExactPositionOverflowing(topLeft),\n                position: 0 /* EXACT */\n              };\n            } else {\n              return {\n                coordinate: topLeft,\n                position: 0 /* EXACT */\n              };\n            }\n          }\n        }\n      }\n    }\n\n    return null;\n  }\n  /**\r\n   * On this first pass, we ensure that the content widget (if it is in the viewport) has the max width set correctly.\r\n   */\n  onBeforeRender(viewportData) {\n    if (!this._viewRange || !this._preference) {\n      return;\n    }\n    if (this._viewRange.endLineNumber < viewportData.startLineNumber || this._viewRange.startLineNumber > viewportData.endLineNumber) {\n      // Outside of viewport\n      return;\n    }\n    this.domNode.setMaxWidth(this._maxWidth);\n  }\n  prepareRender(ctx) {\n    this._renderData = this._prepareRenderWidget(ctx);\n  }\n  render(ctx) {\n    if (!this._renderData) {\n      // This widget should be invisible\n      if (this._isVisible) {\n        this.domNode.removeAttribute('monaco-visible-content-widget');\n        this._isVisible = false;\n        this.domNode.setVisibility('hidden');\n      }\n      if (typeof this._actual.afterRender === 'function') {\n        safeInvoke(this._actual.afterRender, this._actual, null);\n      }\n      return;\n    }\n    // This widget should be visible\n    if (this.allowEditorOverflow) {\n      this.domNode.setTop(this._renderData.coordinate.top);\n      this.domNode.setLeft(this._renderData.coordinate.left);\n    } else {\n      this.domNode.setTop(this._renderData.coordinate.top + ctx.scrollTop - ctx.bigNumbersDelta);\n      this.domNode.setLeft(this._renderData.coordinate.left);\n    }\n    if (!this._isVisible) {\n      this.domNode.setVisibility('inherit');\n      this.domNode.setAttribute('monaco-visible-content-widget', 'true');\n      this._isVisible = true;\n    }\n    if (typeof this._actual.afterRender === 'function') {\n      safeInvoke(this._actual.afterRender, this._actual, this._renderData.position);\n    }\n  }\n}\nfunction safeInvoke(fn, thisArg) {\n  try {\n    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      args[_key - 2] = arguments[_key];\n    }\n    return fn.call(thisArg, ...args);\n  } catch (_a) {\n    // ignore\n    return null;\n  }\n}","map":{"version":3,"names":["dom","createFastDomNode","PartFingerprints","ViewPart","Coordinate","constructor","top","left","ViewContentWidgets","context","viewDomNode","_viewDomNode","_widgets","domNode","document","createElement","write","setClassName","setPosition","setTop","overflowingContentWidgetsDomNode","dispose","onConfigurationChanged","e","keys","Object","widgetId","onDecorationsChanged","onFlushed","onLineMappingChanged","onLinesChanged","onLinesDeleted","onLinesInserted","onScrollChanged","onZonesChanged","addWidget","_widget","myWidget","Widget","_context","id","allowEditorOverflow","appendChild","setShouldRender","setWidgetPosition","widget","range","preference","getId","removeWidget","hasOwnProperty","parentNode","removeChild","removeAttribute","shouldSuppressMouseDownOnWidget","suppressMouseDown","onBeforeRender","viewportData","prepareRender","ctx","render","actual","_actual","getDomNode","options","configuration","layoutInfo","get","_fixedOverflowWidgets","_contentWidth","contentWidth","_contentLeft","contentLeft","_lineHeight","_range","_viewRange","_preference","_cachedDomNodeClientWidth","_cachedDomNodeClientHeight","_maxWidth","_getMaxWidth","_isVisible","_renderData","setVisibility","setAttribute","setMaxWidth","hasChanged","_setPosition","validModelRange","model","validateModelRange","coordinatesConverter","modelPositionIsVisible","getStartPosition","getEndPosition","convertModelRangeToViewRange","window","innerWidth","documentElement","clientWidth","body","_layoutBoxInViewport","topLeft","bottomLeft","width","height","aboveLineTop","heightAboveLine","underLineTop","heightUnderLine","viewportHeight","aboveTop","fitsAbove","belowTop","fitsBelow","actualAboveLeft","actualBelowLeft","scrollLeft","viewportWidth","aboveLeft","belowLeft","_layoutHorizontalSegmentInPage","windowSize","domNodePosition","MIN_LIMIT","Math","max","MAX_LIMIT","min","absoluteLeft","StandardWindow","scrollX","delta","_layoutBoxInPage","getDomNodePagePosition","absoluteAboveTop","scrollY","absoluteBelowTop","getClientArea","absoluteAboveLeft","absoluteBelowLeft","TOP_PADDING","BOTTOM_PADDING","_prepareRenderWidgetAtExactPositionOverflowing","_getTopAndBottomLeft","visibleRangesForRange","linesVisibleRangesForRange","length","firstLine","lastLine","visibleRangesForLine","lineNumber","firstLineMinLeft","visibleRange","ranges","lastLineMinLeft","topForPosition","getVerticalOffsetForLineNumber","scrollTop","topForBottomLine","_prepareRenderWidget","preferredDimensions","beforeRender","safeInvoke","clientHeight","placement","pass","pref","coordinate","position","endLineNumber","startLineNumber","afterRender","setLeft","bigNumbersDelta","fn","thisArg","_len","arguments","args","Array","_key","call","_a"],"sources":["C:/Users/Administrator/Desktop/sqllineage-master/sqllineagejs/node_modules/monaco-editor/esm/vs/editor/browser/viewParts/contentWidgets/contentWidgets.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport * as dom from '../../../../base/browser/dom.js';\r\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\r\nimport { PartFingerprints, ViewPart } from '../../view/viewPart.js';\r\nclass Coordinate {\r\n    constructor(top, left) {\r\n        this.top = top;\r\n        this.left = left;\r\n    }\r\n}\r\nexport class ViewContentWidgets extends ViewPart {\r\n    constructor(context, viewDomNode) {\r\n        super(context);\r\n        this._viewDomNode = viewDomNode;\r\n        this._widgets = {};\r\n        this.domNode = createFastDomNode(document.createElement('div'));\r\n        PartFingerprints.write(this.domNode, 1 /* ContentWidgets */);\r\n        this.domNode.setClassName('contentWidgets');\r\n        this.domNode.setPosition('absolute');\r\n        this.domNode.setTop(0);\r\n        this.overflowingContentWidgetsDomNode = createFastDomNode(document.createElement('div'));\r\n        PartFingerprints.write(this.overflowingContentWidgetsDomNode, 2 /* OverflowingContentWidgets */);\r\n        this.overflowingContentWidgetsDomNode.setClassName('overflowingContentWidgets');\r\n    }\r\n    dispose() {\r\n        super.dispose();\r\n        this._widgets = {};\r\n    }\r\n    // --- begin event handlers\r\n    onConfigurationChanged(e) {\r\n        const keys = Object.keys(this._widgets);\r\n        for (const widgetId of keys) {\r\n            this._widgets[widgetId].onConfigurationChanged(e);\r\n        }\r\n        return true;\r\n    }\r\n    onDecorationsChanged(e) {\r\n        // true for inline decorations that can end up relayouting text\r\n        return true;\r\n    }\r\n    onFlushed(e) {\r\n        return true;\r\n    }\r\n    onLineMappingChanged(e) {\r\n        const keys = Object.keys(this._widgets);\r\n        for (const widgetId of keys) {\r\n            this._widgets[widgetId].onLineMappingChanged(e);\r\n        }\r\n        return true;\r\n    }\r\n    onLinesChanged(e) {\r\n        return true;\r\n    }\r\n    onLinesDeleted(e) {\r\n        return true;\r\n    }\r\n    onLinesInserted(e) {\r\n        return true;\r\n    }\r\n    onScrollChanged(e) {\r\n        return true;\r\n    }\r\n    onZonesChanged(e) {\r\n        return true;\r\n    }\r\n    // ---- end view event handlers\r\n    addWidget(_widget) {\r\n        const myWidget = new Widget(this._context, this._viewDomNode, _widget);\r\n        this._widgets[myWidget.id] = myWidget;\r\n        if (myWidget.allowEditorOverflow) {\r\n            this.overflowingContentWidgetsDomNode.appendChild(myWidget.domNode);\r\n        }\r\n        else {\r\n            this.domNode.appendChild(myWidget.domNode);\r\n        }\r\n        this.setShouldRender();\r\n    }\r\n    setWidgetPosition(widget, range, preference) {\r\n        const myWidget = this._widgets[widget.getId()];\r\n        myWidget.setPosition(range, preference);\r\n        this.setShouldRender();\r\n    }\r\n    removeWidget(widget) {\r\n        const widgetId = widget.getId();\r\n        if (this._widgets.hasOwnProperty(widgetId)) {\r\n            const myWidget = this._widgets[widgetId];\r\n            delete this._widgets[widgetId];\r\n            const domNode = myWidget.domNode.domNode;\r\n            domNode.parentNode.removeChild(domNode);\r\n            domNode.removeAttribute('monaco-visible-content-widget');\r\n            this.setShouldRender();\r\n        }\r\n    }\r\n    shouldSuppressMouseDownOnWidget(widgetId) {\r\n        if (this._widgets.hasOwnProperty(widgetId)) {\r\n            return this._widgets[widgetId].suppressMouseDown;\r\n        }\r\n        return false;\r\n    }\r\n    onBeforeRender(viewportData) {\r\n        const keys = Object.keys(this._widgets);\r\n        for (const widgetId of keys) {\r\n            this._widgets[widgetId].onBeforeRender(viewportData);\r\n        }\r\n    }\r\n    prepareRender(ctx) {\r\n        const keys = Object.keys(this._widgets);\r\n        for (const widgetId of keys) {\r\n            this._widgets[widgetId].prepareRender(ctx);\r\n        }\r\n    }\r\n    render(ctx) {\r\n        const keys = Object.keys(this._widgets);\r\n        for (const widgetId of keys) {\r\n            this._widgets[widgetId].render(ctx);\r\n        }\r\n    }\r\n}\r\nclass Widget {\r\n    constructor(context, viewDomNode, actual) {\r\n        this._context = context;\r\n        this._viewDomNode = viewDomNode;\r\n        this._actual = actual;\r\n        this.domNode = createFastDomNode(this._actual.getDomNode());\r\n        this.id = this._actual.getId();\r\n        this.allowEditorOverflow = this._actual.allowEditorOverflow || false;\r\n        this.suppressMouseDown = this._actual.suppressMouseDown || false;\r\n        const options = this._context.configuration.options;\r\n        const layoutInfo = options.get(124 /* layoutInfo */);\r\n        this._fixedOverflowWidgets = options.get(32 /* fixedOverflowWidgets */);\r\n        this._contentWidth = layoutInfo.contentWidth;\r\n        this._contentLeft = layoutInfo.contentLeft;\r\n        this._lineHeight = options.get(53 /* lineHeight */);\r\n        this._range = null;\r\n        this._viewRange = null;\r\n        this._preference = [];\r\n        this._cachedDomNodeClientWidth = -1;\r\n        this._cachedDomNodeClientHeight = -1;\r\n        this._maxWidth = this._getMaxWidth();\r\n        this._isVisible = false;\r\n        this._renderData = null;\r\n        this.domNode.setPosition((this._fixedOverflowWidgets && this.allowEditorOverflow) ? 'fixed' : 'absolute');\r\n        this.domNode.setVisibility('hidden');\r\n        this.domNode.setAttribute('widgetId', this.id);\r\n        this.domNode.setMaxWidth(this._maxWidth);\r\n    }\r\n    onConfigurationChanged(e) {\r\n        const options = this._context.configuration.options;\r\n        this._lineHeight = options.get(53 /* lineHeight */);\r\n        if (e.hasChanged(124 /* layoutInfo */)) {\r\n            const layoutInfo = options.get(124 /* layoutInfo */);\r\n            this._contentLeft = layoutInfo.contentLeft;\r\n            this._contentWidth = layoutInfo.contentWidth;\r\n            this._maxWidth = this._getMaxWidth();\r\n        }\r\n    }\r\n    onLineMappingChanged(e) {\r\n        this._setPosition(this._range);\r\n    }\r\n    _setPosition(range) {\r\n        this._range = range;\r\n        this._viewRange = null;\r\n        if (this._range) {\r\n            // Do not trust that widgets give a valid position\r\n            const validModelRange = this._context.model.validateModelRange(this._range);\r\n            if (this._context.model.coordinatesConverter.modelPositionIsVisible(validModelRange.getStartPosition()) || this._context.model.coordinatesConverter.modelPositionIsVisible(validModelRange.getEndPosition())) {\r\n                this._viewRange = this._context.model.coordinatesConverter.convertModelRangeToViewRange(validModelRange);\r\n            }\r\n        }\r\n    }\r\n    _getMaxWidth() {\r\n        return (this.allowEditorOverflow\r\n            ? window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth\r\n            : this._contentWidth);\r\n    }\r\n    setPosition(range, preference) {\r\n        this._setPosition(range);\r\n        this._preference = preference;\r\n        this._cachedDomNodeClientWidth = -1;\r\n        this._cachedDomNodeClientHeight = -1;\r\n    }\r\n    _layoutBoxInViewport(topLeft, bottomLeft, width, height, ctx) {\r\n        // Our visible box is split horizontally by the current line => 2 boxes\r\n        // a) the box above the line\r\n        const aboveLineTop = topLeft.top;\r\n        const heightAboveLine = aboveLineTop;\r\n        // b) the box under the line\r\n        const underLineTop = bottomLeft.top + this._lineHeight;\r\n        const heightUnderLine = ctx.viewportHeight - underLineTop;\r\n        const aboveTop = aboveLineTop - height;\r\n        const fitsAbove = (heightAboveLine >= height);\r\n        const belowTop = underLineTop;\r\n        const fitsBelow = (heightUnderLine >= height);\r\n        // And its left\r\n        let actualAboveLeft = topLeft.left;\r\n        let actualBelowLeft = bottomLeft.left;\r\n        if (actualAboveLeft + width > ctx.scrollLeft + ctx.viewportWidth) {\r\n            actualAboveLeft = ctx.scrollLeft + ctx.viewportWidth - width;\r\n        }\r\n        if (actualBelowLeft + width > ctx.scrollLeft + ctx.viewportWidth) {\r\n            actualBelowLeft = ctx.scrollLeft + ctx.viewportWidth - width;\r\n        }\r\n        if (actualAboveLeft < ctx.scrollLeft) {\r\n            actualAboveLeft = ctx.scrollLeft;\r\n        }\r\n        if (actualBelowLeft < ctx.scrollLeft) {\r\n            actualBelowLeft = ctx.scrollLeft;\r\n        }\r\n        return {\r\n            fitsAbove: fitsAbove,\r\n            aboveTop: aboveTop,\r\n            aboveLeft: actualAboveLeft,\r\n            fitsBelow: fitsBelow,\r\n            belowTop: belowTop,\r\n            belowLeft: actualBelowLeft,\r\n        };\r\n    }\r\n    _layoutHorizontalSegmentInPage(windowSize, domNodePosition, left, width) {\r\n        // Initially, the limits are defined as the dom node limits\r\n        const MIN_LIMIT = Math.max(0, domNodePosition.left - width);\r\n        const MAX_LIMIT = Math.min(domNodePosition.left + domNodePosition.width + width, windowSize.width);\r\n        let absoluteLeft = domNodePosition.left + left - dom.StandardWindow.scrollX;\r\n        if (absoluteLeft + width > MAX_LIMIT) {\r\n            const delta = absoluteLeft - (MAX_LIMIT - width);\r\n            absoluteLeft -= delta;\r\n            left -= delta;\r\n        }\r\n        if (absoluteLeft < MIN_LIMIT) {\r\n            const delta = absoluteLeft - MIN_LIMIT;\r\n            absoluteLeft -= delta;\r\n            left -= delta;\r\n        }\r\n        return [left, absoluteLeft];\r\n    }\r\n    _layoutBoxInPage(topLeft, bottomLeft, width, height, ctx) {\r\n        const aboveTop = topLeft.top - height;\r\n        const belowTop = bottomLeft.top + this._lineHeight;\r\n        const domNodePosition = dom.getDomNodePagePosition(this._viewDomNode.domNode);\r\n        const absoluteAboveTop = domNodePosition.top + aboveTop - dom.StandardWindow.scrollY;\r\n        const absoluteBelowTop = domNodePosition.top + belowTop - dom.StandardWindow.scrollY;\r\n        const windowSize = dom.getClientArea(document.body);\r\n        const [aboveLeft, absoluteAboveLeft] = this._layoutHorizontalSegmentInPage(windowSize, domNodePosition, topLeft.left - ctx.scrollLeft + this._contentLeft, width);\r\n        const [belowLeft, absoluteBelowLeft] = this._layoutHorizontalSegmentInPage(windowSize, domNodePosition, bottomLeft.left - ctx.scrollLeft + this._contentLeft, width);\r\n        // Leave some clearance to the top/bottom\r\n        const TOP_PADDING = 22;\r\n        const BOTTOM_PADDING = 22;\r\n        const fitsAbove = (absoluteAboveTop >= TOP_PADDING);\r\n        const fitsBelow = (absoluteBelowTop + height <= windowSize.height - BOTTOM_PADDING);\r\n        if (this._fixedOverflowWidgets) {\r\n            return {\r\n                fitsAbove,\r\n                aboveTop: Math.max(absoluteAboveTop, TOP_PADDING),\r\n                aboveLeft: absoluteAboveLeft,\r\n                fitsBelow,\r\n                belowTop: absoluteBelowTop,\r\n                belowLeft: absoluteBelowLeft\r\n            };\r\n        }\r\n        return {\r\n            fitsAbove,\r\n            aboveTop: aboveTop,\r\n            aboveLeft,\r\n            fitsBelow,\r\n            belowTop,\r\n            belowLeft\r\n        };\r\n    }\r\n    _prepareRenderWidgetAtExactPositionOverflowing(topLeft) {\r\n        return new Coordinate(topLeft.top, topLeft.left + this._contentLeft);\r\n    }\r\n    /**\r\n     * Compute `this._topLeft`\r\n     */\r\n    _getTopAndBottomLeft(ctx) {\r\n        if (!this._viewRange) {\r\n            return [null, null];\r\n        }\r\n        const visibleRangesForRange = ctx.linesVisibleRangesForRange(this._viewRange, false);\r\n        if (!visibleRangesForRange || visibleRangesForRange.length === 0) {\r\n            return [null, null];\r\n        }\r\n        let firstLine = visibleRangesForRange[0];\r\n        let lastLine = visibleRangesForRange[0];\r\n        for (const visibleRangesForLine of visibleRangesForRange) {\r\n            if (visibleRangesForLine.lineNumber < firstLine.lineNumber) {\r\n                firstLine = visibleRangesForLine;\r\n            }\r\n            if (visibleRangesForLine.lineNumber > lastLine.lineNumber) {\r\n                lastLine = visibleRangesForLine;\r\n            }\r\n        }\r\n        let firstLineMinLeft = 1073741824 /* MAX_SAFE_SMALL_INTEGER */; //firstLine.Constants.MAX_SAFE_SMALL_INTEGER;\r\n        for (const visibleRange of firstLine.ranges) {\r\n            if (visibleRange.left < firstLineMinLeft) {\r\n                firstLineMinLeft = visibleRange.left;\r\n            }\r\n        }\r\n        let lastLineMinLeft = 1073741824 /* MAX_SAFE_SMALL_INTEGER */; //lastLine.Constants.MAX_SAFE_SMALL_INTEGER;\r\n        for (const visibleRange of lastLine.ranges) {\r\n            if (visibleRange.left < lastLineMinLeft) {\r\n                lastLineMinLeft = visibleRange.left;\r\n            }\r\n        }\r\n        const topForPosition = ctx.getVerticalOffsetForLineNumber(firstLine.lineNumber) - ctx.scrollTop;\r\n        const topLeft = new Coordinate(topForPosition, firstLineMinLeft);\r\n        const topForBottomLine = ctx.getVerticalOffsetForLineNumber(lastLine.lineNumber) - ctx.scrollTop;\r\n        const bottomLeft = new Coordinate(topForBottomLine, lastLineMinLeft);\r\n        return [topLeft, bottomLeft];\r\n    }\r\n    _prepareRenderWidget(ctx) {\r\n        const [topLeft, bottomLeft] = this._getTopAndBottomLeft(ctx);\r\n        if (!topLeft || !bottomLeft) {\r\n            return null;\r\n        }\r\n        if (this._cachedDomNodeClientWidth === -1 || this._cachedDomNodeClientHeight === -1) {\r\n            let preferredDimensions = null;\r\n            if (typeof this._actual.beforeRender === 'function') {\r\n                preferredDimensions = safeInvoke(this._actual.beforeRender, this._actual);\r\n            }\r\n            if (preferredDimensions) {\r\n                this._cachedDomNodeClientWidth = preferredDimensions.width;\r\n                this._cachedDomNodeClientHeight = preferredDimensions.height;\r\n            }\r\n            else {\r\n                const domNode = this.domNode.domNode;\r\n                this._cachedDomNodeClientWidth = domNode.clientWidth;\r\n                this._cachedDomNodeClientHeight = domNode.clientHeight;\r\n            }\r\n        }\r\n        let placement;\r\n        if (this.allowEditorOverflow) {\r\n            placement = this._layoutBoxInPage(topLeft, bottomLeft, this._cachedDomNodeClientWidth, this._cachedDomNodeClientHeight, ctx);\r\n        }\r\n        else {\r\n            placement = this._layoutBoxInViewport(topLeft, bottomLeft, this._cachedDomNodeClientWidth, this._cachedDomNodeClientHeight, ctx);\r\n        }\r\n        // Do two passes, first for perfect fit, second picks first option\r\n        if (this._preference) {\r\n            for (let pass = 1; pass <= 2; pass++) {\r\n                for (const pref of this._preference) {\r\n                    // placement\r\n                    if (pref === 1 /* ABOVE */) {\r\n                        if (!placement) {\r\n                            // Widget outside of viewport\r\n                            return null;\r\n                        }\r\n                        if (pass === 2 || placement.fitsAbove) {\r\n                            return { coordinate: new Coordinate(placement.aboveTop, placement.aboveLeft), position: 1 /* ABOVE */ };\r\n                        }\r\n                    }\r\n                    else if (pref === 2 /* BELOW */) {\r\n                        if (!placement) {\r\n                            // Widget outside of viewport\r\n                            return null;\r\n                        }\r\n                        if (pass === 2 || placement.fitsBelow) {\r\n                            return { coordinate: new Coordinate(placement.belowTop, placement.belowLeft), position: 2 /* BELOW */ };\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (this.allowEditorOverflow) {\r\n                            return { coordinate: this._prepareRenderWidgetAtExactPositionOverflowing(topLeft), position: 0 /* EXACT */ };\r\n                        }\r\n                        else {\r\n                            return { coordinate: topLeft, position: 0 /* EXACT */ };\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * On this first pass, we ensure that the content widget (if it is in the viewport) has the max width set correctly.\r\n     */\r\n    onBeforeRender(viewportData) {\r\n        if (!this._viewRange || !this._preference) {\r\n            return;\r\n        }\r\n        if (this._viewRange.endLineNumber < viewportData.startLineNumber || this._viewRange.startLineNumber > viewportData.endLineNumber) {\r\n            // Outside of viewport\r\n            return;\r\n        }\r\n        this.domNode.setMaxWidth(this._maxWidth);\r\n    }\r\n    prepareRender(ctx) {\r\n        this._renderData = this._prepareRenderWidget(ctx);\r\n    }\r\n    render(ctx) {\r\n        if (!this._renderData) {\r\n            // This widget should be invisible\r\n            if (this._isVisible) {\r\n                this.domNode.removeAttribute('monaco-visible-content-widget');\r\n                this._isVisible = false;\r\n                this.domNode.setVisibility('hidden');\r\n            }\r\n            if (typeof this._actual.afterRender === 'function') {\r\n                safeInvoke(this._actual.afterRender, this._actual, null);\r\n            }\r\n            return;\r\n        }\r\n        // This widget should be visible\r\n        if (this.allowEditorOverflow) {\r\n            this.domNode.setTop(this._renderData.coordinate.top);\r\n            this.domNode.setLeft(this._renderData.coordinate.left);\r\n        }\r\n        else {\r\n            this.domNode.setTop(this._renderData.coordinate.top + ctx.scrollTop - ctx.bigNumbersDelta);\r\n            this.domNode.setLeft(this._renderData.coordinate.left);\r\n        }\r\n        if (!this._isVisible) {\r\n            this.domNode.setVisibility('inherit');\r\n            this.domNode.setAttribute('monaco-visible-content-widget', 'true');\r\n            this._isVisible = true;\r\n        }\r\n        if (typeof this._actual.afterRender === 'function') {\r\n            safeInvoke(this._actual.afterRender, this._actual, this._renderData.position);\r\n        }\r\n    }\r\n}\r\nfunction safeInvoke(fn, thisArg, ...args) {\r\n    try {\r\n        return fn.call(thisArg, ...args);\r\n    }\r\n    catch (_a) {\r\n        // ignore\r\n        return null;\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}