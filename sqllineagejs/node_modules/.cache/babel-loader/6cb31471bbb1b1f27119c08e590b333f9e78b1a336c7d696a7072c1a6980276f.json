{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { onUnexpectedError } from '../../../base/common/errors.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport { Selection } from '../core/selection.js';\nimport { TextModel } from '../model/textModel.js';\nimport { LanguageConfigurationRegistry } from '../modes/languageConfigurationRegistry.js';\nconst autoCloseAlways = () => true;\nconst autoCloseNever = () => false;\nconst autoCloseBeforeWhitespace = chr => chr === ' ' || chr === '\\t';\nexport class CursorConfiguration {\n  constructor(languageIdentifier, modelOptions, configuration) {\n    this._languageIdentifier = languageIdentifier;\n    const options = configuration.options;\n    const layoutInfo = options.get(124 /* layoutInfo */);\n    this.readOnly = options.get(75 /* readOnly */);\n    this.tabSize = modelOptions.tabSize;\n    this.indentSize = modelOptions.indentSize;\n    this.insertSpaces = modelOptions.insertSpaces;\n    this.stickyTabStops = options.get(99 /* stickyTabStops */);\n    this.lineHeight = options.get(53 /* lineHeight */);\n    this.pageSize = Math.max(1, Math.floor(layoutInfo.height / this.lineHeight) - 2);\n    this.useTabStops = options.get(109 /* useTabStops */);\n    this.wordSeparators = options.get(110 /* wordSeparators */);\n    this.emptySelectionClipboard = options.get(28 /* emptySelectionClipboard */);\n    this.copyWithSyntaxHighlighting = options.get(18 /* copyWithSyntaxHighlighting */);\n    this.multiCursorMergeOverlapping = options.get(63 /* multiCursorMergeOverlapping */);\n    this.multiCursorPaste = options.get(65 /* multiCursorPaste */);\n    this.autoClosingBrackets = options.get(5 /* autoClosingBrackets */);\n    this.autoClosingQuotes = options.get(7 /* autoClosingQuotes */);\n    this.autoClosingOvertype = options.get(6 /* autoClosingOvertype */);\n    this.autoSurround = options.get(10 /* autoSurround */);\n    this.autoIndent = options.get(8 /* autoIndent */);\n    this.surroundingPairs = {};\n    this._electricChars = null;\n    this.shouldAutoCloseBefore = {\n      quote: CursorConfiguration._getShouldAutoClose(languageIdentifier, this.autoClosingQuotes),\n      bracket: CursorConfiguration._getShouldAutoClose(languageIdentifier, this.autoClosingBrackets)\n    };\n    this.autoClosingPairs = LanguageConfigurationRegistry.getAutoClosingPairs(languageIdentifier.id);\n    let surroundingPairs = CursorConfiguration._getSurroundingPairs(languageIdentifier);\n    if (surroundingPairs) {\n      for (const pair of surroundingPairs) {\n        this.surroundingPairs[pair.open] = pair.close;\n      }\n    }\n  }\n  static shouldRecreate(e) {\n    return e.hasChanged(124 /* layoutInfo */) || e.hasChanged(110 /* wordSeparators */) || e.hasChanged(28 /* emptySelectionClipboard */) || e.hasChanged(63 /* multiCursorMergeOverlapping */) || e.hasChanged(65 /* multiCursorPaste */) || e.hasChanged(5 /* autoClosingBrackets */) || e.hasChanged(7 /* autoClosingQuotes */) || e.hasChanged(6 /* autoClosingOvertype */) || e.hasChanged(10 /* autoSurround */) || e.hasChanged(109 /* useTabStops */) || e.hasChanged(53 /* lineHeight */) || e.hasChanged(75 /* readOnly */);\n  }\n\n  get electricChars() {\n    if (!this._electricChars) {\n      this._electricChars = {};\n      let electricChars = CursorConfiguration._getElectricCharacters(this._languageIdentifier);\n      if (electricChars) {\n        for (const char of electricChars) {\n          this._electricChars[char] = true;\n        }\n      }\n    }\n    return this._electricChars;\n  }\n  normalizeIndentation(str) {\n    return TextModel.normalizeIndentation(str, this.indentSize, this.insertSpaces);\n  }\n  static _getElectricCharacters(languageIdentifier) {\n    try {\n      return LanguageConfigurationRegistry.getElectricCharacters(languageIdentifier.id);\n    } catch (e) {\n      onUnexpectedError(e);\n      return null;\n    }\n  }\n  static _getShouldAutoClose(languageIdentifier, autoCloseConfig) {\n    switch (autoCloseConfig) {\n      case 'beforeWhitespace':\n        return autoCloseBeforeWhitespace;\n      case 'languageDefined':\n        return CursorConfiguration._getLanguageDefinedShouldAutoClose(languageIdentifier);\n      case 'always':\n        return autoCloseAlways;\n      case 'never':\n        return autoCloseNever;\n    }\n  }\n  static _getLanguageDefinedShouldAutoClose(languageIdentifier) {\n    try {\n      const autoCloseBeforeSet = LanguageConfigurationRegistry.getAutoCloseBeforeSet(languageIdentifier.id);\n      return c => autoCloseBeforeSet.indexOf(c) !== -1;\n    } catch (e) {\n      onUnexpectedError(e);\n      return autoCloseNever;\n    }\n  }\n  static _getSurroundingPairs(languageIdentifier) {\n    try {\n      return LanguageConfigurationRegistry.getSurroundingPairs(languageIdentifier.id);\n    } catch (e) {\n      onUnexpectedError(e);\n      return null;\n    }\n  }\n}\n/**\r\n * Represents the cursor state on either the model or on the view model.\r\n */\nexport class SingleCursorState {\n  constructor(selectionStart, selectionStartLeftoverVisibleColumns, position, leftoverVisibleColumns) {\n    this.selectionStart = selectionStart;\n    this.selectionStartLeftoverVisibleColumns = selectionStartLeftoverVisibleColumns;\n    this.position = position;\n    this.leftoverVisibleColumns = leftoverVisibleColumns;\n    this.selection = SingleCursorState._computeSelection(this.selectionStart, this.position);\n  }\n  equals(other) {\n    return this.selectionStartLeftoverVisibleColumns === other.selectionStartLeftoverVisibleColumns && this.leftoverVisibleColumns === other.leftoverVisibleColumns && this.position.equals(other.position) && this.selectionStart.equalsRange(other.selectionStart);\n  }\n  hasSelection() {\n    return !this.selection.isEmpty() || !this.selectionStart.isEmpty();\n  }\n  move(inSelectionMode, lineNumber, column, leftoverVisibleColumns) {\n    if (inSelectionMode) {\n      // move just position\n      return new SingleCursorState(this.selectionStart, this.selectionStartLeftoverVisibleColumns, new Position(lineNumber, column), leftoverVisibleColumns);\n    } else {\n      // move everything\n      return new SingleCursorState(new Range(lineNumber, column, lineNumber, column), leftoverVisibleColumns, new Position(lineNumber, column), leftoverVisibleColumns);\n    }\n  }\n  static _computeSelection(selectionStart, position) {\n    let startLineNumber, startColumn, endLineNumber, endColumn;\n    if (selectionStart.isEmpty()) {\n      startLineNumber = selectionStart.startLineNumber;\n      startColumn = selectionStart.startColumn;\n      endLineNumber = position.lineNumber;\n      endColumn = position.column;\n    } else {\n      if (position.isBeforeOrEqual(selectionStart.getStartPosition())) {\n        startLineNumber = selectionStart.endLineNumber;\n        startColumn = selectionStart.endColumn;\n        endLineNumber = position.lineNumber;\n        endColumn = position.column;\n      } else {\n        startLineNumber = selectionStart.startLineNumber;\n        startColumn = selectionStart.startColumn;\n        endLineNumber = position.lineNumber;\n        endColumn = position.column;\n      }\n    }\n    return new Selection(startLineNumber, startColumn, endLineNumber, endColumn);\n  }\n}\nexport class CursorContext {\n  constructor(model, coordinatesConverter, cursorConfig) {\n    this.model = model;\n    this.coordinatesConverter = coordinatesConverter;\n    this.cursorConfig = cursorConfig;\n  }\n}\nexport class PartialModelCursorState {\n  constructor(modelState) {\n    this.modelState = modelState;\n    this.viewState = null;\n  }\n}\nexport class PartialViewCursorState {\n  constructor(viewState) {\n    this.modelState = null;\n    this.viewState = viewState;\n  }\n}\nexport class CursorState {\n  constructor(modelState, viewState) {\n    this.modelState = modelState;\n    this.viewState = viewState;\n  }\n  static fromModelState(modelState) {\n    return new PartialModelCursorState(modelState);\n  }\n  static fromViewState(viewState) {\n    return new PartialViewCursorState(viewState);\n  }\n  static fromModelSelection(modelSelection) {\n    const selectionStartLineNumber = modelSelection.selectionStartLineNumber;\n    const selectionStartColumn = modelSelection.selectionStartColumn;\n    const positionLineNumber = modelSelection.positionLineNumber;\n    const positionColumn = modelSelection.positionColumn;\n    const modelState = new SingleCursorState(new Range(selectionStartLineNumber, selectionStartColumn, selectionStartLineNumber, selectionStartColumn), 0, new Position(positionLineNumber, positionColumn), 0);\n    return CursorState.fromModelState(modelState);\n  }\n  static fromModelSelections(modelSelections) {\n    let states = [];\n    for (let i = 0, len = modelSelections.length; i < len; i++) {\n      states[i] = this.fromModelSelection(modelSelections[i]);\n    }\n    return states;\n  }\n  equals(other) {\n    return this.viewState.equals(other.viewState) && this.modelState.equals(other.modelState);\n  }\n}\nexport class EditOperationResult {\n  constructor(type, commands, opts) {\n    this.type = type;\n    this.commands = commands;\n    this.shouldPushStackElementBefore = opts.shouldPushStackElementBefore;\n    this.shouldPushStackElementAfter = opts.shouldPushStackElementAfter;\n  }\n}\n/**\r\n * Common operations that work and make sense both on the model and on the view model.\r\n */\nexport class CursorColumns {\n  static visibleColumnFromColumn(lineContent, column, tabSize) {\n    const lineContentLength = lineContent.length;\n    const endOffset = column - 1 < lineContentLength ? column - 1 : lineContentLength;\n    let result = 0;\n    let i = 0;\n    while (i < endOffset) {\n      const codePoint = strings.getNextCodePoint(lineContent, endOffset, i);\n      i += codePoint >= 65536 /* UNICODE_SUPPLEMENTARY_PLANE_BEGIN */ ? 2 : 1;\n      if (codePoint === 9 /* Tab */) {\n        result = CursorColumns.nextRenderTabStop(result, tabSize);\n      } else {\n        let graphemeBreakType = strings.getGraphemeBreakType(codePoint);\n        while (i < endOffset) {\n          const nextCodePoint = strings.getNextCodePoint(lineContent, endOffset, i);\n          const nextGraphemeBreakType = strings.getGraphemeBreakType(nextCodePoint);\n          if (strings.breakBetweenGraphemeBreakType(graphemeBreakType, nextGraphemeBreakType)) {\n            break;\n          }\n          i += nextCodePoint >= 65536 /* UNICODE_SUPPLEMENTARY_PLANE_BEGIN */ ? 2 : 1;\n          graphemeBreakType = nextGraphemeBreakType;\n        }\n        if (strings.isFullWidthCharacter(codePoint) || strings.isEmojiImprecise(codePoint)) {\n          result = result + 2;\n        } else {\n          result = result + 1;\n        }\n      }\n    }\n    return result;\n  }\n  static visibleColumnFromColumn2(config, model, position) {\n    return this.visibleColumnFromColumn(model.getLineContent(position.lineNumber), position.column, config.tabSize);\n  }\n  static columnFromVisibleColumn(lineContent, visibleColumn, tabSize) {\n    if (visibleColumn <= 0) {\n      return 1;\n    }\n    const lineLength = lineContent.length;\n    let beforeVisibleColumn = 0;\n    let beforeColumn = 1;\n    let i = 0;\n    while (i < lineLength) {\n      const codePoint = strings.getNextCodePoint(lineContent, lineLength, i);\n      i += codePoint >= 65536 /* UNICODE_SUPPLEMENTARY_PLANE_BEGIN */ ? 2 : 1;\n      let afterVisibleColumn;\n      if (codePoint === 9 /* Tab */) {\n        afterVisibleColumn = CursorColumns.nextRenderTabStop(beforeVisibleColumn, tabSize);\n      } else {\n        let graphemeBreakType = strings.getGraphemeBreakType(codePoint);\n        while (i < lineLength) {\n          const nextCodePoint = strings.getNextCodePoint(lineContent, lineLength, i);\n          const nextGraphemeBreakType = strings.getGraphemeBreakType(nextCodePoint);\n          if (strings.breakBetweenGraphemeBreakType(graphemeBreakType, nextGraphemeBreakType)) {\n            break;\n          }\n          i += nextCodePoint >= 65536 /* UNICODE_SUPPLEMENTARY_PLANE_BEGIN */ ? 2 : 1;\n          graphemeBreakType = nextGraphemeBreakType;\n        }\n        if (strings.isFullWidthCharacter(codePoint) || strings.isEmojiImprecise(codePoint)) {\n          afterVisibleColumn = beforeVisibleColumn + 2;\n        } else {\n          afterVisibleColumn = beforeVisibleColumn + 1;\n        }\n      }\n      const afterColumn = i + 1;\n      if (afterVisibleColumn >= visibleColumn) {\n        const beforeDelta = visibleColumn - beforeVisibleColumn;\n        const afterDelta = afterVisibleColumn - visibleColumn;\n        if (afterDelta < beforeDelta) {\n          return afterColumn;\n        } else {\n          return beforeColumn;\n        }\n      }\n      beforeVisibleColumn = afterVisibleColumn;\n      beforeColumn = afterColumn;\n    }\n    // walked the entire string\n    return lineLength + 1;\n  }\n  static columnFromVisibleColumn2(config, model, lineNumber, visibleColumn) {\n    let result = this.columnFromVisibleColumn(model.getLineContent(lineNumber), visibleColumn, config.tabSize);\n    let minColumn = model.getLineMinColumn(lineNumber);\n    if (result < minColumn) {\n      return minColumn;\n    }\n    let maxColumn = model.getLineMaxColumn(lineNumber);\n    if (result > maxColumn) {\n      return maxColumn;\n    }\n    return result;\n  }\n  /**\r\n   * ATTENTION: This works with 0-based columns (as oposed to the regular 1-based columns)\r\n   */\n  static nextRenderTabStop(visibleColumn, tabSize) {\n    return visibleColumn + tabSize - visibleColumn % tabSize;\n  }\n  /**\r\n   * ATTENTION: This works with 0-based columns (as oposed to the regular 1-based columns)\r\n   */\n  static nextIndentTabStop(visibleColumn, indentSize) {\n    return visibleColumn + indentSize - visibleColumn % indentSize;\n  }\n  /**\r\n   * ATTENTION: This works with 0-based columns (as opposed to the regular 1-based columns)\r\n   */\n  static prevRenderTabStop(column, tabSize) {\n    return column - 1 - (column - 1) % tabSize;\n  }\n  /**\r\n   * ATTENTION: This works with 0-based columns (as opposed to the regular 1-based columns)\r\n   */\n  static prevIndentTabStop(column, indentSize) {\n    return column - 1 - (column - 1) % indentSize;\n  }\n}\nexport function isQuote(ch) {\n  return ch === '\\'' || ch === '\"' || ch === '`';\n}","map":{"version":3,"names":["onUnexpectedError","strings","Position","Range","Selection","TextModel","LanguageConfigurationRegistry","autoCloseAlways","autoCloseNever","autoCloseBeforeWhitespace","chr","CursorConfiguration","constructor","languageIdentifier","modelOptions","configuration","_languageIdentifier","options","layoutInfo","get","readOnly","tabSize","indentSize","insertSpaces","stickyTabStops","lineHeight","pageSize","Math","max","floor","height","useTabStops","wordSeparators","emptySelectionClipboard","copyWithSyntaxHighlighting","multiCursorMergeOverlapping","multiCursorPaste","autoClosingBrackets","autoClosingQuotes","autoClosingOvertype","autoSurround","autoIndent","surroundingPairs","_electricChars","shouldAutoCloseBefore","quote","_getShouldAutoClose","bracket","autoClosingPairs","getAutoClosingPairs","id","_getSurroundingPairs","pair","open","close","shouldRecreate","e","hasChanged","electricChars","_getElectricCharacters","char","normalizeIndentation","str","getElectricCharacters","autoCloseConfig","_getLanguageDefinedShouldAutoClose","autoCloseBeforeSet","getAutoCloseBeforeSet","c","indexOf","getSurroundingPairs","SingleCursorState","selectionStart","selectionStartLeftoverVisibleColumns","position","leftoverVisibleColumns","selection","_computeSelection","equals","other","equalsRange","hasSelection","isEmpty","move","inSelectionMode","lineNumber","column","startLineNumber","startColumn","endLineNumber","endColumn","isBeforeOrEqual","getStartPosition","CursorContext","model","coordinatesConverter","cursorConfig","PartialModelCursorState","modelState","viewState","PartialViewCursorState","CursorState","fromModelState","fromViewState","fromModelSelection","modelSelection","selectionStartLineNumber","selectionStartColumn","positionLineNumber","positionColumn","fromModelSelections","modelSelections","states","i","len","length","EditOperationResult","type","commands","opts","shouldPushStackElementBefore","shouldPushStackElementAfter","CursorColumns","visibleColumnFromColumn","lineContent","lineContentLength","endOffset","result","codePoint","getNextCodePoint","nextRenderTabStop","graphemeBreakType","getGraphemeBreakType","nextCodePoint","nextGraphemeBreakType","breakBetweenGraphemeBreakType","isFullWidthCharacter","isEmojiImprecise","visibleColumnFromColumn2","config","getLineContent","columnFromVisibleColumn","visibleColumn","lineLength","beforeVisibleColumn","beforeColumn","afterVisibleColumn","afterColumn","beforeDelta","afterDelta","columnFromVisibleColumn2","minColumn","getLineMinColumn","maxColumn","getLineMaxColumn","nextIndentTabStop","prevRenderTabStop","prevIndentTabStop","isQuote","ch"],"sources":["C:/Users/Administrator/Desktop/sqllineage-master/sqllineagejs/node_modules/monaco-editor/esm/vs/editor/common/controller/cursorCommon.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { onUnexpectedError } from '../../../base/common/errors.js';\r\nimport * as strings from '../../../base/common/strings.js';\r\nimport { Position } from '../core/position.js';\r\nimport { Range } from '../core/range.js';\r\nimport { Selection } from '../core/selection.js';\r\nimport { TextModel } from '../model/textModel.js';\r\nimport { LanguageConfigurationRegistry } from '../modes/languageConfigurationRegistry.js';\r\nconst autoCloseAlways = () => true;\r\nconst autoCloseNever = () => false;\r\nconst autoCloseBeforeWhitespace = (chr) => (chr === ' ' || chr === '\\t');\r\nexport class CursorConfiguration {\r\n    constructor(languageIdentifier, modelOptions, configuration) {\r\n        this._languageIdentifier = languageIdentifier;\r\n        const options = configuration.options;\r\n        const layoutInfo = options.get(124 /* layoutInfo */);\r\n        this.readOnly = options.get(75 /* readOnly */);\r\n        this.tabSize = modelOptions.tabSize;\r\n        this.indentSize = modelOptions.indentSize;\r\n        this.insertSpaces = modelOptions.insertSpaces;\r\n        this.stickyTabStops = options.get(99 /* stickyTabStops */);\r\n        this.lineHeight = options.get(53 /* lineHeight */);\r\n        this.pageSize = Math.max(1, Math.floor(layoutInfo.height / this.lineHeight) - 2);\r\n        this.useTabStops = options.get(109 /* useTabStops */);\r\n        this.wordSeparators = options.get(110 /* wordSeparators */);\r\n        this.emptySelectionClipboard = options.get(28 /* emptySelectionClipboard */);\r\n        this.copyWithSyntaxHighlighting = options.get(18 /* copyWithSyntaxHighlighting */);\r\n        this.multiCursorMergeOverlapping = options.get(63 /* multiCursorMergeOverlapping */);\r\n        this.multiCursorPaste = options.get(65 /* multiCursorPaste */);\r\n        this.autoClosingBrackets = options.get(5 /* autoClosingBrackets */);\r\n        this.autoClosingQuotes = options.get(7 /* autoClosingQuotes */);\r\n        this.autoClosingOvertype = options.get(6 /* autoClosingOvertype */);\r\n        this.autoSurround = options.get(10 /* autoSurround */);\r\n        this.autoIndent = options.get(8 /* autoIndent */);\r\n        this.surroundingPairs = {};\r\n        this._electricChars = null;\r\n        this.shouldAutoCloseBefore = {\r\n            quote: CursorConfiguration._getShouldAutoClose(languageIdentifier, this.autoClosingQuotes),\r\n            bracket: CursorConfiguration._getShouldAutoClose(languageIdentifier, this.autoClosingBrackets)\r\n        };\r\n        this.autoClosingPairs = LanguageConfigurationRegistry.getAutoClosingPairs(languageIdentifier.id);\r\n        let surroundingPairs = CursorConfiguration._getSurroundingPairs(languageIdentifier);\r\n        if (surroundingPairs) {\r\n            for (const pair of surroundingPairs) {\r\n                this.surroundingPairs[pair.open] = pair.close;\r\n            }\r\n        }\r\n    }\r\n    static shouldRecreate(e) {\r\n        return (e.hasChanged(124 /* layoutInfo */)\r\n            || e.hasChanged(110 /* wordSeparators */)\r\n            || e.hasChanged(28 /* emptySelectionClipboard */)\r\n            || e.hasChanged(63 /* multiCursorMergeOverlapping */)\r\n            || e.hasChanged(65 /* multiCursorPaste */)\r\n            || e.hasChanged(5 /* autoClosingBrackets */)\r\n            || e.hasChanged(7 /* autoClosingQuotes */)\r\n            || e.hasChanged(6 /* autoClosingOvertype */)\r\n            || e.hasChanged(10 /* autoSurround */)\r\n            || e.hasChanged(109 /* useTabStops */)\r\n            || e.hasChanged(53 /* lineHeight */)\r\n            || e.hasChanged(75 /* readOnly */));\r\n    }\r\n    get electricChars() {\r\n        if (!this._electricChars) {\r\n            this._electricChars = {};\r\n            let electricChars = CursorConfiguration._getElectricCharacters(this._languageIdentifier);\r\n            if (electricChars) {\r\n                for (const char of electricChars) {\r\n                    this._electricChars[char] = true;\r\n                }\r\n            }\r\n        }\r\n        return this._electricChars;\r\n    }\r\n    normalizeIndentation(str) {\r\n        return TextModel.normalizeIndentation(str, this.indentSize, this.insertSpaces);\r\n    }\r\n    static _getElectricCharacters(languageIdentifier) {\r\n        try {\r\n            return LanguageConfigurationRegistry.getElectricCharacters(languageIdentifier.id);\r\n        }\r\n        catch (e) {\r\n            onUnexpectedError(e);\r\n            return null;\r\n        }\r\n    }\r\n    static _getShouldAutoClose(languageIdentifier, autoCloseConfig) {\r\n        switch (autoCloseConfig) {\r\n            case 'beforeWhitespace':\r\n                return autoCloseBeforeWhitespace;\r\n            case 'languageDefined':\r\n                return CursorConfiguration._getLanguageDefinedShouldAutoClose(languageIdentifier);\r\n            case 'always':\r\n                return autoCloseAlways;\r\n            case 'never':\r\n                return autoCloseNever;\r\n        }\r\n    }\r\n    static _getLanguageDefinedShouldAutoClose(languageIdentifier) {\r\n        try {\r\n            const autoCloseBeforeSet = LanguageConfigurationRegistry.getAutoCloseBeforeSet(languageIdentifier.id);\r\n            return c => autoCloseBeforeSet.indexOf(c) !== -1;\r\n        }\r\n        catch (e) {\r\n            onUnexpectedError(e);\r\n            return autoCloseNever;\r\n        }\r\n    }\r\n    static _getSurroundingPairs(languageIdentifier) {\r\n        try {\r\n            return LanguageConfigurationRegistry.getSurroundingPairs(languageIdentifier.id);\r\n        }\r\n        catch (e) {\r\n            onUnexpectedError(e);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n/**\r\n * Represents the cursor state on either the model or on the view model.\r\n */\r\nexport class SingleCursorState {\r\n    constructor(selectionStart, selectionStartLeftoverVisibleColumns, position, leftoverVisibleColumns) {\r\n        this.selectionStart = selectionStart;\r\n        this.selectionStartLeftoverVisibleColumns = selectionStartLeftoverVisibleColumns;\r\n        this.position = position;\r\n        this.leftoverVisibleColumns = leftoverVisibleColumns;\r\n        this.selection = SingleCursorState._computeSelection(this.selectionStart, this.position);\r\n    }\r\n    equals(other) {\r\n        return (this.selectionStartLeftoverVisibleColumns === other.selectionStartLeftoverVisibleColumns\r\n            && this.leftoverVisibleColumns === other.leftoverVisibleColumns\r\n            && this.position.equals(other.position)\r\n            && this.selectionStart.equalsRange(other.selectionStart));\r\n    }\r\n    hasSelection() {\r\n        return (!this.selection.isEmpty() || !this.selectionStart.isEmpty());\r\n    }\r\n    move(inSelectionMode, lineNumber, column, leftoverVisibleColumns) {\r\n        if (inSelectionMode) {\r\n            // move just position\r\n            return new SingleCursorState(this.selectionStart, this.selectionStartLeftoverVisibleColumns, new Position(lineNumber, column), leftoverVisibleColumns);\r\n        }\r\n        else {\r\n            // move everything\r\n            return new SingleCursorState(new Range(lineNumber, column, lineNumber, column), leftoverVisibleColumns, new Position(lineNumber, column), leftoverVisibleColumns);\r\n        }\r\n    }\r\n    static _computeSelection(selectionStart, position) {\r\n        let startLineNumber, startColumn, endLineNumber, endColumn;\r\n        if (selectionStart.isEmpty()) {\r\n            startLineNumber = selectionStart.startLineNumber;\r\n            startColumn = selectionStart.startColumn;\r\n            endLineNumber = position.lineNumber;\r\n            endColumn = position.column;\r\n        }\r\n        else {\r\n            if (position.isBeforeOrEqual(selectionStart.getStartPosition())) {\r\n                startLineNumber = selectionStart.endLineNumber;\r\n                startColumn = selectionStart.endColumn;\r\n                endLineNumber = position.lineNumber;\r\n                endColumn = position.column;\r\n            }\r\n            else {\r\n                startLineNumber = selectionStart.startLineNumber;\r\n                startColumn = selectionStart.startColumn;\r\n                endLineNumber = position.lineNumber;\r\n                endColumn = position.column;\r\n            }\r\n        }\r\n        return new Selection(startLineNumber, startColumn, endLineNumber, endColumn);\r\n    }\r\n}\r\nexport class CursorContext {\r\n    constructor(model, coordinatesConverter, cursorConfig) {\r\n        this.model = model;\r\n        this.coordinatesConverter = coordinatesConverter;\r\n        this.cursorConfig = cursorConfig;\r\n    }\r\n}\r\nexport class PartialModelCursorState {\r\n    constructor(modelState) {\r\n        this.modelState = modelState;\r\n        this.viewState = null;\r\n    }\r\n}\r\nexport class PartialViewCursorState {\r\n    constructor(viewState) {\r\n        this.modelState = null;\r\n        this.viewState = viewState;\r\n    }\r\n}\r\nexport class CursorState {\r\n    constructor(modelState, viewState) {\r\n        this.modelState = modelState;\r\n        this.viewState = viewState;\r\n    }\r\n    static fromModelState(modelState) {\r\n        return new PartialModelCursorState(modelState);\r\n    }\r\n    static fromViewState(viewState) {\r\n        return new PartialViewCursorState(viewState);\r\n    }\r\n    static fromModelSelection(modelSelection) {\r\n        const selectionStartLineNumber = modelSelection.selectionStartLineNumber;\r\n        const selectionStartColumn = modelSelection.selectionStartColumn;\r\n        const positionLineNumber = modelSelection.positionLineNumber;\r\n        const positionColumn = modelSelection.positionColumn;\r\n        const modelState = new SingleCursorState(new Range(selectionStartLineNumber, selectionStartColumn, selectionStartLineNumber, selectionStartColumn), 0, new Position(positionLineNumber, positionColumn), 0);\r\n        return CursorState.fromModelState(modelState);\r\n    }\r\n    static fromModelSelections(modelSelections) {\r\n        let states = [];\r\n        for (let i = 0, len = modelSelections.length; i < len; i++) {\r\n            states[i] = this.fromModelSelection(modelSelections[i]);\r\n        }\r\n        return states;\r\n    }\r\n    equals(other) {\r\n        return (this.viewState.equals(other.viewState) && this.modelState.equals(other.modelState));\r\n    }\r\n}\r\nexport class EditOperationResult {\r\n    constructor(type, commands, opts) {\r\n        this.type = type;\r\n        this.commands = commands;\r\n        this.shouldPushStackElementBefore = opts.shouldPushStackElementBefore;\r\n        this.shouldPushStackElementAfter = opts.shouldPushStackElementAfter;\r\n    }\r\n}\r\n/**\r\n * Common operations that work and make sense both on the model and on the view model.\r\n */\r\nexport class CursorColumns {\r\n    static visibleColumnFromColumn(lineContent, column, tabSize) {\r\n        const lineContentLength = lineContent.length;\r\n        const endOffset = column - 1 < lineContentLength ? column - 1 : lineContentLength;\r\n        let result = 0;\r\n        let i = 0;\r\n        while (i < endOffset) {\r\n            const codePoint = strings.getNextCodePoint(lineContent, endOffset, i);\r\n            i += (codePoint >= 65536 /* UNICODE_SUPPLEMENTARY_PLANE_BEGIN */ ? 2 : 1);\r\n            if (codePoint === 9 /* Tab */) {\r\n                result = CursorColumns.nextRenderTabStop(result, tabSize);\r\n            }\r\n            else {\r\n                let graphemeBreakType = strings.getGraphemeBreakType(codePoint);\r\n                while (i < endOffset) {\r\n                    const nextCodePoint = strings.getNextCodePoint(lineContent, endOffset, i);\r\n                    const nextGraphemeBreakType = strings.getGraphemeBreakType(nextCodePoint);\r\n                    if (strings.breakBetweenGraphemeBreakType(graphemeBreakType, nextGraphemeBreakType)) {\r\n                        break;\r\n                    }\r\n                    i += (nextCodePoint >= 65536 /* UNICODE_SUPPLEMENTARY_PLANE_BEGIN */ ? 2 : 1);\r\n                    graphemeBreakType = nextGraphemeBreakType;\r\n                }\r\n                if (strings.isFullWidthCharacter(codePoint) || strings.isEmojiImprecise(codePoint)) {\r\n                    result = result + 2;\r\n                }\r\n                else {\r\n                    result = result + 1;\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    static visibleColumnFromColumn2(config, model, position) {\r\n        return this.visibleColumnFromColumn(model.getLineContent(position.lineNumber), position.column, config.tabSize);\r\n    }\r\n    static columnFromVisibleColumn(lineContent, visibleColumn, tabSize) {\r\n        if (visibleColumn <= 0) {\r\n            return 1;\r\n        }\r\n        const lineLength = lineContent.length;\r\n        let beforeVisibleColumn = 0;\r\n        let beforeColumn = 1;\r\n        let i = 0;\r\n        while (i < lineLength) {\r\n            const codePoint = strings.getNextCodePoint(lineContent, lineLength, i);\r\n            i += (codePoint >= 65536 /* UNICODE_SUPPLEMENTARY_PLANE_BEGIN */ ? 2 : 1);\r\n            let afterVisibleColumn;\r\n            if (codePoint === 9 /* Tab */) {\r\n                afterVisibleColumn = CursorColumns.nextRenderTabStop(beforeVisibleColumn, tabSize);\r\n            }\r\n            else {\r\n                let graphemeBreakType = strings.getGraphemeBreakType(codePoint);\r\n                while (i < lineLength) {\r\n                    const nextCodePoint = strings.getNextCodePoint(lineContent, lineLength, i);\r\n                    const nextGraphemeBreakType = strings.getGraphemeBreakType(nextCodePoint);\r\n                    if (strings.breakBetweenGraphemeBreakType(graphemeBreakType, nextGraphemeBreakType)) {\r\n                        break;\r\n                    }\r\n                    i += (nextCodePoint >= 65536 /* UNICODE_SUPPLEMENTARY_PLANE_BEGIN */ ? 2 : 1);\r\n                    graphemeBreakType = nextGraphemeBreakType;\r\n                }\r\n                if (strings.isFullWidthCharacter(codePoint) || strings.isEmojiImprecise(codePoint)) {\r\n                    afterVisibleColumn = beforeVisibleColumn + 2;\r\n                }\r\n                else {\r\n                    afterVisibleColumn = beforeVisibleColumn + 1;\r\n                }\r\n            }\r\n            const afterColumn = i + 1;\r\n            if (afterVisibleColumn >= visibleColumn) {\r\n                const beforeDelta = visibleColumn - beforeVisibleColumn;\r\n                const afterDelta = afterVisibleColumn - visibleColumn;\r\n                if (afterDelta < beforeDelta) {\r\n                    return afterColumn;\r\n                }\r\n                else {\r\n                    return beforeColumn;\r\n                }\r\n            }\r\n            beforeVisibleColumn = afterVisibleColumn;\r\n            beforeColumn = afterColumn;\r\n        }\r\n        // walked the entire string\r\n        return lineLength + 1;\r\n    }\r\n    static columnFromVisibleColumn2(config, model, lineNumber, visibleColumn) {\r\n        let result = this.columnFromVisibleColumn(model.getLineContent(lineNumber), visibleColumn, config.tabSize);\r\n        let minColumn = model.getLineMinColumn(lineNumber);\r\n        if (result < minColumn) {\r\n            return minColumn;\r\n        }\r\n        let maxColumn = model.getLineMaxColumn(lineNumber);\r\n        if (result > maxColumn) {\r\n            return maxColumn;\r\n        }\r\n        return result;\r\n    }\r\n    /**\r\n     * ATTENTION: This works with 0-based columns (as oposed to the regular 1-based columns)\r\n     */\r\n    static nextRenderTabStop(visibleColumn, tabSize) {\r\n        return visibleColumn + tabSize - visibleColumn % tabSize;\r\n    }\r\n    /**\r\n     * ATTENTION: This works with 0-based columns (as oposed to the regular 1-based columns)\r\n     */\r\n    static nextIndentTabStop(visibleColumn, indentSize) {\r\n        return visibleColumn + indentSize - visibleColumn % indentSize;\r\n    }\r\n    /**\r\n     * ATTENTION: This works with 0-based columns (as opposed to the regular 1-based columns)\r\n     */\r\n    static prevRenderTabStop(column, tabSize) {\r\n        return column - 1 - (column - 1) % tabSize;\r\n    }\r\n    /**\r\n     * ATTENTION: This works with 0-based columns (as opposed to the regular 1-based columns)\r\n     */\r\n    static prevIndentTabStop(column, indentSize) {\r\n        return column - 1 - (column - 1) % indentSize;\r\n    }\r\n}\r\nexport function isQuote(ch) {\r\n    return (ch === '\\'' || ch === '\"' || ch === '`');\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}