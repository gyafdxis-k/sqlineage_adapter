{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\nimport { TernarySearchTree } from '../../../base/common/map.js';\nexport const IWorkspaceContextService = createDecorator('contextService');\nexport class Workspace {\n  constructor(_id, folders, _configuration, _ignorePathCasing) {\n    this._id = _id;\n    this._configuration = _configuration;\n    this._ignorePathCasing = _ignorePathCasing;\n    this._foldersMap = TernarySearchTree.forUris(this._ignorePathCasing);\n    this.folders = folders;\n  }\n  get folders() {\n    return this._folders;\n  }\n  set folders(folders) {\n    this._folders = folders;\n    this.updateFoldersMap();\n  }\n  get id() {\n    return this._id;\n  }\n  get configuration() {\n    return this._configuration;\n  }\n  set configuration(configuration) {\n    this._configuration = configuration;\n  }\n  getFolder(resource) {\n    if (!resource) {\n      return null;\n    }\n    return this._foldersMap.findSubstr(resource.with({\n      scheme: resource.scheme,\n      authority: resource.authority,\n      path: resource.path\n    })) || null;\n  }\n  updateFoldersMap() {\n    this._foldersMap = TernarySearchTree.forUris(this._ignorePathCasing);\n    for (const folder of this.folders) {\n      this._foldersMap.set(folder.uri, folder);\n    }\n  }\n  toJSON() {\n    return {\n      id: this.id,\n      folders: this.folders,\n      configuration: this.configuration\n    };\n  }\n}\nexport class WorkspaceFolder {\n  constructor(data, raw) {\n    this.raw = raw;\n    this.uri = data.uri;\n    this.index = data.index;\n    this.name = data.name;\n  }\n  toJSON() {\n    return {\n      uri: this.uri,\n      name: this.name,\n      index: this.index\n    };\n  }\n}","map":{"version":3,"names":["createDecorator","TernarySearchTree","IWorkspaceContextService","Workspace","constructor","_id","folders","_configuration","_ignorePathCasing","_foldersMap","forUris","_folders","updateFoldersMap","id","configuration","getFolder","resource","findSubstr","with","scheme","authority","path","folder","set","uri","toJSON","WorkspaceFolder","data","raw","index","name"],"sources":["C:/Users/Administrator/Desktop/sqllineage-master/sqllineagejs/node_modules/monaco-editor/esm/vs/platform/workspace/common/workspace.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\r\nimport { TernarySearchTree } from '../../../base/common/map.js';\r\nexport const IWorkspaceContextService = createDecorator('contextService');\r\nexport class Workspace {\r\n    constructor(_id, folders, _configuration, _ignorePathCasing) {\r\n        this._id = _id;\r\n        this._configuration = _configuration;\r\n        this._ignorePathCasing = _ignorePathCasing;\r\n        this._foldersMap = TernarySearchTree.forUris(this._ignorePathCasing);\r\n        this.folders = folders;\r\n    }\r\n    get folders() {\r\n        return this._folders;\r\n    }\r\n    set folders(folders) {\r\n        this._folders = folders;\r\n        this.updateFoldersMap();\r\n    }\r\n    get id() {\r\n        return this._id;\r\n    }\r\n    get configuration() {\r\n        return this._configuration;\r\n    }\r\n    set configuration(configuration) {\r\n        this._configuration = configuration;\r\n    }\r\n    getFolder(resource) {\r\n        if (!resource) {\r\n            return null;\r\n        }\r\n        return this._foldersMap.findSubstr(resource.with({\r\n            scheme: resource.scheme,\r\n            authority: resource.authority,\r\n            path: resource.path\r\n        })) || null;\r\n    }\r\n    updateFoldersMap() {\r\n        this._foldersMap = TernarySearchTree.forUris(this._ignorePathCasing);\r\n        for (const folder of this.folders) {\r\n            this._foldersMap.set(folder.uri, folder);\r\n        }\r\n    }\r\n    toJSON() {\r\n        return { id: this.id, folders: this.folders, configuration: this.configuration };\r\n    }\r\n}\r\nexport class WorkspaceFolder {\r\n    constructor(data, raw) {\r\n        this.raw = raw;\r\n        this.uri = data.uri;\r\n        this.index = data.index;\r\n        this.name = data.name;\r\n    }\r\n    toJSON() {\r\n        return { uri: this.uri, name: this.name, index: this.index };\r\n    }\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,eAAe,QAAQ,6CAA6C;AAC7E,SAASC,iBAAiB,QAAQ,6BAA6B;AAC/D,OAAO,MAAMC,wBAAwB,GAAGF,eAAe,CAAC,gBAAgB,CAAC;AACzE,OAAO,MAAMG,SAAS,CAAC;EACnBC,WAAWA,CAACC,GAAG,EAAEC,OAAO,EAAEC,cAAc,EAAEC,iBAAiB,EAAE;IACzD,IAAI,CAACH,GAAG,GAAGA,GAAG;IACd,IAAI,CAACE,cAAc,GAAGA,cAAc;IACpC,IAAI,CAACC,iBAAiB,GAAGA,iBAAiB;IAC1C,IAAI,CAACC,WAAW,GAAGR,iBAAiB,CAACS,OAAO,CAAC,IAAI,CAACF,iBAAiB,CAAC;IACpE,IAAI,CAACF,OAAO,GAAGA,OAAO;EAC1B;EACA,IAAIA,OAAOA,CAAA,EAAG;IACV,OAAO,IAAI,CAACK,QAAQ;EACxB;EACA,IAAIL,OAAOA,CAACA,OAAO,EAAE;IACjB,IAAI,CAACK,QAAQ,GAAGL,OAAO;IACvB,IAAI,CAACM,gBAAgB,CAAC,CAAC;EAC3B;EACA,IAAIC,EAAEA,CAAA,EAAG;IACL,OAAO,IAAI,CAACR,GAAG;EACnB;EACA,IAAIS,aAAaA,CAAA,EAAG;IAChB,OAAO,IAAI,CAACP,cAAc;EAC9B;EACA,IAAIO,aAAaA,CAACA,aAAa,EAAE;IAC7B,IAAI,CAACP,cAAc,GAAGO,aAAa;EACvC;EACAC,SAASA,CAACC,QAAQ,EAAE;IAChB,IAAI,CAACA,QAAQ,EAAE;MACX,OAAO,IAAI;IACf;IACA,OAAO,IAAI,CAACP,WAAW,CAACQ,UAAU,CAACD,QAAQ,CAACE,IAAI,CAAC;MAC7CC,MAAM,EAAEH,QAAQ,CAACG,MAAM;MACvBC,SAAS,EAAEJ,QAAQ,CAACI,SAAS;MAC7BC,IAAI,EAAEL,QAAQ,CAACK;IACnB,CAAC,CAAC,CAAC,IAAI,IAAI;EACf;EACAT,gBAAgBA,CAAA,EAAG;IACf,IAAI,CAACH,WAAW,GAAGR,iBAAiB,CAACS,OAAO,CAAC,IAAI,CAACF,iBAAiB,CAAC;IACpE,KAAK,MAAMc,MAAM,IAAI,IAAI,CAAChB,OAAO,EAAE;MAC/B,IAAI,CAACG,WAAW,CAACc,GAAG,CAACD,MAAM,CAACE,GAAG,EAAEF,MAAM,CAAC;IAC5C;EACJ;EACAG,MAAMA,CAAA,EAAG;IACL,OAAO;MAAEZ,EAAE,EAAE,IAAI,CAACA,EAAE;MAAEP,OAAO,EAAE,IAAI,CAACA,OAAO;MAAEQ,aAAa,EAAE,IAAI,CAACA;IAAc,CAAC;EACpF;AACJ;AACA,OAAO,MAAMY,eAAe,CAAC;EACzBtB,WAAWA,CAACuB,IAAI,EAAEC,GAAG,EAAE;IACnB,IAAI,CAACA,GAAG,GAAGA,GAAG;IACd,IAAI,CAACJ,GAAG,GAAGG,IAAI,CAACH,GAAG;IACnB,IAAI,CAACK,KAAK,GAAGF,IAAI,CAACE,KAAK;IACvB,IAAI,CAACC,IAAI,GAAGH,IAAI,CAACG,IAAI;EACzB;EACAL,MAAMA,CAAA,EAAG;IACL,OAAO;MAAED,GAAG,EAAE,IAAI,CAACA,GAAG;MAAEM,IAAI,EAAE,IAAI,CAACA,IAAI;MAAED,KAAK,EAAE,IAAI,CAACA;IAAM,CAAC;EAChE;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}