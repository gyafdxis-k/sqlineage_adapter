{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../nls.js';\nimport { KeyChord } from '../../../base/common/keyCodes.js';\nimport { EditorAction, registerEditorAction } from '../../browser/editorExtensions.js';\nimport { Range } from '../../common/core/range.js';\nimport { EditorContextKeys } from '../../common/editorContextKeys.js';\nimport { BlockCommentCommand } from './blockCommentCommand.js';\nimport { LineCommentCommand } from './lineCommentCommand.js';\nimport { MenuId } from '../../../platform/actions/common/actions.js';\nclass CommentLineAction extends EditorAction {\n  constructor(type, opts) {\n    super(opts);\n    this._type = type;\n  }\n  run(accessor, editor) {\n    if (!editor.hasModel()) {\n      return;\n    }\n    const model = editor.getModel();\n    const commands = [];\n    const modelOptions = model.getOptions();\n    const commentsOptions = editor.getOption(16 /* comments */);\n    const selections = editor.getSelections().map((selection, index) => ({\n      selection,\n      index,\n      ignoreFirstLine: false\n    }));\n    selections.sort((a, b) => Range.compareRangesUsingStarts(a.selection, b.selection));\n    // Remove selections that would result in copying the same line\n    let prev = selections[0];\n    for (let i = 1; i < selections.length; i++) {\n      const curr = selections[i];\n      if (prev.selection.endLineNumber === curr.selection.startLineNumber) {\n        // these two selections would copy the same line\n        if (prev.index < curr.index) {\n          // prev wins\n          curr.ignoreFirstLine = true;\n        } else {\n          // curr wins\n          prev.ignoreFirstLine = true;\n          prev = curr;\n        }\n      }\n    }\n    for (const selection of selections) {\n      commands.push(new LineCommentCommand(selection.selection, modelOptions.tabSize, this._type, commentsOptions.insertSpace, commentsOptions.ignoreEmptyLines, selection.ignoreFirstLine));\n    }\n    editor.pushUndoStop();\n    editor.executeCommands(this.id, commands);\n    editor.pushUndoStop();\n  }\n}\nclass ToggleCommentLineAction extends CommentLineAction {\n  constructor() {\n    super(0 /* Toggle */, {\n      id: 'editor.action.commentLine',\n      label: nls.localize('comment.line', \"Toggle Line Comment\"),\n      alias: 'Toggle Line Comment',\n      precondition: EditorContextKeys.writable,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: 2048 /* CtrlCmd */ | 85 /* US_SLASH */,\n        weight: 100 /* EditorContrib */\n      },\n\n      menuOpts: {\n        menuId: MenuId.MenubarEditMenu,\n        group: '5_insert',\n        title: nls.localize({\n          key: 'miToggleLineComment',\n          comment: ['&& denotes a mnemonic']\n        }, \"&&Toggle Line Comment\"),\n        order: 1\n      }\n    });\n  }\n}\nclass AddLineCommentAction extends CommentLineAction {\n  constructor() {\n    super(1 /* ForceAdd */, {\n      id: 'editor.action.addCommentLine',\n      label: nls.localize('comment.line.add', \"Add Line Comment\"),\n      alias: 'Add Line Comment',\n      precondition: EditorContextKeys.writable,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: KeyChord(2048 /* CtrlCmd */ | 41 /* KEY_K */, 2048 /* CtrlCmd */ | 33 /* KEY_C */),\n        weight: 100 /* EditorContrib */\n      }\n    });\n  }\n}\n\nclass RemoveLineCommentAction extends CommentLineAction {\n  constructor() {\n    super(2 /* ForceRemove */, {\n      id: 'editor.action.removeCommentLine',\n      label: nls.localize('comment.line.remove', \"Remove Line Comment\"),\n      alias: 'Remove Line Comment',\n      precondition: EditorContextKeys.writable,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: KeyChord(2048 /* CtrlCmd */ | 41 /* KEY_K */, 2048 /* CtrlCmd */ | 51 /* KEY_U */),\n        weight: 100 /* EditorContrib */\n      }\n    });\n  }\n}\n\nclass BlockCommentAction extends EditorAction {\n  constructor() {\n    super({\n      id: 'editor.action.blockComment',\n      label: nls.localize('comment.block', \"Toggle Block Comment\"),\n      alias: 'Toggle Block Comment',\n      precondition: EditorContextKeys.writable,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: 1024 /* Shift */ | 512 /* Alt */ | 31 /* KEY_A */,\n        linux: {\n          primary: 2048 /* CtrlCmd */ | 1024 /* Shift */ | 31 /* KEY_A */\n        },\n        weight: 100 /* EditorContrib */\n      },\n\n      menuOpts: {\n        menuId: MenuId.MenubarEditMenu,\n        group: '5_insert',\n        title: nls.localize({\n          key: 'miToggleBlockComment',\n          comment: ['&& denotes a mnemonic']\n        }, \"Toggle &&Block Comment\"),\n        order: 2\n      }\n    });\n  }\n  run(accessor, editor) {\n    if (!editor.hasModel()) {\n      return;\n    }\n    const commentsOptions = editor.getOption(16 /* comments */);\n    const commands = [];\n    const selections = editor.getSelections();\n    for (const selection of selections) {\n      commands.push(new BlockCommentCommand(selection, commentsOptions.insertSpace));\n    }\n    editor.pushUndoStop();\n    editor.executeCommands(this.id, commands);\n    editor.pushUndoStop();\n  }\n}\nregisterEditorAction(ToggleCommentLineAction);\nregisterEditorAction(AddLineCommentAction);\nregisterEditorAction(RemoveLineCommentAction);\nregisterEditorAction(BlockCommentAction);","map":{"version":3,"names":["nls","KeyChord","EditorAction","registerEditorAction","Range","EditorContextKeys","BlockCommentCommand","LineCommentCommand","MenuId","CommentLineAction","constructor","type","opts","_type","run","accessor","editor","hasModel","model","getModel","commands","modelOptions","getOptions","commentsOptions","getOption","selections","getSelections","map","selection","index","ignoreFirstLine","sort","a","b","compareRangesUsingStarts","prev","i","length","curr","endLineNumber","startLineNumber","push","tabSize","insertSpace","ignoreEmptyLines","pushUndoStop","executeCommands","id","ToggleCommentLineAction","label","localize","alias","precondition","writable","kbOpts","kbExpr","editorTextFocus","primary","weight","menuOpts","menuId","MenubarEditMenu","group","title","key","comment","order","AddLineCommentAction","RemoveLineCommentAction","BlockCommentAction","linux"],"sources":["C:/Users/Administrator/Desktop/sqllineage-master/sqllineagejs/node_modules/monaco-editor/esm/vs/editor/contrib/comment/comment.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport * as nls from '../../../nls.js';\r\nimport { KeyChord } from '../../../base/common/keyCodes.js';\r\nimport { EditorAction, registerEditorAction } from '../../browser/editorExtensions.js';\r\nimport { Range } from '../../common/core/range.js';\r\nimport { EditorContextKeys } from '../../common/editorContextKeys.js';\r\nimport { BlockCommentCommand } from './blockCommentCommand.js';\r\nimport { LineCommentCommand } from './lineCommentCommand.js';\r\nimport { MenuId } from '../../../platform/actions/common/actions.js';\r\nclass CommentLineAction extends EditorAction {\r\n    constructor(type, opts) {\r\n        super(opts);\r\n        this._type = type;\r\n    }\r\n    run(accessor, editor) {\r\n        if (!editor.hasModel()) {\r\n            return;\r\n        }\r\n        const model = editor.getModel();\r\n        const commands = [];\r\n        const modelOptions = model.getOptions();\r\n        const commentsOptions = editor.getOption(16 /* comments */);\r\n        const selections = editor.getSelections().map((selection, index) => ({ selection, index, ignoreFirstLine: false }));\r\n        selections.sort((a, b) => Range.compareRangesUsingStarts(a.selection, b.selection));\r\n        // Remove selections that would result in copying the same line\r\n        let prev = selections[0];\r\n        for (let i = 1; i < selections.length; i++) {\r\n            const curr = selections[i];\r\n            if (prev.selection.endLineNumber === curr.selection.startLineNumber) {\r\n                // these two selections would copy the same line\r\n                if (prev.index < curr.index) {\r\n                    // prev wins\r\n                    curr.ignoreFirstLine = true;\r\n                }\r\n                else {\r\n                    // curr wins\r\n                    prev.ignoreFirstLine = true;\r\n                    prev = curr;\r\n                }\r\n            }\r\n        }\r\n        for (const selection of selections) {\r\n            commands.push(new LineCommentCommand(selection.selection, modelOptions.tabSize, this._type, commentsOptions.insertSpace, commentsOptions.ignoreEmptyLines, selection.ignoreFirstLine));\r\n        }\r\n        editor.pushUndoStop();\r\n        editor.executeCommands(this.id, commands);\r\n        editor.pushUndoStop();\r\n    }\r\n}\r\nclass ToggleCommentLineAction extends CommentLineAction {\r\n    constructor() {\r\n        super(0 /* Toggle */, {\r\n            id: 'editor.action.commentLine',\r\n            label: nls.localize('comment.line', \"Toggle Line Comment\"),\r\n            alias: 'Toggle Line Comment',\r\n            precondition: EditorContextKeys.writable,\r\n            kbOpts: {\r\n                kbExpr: EditorContextKeys.editorTextFocus,\r\n                primary: 2048 /* CtrlCmd */ | 85 /* US_SLASH */,\r\n                weight: 100 /* EditorContrib */\r\n            },\r\n            menuOpts: {\r\n                menuId: MenuId.MenubarEditMenu,\r\n                group: '5_insert',\r\n                title: nls.localize({ key: 'miToggleLineComment', comment: ['&& denotes a mnemonic'] }, \"&&Toggle Line Comment\"),\r\n                order: 1\r\n            }\r\n        });\r\n    }\r\n}\r\nclass AddLineCommentAction extends CommentLineAction {\r\n    constructor() {\r\n        super(1 /* ForceAdd */, {\r\n            id: 'editor.action.addCommentLine',\r\n            label: nls.localize('comment.line.add', \"Add Line Comment\"),\r\n            alias: 'Add Line Comment',\r\n            precondition: EditorContextKeys.writable,\r\n            kbOpts: {\r\n                kbExpr: EditorContextKeys.editorTextFocus,\r\n                primary: KeyChord(2048 /* CtrlCmd */ | 41 /* KEY_K */, 2048 /* CtrlCmd */ | 33 /* KEY_C */),\r\n                weight: 100 /* EditorContrib */\r\n            }\r\n        });\r\n    }\r\n}\r\nclass RemoveLineCommentAction extends CommentLineAction {\r\n    constructor() {\r\n        super(2 /* ForceRemove */, {\r\n            id: 'editor.action.removeCommentLine',\r\n            label: nls.localize('comment.line.remove', \"Remove Line Comment\"),\r\n            alias: 'Remove Line Comment',\r\n            precondition: EditorContextKeys.writable,\r\n            kbOpts: {\r\n                kbExpr: EditorContextKeys.editorTextFocus,\r\n                primary: KeyChord(2048 /* CtrlCmd */ | 41 /* KEY_K */, 2048 /* CtrlCmd */ | 51 /* KEY_U */),\r\n                weight: 100 /* EditorContrib */\r\n            }\r\n        });\r\n    }\r\n}\r\nclass BlockCommentAction extends EditorAction {\r\n    constructor() {\r\n        super({\r\n            id: 'editor.action.blockComment',\r\n            label: nls.localize('comment.block', \"Toggle Block Comment\"),\r\n            alias: 'Toggle Block Comment',\r\n            precondition: EditorContextKeys.writable,\r\n            kbOpts: {\r\n                kbExpr: EditorContextKeys.editorTextFocus,\r\n                primary: 1024 /* Shift */ | 512 /* Alt */ | 31 /* KEY_A */,\r\n                linux: { primary: 2048 /* CtrlCmd */ | 1024 /* Shift */ | 31 /* KEY_A */ },\r\n                weight: 100 /* EditorContrib */\r\n            },\r\n            menuOpts: {\r\n                menuId: MenuId.MenubarEditMenu,\r\n                group: '5_insert',\r\n                title: nls.localize({ key: 'miToggleBlockComment', comment: ['&& denotes a mnemonic'] }, \"Toggle &&Block Comment\"),\r\n                order: 2\r\n            }\r\n        });\r\n    }\r\n    run(accessor, editor) {\r\n        if (!editor.hasModel()) {\r\n            return;\r\n        }\r\n        const commentsOptions = editor.getOption(16 /* comments */);\r\n        const commands = [];\r\n        const selections = editor.getSelections();\r\n        for (const selection of selections) {\r\n            commands.push(new BlockCommentCommand(selection, commentsOptions.insertSpace));\r\n        }\r\n        editor.pushUndoStop();\r\n        editor.executeCommands(this.id, commands);\r\n        editor.pushUndoStop();\r\n    }\r\n}\r\nregisterEditorAction(ToggleCommentLineAction);\r\nregisterEditorAction(AddLineCommentAction);\r\nregisterEditorAction(RemoveLineCommentAction);\r\nregisterEditorAction(BlockCommentAction);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}