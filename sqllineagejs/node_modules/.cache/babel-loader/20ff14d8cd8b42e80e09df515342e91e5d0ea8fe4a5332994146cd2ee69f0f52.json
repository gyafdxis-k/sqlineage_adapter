{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\nimport * as nls from '../../../nls.js';\nimport * as arrays from '../../../base/common/arrays.js';\nimport { createCancelablePromise, first, timeout } from '../../../base/common/async.js';\nimport { CancellationToken } from '../../../base/common/cancellation.js';\nimport { onUnexpectedError, onUnexpectedExternalError } from '../../../base/common/errors.js';\nimport { Disposable, DisposableStore } from '../../../base/common/lifecycle.js';\nimport { EditorAction, registerEditorAction, registerEditorContribution, registerModelAndPositionCommand } from '../../browser/editorExtensions.js';\nimport { Range } from '../../common/core/range.js';\nimport { EditorContextKeys } from '../../common/editorContextKeys.js';\nimport { OverviewRulerLane } from '../../common/model.js';\nimport { ModelDecorationOptions } from '../../common/model/textModel.js';\nimport { DocumentHighlightKind, DocumentHighlightProviderRegistry } from '../../common/modes.js';\nimport { IContextKeyService, RawContextKey } from '../../../platform/contextkey/common/contextkey.js';\nimport { activeContrastBorder, editorSelectionHighlight, editorSelectionHighlightBorder, overviewRulerSelectionHighlightForeground, registerColor } from '../../../platform/theme/common/colorRegistry.js';\nimport { registerThemingParticipant, themeColorFromId } from '../../../platform/theme/common/themeService.js';\nimport { alert } from '../../../base/browser/ui/aria/aria.js';\nconst editorWordHighlight = registerColor('editor.wordHighlightBackground', {\n  dark: '#575757B8',\n  light: '#57575740',\n  hc: null\n}, nls.localize('wordHighlight', 'Background color of a symbol during read-access, like reading a variable. The color must not be opaque so as not to hide underlying decorations.'), true);\nconst editorWordHighlightStrong = registerColor('editor.wordHighlightStrongBackground', {\n  dark: '#004972B8',\n  light: '#0e639c40',\n  hc: null\n}, nls.localize('wordHighlightStrong', 'Background color of a symbol during write-access, like writing to a variable. The color must not be opaque so as not to hide underlying decorations.'), true);\nconst editorWordHighlightBorder = registerColor('editor.wordHighlightBorder', {\n  light: null,\n  dark: null,\n  hc: activeContrastBorder\n}, nls.localize('wordHighlightBorder', 'Border color of a symbol during read-access, like reading a variable.'));\nconst editorWordHighlightStrongBorder = registerColor('editor.wordHighlightStrongBorder', {\n  light: null,\n  dark: null,\n  hc: activeContrastBorder\n}, nls.localize('wordHighlightStrongBorder', 'Border color of a symbol during write-access, like writing to a variable.'));\nconst overviewRulerWordHighlightForeground = registerColor('editorOverviewRuler.wordHighlightForeground', {\n  dark: '#A0A0A0CC',\n  light: '#A0A0A0CC',\n  hc: '#A0A0A0CC'\n}, nls.localize('overviewRulerWordHighlightForeground', 'Overview ruler marker color for symbol highlights. The color must not be opaque so as not to hide underlying decorations.'), true);\nconst overviewRulerWordHighlightStrongForeground = registerColor('editorOverviewRuler.wordHighlightStrongForeground', {\n  dark: '#C0A0C0CC',\n  light: '#C0A0C0CC',\n  hc: '#C0A0C0CC'\n}, nls.localize('overviewRulerWordHighlightStrongForeground', 'Overview ruler marker color for write-access symbol highlights. The color must not be opaque so as not to hide underlying decorations.'), true);\nconst ctxHasWordHighlights = new RawContextKey('hasWordHighlights', false);\nexport function getOccurrencesAtPosition(model, position, token) {\n  const orderedByScore = DocumentHighlightProviderRegistry.ordered(model);\n  // in order of score ask the occurrences provider\n  // until someone response with a good result\n  // (good = none empty array)\n  return first(orderedByScore.map(provider => () => {\n    return Promise.resolve(provider.provideDocumentHighlights(model, position, token)).then(undefined, onUnexpectedExternalError);\n  }), arrays.isNonEmptyArray);\n}\nclass OccurenceAtPositionRequest {\n  constructor(model, selection, wordSeparators) {\n    this._wordRange = this._getCurrentWordRange(model, selection);\n    this.result = createCancelablePromise(token => this._compute(model, selection, wordSeparators, token));\n  }\n  _getCurrentWordRange(model, selection) {\n    const word = model.getWordAtPosition(selection.getPosition());\n    if (word) {\n      return new Range(selection.startLineNumber, word.startColumn, selection.startLineNumber, word.endColumn);\n    }\n    return null;\n  }\n  isValid(model, selection, decorationIds) {\n    const lineNumber = selection.startLineNumber;\n    const startColumn = selection.startColumn;\n    const endColumn = selection.endColumn;\n    const currentWordRange = this._getCurrentWordRange(model, selection);\n    let requestIsValid = Boolean(this._wordRange && this._wordRange.equalsRange(currentWordRange));\n    // Even if we are on a different word, if that word is in the decorations ranges, the request is still valid\n    // (Same symbol)\n    for (let i = 0, len = decorationIds.length; !requestIsValid && i < len; i++) {\n      let range = model.getDecorationRange(decorationIds[i]);\n      if (range && range.startLineNumber === lineNumber) {\n        if (range.startColumn <= startColumn && range.endColumn >= endColumn) {\n          requestIsValid = true;\n        }\n      }\n    }\n    return requestIsValid;\n  }\n  cancel() {\n    this.result.cancel();\n  }\n}\nclass SemanticOccurenceAtPositionRequest extends OccurenceAtPositionRequest {\n  _compute(model, selection, wordSeparators, token) {\n    return getOccurrencesAtPosition(model, selection.getPosition(), token).then(value => value || []);\n  }\n}\nclass TextualOccurenceAtPositionRequest extends OccurenceAtPositionRequest {\n  constructor(model, selection, wordSeparators) {\n    super(model, selection, wordSeparators);\n    this._selectionIsEmpty = selection.isEmpty();\n  }\n  _compute(model, selection, wordSeparators, token) {\n    return timeout(250, token).then(() => {\n      if (!selection.isEmpty()) {\n        return [];\n      }\n      const word = model.getWordAtPosition(selection.getPosition());\n      if (!word || word.word.length > 1000) {\n        return [];\n      }\n      const matches = model.findMatches(word.word, true, false, true, wordSeparators, false);\n      return matches.map(m => {\n        return {\n          range: m.range,\n          kind: DocumentHighlightKind.Text\n        };\n      });\n    });\n  }\n  isValid(model, selection, decorationIds) {\n    const currentSelectionIsEmpty = selection.isEmpty();\n    if (this._selectionIsEmpty !== currentSelectionIsEmpty) {\n      return false;\n    }\n    return super.isValid(model, selection, decorationIds);\n  }\n}\nfunction computeOccurencesAtPosition(model, selection, wordSeparators) {\n  if (DocumentHighlightProviderRegistry.has(model)) {\n    return new SemanticOccurenceAtPositionRequest(model, selection, wordSeparators);\n  }\n  return new TextualOccurenceAtPositionRequest(model, selection, wordSeparators);\n}\nregisterModelAndPositionCommand('_executeDocumentHighlights', (model, position) => getOccurrencesAtPosition(model, position, CancellationToken.None));\nclass WordHighlighter {\n  constructor(editor, contextKeyService) {\n    this.toUnhook = new DisposableStore();\n    this.workerRequestTokenId = 0;\n    this.workerRequestCompleted = false;\n    this.workerRequestValue = [];\n    this.lastCursorPositionChangeTime = 0;\n    this.renderDecorationsTimer = -1;\n    this.editor = editor;\n    this._hasWordHighlights = ctxHasWordHighlights.bindTo(contextKeyService);\n    this._ignorePositionChangeEvent = false;\n    this.occurrencesHighlight = this.editor.getOption(66 /* occurrencesHighlight */);\n    this.model = this.editor.getModel();\n    this.toUnhook.add(editor.onDidChangeCursorPosition(e => {\n      if (this._ignorePositionChangeEvent) {\n        // We are changing the position => ignore this event\n        return;\n      }\n      if (!this.occurrencesHighlight) {\n        // Early exit if nothing needs to be done!\n        // Leave some form of early exit check here if you wish to continue being a cursor position change listener ;)\n        return;\n      }\n      this._onPositionChanged(e);\n    }));\n    this.toUnhook.add(editor.onDidChangeModelContent(e => {\n      this._stopAll();\n    }));\n    this.toUnhook.add(editor.onDidChangeConfiguration(e => {\n      let newValue = this.editor.getOption(66 /* occurrencesHighlight */);\n      if (this.occurrencesHighlight !== newValue) {\n        this.occurrencesHighlight = newValue;\n        this._stopAll();\n      }\n    }));\n    this._decorationIds = [];\n    this.workerRequestTokenId = 0;\n    this.workerRequest = null;\n    this.workerRequestCompleted = false;\n    this.lastCursorPositionChangeTime = 0;\n    this.renderDecorationsTimer = -1;\n  }\n  hasDecorations() {\n    return this._decorationIds.length > 0;\n  }\n  restore() {\n    if (!this.occurrencesHighlight) {\n      return;\n    }\n    this._run();\n  }\n  _getSortedHighlights() {\n    return arrays.coalesce(this._decorationIds.map(id => this.model.getDecorationRange(id)).sort(Range.compareRangesUsingStarts));\n  }\n  moveNext() {\n    let highlights = this._getSortedHighlights();\n    let index = highlights.findIndex(range => range.containsPosition(this.editor.getPosition()));\n    let newIndex = (index + 1) % highlights.length;\n    let dest = highlights[newIndex];\n    try {\n      this._ignorePositionChangeEvent = true;\n      this.editor.setPosition(dest.getStartPosition());\n      this.editor.revealRangeInCenterIfOutsideViewport(dest);\n      const word = this._getWord();\n      if (word) {\n        const lineContent = this.editor.getModel().getLineContent(dest.startLineNumber);\n        alert(\"\".concat(lineContent, \", \").concat(newIndex + 1, \" of \").concat(highlights.length, \" for '\").concat(word.word, \"'\"));\n      }\n    } finally {\n      this._ignorePositionChangeEvent = false;\n    }\n  }\n  moveBack() {\n    let highlights = this._getSortedHighlights();\n    let index = highlights.findIndex(range => range.containsPosition(this.editor.getPosition()));\n    let newIndex = (index - 1 + highlights.length) % highlights.length;\n    let dest = highlights[newIndex];\n    try {\n      this._ignorePositionChangeEvent = true;\n      this.editor.setPosition(dest.getStartPosition());\n      this.editor.revealRangeInCenterIfOutsideViewport(dest);\n      const word = this._getWord();\n      if (word) {\n        const lineContent = this.editor.getModel().getLineContent(dest.startLineNumber);\n        alert(\"\".concat(lineContent, \", \").concat(newIndex + 1, \" of \").concat(highlights.length, \" for '\").concat(word.word, \"'\"));\n      }\n    } finally {\n      this._ignorePositionChangeEvent = false;\n    }\n  }\n  _removeDecorations() {\n    if (this._decorationIds.length > 0) {\n      // remove decorations\n      this._decorationIds = this.editor.deltaDecorations(this._decorationIds, []);\n      this._hasWordHighlights.set(false);\n    }\n  }\n  _stopAll() {\n    // Remove any existing decorations\n    this._removeDecorations();\n    // Cancel any renderDecorationsTimer\n    if (this.renderDecorationsTimer !== -1) {\n      clearTimeout(this.renderDecorationsTimer);\n      this.renderDecorationsTimer = -1;\n    }\n    // Cancel any worker request\n    if (this.workerRequest !== null) {\n      this.workerRequest.cancel();\n      this.workerRequest = null;\n    }\n    // Invalidate any worker request callback\n    if (!this.workerRequestCompleted) {\n      this.workerRequestTokenId++;\n      this.workerRequestCompleted = true;\n    }\n  }\n  _onPositionChanged(e) {\n    // disabled\n    if (!this.occurrencesHighlight) {\n      this._stopAll();\n      return;\n    }\n    // ignore typing & other\n    if (e.reason !== 3 /* Explicit */) {\n      this._stopAll();\n      return;\n    }\n    this._run();\n  }\n  _getWord() {\n    let editorSelection = this.editor.getSelection();\n    let lineNumber = editorSelection.startLineNumber;\n    let startColumn = editorSelection.startColumn;\n    return this.model.getWordAtPosition({\n      lineNumber: lineNumber,\n      column: startColumn\n    });\n  }\n  _run() {\n    let editorSelection = this.editor.getSelection();\n    // ignore multiline selection\n    if (editorSelection.startLineNumber !== editorSelection.endLineNumber) {\n      this._stopAll();\n      return;\n    }\n    let startColumn = editorSelection.startColumn;\n    let endColumn = editorSelection.endColumn;\n    const word = this._getWord();\n    // The selection must be inside a word or surround one word at most\n    if (!word || word.startColumn > startColumn || word.endColumn < endColumn) {\n      this._stopAll();\n      return;\n    }\n    // All the effort below is trying to achieve this:\n    // - when cursor is moved to a word, trigger immediately a findOccurrences request\n    // - 250ms later after the last cursor move event, render the occurrences\n    // - no flickering!\n    const workerRequestIsValid = this.workerRequest && this.workerRequest.isValid(this.model, editorSelection, this._decorationIds);\n    // There are 4 cases:\n    // a) old workerRequest is valid & completed, renderDecorationsTimer fired\n    // b) old workerRequest is valid & completed, renderDecorationsTimer not fired\n    // c) old workerRequest is valid, but not completed\n    // d) old workerRequest is not valid\n    // For a) no action is needed\n    // For c), member 'lastCursorPositionChangeTime' will be used when installing the timer so no action is needed\n    this.lastCursorPositionChangeTime = new Date().getTime();\n    if (workerRequestIsValid) {\n      if (this.workerRequestCompleted && this.renderDecorationsTimer !== -1) {\n        // case b)\n        // Delay the firing of renderDecorationsTimer by an extra 250 ms\n        clearTimeout(this.renderDecorationsTimer);\n        this.renderDecorationsTimer = -1;\n        this._beginRenderDecorations();\n      }\n    } else {\n      // case d)\n      // Stop all previous actions and start fresh\n      this._stopAll();\n      let myRequestId = ++this.workerRequestTokenId;\n      this.workerRequestCompleted = false;\n      this.workerRequest = computeOccurencesAtPosition(this.model, this.editor.getSelection(), this.editor.getOption(110 /* wordSeparators */));\n      this.workerRequest.result.then(data => {\n        if (myRequestId === this.workerRequestTokenId) {\n          this.workerRequestCompleted = true;\n          this.workerRequestValue = data || [];\n          this._beginRenderDecorations();\n        }\n      }, onUnexpectedError);\n    }\n  }\n  _beginRenderDecorations() {\n    let currentTime = new Date().getTime();\n    let minimumRenderTime = this.lastCursorPositionChangeTime + 250;\n    if (currentTime >= minimumRenderTime) {\n      // Synchronous\n      this.renderDecorationsTimer = -1;\n      this.renderDecorations();\n    } else {\n      // Asynchronous\n      this.renderDecorationsTimer = setTimeout(() => {\n        this.renderDecorations();\n      }, minimumRenderTime - currentTime);\n    }\n  }\n  renderDecorations() {\n    this.renderDecorationsTimer = -1;\n    let decorations = [];\n    for (const info of this.workerRequestValue) {\n      if (info.range) {\n        decorations.push({\n          range: info.range,\n          options: WordHighlighter._getDecorationOptions(info.kind)\n        });\n      }\n    }\n    this._decorationIds = this.editor.deltaDecorations(this._decorationIds, decorations);\n    this._hasWordHighlights.set(this.hasDecorations());\n  }\n  static _getDecorationOptions(kind) {\n    if (kind === DocumentHighlightKind.Write) {\n      return this._WRITE_OPTIONS;\n    } else if (kind === DocumentHighlightKind.Text) {\n      return this._TEXT_OPTIONS;\n    } else {\n      return this._REGULAR_OPTIONS;\n    }\n  }\n  dispose() {\n    this._stopAll();\n    this.toUnhook.dispose();\n  }\n}\nWordHighlighter._WRITE_OPTIONS = ModelDecorationOptions.register({\n  stickiness: 1 /* NeverGrowsWhenTypingAtEdges */,\n  className: 'wordHighlightStrong',\n  overviewRuler: {\n    color: themeColorFromId(overviewRulerWordHighlightStrongForeground),\n    position: OverviewRulerLane.Center\n  }\n});\nWordHighlighter._TEXT_OPTIONS = ModelDecorationOptions.register({\n  stickiness: 1 /* NeverGrowsWhenTypingAtEdges */,\n  className: 'selectionHighlight',\n  overviewRuler: {\n    color: themeColorFromId(overviewRulerSelectionHighlightForeground),\n    position: OverviewRulerLane.Center\n  }\n});\nWordHighlighter._REGULAR_OPTIONS = ModelDecorationOptions.register({\n  stickiness: 1 /* NeverGrowsWhenTypingAtEdges */,\n  className: 'wordHighlight',\n  overviewRuler: {\n    color: themeColorFromId(overviewRulerWordHighlightForeground),\n    position: OverviewRulerLane.Center\n  }\n});\nlet WordHighlighterContribution = class WordHighlighterContribution extends Disposable {\n  constructor(editor, contextKeyService) {\n    super();\n    this.wordHighlighter = null;\n    const createWordHighlighterIfPossible = () => {\n      if (editor.hasModel()) {\n        this.wordHighlighter = new WordHighlighter(editor, contextKeyService);\n      }\n    };\n    this._register(editor.onDidChangeModel(e => {\n      if (this.wordHighlighter) {\n        this.wordHighlighter.dispose();\n        this.wordHighlighter = null;\n      }\n      createWordHighlighterIfPossible();\n    }));\n    createWordHighlighterIfPossible();\n  }\n  static get(editor) {\n    return editor.getContribution(WordHighlighterContribution.ID);\n  }\n  saveViewState() {\n    if (this.wordHighlighter && this.wordHighlighter.hasDecorations()) {\n      return true;\n    }\n    return false;\n  }\n  moveNext() {\n    if (this.wordHighlighter) {\n      this.wordHighlighter.moveNext();\n    }\n  }\n  moveBack() {\n    if (this.wordHighlighter) {\n      this.wordHighlighter.moveBack();\n    }\n  }\n  restoreViewState(state) {\n    if (this.wordHighlighter && state) {\n      this.wordHighlighter.restore();\n    }\n  }\n  dispose() {\n    if (this.wordHighlighter) {\n      this.wordHighlighter.dispose();\n      this.wordHighlighter = null;\n    }\n    super.dispose();\n  }\n};\nWordHighlighterContribution.ID = 'editor.contrib.wordHighlighter';\nWordHighlighterContribution = __decorate([__param(1, IContextKeyService)], WordHighlighterContribution);\nclass WordHighlightNavigationAction extends EditorAction {\n  constructor(next, opts) {\n    super(opts);\n    this._isNext = next;\n  }\n  run(accessor, editor) {\n    const controller = WordHighlighterContribution.get(editor);\n    if (!controller) {\n      return;\n    }\n    if (this._isNext) {\n      controller.moveNext();\n    } else {\n      controller.moveBack();\n    }\n  }\n}\nclass NextWordHighlightAction extends WordHighlightNavigationAction {\n  constructor() {\n    super(true, {\n      id: 'editor.action.wordHighlight.next',\n      label: nls.localize('wordHighlight.next.label', \"Go to Next Symbol Highlight\"),\n      alias: 'Go to Next Symbol Highlight',\n      precondition: ctxHasWordHighlights,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: 65 /* F7 */,\n        weight: 100 /* EditorContrib */\n      }\n    });\n  }\n}\n\nclass PrevWordHighlightAction extends WordHighlightNavigationAction {\n  constructor() {\n    super(false, {\n      id: 'editor.action.wordHighlight.prev',\n      label: nls.localize('wordHighlight.previous.label', \"Go to Previous Symbol Highlight\"),\n      alias: 'Go to Previous Symbol Highlight',\n      precondition: ctxHasWordHighlights,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: 1024 /* Shift */ | 65 /* F7 */,\n        weight: 100 /* EditorContrib */\n      }\n    });\n  }\n}\n\nclass TriggerWordHighlightAction extends EditorAction {\n  constructor() {\n    super({\n      id: 'editor.action.wordHighlight.trigger',\n      label: nls.localize('wordHighlight.trigger.label', \"Trigger Symbol Highlight\"),\n      alias: 'Trigger Symbol Highlight',\n      precondition: ctxHasWordHighlights.toNegated(),\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: 0,\n        weight: 100 /* EditorContrib */\n      }\n    });\n  }\n\n  run(accessor, editor, args) {\n    const controller = WordHighlighterContribution.get(editor);\n    if (!controller) {\n      return;\n    }\n    controller.restoreViewState(true);\n  }\n}\nregisterEditorContribution(WordHighlighterContribution.ID, WordHighlighterContribution);\nregisterEditorAction(NextWordHighlightAction);\nregisterEditorAction(PrevWordHighlightAction);\nregisterEditorAction(TriggerWordHighlightAction);\nregisterThemingParticipant((theme, collector) => {\n  const selectionHighlight = theme.getColor(editorSelectionHighlight);\n  if (selectionHighlight) {\n    collector.addRule(\".monaco-editor .focused .selectionHighlight { background-color: \".concat(selectionHighlight, \"; }\"));\n    collector.addRule(\".monaco-editor .selectionHighlight { background-color: \".concat(selectionHighlight.transparent(0.5), \"; }\"));\n  }\n  const wordHighlight = theme.getColor(editorWordHighlight);\n  if (wordHighlight) {\n    collector.addRule(\".monaco-editor .wordHighlight { background-color: \".concat(wordHighlight, \"; }\"));\n  }\n  const wordHighlightStrong = theme.getColor(editorWordHighlightStrong);\n  if (wordHighlightStrong) {\n    collector.addRule(\".monaco-editor .wordHighlightStrong { background-color: \".concat(wordHighlightStrong, \"; }\"));\n  }\n  const selectionHighlightBorder = theme.getColor(editorSelectionHighlightBorder);\n  if (selectionHighlightBorder) {\n    collector.addRule(\".monaco-editor .selectionHighlight { border: 1px \".concat(theme.type === 'hc' ? 'dotted' : 'solid', \" \").concat(selectionHighlightBorder, \"; box-sizing: border-box; }\"));\n  }\n  const wordHighlightBorder = theme.getColor(editorWordHighlightBorder);\n  if (wordHighlightBorder) {\n    collector.addRule(\".monaco-editor .wordHighlight { border: 1px \".concat(theme.type === 'hc' ? 'dashed' : 'solid', \" \").concat(wordHighlightBorder, \"; box-sizing: border-box; }\"));\n  }\n  const wordHighlightStrongBorder = theme.getColor(editorWordHighlightStrongBorder);\n  if (wordHighlightStrongBorder) {\n    collector.addRule(\".monaco-editor .wordHighlightStrong { border: 1px \".concat(theme.type === 'hc' ? 'dashed' : 'solid', \" \").concat(wordHighlightStrongBorder, \"; box-sizing: border-box; }\"));\n  }\n});","map":{"version":3,"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","nls","arrays","createCancelablePromise","first","timeout","CancellationToken","onUnexpectedError","onUnexpectedExternalError","Disposable","DisposableStore","EditorAction","registerEditorAction","registerEditorContribution","registerModelAndPositionCommand","Range","EditorContextKeys","OverviewRulerLane","ModelDecorationOptions","DocumentHighlightKind","DocumentHighlightProviderRegistry","IContextKeyService","RawContextKey","activeContrastBorder","editorSelectionHighlight","editorSelectionHighlightBorder","overviewRulerSelectionHighlightForeground","registerColor","registerThemingParticipant","themeColorFromId","alert","editorWordHighlight","dark","light","hc","localize","editorWordHighlightStrong","editorWordHighlightBorder","editorWordHighlightStrongBorder","overviewRulerWordHighlightForeground","overviewRulerWordHighlightStrongForeground","ctxHasWordHighlights","getOccurrencesAtPosition","model","position","token","orderedByScore","ordered","map","provider","Promise","resolve","provideDocumentHighlights","then","undefined","isNonEmptyArray","OccurenceAtPositionRequest","constructor","selection","wordSeparators","_wordRange","_getCurrentWordRange","result","_compute","word","getWordAtPosition","getPosition","startLineNumber","startColumn","endColumn","isValid","decorationIds","lineNumber","currentWordRange","requestIsValid","Boolean","equalsRange","len","range","getDecorationRange","cancel","SemanticOccurenceAtPositionRequest","value","TextualOccurenceAtPositionRequest","_selectionIsEmpty","isEmpty","matches","findMatches","m","kind","Text","currentSelectionIsEmpty","computeOccurencesAtPosition","has","None","WordHighlighter","editor","contextKeyService","toUnhook","workerRequestTokenId","workerRequestCompleted","workerRequestValue","lastCursorPositionChangeTime","renderDecorationsTimer","_hasWordHighlights","bindTo","_ignorePositionChangeEvent","occurrencesHighlight","getOption","getModel","add","onDidChangeCursorPosition","e","_onPositionChanged","onDidChangeModelContent","_stopAll","onDidChangeConfiguration","newValue","_decorationIds","workerRequest","hasDecorations","restore","_run","_getSortedHighlights","coalesce","id","sort","compareRangesUsingStarts","moveNext","highlights","index","findIndex","containsPosition","newIndex","dest","setPosition","getStartPosition","revealRangeInCenterIfOutsideViewport","_getWord","lineContent","getLineContent","concat","moveBack","_removeDecorations","deltaDecorations","set","clearTimeout","reason","editorSelection","getSelection","column","endLineNumber","workerRequestIsValid","Date","getTime","_beginRenderDecorations","myRequestId","data","currentTime","minimumRenderTime","renderDecorations","setTimeout","decorations","info","push","options","_getDecorationOptions","Write","_WRITE_OPTIONS","_TEXT_OPTIONS","_REGULAR_OPTIONS","dispose","register","stickiness","className","overviewRuler","color","Center","WordHighlighterContribution","wordHighlighter","createWordHighlighterIfPossible","hasModel","_register","onDidChangeModel","get","getContribution","ID","saveViewState","restoreViewState","state","WordHighlightNavigationAction","next","opts","_isNext","run","accessor","controller","NextWordHighlightAction","label","alias","precondition","kbOpts","kbExpr","editorTextFocus","primary","weight","PrevWordHighlightAction","TriggerWordHighlightAction","toNegated","args","theme","collector","selectionHighlight","getColor","addRule","transparent","wordHighlight","wordHighlightStrong","selectionHighlightBorder","type","wordHighlightBorder","wordHighlightStrongBorder"],"sources":["C:/Users/Administrator/Desktop/sqllineage-master/sqllineagejs/node_modules/monaco-editor/esm/vs/editor/contrib/wordHighlighter/wordHighlighter.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n};\r\nimport * as nls from '../../../nls.js';\r\nimport * as arrays from '../../../base/common/arrays.js';\r\nimport { createCancelablePromise, first, timeout } from '../../../base/common/async.js';\r\nimport { CancellationToken } from '../../../base/common/cancellation.js';\r\nimport { onUnexpectedError, onUnexpectedExternalError } from '../../../base/common/errors.js';\r\nimport { Disposable, DisposableStore } from '../../../base/common/lifecycle.js';\r\nimport { EditorAction, registerEditorAction, registerEditorContribution, registerModelAndPositionCommand } from '../../browser/editorExtensions.js';\r\nimport { Range } from '../../common/core/range.js';\r\nimport { EditorContextKeys } from '../../common/editorContextKeys.js';\r\nimport { OverviewRulerLane } from '../../common/model.js';\r\nimport { ModelDecorationOptions } from '../../common/model/textModel.js';\r\nimport { DocumentHighlightKind, DocumentHighlightProviderRegistry } from '../../common/modes.js';\r\nimport { IContextKeyService, RawContextKey } from '../../../platform/contextkey/common/contextkey.js';\r\nimport { activeContrastBorder, editorSelectionHighlight, editorSelectionHighlightBorder, overviewRulerSelectionHighlightForeground, registerColor } from '../../../platform/theme/common/colorRegistry.js';\r\nimport { registerThemingParticipant, themeColorFromId } from '../../../platform/theme/common/themeService.js';\r\nimport { alert } from '../../../base/browser/ui/aria/aria.js';\r\nconst editorWordHighlight = registerColor('editor.wordHighlightBackground', { dark: '#575757B8', light: '#57575740', hc: null }, nls.localize('wordHighlight', 'Background color of a symbol during read-access, like reading a variable. The color must not be opaque so as not to hide underlying decorations.'), true);\r\nconst editorWordHighlightStrong = registerColor('editor.wordHighlightStrongBackground', { dark: '#004972B8', light: '#0e639c40', hc: null }, nls.localize('wordHighlightStrong', 'Background color of a symbol during write-access, like writing to a variable. The color must not be opaque so as not to hide underlying decorations.'), true);\r\nconst editorWordHighlightBorder = registerColor('editor.wordHighlightBorder', { light: null, dark: null, hc: activeContrastBorder }, nls.localize('wordHighlightBorder', 'Border color of a symbol during read-access, like reading a variable.'));\r\nconst editorWordHighlightStrongBorder = registerColor('editor.wordHighlightStrongBorder', { light: null, dark: null, hc: activeContrastBorder }, nls.localize('wordHighlightStrongBorder', 'Border color of a symbol during write-access, like writing to a variable.'));\r\nconst overviewRulerWordHighlightForeground = registerColor('editorOverviewRuler.wordHighlightForeground', { dark: '#A0A0A0CC', light: '#A0A0A0CC', hc: '#A0A0A0CC' }, nls.localize('overviewRulerWordHighlightForeground', 'Overview ruler marker color for symbol highlights. The color must not be opaque so as not to hide underlying decorations.'), true);\r\nconst overviewRulerWordHighlightStrongForeground = registerColor('editorOverviewRuler.wordHighlightStrongForeground', { dark: '#C0A0C0CC', light: '#C0A0C0CC', hc: '#C0A0C0CC' }, nls.localize('overviewRulerWordHighlightStrongForeground', 'Overview ruler marker color for write-access symbol highlights. The color must not be opaque so as not to hide underlying decorations.'), true);\r\nconst ctxHasWordHighlights = new RawContextKey('hasWordHighlights', false);\r\nexport function getOccurrencesAtPosition(model, position, token) {\r\n    const orderedByScore = DocumentHighlightProviderRegistry.ordered(model);\r\n    // in order of score ask the occurrences provider\r\n    // until someone response with a good result\r\n    // (good = none empty array)\r\n    return first(orderedByScore.map(provider => () => {\r\n        return Promise.resolve(provider.provideDocumentHighlights(model, position, token))\r\n            .then(undefined, onUnexpectedExternalError);\r\n    }), arrays.isNonEmptyArray);\r\n}\r\nclass OccurenceAtPositionRequest {\r\n    constructor(model, selection, wordSeparators) {\r\n        this._wordRange = this._getCurrentWordRange(model, selection);\r\n        this.result = createCancelablePromise(token => this._compute(model, selection, wordSeparators, token));\r\n    }\r\n    _getCurrentWordRange(model, selection) {\r\n        const word = model.getWordAtPosition(selection.getPosition());\r\n        if (word) {\r\n            return new Range(selection.startLineNumber, word.startColumn, selection.startLineNumber, word.endColumn);\r\n        }\r\n        return null;\r\n    }\r\n    isValid(model, selection, decorationIds) {\r\n        const lineNumber = selection.startLineNumber;\r\n        const startColumn = selection.startColumn;\r\n        const endColumn = selection.endColumn;\r\n        const currentWordRange = this._getCurrentWordRange(model, selection);\r\n        let requestIsValid = Boolean(this._wordRange && this._wordRange.equalsRange(currentWordRange));\r\n        // Even if we are on a different word, if that word is in the decorations ranges, the request is still valid\r\n        // (Same symbol)\r\n        for (let i = 0, len = decorationIds.length; !requestIsValid && i < len; i++) {\r\n            let range = model.getDecorationRange(decorationIds[i]);\r\n            if (range && range.startLineNumber === lineNumber) {\r\n                if (range.startColumn <= startColumn && range.endColumn >= endColumn) {\r\n                    requestIsValid = true;\r\n                }\r\n            }\r\n        }\r\n        return requestIsValid;\r\n    }\r\n    cancel() {\r\n        this.result.cancel();\r\n    }\r\n}\r\nclass SemanticOccurenceAtPositionRequest extends OccurenceAtPositionRequest {\r\n    _compute(model, selection, wordSeparators, token) {\r\n        return getOccurrencesAtPosition(model, selection.getPosition(), token).then(value => value || []);\r\n    }\r\n}\r\nclass TextualOccurenceAtPositionRequest extends OccurenceAtPositionRequest {\r\n    constructor(model, selection, wordSeparators) {\r\n        super(model, selection, wordSeparators);\r\n        this._selectionIsEmpty = selection.isEmpty();\r\n    }\r\n    _compute(model, selection, wordSeparators, token) {\r\n        return timeout(250, token).then(() => {\r\n            if (!selection.isEmpty()) {\r\n                return [];\r\n            }\r\n            const word = model.getWordAtPosition(selection.getPosition());\r\n            if (!word || word.word.length > 1000) {\r\n                return [];\r\n            }\r\n            const matches = model.findMatches(word.word, true, false, true, wordSeparators, false);\r\n            return matches.map(m => {\r\n                return {\r\n                    range: m.range,\r\n                    kind: DocumentHighlightKind.Text\r\n                };\r\n            });\r\n        });\r\n    }\r\n    isValid(model, selection, decorationIds) {\r\n        const currentSelectionIsEmpty = selection.isEmpty();\r\n        if (this._selectionIsEmpty !== currentSelectionIsEmpty) {\r\n            return false;\r\n        }\r\n        return super.isValid(model, selection, decorationIds);\r\n    }\r\n}\r\nfunction computeOccurencesAtPosition(model, selection, wordSeparators) {\r\n    if (DocumentHighlightProviderRegistry.has(model)) {\r\n        return new SemanticOccurenceAtPositionRequest(model, selection, wordSeparators);\r\n    }\r\n    return new TextualOccurenceAtPositionRequest(model, selection, wordSeparators);\r\n}\r\nregisterModelAndPositionCommand('_executeDocumentHighlights', (model, position) => getOccurrencesAtPosition(model, position, CancellationToken.None));\r\nclass WordHighlighter {\r\n    constructor(editor, contextKeyService) {\r\n        this.toUnhook = new DisposableStore();\r\n        this.workerRequestTokenId = 0;\r\n        this.workerRequestCompleted = false;\r\n        this.workerRequestValue = [];\r\n        this.lastCursorPositionChangeTime = 0;\r\n        this.renderDecorationsTimer = -1;\r\n        this.editor = editor;\r\n        this._hasWordHighlights = ctxHasWordHighlights.bindTo(contextKeyService);\r\n        this._ignorePositionChangeEvent = false;\r\n        this.occurrencesHighlight = this.editor.getOption(66 /* occurrencesHighlight */);\r\n        this.model = this.editor.getModel();\r\n        this.toUnhook.add(editor.onDidChangeCursorPosition((e) => {\r\n            if (this._ignorePositionChangeEvent) {\r\n                // We are changing the position => ignore this event\r\n                return;\r\n            }\r\n            if (!this.occurrencesHighlight) {\r\n                // Early exit if nothing needs to be done!\r\n                // Leave some form of early exit check here if you wish to continue being a cursor position change listener ;)\r\n                return;\r\n            }\r\n            this._onPositionChanged(e);\r\n        }));\r\n        this.toUnhook.add(editor.onDidChangeModelContent((e) => {\r\n            this._stopAll();\r\n        }));\r\n        this.toUnhook.add(editor.onDidChangeConfiguration((e) => {\r\n            let newValue = this.editor.getOption(66 /* occurrencesHighlight */);\r\n            if (this.occurrencesHighlight !== newValue) {\r\n                this.occurrencesHighlight = newValue;\r\n                this._stopAll();\r\n            }\r\n        }));\r\n        this._decorationIds = [];\r\n        this.workerRequestTokenId = 0;\r\n        this.workerRequest = null;\r\n        this.workerRequestCompleted = false;\r\n        this.lastCursorPositionChangeTime = 0;\r\n        this.renderDecorationsTimer = -1;\r\n    }\r\n    hasDecorations() {\r\n        return (this._decorationIds.length > 0);\r\n    }\r\n    restore() {\r\n        if (!this.occurrencesHighlight) {\r\n            return;\r\n        }\r\n        this._run();\r\n    }\r\n    _getSortedHighlights() {\r\n        return arrays.coalesce(this._decorationIds\r\n            .map((id) => this.model.getDecorationRange(id))\r\n            .sort(Range.compareRangesUsingStarts));\r\n    }\r\n    moveNext() {\r\n        let highlights = this._getSortedHighlights();\r\n        let index = highlights.findIndex((range) => range.containsPosition(this.editor.getPosition()));\r\n        let newIndex = ((index + 1) % highlights.length);\r\n        let dest = highlights[newIndex];\r\n        try {\r\n            this._ignorePositionChangeEvent = true;\r\n            this.editor.setPosition(dest.getStartPosition());\r\n            this.editor.revealRangeInCenterIfOutsideViewport(dest);\r\n            const word = this._getWord();\r\n            if (word) {\r\n                const lineContent = this.editor.getModel().getLineContent(dest.startLineNumber);\r\n                alert(`${lineContent}, ${newIndex + 1} of ${highlights.length} for '${word.word}'`);\r\n            }\r\n        }\r\n        finally {\r\n            this._ignorePositionChangeEvent = false;\r\n        }\r\n    }\r\n    moveBack() {\r\n        let highlights = this._getSortedHighlights();\r\n        let index = highlights.findIndex((range) => range.containsPosition(this.editor.getPosition()));\r\n        let newIndex = ((index - 1 + highlights.length) % highlights.length);\r\n        let dest = highlights[newIndex];\r\n        try {\r\n            this._ignorePositionChangeEvent = true;\r\n            this.editor.setPosition(dest.getStartPosition());\r\n            this.editor.revealRangeInCenterIfOutsideViewport(dest);\r\n            const word = this._getWord();\r\n            if (word) {\r\n                const lineContent = this.editor.getModel().getLineContent(dest.startLineNumber);\r\n                alert(`${lineContent}, ${newIndex + 1} of ${highlights.length} for '${word.word}'`);\r\n            }\r\n        }\r\n        finally {\r\n            this._ignorePositionChangeEvent = false;\r\n        }\r\n    }\r\n    _removeDecorations() {\r\n        if (this._decorationIds.length > 0) {\r\n            // remove decorations\r\n            this._decorationIds = this.editor.deltaDecorations(this._decorationIds, []);\r\n            this._hasWordHighlights.set(false);\r\n        }\r\n    }\r\n    _stopAll() {\r\n        // Remove any existing decorations\r\n        this._removeDecorations();\r\n        // Cancel any renderDecorationsTimer\r\n        if (this.renderDecorationsTimer !== -1) {\r\n            clearTimeout(this.renderDecorationsTimer);\r\n            this.renderDecorationsTimer = -1;\r\n        }\r\n        // Cancel any worker request\r\n        if (this.workerRequest !== null) {\r\n            this.workerRequest.cancel();\r\n            this.workerRequest = null;\r\n        }\r\n        // Invalidate any worker request callback\r\n        if (!this.workerRequestCompleted) {\r\n            this.workerRequestTokenId++;\r\n            this.workerRequestCompleted = true;\r\n        }\r\n    }\r\n    _onPositionChanged(e) {\r\n        // disabled\r\n        if (!this.occurrencesHighlight) {\r\n            this._stopAll();\r\n            return;\r\n        }\r\n        // ignore typing & other\r\n        if (e.reason !== 3 /* Explicit */) {\r\n            this._stopAll();\r\n            return;\r\n        }\r\n        this._run();\r\n    }\r\n    _getWord() {\r\n        let editorSelection = this.editor.getSelection();\r\n        let lineNumber = editorSelection.startLineNumber;\r\n        let startColumn = editorSelection.startColumn;\r\n        return this.model.getWordAtPosition({\r\n            lineNumber: lineNumber,\r\n            column: startColumn\r\n        });\r\n    }\r\n    _run() {\r\n        let editorSelection = this.editor.getSelection();\r\n        // ignore multiline selection\r\n        if (editorSelection.startLineNumber !== editorSelection.endLineNumber) {\r\n            this._stopAll();\r\n            return;\r\n        }\r\n        let startColumn = editorSelection.startColumn;\r\n        let endColumn = editorSelection.endColumn;\r\n        const word = this._getWord();\r\n        // The selection must be inside a word or surround one word at most\r\n        if (!word || word.startColumn > startColumn || word.endColumn < endColumn) {\r\n            this._stopAll();\r\n            return;\r\n        }\r\n        // All the effort below is trying to achieve this:\r\n        // - when cursor is moved to a word, trigger immediately a findOccurrences request\r\n        // - 250ms later after the last cursor move event, render the occurrences\r\n        // - no flickering!\r\n        const workerRequestIsValid = (this.workerRequest && this.workerRequest.isValid(this.model, editorSelection, this._decorationIds));\r\n        // There are 4 cases:\r\n        // a) old workerRequest is valid & completed, renderDecorationsTimer fired\r\n        // b) old workerRequest is valid & completed, renderDecorationsTimer not fired\r\n        // c) old workerRequest is valid, but not completed\r\n        // d) old workerRequest is not valid\r\n        // For a) no action is needed\r\n        // For c), member 'lastCursorPositionChangeTime' will be used when installing the timer so no action is needed\r\n        this.lastCursorPositionChangeTime = (new Date()).getTime();\r\n        if (workerRequestIsValid) {\r\n            if (this.workerRequestCompleted && this.renderDecorationsTimer !== -1) {\r\n                // case b)\r\n                // Delay the firing of renderDecorationsTimer by an extra 250 ms\r\n                clearTimeout(this.renderDecorationsTimer);\r\n                this.renderDecorationsTimer = -1;\r\n                this._beginRenderDecorations();\r\n            }\r\n        }\r\n        else {\r\n            // case d)\r\n            // Stop all previous actions and start fresh\r\n            this._stopAll();\r\n            let myRequestId = ++this.workerRequestTokenId;\r\n            this.workerRequestCompleted = false;\r\n            this.workerRequest = computeOccurencesAtPosition(this.model, this.editor.getSelection(), this.editor.getOption(110 /* wordSeparators */));\r\n            this.workerRequest.result.then(data => {\r\n                if (myRequestId === this.workerRequestTokenId) {\r\n                    this.workerRequestCompleted = true;\r\n                    this.workerRequestValue = data || [];\r\n                    this._beginRenderDecorations();\r\n                }\r\n            }, onUnexpectedError);\r\n        }\r\n    }\r\n    _beginRenderDecorations() {\r\n        let currentTime = (new Date()).getTime();\r\n        let minimumRenderTime = this.lastCursorPositionChangeTime + 250;\r\n        if (currentTime >= minimumRenderTime) {\r\n            // Synchronous\r\n            this.renderDecorationsTimer = -1;\r\n            this.renderDecorations();\r\n        }\r\n        else {\r\n            // Asynchronous\r\n            this.renderDecorationsTimer = setTimeout(() => {\r\n                this.renderDecorations();\r\n            }, (minimumRenderTime - currentTime));\r\n        }\r\n    }\r\n    renderDecorations() {\r\n        this.renderDecorationsTimer = -1;\r\n        let decorations = [];\r\n        for (const info of this.workerRequestValue) {\r\n            if (info.range) {\r\n                decorations.push({\r\n                    range: info.range,\r\n                    options: WordHighlighter._getDecorationOptions(info.kind)\r\n                });\r\n            }\r\n        }\r\n        this._decorationIds = this.editor.deltaDecorations(this._decorationIds, decorations);\r\n        this._hasWordHighlights.set(this.hasDecorations());\r\n    }\r\n    static _getDecorationOptions(kind) {\r\n        if (kind === DocumentHighlightKind.Write) {\r\n            return this._WRITE_OPTIONS;\r\n        }\r\n        else if (kind === DocumentHighlightKind.Text) {\r\n            return this._TEXT_OPTIONS;\r\n        }\r\n        else {\r\n            return this._REGULAR_OPTIONS;\r\n        }\r\n    }\r\n    dispose() {\r\n        this._stopAll();\r\n        this.toUnhook.dispose();\r\n    }\r\n}\r\nWordHighlighter._WRITE_OPTIONS = ModelDecorationOptions.register({\r\n    stickiness: 1 /* NeverGrowsWhenTypingAtEdges */,\r\n    className: 'wordHighlightStrong',\r\n    overviewRuler: {\r\n        color: themeColorFromId(overviewRulerWordHighlightStrongForeground),\r\n        position: OverviewRulerLane.Center\r\n    }\r\n});\r\nWordHighlighter._TEXT_OPTIONS = ModelDecorationOptions.register({\r\n    stickiness: 1 /* NeverGrowsWhenTypingAtEdges */,\r\n    className: 'selectionHighlight',\r\n    overviewRuler: {\r\n        color: themeColorFromId(overviewRulerSelectionHighlightForeground),\r\n        position: OverviewRulerLane.Center\r\n    }\r\n});\r\nWordHighlighter._REGULAR_OPTIONS = ModelDecorationOptions.register({\r\n    stickiness: 1 /* NeverGrowsWhenTypingAtEdges */,\r\n    className: 'wordHighlight',\r\n    overviewRuler: {\r\n        color: themeColorFromId(overviewRulerWordHighlightForeground),\r\n        position: OverviewRulerLane.Center\r\n    }\r\n});\r\nlet WordHighlighterContribution = class WordHighlighterContribution extends Disposable {\r\n    constructor(editor, contextKeyService) {\r\n        super();\r\n        this.wordHighlighter = null;\r\n        const createWordHighlighterIfPossible = () => {\r\n            if (editor.hasModel()) {\r\n                this.wordHighlighter = new WordHighlighter(editor, contextKeyService);\r\n            }\r\n        };\r\n        this._register(editor.onDidChangeModel((e) => {\r\n            if (this.wordHighlighter) {\r\n                this.wordHighlighter.dispose();\r\n                this.wordHighlighter = null;\r\n            }\r\n            createWordHighlighterIfPossible();\r\n        }));\r\n        createWordHighlighterIfPossible();\r\n    }\r\n    static get(editor) {\r\n        return editor.getContribution(WordHighlighterContribution.ID);\r\n    }\r\n    saveViewState() {\r\n        if (this.wordHighlighter && this.wordHighlighter.hasDecorations()) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    moveNext() {\r\n        if (this.wordHighlighter) {\r\n            this.wordHighlighter.moveNext();\r\n        }\r\n    }\r\n    moveBack() {\r\n        if (this.wordHighlighter) {\r\n            this.wordHighlighter.moveBack();\r\n        }\r\n    }\r\n    restoreViewState(state) {\r\n        if (this.wordHighlighter && state) {\r\n            this.wordHighlighter.restore();\r\n        }\r\n    }\r\n    dispose() {\r\n        if (this.wordHighlighter) {\r\n            this.wordHighlighter.dispose();\r\n            this.wordHighlighter = null;\r\n        }\r\n        super.dispose();\r\n    }\r\n};\r\nWordHighlighterContribution.ID = 'editor.contrib.wordHighlighter';\r\nWordHighlighterContribution = __decorate([\r\n    __param(1, IContextKeyService)\r\n], WordHighlighterContribution);\r\nclass WordHighlightNavigationAction extends EditorAction {\r\n    constructor(next, opts) {\r\n        super(opts);\r\n        this._isNext = next;\r\n    }\r\n    run(accessor, editor) {\r\n        const controller = WordHighlighterContribution.get(editor);\r\n        if (!controller) {\r\n            return;\r\n        }\r\n        if (this._isNext) {\r\n            controller.moveNext();\r\n        }\r\n        else {\r\n            controller.moveBack();\r\n        }\r\n    }\r\n}\r\nclass NextWordHighlightAction extends WordHighlightNavigationAction {\r\n    constructor() {\r\n        super(true, {\r\n            id: 'editor.action.wordHighlight.next',\r\n            label: nls.localize('wordHighlight.next.label', \"Go to Next Symbol Highlight\"),\r\n            alias: 'Go to Next Symbol Highlight',\r\n            precondition: ctxHasWordHighlights,\r\n            kbOpts: {\r\n                kbExpr: EditorContextKeys.editorTextFocus,\r\n                primary: 65 /* F7 */,\r\n                weight: 100 /* EditorContrib */\r\n            }\r\n        });\r\n    }\r\n}\r\nclass PrevWordHighlightAction extends WordHighlightNavigationAction {\r\n    constructor() {\r\n        super(false, {\r\n            id: 'editor.action.wordHighlight.prev',\r\n            label: nls.localize('wordHighlight.previous.label', \"Go to Previous Symbol Highlight\"),\r\n            alias: 'Go to Previous Symbol Highlight',\r\n            precondition: ctxHasWordHighlights,\r\n            kbOpts: {\r\n                kbExpr: EditorContextKeys.editorTextFocus,\r\n                primary: 1024 /* Shift */ | 65 /* F7 */,\r\n                weight: 100 /* EditorContrib */\r\n            }\r\n        });\r\n    }\r\n}\r\nclass TriggerWordHighlightAction extends EditorAction {\r\n    constructor() {\r\n        super({\r\n            id: 'editor.action.wordHighlight.trigger',\r\n            label: nls.localize('wordHighlight.trigger.label', \"Trigger Symbol Highlight\"),\r\n            alias: 'Trigger Symbol Highlight',\r\n            precondition: ctxHasWordHighlights.toNegated(),\r\n            kbOpts: {\r\n                kbExpr: EditorContextKeys.editorTextFocus,\r\n                primary: 0,\r\n                weight: 100 /* EditorContrib */\r\n            }\r\n        });\r\n    }\r\n    run(accessor, editor, args) {\r\n        const controller = WordHighlighterContribution.get(editor);\r\n        if (!controller) {\r\n            return;\r\n        }\r\n        controller.restoreViewState(true);\r\n    }\r\n}\r\nregisterEditorContribution(WordHighlighterContribution.ID, WordHighlighterContribution);\r\nregisterEditorAction(NextWordHighlightAction);\r\nregisterEditorAction(PrevWordHighlightAction);\r\nregisterEditorAction(TriggerWordHighlightAction);\r\nregisterThemingParticipant((theme, collector) => {\r\n    const selectionHighlight = theme.getColor(editorSelectionHighlight);\r\n    if (selectionHighlight) {\r\n        collector.addRule(`.monaco-editor .focused .selectionHighlight { background-color: ${selectionHighlight}; }`);\r\n        collector.addRule(`.monaco-editor .selectionHighlight { background-color: ${selectionHighlight.transparent(0.5)}; }`);\r\n    }\r\n    const wordHighlight = theme.getColor(editorWordHighlight);\r\n    if (wordHighlight) {\r\n        collector.addRule(`.monaco-editor .wordHighlight { background-color: ${wordHighlight}; }`);\r\n    }\r\n    const wordHighlightStrong = theme.getColor(editorWordHighlightStrong);\r\n    if (wordHighlightStrong) {\r\n        collector.addRule(`.monaco-editor .wordHighlightStrong { background-color: ${wordHighlightStrong}; }`);\r\n    }\r\n    const selectionHighlightBorder = theme.getColor(editorSelectionHighlightBorder);\r\n    if (selectionHighlightBorder) {\r\n        collector.addRule(`.monaco-editor .selectionHighlight { border: 1px ${theme.type === 'hc' ? 'dotted' : 'solid'} ${selectionHighlightBorder}; box-sizing: border-box; }`);\r\n    }\r\n    const wordHighlightBorder = theme.getColor(editorWordHighlightBorder);\r\n    if (wordHighlightBorder) {\r\n        collector.addRule(`.monaco-editor .wordHighlight { border: 1px ${theme.type === 'hc' ? 'dashed' : 'solid'} ${wordHighlightBorder}; box-sizing: border-box; }`);\r\n    }\r\n    const wordHighlightStrongBorder = theme.getColor(editorWordHighlightStrongBorder);\r\n    if (wordHighlightStrongBorder) {\r\n        collector.addRule(`.monaco-editor .wordHighlightStrong { border: 1px ${theme.type === 'hc' ? 'dashed' : 'solid'} ${wordHighlightStrongBorder}; box-sizing: border-box; }`);\r\n    }\r\n});\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}