{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../nls.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport * as objects from '../../../base/common/objects.js';\nimport * as arrays from '../../../base/common/arrays.js';\nimport { editorOptionsRegistry, ValidatedEditorOptions, ConfigurationChangedEvent, EDITOR_MODEL_DEFAULTS, ComputeOptionsMemory } from './editorOptions.js';\nimport { EditorZoom } from './editorZoom.js';\nimport { BareFontInfo } from './fontInfo.js';\nimport { Extensions } from '../../../platform/configuration/common/configurationRegistry.js';\nimport { Registry } from '../../../platform/registry/common/platform.js';\nimport { forEach } from '../../../base/common/collections.js';\nexport const TabFocus = new class {\n  constructor() {\n    this._tabFocus = false;\n    this._onDidChangeTabFocus = new Emitter();\n    this.onDidChangeTabFocus = this._onDidChangeTabFocus.event;\n  }\n  getTabFocusMode() {\n    return this._tabFocus;\n  }\n  setTabFocusMode(tabFocusMode) {\n    if (this._tabFocus === tabFocusMode) {\n      return;\n    }\n    this._tabFocus = tabFocusMode;\n    this._onDidChangeTabFocus.fire(this._tabFocus);\n  }\n}();\nconst hasOwnProperty = Object.hasOwnProperty;\nexport class ComputedEditorOptions {\n  constructor() {\n    this._values = [];\n  }\n  _read(id) {\n    return this._values[id];\n  }\n  get(id) {\n    return this._values[id];\n  }\n  _write(id, value) {\n    this._values[id] = value;\n  }\n}\nclass RawEditorOptions {\n  constructor() {\n    this._values = [];\n  }\n  _read(id) {\n    return this._values[id];\n  }\n  _write(id, value) {\n    this._values[id] = value;\n  }\n}\nclass EditorConfiguration2 {\n  static readOptions(_options) {\n    const options = _options;\n    const result = new RawEditorOptions();\n    for (const editorOption of editorOptionsRegistry) {\n      const value = editorOption.name === '_never_' ? undefined : options[editorOption.name];\n      result._write(editorOption.id, value);\n    }\n    return result;\n  }\n  static validateOptions(options) {\n    const result = new ValidatedEditorOptions();\n    for (const editorOption of editorOptionsRegistry) {\n      result._write(editorOption.id, editorOption.validate(options._read(editorOption.id)));\n    }\n    return result;\n  }\n  static computeOptions(options, env) {\n    const result = new ComputedEditorOptions();\n    for (const editorOption of editorOptionsRegistry) {\n      result._write(editorOption.id, editorOption.compute(env, result, options._read(editorOption.id)));\n    }\n    return result;\n  }\n  static _deepEquals(a, b) {\n    if (typeof a !== 'object' || typeof b !== 'object') {\n      return a === b;\n    }\n    if (Array.isArray(a) || Array.isArray(b)) {\n      return Array.isArray(a) && Array.isArray(b) ? arrays.equals(a, b) : false;\n    }\n    for (let key in a) {\n      if (!EditorConfiguration2._deepEquals(a[key], b[key])) {\n        return false;\n      }\n    }\n    return true;\n  }\n  static checkEquals(a, b) {\n    const result = [];\n    let somethingChanged = false;\n    for (const editorOption of editorOptionsRegistry) {\n      const changed = !EditorConfiguration2._deepEquals(a._read(editorOption.id), b._read(editorOption.id));\n      result[editorOption.id] = changed;\n      if (changed) {\n        somethingChanged = true;\n      }\n    }\n    return somethingChanged ? new ConfigurationChangedEvent(result) : null;\n  }\n}\n/**\r\n * Compatibility with old options\r\n */\nfunction migrateOptions(options) {\n  const wordWrap = options.wordWrap;\n  if (wordWrap === true) {\n    options.wordWrap = 'on';\n  } else if (wordWrap === false) {\n    options.wordWrap = 'off';\n  }\n  const lineNumbers = options.lineNumbers;\n  if (lineNumbers === true) {\n    options.lineNumbers = 'on';\n  } else if (lineNumbers === false) {\n    options.lineNumbers = 'off';\n  }\n  const autoClosingBrackets = options.autoClosingBrackets;\n  if (autoClosingBrackets === false) {\n    options.autoClosingBrackets = 'never';\n    options.autoClosingQuotes = 'never';\n    options.autoSurround = 'never';\n  }\n  const cursorBlinking = options.cursorBlinking;\n  if (cursorBlinking === 'visible') {\n    options.cursorBlinking = 'solid';\n  }\n  const renderWhitespace = options.renderWhitespace;\n  if (renderWhitespace === true) {\n    options.renderWhitespace = 'boundary';\n  } else if (renderWhitespace === false) {\n    options.renderWhitespace = 'none';\n  }\n  const renderLineHighlight = options.renderLineHighlight;\n  if (renderLineHighlight === true) {\n    options.renderLineHighlight = 'line';\n  } else if (renderLineHighlight === false) {\n    options.renderLineHighlight = 'none';\n  }\n  const acceptSuggestionOnEnter = options.acceptSuggestionOnEnter;\n  if (acceptSuggestionOnEnter === true) {\n    options.acceptSuggestionOnEnter = 'on';\n  } else if (acceptSuggestionOnEnter === false) {\n    options.acceptSuggestionOnEnter = 'off';\n  }\n  const tabCompletion = options.tabCompletion;\n  if (tabCompletion === false) {\n    options.tabCompletion = 'off';\n  } else if (tabCompletion === true) {\n    options.tabCompletion = 'onlySnippets';\n  }\n  const suggest = options.suggest;\n  if (suggest && typeof suggest.filteredTypes === 'object' && suggest.filteredTypes) {\n    const mapping = {};\n    mapping['method'] = 'showMethods';\n    mapping['function'] = 'showFunctions';\n    mapping['constructor'] = 'showConstructors';\n    mapping['field'] = 'showFields';\n    mapping['variable'] = 'showVariables';\n    mapping['class'] = 'showClasses';\n    mapping['struct'] = 'showStructs';\n    mapping['interface'] = 'showInterfaces';\n    mapping['module'] = 'showModules';\n    mapping['property'] = 'showProperties';\n    mapping['event'] = 'showEvents';\n    mapping['operator'] = 'showOperators';\n    mapping['unit'] = 'showUnits';\n    mapping['value'] = 'showValues';\n    mapping['constant'] = 'showConstants';\n    mapping['enum'] = 'showEnums';\n    mapping['enumMember'] = 'showEnumMembers';\n    mapping['keyword'] = 'showKeywords';\n    mapping['text'] = 'showWords';\n    mapping['color'] = 'showColors';\n    mapping['file'] = 'showFiles';\n    mapping['reference'] = 'showReferences';\n    mapping['folder'] = 'showFolders';\n    mapping['typeParameter'] = 'showTypeParameters';\n    mapping['snippet'] = 'showSnippets';\n    forEach(mapping, entry => {\n      const value = suggest.filteredTypes[entry.key];\n      if (value === false) {\n        suggest[entry.value] = value;\n      }\n    });\n    // delete (<any>suggest).filteredTypes;\n  }\n\n  const hover = options.hover;\n  if (hover === true) {\n    options.hover = {\n      enabled: true\n    };\n  } else if (hover === false) {\n    options.hover = {\n      enabled: false\n    };\n  }\n  const parameterHints = options.parameterHints;\n  if (parameterHints === true) {\n    options.parameterHints = {\n      enabled: true\n    };\n  } else if (parameterHints === false) {\n    options.parameterHints = {\n      enabled: false\n    };\n  }\n  const autoIndent = options.autoIndent;\n  if (autoIndent === true) {\n    options.autoIndent = 'full';\n  } else if (autoIndent === false) {\n    options.autoIndent = 'advanced';\n  }\n  const matchBrackets = options.matchBrackets;\n  if (matchBrackets === true) {\n    options.matchBrackets = 'always';\n  } else if (matchBrackets === false) {\n    options.matchBrackets = 'never';\n  }\n}\nfunction deepCloneAndMigrateOptions(_options) {\n  const options = objects.deepClone(_options);\n  migrateOptions(options);\n  return options;\n}\nexport class CommonEditorConfiguration extends Disposable {\n  constructor(isSimpleWidget, _options) {\n    super();\n    this._onDidChange = this._register(new Emitter());\n    this.onDidChange = this._onDidChange.event;\n    this._onDidChangeFast = this._register(new Emitter());\n    this.onDidChangeFast = this._onDidChangeFast.event;\n    this.isSimpleWidget = isSimpleWidget;\n    this._isDominatedByLongLines = false;\n    this._computeOptionsMemory = new ComputeOptionsMemory();\n    this._viewLineCount = 1;\n    this._lineNumbersDigitCount = 1;\n    this._rawOptions = deepCloneAndMigrateOptions(_options);\n    this._readOptions = EditorConfiguration2.readOptions(this._rawOptions);\n    this._validatedOptions = EditorConfiguration2.validateOptions(this._readOptions);\n    this._register(EditorZoom.onDidChangeZoomLevel(_ => this._recomputeOptions()));\n    this._register(TabFocus.onDidChangeTabFocus(_ => this._recomputeOptions()));\n  }\n  observeReferenceElement(dimension) {}\n  updatePixelRatio() {}\n  _recomputeOptions() {\n    const oldOptions = this.options;\n    const newOptions = this._computeInternalOptions();\n    if (!oldOptions) {\n      this.options = newOptions;\n    } else {\n      const changeEvent = EditorConfiguration2.checkEquals(oldOptions, newOptions);\n      if (changeEvent === null) {\n        // nothing changed!\n        return;\n      }\n      this.options = newOptions;\n      this._onDidChangeFast.fire(changeEvent);\n      this._onDidChange.fire(changeEvent);\n    }\n  }\n  getRawOptions() {\n    return this._rawOptions;\n  }\n  _computeInternalOptions() {\n    const partialEnv = this._getEnvConfiguration();\n    const bareFontInfo = BareFontInfo.createFromValidatedSettings(this._validatedOptions, partialEnv.zoomLevel, partialEnv.pixelRatio, this.isSimpleWidget);\n    const env = {\n      memory: this._computeOptionsMemory,\n      outerWidth: partialEnv.outerWidth,\n      outerHeight: partialEnv.outerHeight,\n      fontInfo: this.readConfiguration(bareFontInfo),\n      extraEditorClassName: partialEnv.extraEditorClassName,\n      isDominatedByLongLines: this._isDominatedByLongLines,\n      viewLineCount: this._viewLineCount,\n      lineNumbersDigitCount: this._lineNumbersDigitCount,\n      emptySelectionClipboard: partialEnv.emptySelectionClipboard,\n      pixelRatio: partialEnv.pixelRatio,\n      tabFocusMode: TabFocus.getTabFocusMode(),\n      accessibilitySupport: partialEnv.accessibilitySupport\n    };\n    return EditorConfiguration2.computeOptions(this._validatedOptions, env);\n  }\n  static _subsetEquals(base, subset) {\n    for (const key in subset) {\n      if (hasOwnProperty.call(subset, key)) {\n        const subsetValue = subset[key];\n        const baseValue = base[key];\n        if (baseValue === subsetValue) {\n          continue;\n        }\n        if (Array.isArray(baseValue) && Array.isArray(subsetValue)) {\n          if (!arrays.equals(baseValue, subsetValue)) {\n            return false;\n          }\n          continue;\n        }\n        if (baseValue && typeof baseValue === 'object' && subsetValue && typeof subsetValue === 'object') {\n          if (!this._subsetEquals(baseValue, subsetValue)) {\n            return false;\n          }\n          continue;\n        }\n        return false;\n      }\n    }\n    return true;\n  }\n  updateOptions(_newOptions) {\n    if (typeof _newOptions === 'undefined') {\n      return;\n    }\n    const newOptions = deepCloneAndMigrateOptions(_newOptions);\n    if (CommonEditorConfiguration._subsetEquals(this._rawOptions, newOptions)) {\n      return;\n    }\n    this._rawOptions = objects.mixin(this._rawOptions, newOptions || {});\n    this._readOptions = EditorConfiguration2.readOptions(this._rawOptions);\n    this._validatedOptions = EditorConfiguration2.validateOptions(this._readOptions);\n    this._recomputeOptions();\n  }\n  setIsDominatedByLongLines(isDominatedByLongLines) {\n    this._isDominatedByLongLines = isDominatedByLongLines;\n    this._recomputeOptions();\n  }\n  setMaxLineNumber(maxLineNumber) {\n    const lineNumbersDigitCount = CommonEditorConfiguration._digitCount(maxLineNumber);\n    if (this._lineNumbersDigitCount === lineNumbersDigitCount) {\n      return;\n    }\n    this._lineNumbersDigitCount = lineNumbersDigitCount;\n    this._recomputeOptions();\n  }\n  setViewLineCount(viewLineCount) {\n    if (this._viewLineCount === viewLineCount) {\n      return;\n    }\n    this._viewLineCount = viewLineCount;\n    this._recomputeOptions();\n  }\n  static _digitCount(n) {\n    let r = 0;\n    while (n) {\n      n = Math.floor(n / 10);\n      r++;\n    }\n    return r ? r : 1;\n  }\n}\nexport const editorConfigurationBaseNode = Object.freeze({\n  id: 'editor',\n  order: 5,\n  type: 'object',\n  title: nls.localize('editorConfigurationTitle', \"Editor\"),\n  scope: 5 /* LANGUAGE_OVERRIDABLE */\n});\n\nconst configurationRegistry = Registry.as(Extensions.Configuration);\nconst editorConfiguration = Object.assign(Object.assign({}, editorConfigurationBaseNode), {\n  properties: {\n    'editor.tabSize': {\n      type: 'number',\n      default: EDITOR_MODEL_DEFAULTS.tabSize,\n      minimum: 1,\n      markdownDescription: nls.localize('tabSize', \"The number of spaces a tab is equal to. This setting is overridden based on the file contents when `#editor.detectIndentation#` is on.\")\n    },\n    // 'editor.indentSize': {\n    // \t'anyOf': [\n    // \t\t{\n    // \t\t\ttype: 'string',\n    // \t\t\tenum: ['tabSize']\n    // \t\t},\n    // \t\t{\n    // \t\t\ttype: 'number',\n    // \t\t\tminimum: 1\n    // \t\t}\n    // \t],\n    // \tdefault: 'tabSize',\n    // \tmarkdownDescription: nls.localize('indentSize', \"The number of spaces used for indentation or 'tabSize' to use the value from `#editor.tabSize#`. This setting is overridden based on the file contents when `#editor.detectIndentation#` is on.\")\n    // },\n    'editor.insertSpaces': {\n      type: 'boolean',\n      default: EDITOR_MODEL_DEFAULTS.insertSpaces,\n      markdownDescription: nls.localize('insertSpaces', \"Insert spaces when pressing `Tab`. This setting is overridden based on the file contents when `#editor.detectIndentation#` is on.\")\n    },\n    'editor.detectIndentation': {\n      type: 'boolean',\n      default: EDITOR_MODEL_DEFAULTS.detectIndentation,\n      markdownDescription: nls.localize('detectIndentation', \"Controls whether `#editor.tabSize#` and `#editor.insertSpaces#` will be automatically detected when a file is opened based on the file contents.\")\n    },\n    'editor.trimAutoWhitespace': {\n      type: 'boolean',\n      default: EDITOR_MODEL_DEFAULTS.trimAutoWhitespace,\n      description: nls.localize('trimAutoWhitespace', \"Remove trailing auto inserted whitespace.\")\n    },\n    'editor.largeFileOptimizations': {\n      type: 'boolean',\n      default: EDITOR_MODEL_DEFAULTS.largeFileOptimizations,\n      description: nls.localize('largeFileOptimizations', \"Special handling for large files to disable certain memory intensive features.\")\n    },\n    'editor.wordBasedSuggestions': {\n      type: 'boolean',\n      default: true,\n      description: nls.localize('wordBasedSuggestions', \"Controls whether completions should be computed based on words in the document.\")\n    },\n    'editor.wordBasedSuggestionsMode': {\n      enum: ['currentDocument', 'matchingDocuments', 'allDocuments'],\n      default: 'matchingDocuments',\n      enumDescriptions: [nls.localize('wordBasedSuggestionsMode.currentDocument', 'Only suggest words from the active document.'), nls.localize('wordBasedSuggestionsMode.matchingDocuments', 'Suggest words from all open documents of the same language.'), nls.localize('wordBasedSuggestionsMode.allDocuments', 'Suggest words from all open documents.')],\n      description: nls.localize('wordBasedSuggestionsMode', \"Controls form what documents word based completions are computed.\")\n    },\n    'editor.semanticHighlighting.enabled': {\n      enum: [true, false, 'configuredByTheme'],\n      enumDescriptions: [nls.localize('semanticHighlighting.true', 'Semantic highlighting enabled for all color themes.'), nls.localize('semanticHighlighting.false', 'Semantic highlighting disabled for all color themes.'), nls.localize('semanticHighlighting.configuredByTheme', 'Semantic highlighting is configured by the current color theme\\'s `semanticHighlighting` setting.')],\n      default: 'configuredByTheme',\n      description: nls.localize('semanticHighlighting.enabled', \"Controls whether the semanticHighlighting is shown for the languages that support it.\")\n    },\n    'editor.stablePeek': {\n      type: 'boolean',\n      default: false,\n      markdownDescription: nls.localize('stablePeek', \"Keep peek editors open even when double clicking their content or when hitting `Escape`.\")\n    },\n    'editor.maxTokenizationLineLength': {\n      type: 'integer',\n      default: 20000,\n      description: nls.localize('maxTokenizationLineLength', \"Lines above this length will not be tokenized for performance reasons\")\n    },\n    'diffEditor.maxComputationTime': {\n      type: 'number',\n      default: 5000,\n      description: nls.localize('maxComputationTime', \"Timeout in milliseconds after which diff computation is cancelled. Use 0 for no timeout.\")\n    },\n    'diffEditor.renderSideBySide': {\n      type: 'boolean',\n      default: true,\n      description: nls.localize('sideBySide', \"Controls whether the diff editor shows the diff side by side or inline.\")\n    },\n    'diffEditor.ignoreTrimWhitespace': {\n      type: 'boolean',\n      default: true,\n      description: nls.localize('ignoreTrimWhitespace', \"When enabled, the diff editor ignores changes in leading or trailing whitespace.\")\n    },\n    'diffEditor.renderIndicators': {\n      type: 'boolean',\n      default: true,\n      description: nls.localize('renderIndicators', \"Controls whether the diff editor shows +/- indicators for added/removed changes.\")\n    },\n    'diffEditor.codeLens': {\n      type: 'boolean',\n      default: false,\n      description: nls.localize('codeLens', \"Controls whether the editor shows CodeLens.\")\n    },\n    'diffEditor.wordWrap': {\n      type: 'string',\n      enum: ['off', 'on', 'inherit'],\n      default: 'inherit',\n      markdownEnumDescriptions: [nls.localize('wordWrap.off', \"Lines will never wrap.\"), nls.localize('wordWrap.on', \"Lines will wrap at the viewport width.\"), nls.localize('wordWrap.inherit', \"Lines will wrap according to the `#editor.wordWrap#` setting.\")]\n    }\n  }\n});\nfunction isConfigurationPropertySchema(x) {\n  return typeof x.type !== 'undefined' || typeof x.anyOf !== 'undefined';\n}\n// Add properties from the Editor Option Registry\nfor (const editorOption of editorOptionsRegistry) {\n  const schema = editorOption.schema;\n  if (typeof schema !== 'undefined') {\n    if (isConfigurationPropertySchema(schema)) {\n      // This is a single schema contribution\n      editorConfiguration.properties[\"editor.\".concat(editorOption.name)] = schema;\n    } else {\n      for (let key in schema) {\n        if (hasOwnProperty.call(schema, key)) {\n          editorConfiguration.properties[key] = schema[key];\n        }\n      }\n    }\n  }\n}\nlet cachedEditorConfigurationKeys = null;\nfunction getEditorConfigurationKeys() {\n  if (cachedEditorConfigurationKeys === null) {\n    cachedEditorConfigurationKeys = Object.create(null);\n    Object.keys(editorConfiguration.properties).forEach(prop => {\n      cachedEditorConfigurationKeys[prop] = true;\n    });\n  }\n  return cachedEditorConfigurationKeys;\n}\nexport function isEditorConfigurationKey(key) {\n  const editorConfigurationKeys = getEditorConfigurationKeys();\n  return editorConfigurationKeys[\"editor.\".concat(key)] || false;\n}\nexport function isDiffEditorConfigurationKey(key) {\n  const editorConfigurationKeys = getEditorConfigurationKeys();\n  return editorConfigurationKeys[\"diffEditor.\".concat(key)] || false;\n}\nconfigurationRegistry.registerConfiguration(editorConfiguration);","map":{"version":3,"names":["nls","Emitter","Disposable","objects","arrays","editorOptionsRegistry","ValidatedEditorOptions","ConfigurationChangedEvent","EDITOR_MODEL_DEFAULTS","ComputeOptionsMemory","EditorZoom","BareFontInfo","Extensions","Registry","forEach","TabFocus","constructor","_tabFocus","_onDidChangeTabFocus","onDidChangeTabFocus","event","getTabFocusMode","setTabFocusMode","tabFocusMode","fire","hasOwnProperty","Object","ComputedEditorOptions","_values","_read","id","get","_write","value","RawEditorOptions","EditorConfiguration2","readOptions","_options","options","result","editorOption","name","undefined","validateOptions","validate","computeOptions","env","compute","_deepEquals","a","b","Array","isArray","equals","key","checkEquals","somethingChanged","changed","migrateOptions","wordWrap","lineNumbers","autoClosingBrackets","autoClosingQuotes","autoSurround","cursorBlinking","renderWhitespace","renderLineHighlight","acceptSuggestionOnEnter","tabCompletion","suggest","filteredTypes","mapping","entry","hover","enabled","parameterHints","autoIndent","matchBrackets","deepCloneAndMigrateOptions","deepClone","CommonEditorConfiguration","isSimpleWidget","_onDidChange","_register","onDidChange","_onDidChangeFast","onDidChangeFast","_isDominatedByLongLines","_computeOptionsMemory","_viewLineCount","_lineNumbersDigitCount","_rawOptions","_readOptions","_validatedOptions","onDidChangeZoomLevel","_","_recomputeOptions","observeReferenceElement","dimension","updatePixelRatio","oldOptions","newOptions","_computeInternalOptions","changeEvent","getRawOptions","partialEnv","_getEnvConfiguration","bareFontInfo","createFromValidatedSettings","zoomLevel","pixelRatio","memory","outerWidth","outerHeight","fontInfo","readConfiguration","extraEditorClassName","isDominatedByLongLines","viewLineCount","lineNumbersDigitCount","emptySelectionClipboard","accessibilitySupport","_subsetEquals","base","subset","call","subsetValue","baseValue","updateOptions","_newOptions","mixin","setIsDominatedByLongLines","setMaxLineNumber","maxLineNumber","_digitCount","setViewLineCount","n","r","Math","floor","editorConfigurationBaseNode","freeze","order","type","title","localize","scope","configurationRegistry","as","Configuration","editorConfiguration","assign","properties","default","tabSize","minimum","markdownDescription","insertSpaces","detectIndentation","trimAutoWhitespace","description","largeFileOptimizations","enum","enumDescriptions","markdownEnumDescriptions","isConfigurationPropertySchema","x","anyOf","schema","concat","cachedEditorConfigurationKeys","getEditorConfigurationKeys","create","keys","prop","isEditorConfigurationKey","editorConfigurationKeys","isDiffEditorConfigurationKey","registerConfiguration"],"sources":["C:/Users/Administrator/Desktop/sqllineage-master/sqllineagejs/node_modules/monaco-editor/esm/vs/editor/common/config/commonEditorConfig.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport * as nls from '../../../nls.js';\r\nimport { Emitter } from '../../../base/common/event.js';\r\nimport { Disposable } from '../../../base/common/lifecycle.js';\r\nimport * as objects from '../../../base/common/objects.js';\r\nimport * as arrays from '../../../base/common/arrays.js';\r\nimport { editorOptionsRegistry, ValidatedEditorOptions, ConfigurationChangedEvent, EDITOR_MODEL_DEFAULTS, ComputeOptionsMemory } from './editorOptions.js';\r\nimport { EditorZoom } from './editorZoom.js';\r\nimport { BareFontInfo } from './fontInfo.js';\r\nimport { Extensions } from '../../../platform/configuration/common/configurationRegistry.js';\r\nimport { Registry } from '../../../platform/registry/common/platform.js';\r\nimport { forEach } from '../../../base/common/collections.js';\r\nexport const TabFocus = new class {\r\n    constructor() {\r\n        this._tabFocus = false;\r\n        this._onDidChangeTabFocus = new Emitter();\r\n        this.onDidChangeTabFocus = this._onDidChangeTabFocus.event;\r\n    }\r\n    getTabFocusMode() {\r\n        return this._tabFocus;\r\n    }\r\n    setTabFocusMode(tabFocusMode) {\r\n        if (this._tabFocus === tabFocusMode) {\r\n            return;\r\n        }\r\n        this._tabFocus = tabFocusMode;\r\n        this._onDidChangeTabFocus.fire(this._tabFocus);\r\n    }\r\n};\r\nconst hasOwnProperty = Object.hasOwnProperty;\r\nexport class ComputedEditorOptions {\r\n    constructor() {\r\n        this._values = [];\r\n    }\r\n    _read(id) {\r\n        return this._values[id];\r\n    }\r\n    get(id) {\r\n        return this._values[id];\r\n    }\r\n    _write(id, value) {\r\n        this._values[id] = value;\r\n    }\r\n}\r\nclass RawEditorOptions {\r\n    constructor() {\r\n        this._values = [];\r\n    }\r\n    _read(id) {\r\n        return this._values[id];\r\n    }\r\n    _write(id, value) {\r\n        this._values[id] = value;\r\n    }\r\n}\r\nclass EditorConfiguration2 {\r\n    static readOptions(_options) {\r\n        const options = _options;\r\n        const result = new RawEditorOptions();\r\n        for (const editorOption of editorOptionsRegistry) {\r\n            const value = (editorOption.name === '_never_' ? undefined : options[editorOption.name]);\r\n            result._write(editorOption.id, value);\r\n        }\r\n        return result;\r\n    }\r\n    static validateOptions(options) {\r\n        const result = new ValidatedEditorOptions();\r\n        for (const editorOption of editorOptionsRegistry) {\r\n            result._write(editorOption.id, editorOption.validate(options._read(editorOption.id)));\r\n        }\r\n        return result;\r\n    }\r\n    static computeOptions(options, env) {\r\n        const result = new ComputedEditorOptions();\r\n        for (const editorOption of editorOptionsRegistry) {\r\n            result._write(editorOption.id, editorOption.compute(env, result, options._read(editorOption.id)));\r\n        }\r\n        return result;\r\n    }\r\n    static _deepEquals(a, b) {\r\n        if (typeof a !== 'object' || typeof b !== 'object') {\r\n            return (a === b);\r\n        }\r\n        if (Array.isArray(a) || Array.isArray(b)) {\r\n            return (Array.isArray(a) && Array.isArray(b) ? arrays.equals(a, b) : false);\r\n        }\r\n        for (let key in a) {\r\n            if (!EditorConfiguration2._deepEquals(a[key], b[key])) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    static checkEquals(a, b) {\r\n        const result = [];\r\n        let somethingChanged = false;\r\n        for (const editorOption of editorOptionsRegistry) {\r\n            const changed = !EditorConfiguration2._deepEquals(a._read(editorOption.id), b._read(editorOption.id));\r\n            result[editorOption.id] = changed;\r\n            if (changed) {\r\n                somethingChanged = true;\r\n            }\r\n        }\r\n        return (somethingChanged ? new ConfigurationChangedEvent(result) : null);\r\n    }\r\n}\r\n/**\r\n * Compatibility with old options\r\n */\r\nfunction migrateOptions(options) {\r\n    const wordWrap = options.wordWrap;\r\n    if (wordWrap === true) {\r\n        options.wordWrap = 'on';\r\n    }\r\n    else if (wordWrap === false) {\r\n        options.wordWrap = 'off';\r\n    }\r\n    const lineNumbers = options.lineNumbers;\r\n    if (lineNumbers === true) {\r\n        options.lineNumbers = 'on';\r\n    }\r\n    else if (lineNumbers === false) {\r\n        options.lineNumbers = 'off';\r\n    }\r\n    const autoClosingBrackets = options.autoClosingBrackets;\r\n    if (autoClosingBrackets === false) {\r\n        options.autoClosingBrackets = 'never';\r\n        options.autoClosingQuotes = 'never';\r\n        options.autoSurround = 'never';\r\n    }\r\n    const cursorBlinking = options.cursorBlinking;\r\n    if (cursorBlinking === 'visible') {\r\n        options.cursorBlinking = 'solid';\r\n    }\r\n    const renderWhitespace = options.renderWhitespace;\r\n    if (renderWhitespace === true) {\r\n        options.renderWhitespace = 'boundary';\r\n    }\r\n    else if (renderWhitespace === false) {\r\n        options.renderWhitespace = 'none';\r\n    }\r\n    const renderLineHighlight = options.renderLineHighlight;\r\n    if (renderLineHighlight === true) {\r\n        options.renderLineHighlight = 'line';\r\n    }\r\n    else if (renderLineHighlight === false) {\r\n        options.renderLineHighlight = 'none';\r\n    }\r\n    const acceptSuggestionOnEnter = options.acceptSuggestionOnEnter;\r\n    if (acceptSuggestionOnEnter === true) {\r\n        options.acceptSuggestionOnEnter = 'on';\r\n    }\r\n    else if (acceptSuggestionOnEnter === false) {\r\n        options.acceptSuggestionOnEnter = 'off';\r\n    }\r\n    const tabCompletion = options.tabCompletion;\r\n    if (tabCompletion === false) {\r\n        options.tabCompletion = 'off';\r\n    }\r\n    else if (tabCompletion === true) {\r\n        options.tabCompletion = 'onlySnippets';\r\n    }\r\n    const suggest = options.suggest;\r\n    if (suggest && typeof suggest.filteredTypes === 'object' && suggest.filteredTypes) {\r\n        const mapping = {};\r\n        mapping['method'] = 'showMethods';\r\n        mapping['function'] = 'showFunctions';\r\n        mapping['constructor'] = 'showConstructors';\r\n        mapping['field'] = 'showFields';\r\n        mapping['variable'] = 'showVariables';\r\n        mapping['class'] = 'showClasses';\r\n        mapping['struct'] = 'showStructs';\r\n        mapping['interface'] = 'showInterfaces';\r\n        mapping['module'] = 'showModules';\r\n        mapping['property'] = 'showProperties';\r\n        mapping['event'] = 'showEvents';\r\n        mapping['operator'] = 'showOperators';\r\n        mapping['unit'] = 'showUnits';\r\n        mapping['value'] = 'showValues';\r\n        mapping['constant'] = 'showConstants';\r\n        mapping['enum'] = 'showEnums';\r\n        mapping['enumMember'] = 'showEnumMembers';\r\n        mapping['keyword'] = 'showKeywords';\r\n        mapping['text'] = 'showWords';\r\n        mapping['color'] = 'showColors';\r\n        mapping['file'] = 'showFiles';\r\n        mapping['reference'] = 'showReferences';\r\n        mapping['folder'] = 'showFolders';\r\n        mapping['typeParameter'] = 'showTypeParameters';\r\n        mapping['snippet'] = 'showSnippets';\r\n        forEach(mapping, entry => {\r\n            const value = suggest.filteredTypes[entry.key];\r\n            if (value === false) {\r\n                suggest[entry.value] = value;\r\n            }\r\n        });\r\n        // delete (<any>suggest).filteredTypes;\r\n    }\r\n    const hover = options.hover;\r\n    if (hover === true) {\r\n        options.hover = {\r\n            enabled: true\r\n        };\r\n    }\r\n    else if (hover === false) {\r\n        options.hover = {\r\n            enabled: false\r\n        };\r\n    }\r\n    const parameterHints = options.parameterHints;\r\n    if (parameterHints === true) {\r\n        options.parameterHints = {\r\n            enabled: true\r\n        };\r\n    }\r\n    else if (parameterHints === false) {\r\n        options.parameterHints = {\r\n            enabled: false\r\n        };\r\n    }\r\n    const autoIndent = options.autoIndent;\r\n    if (autoIndent === true) {\r\n        options.autoIndent = 'full';\r\n    }\r\n    else if (autoIndent === false) {\r\n        options.autoIndent = 'advanced';\r\n    }\r\n    const matchBrackets = options.matchBrackets;\r\n    if (matchBrackets === true) {\r\n        options.matchBrackets = 'always';\r\n    }\r\n    else if (matchBrackets === false) {\r\n        options.matchBrackets = 'never';\r\n    }\r\n}\r\nfunction deepCloneAndMigrateOptions(_options) {\r\n    const options = objects.deepClone(_options);\r\n    migrateOptions(options);\r\n    return options;\r\n}\r\nexport class CommonEditorConfiguration extends Disposable {\r\n    constructor(isSimpleWidget, _options) {\r\n        super();\r\n        this._onDidChange = this._register(new Emitter());\r\n        this.onDidChange = this._onDidChange.event;\r\n        this._onDidChangeFast = this._register(new Emitter());\r\n        this.onDidChangeFast = this._onDidChangeFast.event;\r\n        this.isSimpleWidget = isSimpleWidget;\r\n        this._isDominatedByLongLines = false;\r\n        this._computeOptionsMemory = new ComputeOptionsMemory();\r\n        this._viewLineCount = 1;\r\n        this._lineNumbersDigitCount = 1;\r\n        this._rawOptions = deepCloneAndMigrateOptions(_options);\r\n        this._readOptions = EditorConfiguration2.readOptions(this._rawOptions);\r\n        this._validatedOptions = EditorConfiguration2.validateOptions(this._readOptions);\r\n        this._register(EditorZoom.onDidChangeZoomLevel(_ => this._recomputeOptions()));\r\n        this._register(TabFocus.onDidChangeTabFocus(_ => this._recomputeOptions()));\r\n    }\r\n    observeReferenceElement(dimension) {\r\n    }\r\n    updatePixelRatio() {\r\n    }\r\n    _recomputeOptions() {\r\n        const oldOptions = this.options;\r\n        const newOptions = this._computeInternalOptions();\r\n        if (!oldOptions) {\r\n            this.options = newOptions;\r\n        }\r\n        else {\r\n            const changeEvent = EditorConfiguration2.checkEquals(oldOptions, newOptions);\r\n            if (changeEvent === null) {\r\n                // nothing changed!\r\n                return;\r\n            }\r\n            this.options = newOptions;\r\n            this._onDidChangeFast.fire(changeEvent);\r\n            this._onDidChange.fire(changeEvent);\r\n        }\r\n    }\r\n    getRawOptions() {\r\n        return this._rawOptions;\r\n    }\r\n    _computeInternalOptions() {\r\n        const partialEnv = this._getEnvConfiguration();\r\n        const bareFontInfo = BareFontInfo.createFromValidatedSettings(this._validatedOptions, partialEnv.zoomLevel, partialEnv.pixelRatio, this.isSimpleWidget);\r\n        const env = {\r\n            memory: this._computeOptionsMemory,\r\n            outerWidth: partialEnv.outerWidth,\r\n            outerHeight: partialEnv.outerHeight,\r\n            fontInfo: this.readConfiguration(bareFontInfo),\r\n            extraEditorClassName: partialEnv.extraEditorClassName,\r\n            isDominatedByLongLines: this._isDominatedByLongLines,\r\n            viewLineCount: this._viewLineCount,\r\n            lineNumbersDigitCount: this._lineNumbersDigitCount,\r\n            emptySelectionClipboard: partialEnv.emptySelectionClipboard,\r\n            pixelRatio: partialEnv.pixelRatio,\r\n            tabFocusMode: TabFocus.getTabFocusMode(),\r\n            accessibilitySupport: partialEnv.accessibilitySupport\r\n        };\r\n        return EditorConfiguration2.computeOptions(this._validatedOptions, env);\r\n    }\r\n    static _subsetEquals(base, subset) {\r\n        for (const key in subset) {\r\n            if (hasOwnProperty.call(subset, key)) {\r\n                const subsetValue = subset[key];\r\n                const baseValue = base[key];\r\n                if (baseValue === subsetValue) {\r\n                    continue;\r\n                }\r\n                if (Array.isArray(baseValue) && Array.isArray(subsetValue)) {\r\n                    if (!arrays.equals(baseValue, subsetValue)) {\r\n                        return false;\r\n                    }\r\n                    continue;\r\n                }\r\n                if (baseValue && typeof baseValue === 'object' && subsetValue && typeof subsetValue === 'object') {\r\n                    if (!this._subsetEquals(baseValue, subsetValue)) {\r\n                        return false;\r\n                    }\r\n                    continue;\r\n                }\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    updateOptions(_newOptions) {\r\n        if (typeof _newOptions === 'undefined') {\r\n            return;\r\n        }\r\n        const newOptions = deepCloneAndMigrateOptions(_newOptions);\r\n        if (CommonEditorConfiguration._subsetEquals(this._rawOptions, newOptions)) {\r\n            return;\r\n        }\r\n        this._rawOptions = objects.mixin(this._rawOptions, newOptions || {});\r\n        this._readOptions = EditorConfiguration2.readOptions(this._rawOptions);\r\n        this._validatedOptions = EditorConfiguration2.validateOptions(this._readOptions);\r\n        this._recomputeOptions();\r\n    }\r\n    setIsDominatedByLongLines(isDominatedByLongLines) {\r\n        this._isDominatedByLongLines = isDominatedByLongLines;\r\n        this._recomputeOptions();\r\n    }\r\n    setMaxLineNumber(maxLineNumber) {\r\n        const lineNumbersDigitCount = CommonEditorConfiguration._digitCount(maxLineNumber);\r\n        if (this._lineNumbersDigitCount === lineNumbersDigitCount) {\r\n            return;\r\n        }\r\n        this._lineNumbersDigitCount = lineNumbersDigitCount;\r\n        this._recomputeOptions();\r\n    }\r\n    setViewLineCount(viewLineCount) {\r\n        if (this._viewLineCount === viewLineCount) {\r\n            return;\r\n        }\r\n        this._viewLineCount = viewLineCount;\r\n        this._recomputeOptions();\r\n    }\r\n    static _digitCount(n) {\r\n        let r = 0;\r\n        while (n) {\r\n            n = Math.floor(n / 10);\r\n            r++;\r\n        }\r\n        return r ? r : 1;\r\n    }\r\n}\r\nexport const editorConfigurationBaseNode = Object.freeze({\r\n    id: 'editor',\r\n    order: 5,\r\n    type: 'object',\r\n    title: nls.localize('editorConfigurationTitle', \"Editor\"),\r\n    scope: 5 /* LANGUAGE_OVERRIDABLE */,\r\n});\r\nconst configurationRegistry = Registry.as(Extensions.Configuration);\r\nconst editorConfiguration = Object.assign(Object.assign({}, editorConfigurationBaseNode), { properties: {\r\n        'editor.tabSize': {\r\n            type: 'number',\r\n            default: EDITOR_MODEL_DEFAULTS.tabSize,\r\n            minimum: 1,\r\n            markdownDescription: nls.localize('tabSize', \"The number of spaces a tab is equal to. This setting is overridden based on the file contents when `#editor.detectIndentation#` is on.\")\r\n        },\r\n        // 'editor.indentSize': {\r\n        // \t'anyOf': [\r\n        // \t\t{\r\n        // \t\t\ttype: 'string',\r\n        // \t\t\tenum: ['tabSize']\r\n        // \t\t},\r\n        // \t\t{\r\n        // \t\t\ttype: 'number',\r\n        // \t\t\tminimum: 1\r\n        // \t\t}\r\n        // \t],\r\n        // \tdefault: 'tabSize',\r\n        // \tmarkdownDescription: nls.localize('indentSize', \"The number of spaces used for indentation or 'tabSize' to use the value from `#editor.tabSize#`. This setting is overridden based on the file contents when `#editor.detectIndentation#` is on.\")\r\n        // },\r\n        'editor.insertSpaces': {\r\n            type: 'boolean',\r\n            default: EDITOR_MODEL_DEFAULTS.insertSpaces,\r\n            markdownDescription: nls.localize('insertSpaces', \"Insert spaces when pressing `Tab`. This setting is overridden based on the file contents when `#editor.detectIndentation#` is on.\")\r\n        },\r\n        'editor.detectIndentation': {\r\n            type: 'boolean',\r\n            default: EDITOR_MODEL_DEFAULTS.detectIndentation,\r\n            markdownDescription: nls.localize('detectIndentation', \"Controls whether `#editor.tabSize#` and `#editor.insertSpaces#` will be automatically detected when a file is opened based on the file contents.\")\r\n        },\r\n        'editor.trimAutoWhitespace': {\r\n            type: 'boolean',\r\n            default: EDITOR_MODEL_DEFAULTS.trimAutoWhitespace,\r\n            description: nls.localize('trimAutoWhitespace', \"Remove trailing auto inserted whitespace.\")\r\n        },\r\n        'editor.largeFileOptimizations': {\r\n            type: 'boolean',\r\n            default: EDITOR_MODEL_DEFAULTS.largeFileOptimizations,\r\n            description: nls.localize('largeFileOptimizations', \"Special handling for large files to disable certain memory intensive features.\")\r\n        },\r\n        'editor.wordBasedSuggestions': {\r\n            type: 'boolean',\r\n            default: true,\r\n            description: nls.localize('wordBasedSuggestions', \"Controls whether completions should be computed based on words in the document.\")\r\n        },\r\n        'editor.wordBasedSuggestionsMode': {\r\n            enum: ['currentDocument', 'matchingDocuments', 'allDocuments'],\r\n            default: 'matchingDocuments',\r\n            enumDescriptions: [\r\n                nls.localize('wordBasedSuggestionsMode.currentDocument', 'Only suggest words from the active document.'),\r\n                nls.localize('wordBasedSuggestionsMode.matchingDocuments', 'Suggest words from all open documents of the same language.'),\r\n                nls.localize('wordBasedSuggestionsMode.allDocuments', 'Suggest words from all open documents.')\r\n            ],\r\n            description: nls.localize('wordBasedSuggestionsMode', \"Controls form what documents word based completions are computed.\")\r\n        },\r\n        'editor.semanticHighlighting.enabled': {\r\n            enum: [true, false, 'configuredByTheme'],\r\n            enumDescriptions: [\r\n                nls.localize('semanticHighlighting.true', 'Semantic highlighting enabled for all color themes.'),\r\n                nls.localize('semanticHighlighting.false', 'Semantic highlighting disabled for all color themes.'),\r\n                nls.localize('semanticHighlighting.configuredByTheme', 'Semantic highlighting is configured by the current color theme\\'s `semanticHighlighting` setting.')\r\n            ],\r\n            default: 'configuredByTheme',\r\n            description: nls.localize('semanticHighlighting.enabled', \"Controls whether the semanticHighlighting is shown for the languages that support it.\")\r\n        },\r\n        'editor.stablePeek': {\r\n            type: 'boolean',\r\n            default: false,\r\n            markdownDescription: nls.localize('stablePeek', \"Keep peek editors open even when double clicking their content or when hitting `Escape`.\")\r\n        },\r\n        'editor.maxTokenizationLineLength': {\r\n            type: 'integer',\r\n            default: 20000,\r\n            description: nls.localize('maxTokenizationLineLength', \"Lines above this length will not be tokenized for performance reasons\")\r\n        },\r\n        'diffEditor.maxComputationTime': {\r\n            type: 'number',\r\n            default: 5000,\r\n            description: nls.localize('maxComputationTime', \"Timeout in milliseconds after which diff computation is cancelled. Use 0 for no timeout.\")\r\n        },\r\n        'diffEditor.renderSideBySide': {\r\n            type: 'boolean',\r\n            default: true,\r\n            description: nls.localize('sideBySide', \"Controls whether the diff editor shows the diff side by side or inline.\")\r\n        },\r\n        'diffEditor.ignoreTrimWhitespace': {\r\n            type: 'boolean',\r\n            default: true,\r\n            description: nls.localize('ignoreTrimWhitespace', \"When enabled, the diff editor ignores changes in leading or trailing whitespace.\")\r\n        },\r\n        'diffEditor.renderIndicators': {\r\n            type: 'boolean',\r\n            default: true,\r\n            description: nls.localize('renderIndicators', \"Controls whether the diff editor shows +/- indicators for added/removed changes.\")\r\n        },\r\n        'diffEditor.codeLens': {\r\n            type: 'boolean',\r\n            default: false,\r\n            description: nls.localize('codeLens', \"Controls whether the editor shows CodeLens.\")\r\n        },\r\n        'diffEditor.wordWrap': {\r\n            type: 'string',\r\n            enum: ['off', 'on', 'inherit'],\r\n            default: 'inherit',\r\n            markdownEnumDescriptions: [\r\n                nls.localize('wordWrap.off', \"Lines will never wrap.\"),\r\n                nls.localize('wordWrap.on', \"Lines will wrap at the viewport width.\"),\r\n                nls.localize('wordWrap.inherit', \"Lines will wrap according to the `#editor.wordWrap#` setting.\"),\r\n            ]\r\n        }\r\n    } });\r\nfunction isConfigurationPropertySchema(x) {\r\n    return (typeof x.type !== 'undefined' || typeof x.anyOf !== 'undefined');\r\n}\r\n// Add properties from the Editor Option Registry\r\nfor (const editorOption of editorOptionsRegistry) {\r\n    const schema = editorOption.schema;\r\n    if (typeof schema !== 'undefined') {\r\n        if (isConfigurationPropertySchema(schema)) {\r\n            // This is a single schema contribution\r\n            editorConfiguration.properties[`editor.${editorOption.name}`] = schema;\r\n        }\r\n        else {\r\n            for (let key in schema) {\r\n                if (hasOwnProperty.call(schema, key)) {\r\n                    editorConfiguration.properties[key] = schema[key];\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\nlet cachedEditorConfigurationKeys = null;\r\nfunction getEditorConfigurationKeys() {\r\n    if (cachedEditorConfigurationKeys === null) {\r\n        cachedEditorConfigurationKeys = Object.create(null);\r\n        Object.keys(editorConfiguration.properties).forEach((prop) => {\r\n            cachedEditorConfigurationKeys[prop] = true;\r\n        });\r\n    }\r\n    return cachedEditorConfigurationKeys;\r\n}\r\nexport function isEditorConfigurationKey(key) {\r\n    const editorConfigurationKeys = getEditorConfigurationKeys();\r\n    return (editorConfigurationKeys[`editor.${key}`] || false);\r\n}\r\nexport function isDiffEditorConfigurationKey(key) {\r\n    const editorConfigurationKeys = getEditorConfigurationKeys();\r\n    return (editorConfigurationKeys[`diffEditor.${key}`] || false);\r\n}\r\nconfigurationRegistry.registerConfiguration(editorConfiguration);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}