{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../nls.js';\nexport class ModifierLabelProvider {\n  constructor(mac, windows) {\n    let linux = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : windows;\n    this.modifierLabels = [null]; // index 0 will never me accessed.\n    this.modifierLabels[2 /* Macintosh */] = mac;\n    this.modifierLabels[1 /* Windows */] = windows;\n    this.modifierLabels[3 /* Linux */] = linux;\n  }\n  toLabel(OS, parts, keyLabelProvider) {\n    if (parts.length === 0) {\n      return null;\n    }\n    const result = [];\n    for (let i = 0, len = parts.length; i < len; i++) {\n      const part = parts[i];\n      const keyLabel = keyLabelProvider(part);\n      if (keyLabel === null) {\n        // this keybinding cannot be expressed...\n        return null;\n      }\n      result[i] = _simpleAsString(part, keyLabel, this.modifierLabels[OS]);\n    }\n    return result.join(' ');\n  }\n}\n/**\r\n * A label provider that prints modifiers in a suitable format for displaying in the UI.\r\n */\nexport const UILabelProvider = new ModifierLabelProvider({\n  ctrlKey: '⌃',\n  shiftKey: '⇧',\n  altKey: '⌥',\n  metaKey: '⌘',\n  separator: ''\n}, {\n  ctrlKey: nls.localize({\n    key: 'ctrlKey',\n    comment: ['This is the short form for the Control key on the keyboard']\n  }, \"Ctrl\"),\n  shiftKey: nls.localize({\n    key: 'shiftKey',\n    comment: ['This is the short form for the Shift key on the keyboard']\n  }, \"Shift\"),\n  altKey: nls.localize({\n    key: 'altKey',\n    comment: ['This is the short form for the Alt key on the keyboard']\n  }, \"Alt\"),\n  metaKey: nls.localize({\n    key: 'windowsKey',\n    comment: ['This is the short form for the Windows key on the keyboard']\n  }, \"Windows\"),\n  separator: '+'\n}, {\n  ctrlKey: nls.localize({\n    key: 'ctrlKey',\n    comment: ['This is the short form for the Control key on the keyboard']\n  }, \"Ctrl\"),\n  shiftKey: nls.localize({\n    key: 'shiftKey',\n    comment: ['This is the short form for the Shift key on the keyboard']\n  }, \"Shift\"),\n  altKey: nls.localize({\n    key: 'altKey',\n    comment: ['This is the short form for the Alt key on the keyboard']\n  }, \"Alt\"),\n  metaKey: nls.localize({\n    key: 'superKey',\n    comment: ['This is the short form for the Super key on the keyboard']\n  }, \"Super\"),\n  separator: '+'\n});\n/**\r\n * A label provider that prints modifiers in a suitable format for ARIA.\r\n */\nexport const AriaLabelProvider = new ModifierLabelProvider({\n  ctrlKey: nls.localize({\n    key: 'ctrlKey.long',\n    comment: ['This is the long form for the Control key on the keyboard']\n  }, \"Control\"),\n  shiftKey: nls.localize({\n    key: 'shiftKey.long',\n    comment: ['This is the long form for the Shift key on the keyboard']\n  }, \"Shift\"),\n  altKey: nls.localize({\n    key: 'altKey.long',\n    comment: ['This is the long form for the Alt key on the keyboard']\n  }, \"Alt\"),\n  metaKey: nls.localize({\n    key: 'cmdKey.long',\n    comment: ['This is the long form for the Command key on the keyboard']\n  }, \"Command\"),\n  separator: '+'\n}, {\n  ctrlKey: nls.localize({\n    key: 'ctrlKey.long',\n    comment: ['This is the long form for the Control key on the keyboard']\n  }, \"Control\"),\n  shiftKey: nls.localize({\n    key: 'shiftKey.long',\n    comment: ['This is the long form for the Shift key on the keyboard']\n  }, \"Shift\"),\n  altKey: nls.localize({\n    key: 'altKey.long',\n    comment: ['This is the long form for the Alt key on the keyboard']\n  }, \"Alt\"),\n  metaKey: nls.localize({\n    key: 'windowsKey.long',\n    comment: ['This is the long form for the Windows key on the keyboard']\n  }, \"Windows\"),\n  separator: '+'\n}, {\n  ctrlKey: nls.localize({\n    key: 'ctrlKey.long',\n    comment: ['This is the long form for the Control key on the keyboard']\n  }, \"Control\"),\n  shiftKey: nls.localize({\n    key: 'shiftKey.long',\n    comment: ['This is the long form for the Shift key on the keyboard']\n  }, \"Shift\"),\n  altKey: nls.localize({\n    key: 'altKey.long',\n    comment: ['This is the long form for the Alt key on the keyboard']\n  }, \"Alt\"),\n  metaKey: nls.localize({\n    key: 'superKey.long',\n    comment: ['This is the long form for the Super key on the keyboard']\n  }, \"Super\"),\n  separator: '+'\n});\nfunction _simpleAsString(modifiers, key, labels) {\n  if (key === null) {\n    return '';\n  }\n  const result = [];\n  // translate modifier keys: Ctrl-Shift-Alt-Meta\n  if (modifiers.ctrlKey) {\n    result.push(labels.ctrlKey);\n  }\n  if (modifiers.shiftKey) {\n    result.push(labels.shiftKey);\n  }\n  if (modifiers.altKey) {\n    result.push(labels.altKey);\n  }\n  if (modifiers.metaKey) {\n    result.push(labels.metaKey);\n  }\n  // the actual key\n  if (key !== '') {\n    result.push(key);\n  }\n  return result.join(labels.separator);\n}","map":{"version":3,"names":["nls","ModifierLabelProvider","constructor","mac","windows","linux","arguments","length","undefined","modifierLabels","toLabel","OS","parts","keyLabelProvider","result","i","len","part","keyLabel","_simpleAsString","join","UILabelProvider","ctrlKey","shiftKey","altKey","metaKey","separator","localize","key","comment","AriaLabelProvider","modifiers","labels","push"],"sources":["C:/Users/Administrator/Desktop/sqllineage-master/sqllineagejs/node_modules/monaco-editor/esm/vs/base/common/keybindingLabels.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport * as nls from '../../nls.js';\r\nexport class ModifierLabelProvider {\r\n    constructor(mac, windows, linux = windows) {\r\n        this.modifierLabels = [null]; // index 0 will never me accessed.\r\n        this.modifierLabels[2 /* Macintosh */] = mac;\r\n        this.modifierLabels[1 /* Windows */] = windows;\r\n        this.modifierLabels[3 /* Linux */] = linux;\r\n    }\r\n    toLabel(OS, parts, keyLabelProvider) {\r\n        if (parts.length === 0) {\r\n            return null;\r\n        }\r\n        const result = [];\r\n        for (let i = 0, len = parts.length; i < len; i++) {\r\n            const part = parts[i];\r\n            const keyLabel = keyLabelProvider(part);\r\n            if (keyLabel === null) {\r\n                // this keybinding cannot be expressed...\r\n                return null;\r\n            }\r\n            result[i] = _simpleAsString(part, keyLabel, this.modifierLabels[OS]);\r\n        }\r\n        return result.join(' ');\r\n    }\r\n}\r\n/**\r\n * A label provider that prints modifiers in a suitable format for displaying in the UI.\r\n */\r\nexport const UILabelProvider = new ModifierLabelProvider({\r\n    ctrlKey: '⌃',\r\n    shiftKey: '⇧',\r\n    altKey: '⌥',\r\n    metaKey: '⌘',\r\n    separator: '',\r\n}, {\r\n    ctrlKey: nls.localize({ key: 'ctrlKey', comment: ['This is the short form for the Control key on the keyboard'] }, \"Ctrl\"),\r\n    shiftKey: nls.localize({ key: 'shiftKey', comment: ['This is the short form for the Shift key on the keyboard'] }, \"Shift\"),\r\n    altKey: nls.localize({ key: 'altKey', comment: ['This is the short form for the Alt key on the keyboard'] }, \"Alt\"),\r\n    metaKey: nls.localize({ key: 'windowsKey', comment: ['This is the short form for the Windows key on the keyboard'] }, \"Windows\"),\r\n    separator: '+',\r\n}, {\r\n    ctrlKey: nls.localize({ key: 'ctrlKey', comment: ['This is the short form for the Control key on the keyboard'] }, \"Ctrl\"),\r\n    shiftKey: nls.localize({ key: 'shiftKey', comment: ['This is the short form for the Shift key on the keyboard'] }, \"Shift\"),\r\n    altKey: nls.localize({ key: 'altKey', comment: ['This is the short form for the Alt key on the keyboard'] }, \"Alt\"),\r\n    metaKey: nls.localize({ key: 'superKey', comment: ['This is the short form for the Super key on the keyboard'] }, \"Super\"),\r\n    separator: '+',\r\n});\r\n/**\r\n * A label provider that prints modifiers in a suitable format for ARIA.\r\n */\r\nexport const AriaLabelProvider = new ModifierLabelProvider({\r\n    ctrlKey: nls.localize({ key: 'ctrlKey.long', comment: ['This is the long form for the Control key on the keyboard'] }, \"Control\"),\r\n    shiftKey: nls.localize({ key: 'shiftKey.long', comment: ['This is the long form for the Shift key on the keyboard'] }, \"Shift\"),\r\n    altKey: nls.localize({ key: 'altKey.long', comment: ['This is the long form for the Alt key on the keyboard'] }, \"Alt\"),\r\n    metaKey: nls.localize({ key: 'cmdKey.long', comment: ['This is the long form for the Command key on the keyboard'] }, \"Command\"),\r\n    separator: '+',\r\n}, {\r\n    ctrlKey: nls.localize({ key: 'ctrlKey.long', comment: ['This is the long form for the Control key on the keyboard'] }, \"Control\"),\r\n    shiftKey: nls.localize({ key: 'shiftKey.long', comment: ['This is the long form for the Shift key on the keyboard'] }, \"Shift\"),\r\n    altKey: nls.localize({ key: 'altKey.long', comment: ['This is the long form for the Alt key on the keyboard'] }, \"Alt\"),\r\n    metaKey: nls.localize({ key: 'windowsKey.long', comment: ['This is the long form for the Windows key on the keyboard'] }, \"Windows\"),\r\n    separator: '+',\r\n}, {\r\n    ctrlKey: nls.localize({ key: 'ctrlKey.long', comment: ['This is the long form for the Control key on the keyboard'] }, \"Control\"),\r\n    shiftKey: nls.localize({ key: 'shiftKey.long', comment: ['This is the long form for the Shift key on the keyboard'] }, \"Shift\"),\r\n    altKey: nls.localize({ key: 'altKey.long', comment: ['This is the long form for the Alt key on the keyboard'] }, \"Alt\"),\r\n    metaKey: nls.localize({ key: 'superKey.long', comment: ['This is the long form for the Super key on the keyboard'] }, \"Super\"),\r\n    separator: '+',\r\n});\r\nfunction _simpleAsString(modifiers, key, labels) {\r\n    if (key === null) {\r\n        return '';\r\n    }\r\n    const result = [];\r\n    // translate modifier keys: Ctrl-Shift-Alt-Meta\r\n    if (modifiers.ctrlKey) {\r\n        result.push(labels.ctrlKey);\r\n    }\r\n    if (modifiers.shiftKey) {\r\n        result.push(labels.shiftKey);\r\n    }\r\n    if (modifiers.altKey) {\r\n        result.push(labels.altKey);\r\n    }\r\n    if (modifiers.metaKey) {\r\n        result.push(labels.metaKey);\r\n    }\r\n    // the actual key\r\n    if (key !== '') {\r\n        result.push(key);\r\n    }\r\n    return result.join(labels.separator);\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}