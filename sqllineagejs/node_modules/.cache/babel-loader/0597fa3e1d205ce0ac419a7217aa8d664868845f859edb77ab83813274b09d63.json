{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { Range } from '../../common/core/range.js';\nimport { OverviewRulerLane, MinimapPosition } from '../../common/model.js';\nimport { ModelDecorationOptions } from '../../common/model/textModel.js';\nimport { overviewRulerFindMatchForeground, minimapFindMatch } from '../../../platform/theme/common/colorRegistry.js';\nimport { themeColorFromId } from '../../../platform/theme/common/themeService.js';\nexport class FindDecorations {\n  constructor(editor) {\n    this._editor = editor;\n    this._decorations = [];\n    this._overviewRulerApproximateDecorations = [];\n    this._findScopeDecorationIds = [];\n    this._rangeHighlightDecorationId = null;\n    this._highlightedDecorationId = null;\n    this._startPosition = this._editor.getPosition();\n  }\n  dispose() {\n    this._editor.deltaDecorations(this._allDecorations(), []);\n    this._decorations = [];\n    this._overviewRulerApproximateDecorations = [];\n    this._findScopeDecorationIds = [];\n    this._rangeHighlightDecorationId = null;\n    this._highlightedDecorationId = null;\n  }\n  reset() {\n    this._decorations = [];\n    this._overviewRulerApproximateDecorations = [];\n    this._findScopeDecorationIds = [];\n    this._rangeHighlightDecorationId = null;\n    this._highlightedDecorationId = null;\n  }\n  getCount() {\n    return this._decorations.length;\n  }\n  /** @deprecated use getFindScopes to support multiple selections */\n  getFindScope() {\n    if (this._findScopeDecorationIds[0]) {\n      return this._editor.getModel().getDecorationRange(this._findScopeDecorationIds[0]);\n    }\n    return null;\n  }\n  getFindScopes() {\n    if (this._findScopeDecorationIds.length) {\n      const scopes = this._findScopeDecorationIds.map(findScopeDecorationId => this._editor.getModel().getDecorationRange(findScopeDecorationId)).filter(element => !!element);\n      if (scopes.length) {\n        return scopes;\n      }\n    }\n    return null;\n  }\n  getStartPosition() {\n    return this._startPosition;\n  }\n  setStartPosition(newStartPosition) {\n    this._startPosition = newStartPosition;\n    this.setCurrentFindMatch(null);\n  }\n  _getDecorationIndex(decorationId) {\n    const index = this._decorations.indexOf(decorationId);\n    if (index >= 0) {\n      return index + 1;\n    }\n    return 1;\n  }\n  getCurrentMatchesPosition(desiredRange) {\n    let candidates = this._editor.getModel().getDecorationsInRange(desiredRange);\n    for (const candidate of candidates) {\n      const candidateOpts = candidate.options;\n      if (candidateOpts === FindDecorations._FIND_MATCH_DECORATION || candidateOpts === FindDecorations._CURRENT_FIND_MATCH_DECORATION) {\n        return this._getDecorationIndex(candidate.id);\n      }\n    }\n    // We don't know the current match position, so returns zero to show '?' in find widget\n    return 0;\n  }\n  setCurrentFindMatch(nextMatch) {\n    let newCurrentDecorationId = null;\n    let matchPosition = 0;\n    if (nextMatch) {\n      for (let i = 0, len = this._decorations.length; i < len; i++) {\n        let range = this._editor.getModel().getDecorationRange(this._decorations[i]);\n        if (nextMatch.equalsRange(range)) {\n          newCurrentDecorationId = this._decorations[i];\n          matchPosition = i + 1;\n          break;\n        }\n      }\n    }\n    if (this._highlightedDecorationId !== null || newCurrentDecorationId !== null) {\n      this._editor.changeDecorations(changeAccessor => {\n        if (this._highlightedDecorationId !== null) {\n          changeAccessor.changeDecorationOptions(this._highlightedDecorationId, FindDecorations._FIND_MATCH_DECORATION);\n          this._highlightedDecorationId = null;\n        }\n        if (newCurrentDecorationId !== null) {\n          this._highlightedDecorationId = newCurrentDecorationId;\n          changeAccessor.changeDecorationOptions(this._highlightedDecorationId, FindDecorations._CURRENT_FIND_MATCH_DECORATION);\n        }\n        if (this._rangeHighlightDecorationId !== null) {\n          changeAccessor.removeDecoration(this._rangeHighlightDecorationId);\n          this._rangeHighlightDecorationId = null;\n        }\n        if (newCurrentDecorationId !== null) {\n          let rng = this._editor.getModel().getDecorationRange(newCurrentDecorationId);\n          if (rng.startLineNumber !== rng.endLineNumber && rng.endColumn === 1) {\n            let lineBeforeEnd = rng.endLineNumber - 1;\n            let lineBeforeEndMaxColumn = this._editor.getModel().getLineMaxColumn(lineBeforeEnd);\n            rng = new Range(rng.startLineNumber, rng.startColumn, lineBeforeEnd, lineBeforeEndMaxColumn);\n          }\n          this._rangeHighlightDecorationId = changeAccessor.addDecoration(rng, FindDecorations._RANGE_HIGHLIGHT_DECORATION);\n        }\n      });\n    }\n    return matchPosition;\n  }\n  set(findMatches, findScopes) {\n    this._editor.changeDecorations(accessor => {\n      let findMatchesOptions = FindDecorations._FIND_MATCH_DECORATION;\n      let newOverviewRulerApproximateDecorations = [];\n      if (findMatches.length > 1000) {\n        // we go into a mode where the overview ruler gets \"approximate\" decorations\n        // the reason is that the overview ruler paints all the decorations in the file and we don't want to cause freezes\n        findMatchesOptions = FindDecorations._FIND_MATCH_NO_OVERVIEW_DECORATION;\n        // approximate a distance in lines where matches should be merged\n        const lineCount = this._editor.getModel().getLineCount();\n        const height = this._editor.getLayoutInfo().height;\n        const approxPixelsPerLine = height / lineCount;\n        const mergeLinesDelta = Math.max(2, Math.ceil(3 / approxPixelsPerLine));\n        // merge decorations as much as possible\n        let prevStartLineNumber = findMatches[0].range.startLineNumber;\n        let prevEndLineNumber = findMatches[0].range.endLineNumber;\n        for (let i = 1, len = findMatches.length; i < len; i++) {\n          const range = findMatches[i].range;\n          if (prevEndLineNumber + mergeLinesDelta >= range.startLineNumber) {\n            if (range.endLineNumber > prevEndLineNumber) {\n              prevEndLineNumber = range.endLineNumber;\n            }\n          } else {\n            newOverviewRulerApproximateDecorations.push({\n              range: new Range(prevStartLineNumber, 1, prevEndLineNumber, 1),\n              options: FindDecorations._FIND_MATCH_ONLY_OVERVIEW_DECORATION\n            });\n            prevStartLineNumber = range.startLineNumber;\n            prevEndLineNumber = range.endLineNumber;\n          }\n        }\n        newOverviewRulerApproximateDecorations.push({\n          range: new Range(prevStartLineNumber, 1, prevEndLineNumber, 1),\n          options: FindDecorations._FIND_MATCH_ONLY_OVERVIEW_DECORATION\n        });\n      }\n      // Find matches\n      let newFindMatchesDecorations = new Array(findMatches.length);\n      for (let i = 0, len = findMatches.length; i < len; i++) {\n        newFindMatchesDecorations[i] = {\n          range: findMatches[i].range,\n          options: findMatchesOptions\n        };\n      }\n      this._decorations = accessor.deltaDecorations(this._decorations, newFindMatchesDecorations);\n      // Overview ruler approximate decorations\n      this._overviewRulerApproximateDecorations = accessor.deltaDecorations(this._overviewRulerApproximateDecorations, newOverviewRulerApproximateDecorations);\n      // Range highlight\n      if (this._rangeHighlightDecorationId) {\n        accessor.removeDecoration(this._rangeHighlightDecorationId);\n        this._rangeHighlightDecorationId = null;\n      }\n      // Find scope\n      if (this._findScopeDecorationIds.length) {\n        this._findScopeDecorationIds.forEach(findScopeDecorationId => accessor.removeDecoration(findScopeDecorationId));\n        this._findScopeDecorationIds = [];\n      }\n      if (findScopes === null || findScopes === void 0 ? void 0 : findScopes.length) {\n        this._findScopeDecorationIds = findScopes.map(findScope => accessor.addDecoration(findScope, FindDecorations._FIND_SCOPE_DECORATION));\n      }\n    });\n  }\n  matchBeforePosition(position) {\n    if (this._decorations.length === 0) {\n      return null;\n    }\n    for (let i = this._decorations.length - 1; i >= 0; i--) {\n      let decorationId = this._decorations[i];\n      let r = this._editor.getModel().getDecorationRange(decorationId);\n      if (!r || r.endLineNumber > position.lineNumber) {\n        continue;\n      }\n      if (r.endLineNumber < position.lineNumber) {\n        return r;\n      }\n      if (r.endColumn > position.column) {\n        continue;\n      }\n      return r;\n    }\n    return this._editor.getModel().getDecorationRange(this._decorations[this._decorations.length - 1]);\n  }\n  matchAfterPosition(position) {\n    if (this._decorations.length === 0) {\n      return null;\n    }\n    for (let i = 0, len = this._decorations.length; i < len; i++) {\n      let decorationId = this._decorations[i];\n      let r = this._editor.getModel().getDecorationRange(decorationId);\n      if (!r || r.startLineNumber < position.lineNumber) {\n        continue;\n      }\n      if (r.startLineNumber > position.lineNumber) {\n        return r;\n      }\n      if (r.startColumn < position.column) {\n        continue;\n      }\n      return r;\n    }\n    return this._editor.getModel().getDecorationRange(this._decorations[0]);\n  }\n  _allDecorations() {\n    let result = [];\n    result = result.concat(this._decorations);\n    result = result.concat(this._overviewRulerApproximateDecorations);\n    if (this._findScopeDecorationIds.length) {\n      result.push(...this._findScopeDecorationIds);\n    }\n    if (this._rangeHighlightDecorationId) {\n      result.push(this._rangeHighlightDecorationId);\n    }\n    return result;\n  }\n}\nFindDecorations._CURRENT_FIND_MATCH_DECORATION = ModelDecorationOptions.register({\n  stickiness: 1 /* NeverGrowsWhenTypingAtEdges */,\n  zIndex: 13,\n  className: 'currentFindMatch',\n  showIfCollapsed: true,\n  overviewRuler: {\n    color: themeColorFromId(overviewRulerFindMatchForeground),\n    position: OverviewRulerLane.Center\n  },\n  minimap: {\n    color: themeColorFromId(minimapFindMatch),\n    position: MinimapPosition.Inline\n  }\n});\nFindDecorations._FIND_MATCH_DECORATION = ModelDecorationOptions.register({\n  stickiness: 1 /* NeverGrowsWhenTypingAtEdges */,\n  className: 'findMatch',\n  showIfCollapsed: true,\n  overviewRuler: {\n    color: themeColorFromId(overviewRulerFindMatchForeground),\n    position: OverviewRulerLane.Center\n  },\n  minimap: {\n    color: themeColorFromId(minimapFindMatch),\n    position: MinimapPosition.Inline\n  }\n});\nFindDecorations._FIND_MATCH_NO_OVERVIEW_DECORATION = ModelDecorationOptions.register({\n  stickiness: 1 /* NeverGrowsWhenTypingAtEdges */,\n  className: 'findMatch',\n  showIfCollapsed: true\n});\nFindDecorations._FIND_MATCH_ONLY_OVERVIEW_DECORATION = ModelDecorationOptions.register({\n  stickiness: 1 /* NeverGrowsWhenTypingAtEdges */,\n  overviewRuler: {\n    color: themeColorFromId(overviewRulerFindMatchForeground),\n    position: OverviewRulerLane.Center\n  }\n});\nFindDecorations._RANGE_HIGHLIGHT_DECORATION = ModelDecorationOptions.register({\n  stickiness: 1 /* NeverGrowsWhenTypingAtEdges */,\n  className: 'rangeHighlight',\n  isWholeLine: true\n});\nFindDecorations._FIND_SCOPE_DECORATION = ModelDecorationOptions.register({\n  className: 'findScope',\n  isWholeLine: true\n});","map":{"version":3,"names":["Range","OverviewRulerLane","MinimapPosition","ModelDecorationOptions","overviewRulerFindMatchForeground","minimapFindMatch","themeColorFromId","FindDecorations","constructor","editor","_editor","_decorations","_overviewRulerApproximateDecorations","_findScopeDecorationIds","_rangeHighlightDecorationId","_highlightedDecorationId","_startPosition","getPosition","dispose","deltaDecorations","_allDecorations","reset","getCount","length","getFindScope","getModel","getDecorationRange","getFindScopes","scopes","map","findScopeDecorationId","filter","element","getStartPosition","setStartPosition","newStartPosition","setCurrentFindMatch","_getDecorationIndex","decorationId","index","indexOf","getCurrentMatchesPosition","desiredRange","candidates","getDecorationsInRange","candidate","candidateOpts","options","_FIND_MATCH_DECORATION","_CURRENT_FIND_MATCH_DECORATION","id","nextMatch","newCurrentDecorationId","matchPosition","i","len","range","equalsRange","changeDecorations","changeAccessor","changeDecorationOptions","removeDecoration","rng","startLineNumber","endLineNumber","endColumn","lineBeforeEnd","lineBeforeEndMaxColumn","getLineMaxColumn","startColumn","addDecoration","_RANGE_HIGHLIGHT_DECORATION","set","findMatches","findScopes","accessor","findMatchesOptions","newOverviewRulerApproximateDecorations","_FIND_MATCH_NO_OVERVIEW_DECORATION","lineCount","getLineCount","height","getLayoutInfo","approxPixelsPerLine","mergeLinesDelta","Math","max","ceil","prevStartLineNumber","prevEndLineNumber","push","_FIND_MATCH_ONLY_OVERVIEW_DECORATION","newFindMatchesDecorations","Array","forEach","findScope","_FIND_SCOPE_DECORATION","matchBeforePosition","position","r","lineNumber","column","matchAfterPosition","result","concat","register","stickiness","zIndex","className","showIfCollapsed","overviewRuler","color","Center","minimap","Inline","isWholeLine"],"sources":["C:/Users/Administrator/Desktop/sqllineage-master/sqllineagejs/node_modules/monaco-editor/esm/vs/editor/contrib/find/findDecorations.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { Range } from '../../common/core/range.js';\r\nimport { OverviewRulerLane, MinimapPosition } from '../../common/model.js';\r\nimport { ModelDecorationOptions } from '../../common/model/textModel.js';\r\nimport { overviewRulerFindMatchForeground, minimapFindMatch } from '../../../platform/theme/common/colorRegistry.js';\r\nimport { themeColorFromId } from '../../../platform/theme/common/themeService.js';\r\nexport class FindDecorations {\r\n    constructor(editor) {\r\n        this._editor = editor;\r\n        this._decorations = [];\r\n        this._overviewRulerApproximateDecorations = [];\r\n        this._findScopeDecorationIds = [];\r\n        this._rangeHighlightDecorationId = null;\r\n        this._highlightedDecorationId = null;\r\n        this._startPosition = this._editor.getPosition();\r\n    }\r\n    dispose() {\r\n        this._editor.deltaDecorations(this._allDecorations(), []);\r\n        this._decorations = [];\r\n        this._overviewRulerApproximateDecorations = [];\r\n        this._findScopeDecorationIds = [];\r\n        this._rangeHighlightDecorationId = null;\r\n        this._highlightedDecorationId = null;\r\n    }\r\n    reset() {\r\n        this._decorations = [];\r\n        this._overviewRulerApproximateDecorations = [];\r\n        this._findScopeDecorationIds = [];\r\n        this._rangeHighlightDecorationId = null;\r\n        this._highlightedDecorationId = null;\r\n    }\r\n    getCount() {\r\n        return this._decorations.length;\r\n    }\r\n    /** @deprecated use getFindScopes to support multiple selections */\r\n    getFindScope() {\r\n        if (this._findScopeDecorationIds[0]) {\r\n            return this._editor.getModel().getDecorationRange(this._findScopeDecorationIds[0]);\r\n        }\r\n        return null;\r\n    }\r\n    getFindScopes() {\r\n        if (this._findScopeDecorationIds.length) {\r\n            const scopes = this._findScopeDecorationIds.map(findScopeDecorationId => this._editor.getModel().getDecorationRange(findScopeDecorationId)).filter(element => !!element);\r\n            if (scopes.length) {\r\n                return scopes;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    getStartPosition() {\r\n        return this._startPosition;\r\n    }\r\n    setStartPosition(newStartPosition) {\r\n        this._startPosition = newStartPosition;\r\n        this.setCurrentFindMatch(null);\r\n    }\r\n    _getDecorationIndex(decorationId) {\r\n        const index = this._decorations.indexOf(decorationId);\r\n        if (index >= 0) {\r\n            return index + 1;\r\n        }\r\n        return 1;\r\n    }\r\n    getCurrentMatchesPosition(desiredRange) {\r\n        let candidates = this._editor.getModel().getDecorationsInRange(desiredRange);\r\n        for (const candidate of candidates) {\r\n            const candidateOpts = candidate.options;\r\n            if (candidateOpts === FindDecorations._FIND_MATCH_DECORATION || candidateOpts === FindDecorations._CURRENT_FIND_MATCH_DECORATION) {\r\n                return this._getDecorationIndex(candidate.id);\r\n            }\r\n        }\r\n        // We don't know the current match position, so returns zero to show '?' in find widget\r\n        return 0;\r\n    }\r\n    setCurrentFindMatch(nextMatch) {\r\n        let newCurrentDecorationId = null;\r\n        let matchPosition = 0;\r\n        if (nextMatch) {\r\n            for (let i = 0, len = this._decorations.length; i < len; i++) {\r\n                let range = this._editor.getModel().getDecorationRange(this._decorations[i]);\r\n                if (nextMatch.equalsRange(range)) {\r\n                    newCurrentDecorationId = this._decorations[i];\r\n                    matchPosition = (i + 1);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        if (this._highlightedDecorationId !== null || newCurrentDecorationId !== null) {\r\n            this._editor.changeDecorations((changeAccessor) => {\r\n                if (this._highlightedDecorationId !== null) {\r\n                    changeAccessor.changeDecorationOptions(this._highlightedDecorationId, FindDecorations._FIND_MATCH_DECORATION);\r\n                    this._highlightedDecorationId = null;\r\n                }\r\n                if (newCurrentDecorationId !== null) {\r\n                    this._highlightedDecorationId = newCurrentDecorationId;\r\n                    changeAccessor.changeDecorationOptions(this._highlightedDecorationId, FindDecorations._CURRENT_FIND_MATCH_DECORATION);\r\n                }\r\n                if (this._rangeHighlightDecorationId !== null) {\r\n                    changeAccessor.removeDecoration(this._rangeHighlightDecorationId);\r\n                    this._rangeHighlightDecorationId = null;\r\n                }\r\n                if (newCurrentDecorationId !== null) {\r\n                    let rng = this._editor.getModel().getDecorationRange(newCurrentDecorationId);\r\n                    if (rng.startLineNumber !== rng.endLineNumber && rng.endColumn === 1) {\r\n                        let lineBeforeEnd = rng.endLineNumber - 1;\r\n                        let lineBeforeEndMaxColumn = this._editor.getModel().getLineMaxColumn(lineBeforeEnd);\r\n                        rng = new Range(rng.startLineNumber, rng.startColumn, lineBeforeEnd, lineBeforeEndMaxColumn);\r\n                    }\r\n                    this._rangeHighlightDecorationId = changeAccessor.addDecoration(rng, FindDecorations._RANGE_HIGHLIGHT_DECORATION);\r\n                }\r\n            });\r\n        }\r\n        return matchPosition;\r\n    }\r\n    set(findMatches, findScopes) {\r\n        this._editor.changeDecorations((accessor) => {\r\n            let findMatchesOptions = FindDecorations._FIND_MATCH_DECORATION;\r\n            let newOverviewRulerApproximateDecorations = [];\r\n            if (findMatches.length > 1000) {\r\n                // we go into a mode where the overview ruler gets \"approximate\" decorations\r\n                // the reason is that the overview ruler paints all the decorations in the file and we don't want to cause freezes\r\n                findMatchesOptions = FindDecorations._FIND_MATCH_NO_OVERVIEW_DECORATION;\r\n                // approximate a distance in lines where matches should be merged\r\n                const lineCount = this._editor.getModel().getLineCount();\r\n                const height = this._editor.getLayoutInfo().height;\r\n                const approxPixelsPerLine = height / lineCount;\r\n                const mergeLinesDelta = Math.max(2, Math.ceil(3 / approxPixelsPerLine));\r\n                // merge decorations as much as possible\r\n                let prevStartLineNumber = findMatches[0].range.startLineNumber;\r\n                let prevEndLineNumber = findMatches[0].range.endLineNumber;\r\n                for (let i = 1, len = findMatches.length; i < len; i++) {\r\n                    const range = findMatches[i].range;\r\n                    if (prevEndLineNumber + mergeLinesDelta >= range.startLineNumber) {\r\n                        if (range.endLineNumber > prevEndLineNumber) {\r\n                            prevEndLineNumber = range.endLineNumber;\r\n                        }\r\n                    }\r\n                    else {\r\n                        newOverviewRulerApproximateDecorations.push({\r\n                            range: new Range(prevStartLineNumber, 1, prevEndLineNumber, 1),\r\n                            options: FindDecorations._FIND_MATCH_ONLY_OVERVIEW_DECORATION\r\n                        });\r\n                        prevStartLineNumber = range.startLineNumber;\r\n                        prevEndLineNumber = range.endLineNumber;\r\n                    }\r\n                }\r\n                newOverviewRulerApproximateDecorations.push({\r\n                    range: new Range(prevStartLineNumber, 1, prevEndLineNumber, 1),\r\n                    options: FindDecorations._FIND_MATCH_ONLY_OVERVIEW_DECORATION\r\n                });\r\n            }\r\n            // Find matches\r\n            let newFindMatchesDecorations = new Array(findMatches.length);\r\n            for (let i = 0, len = findMatches.length; i < len; i++) {\r\n                newFindMatchesDecorations[i] = {\r\n                    range: findMatches[i].range,\r\n                    options: findMatchesOptions\r\n                };\r\n            }\r\n            this._decorations = accessor.deltaDecorations(this._decorations, newFindMatchesDecorations);\r\n            // Overview ruler approximate decorations\r\n            this._overviewRulerApproximateDecorations = accessor.deltaDecorations(this._overviewRulerApproximateDecorations, newOverviewRulerApproximateDecorations);\r\n            // Range highlight\r\n            if (this._rangeHighlightDecorationId) {\r\n                accessor.removeDecoration(this._rangeHighlightDecorationId);\r\n                this._rangeHighlightDecorationId = null;\r\n            }\r\n            // Find scope\r\n            if (this._findScopeDecorationIds.length) {\r\n                this._findScopeDecorationIds.forEach(findScopeDecorationId => accessor.removeDecoration(findScopeDecorationId));\r\n                this._findScopeDecorationIds = [];\r\n            }\r\n            if (findScopes === null || findScopes === void 0 ? void 0 : findScopes.length) {\r\n                this._findScopeDecorationIds = findScopes.map(findScope => accessor.addDecoration(findScope, FindDecorations._FIND_SCOPE_DECORATION));\r\n            }\r\n        });\r\n    }\r\n    matchBeforePosition(position) {\r\n        if (this._decorations.length === 0) {\r\n            return null;\r\n        }\r\n        for (let i = this._decorations.length - 1; i >= 0; i--) {\r\n            let decorationId = this._decorations[i];\r\n            let r = this._editor.getModel().getDecorationRange(decorationId);\r\n            if (!r || r.endLineNumber > position.lineNumber) {\r\n                continue;\r\n            }\r\n            if (r.endLineNumber < position.lineNumber) {\r\n                return r;\r\n            }\r\n            if (r.endColumn > position.column) {\r\n                continue;\r\n            }\r\n            return r;\r\n        }\r\n        return this._editor.getModel().getDecorationRange(this._decorations[this._decorations.length - 1]);\r\n    }\r\n    matchAfterPosition(position) {\r\n        if (this._decorations.length === 0) {\r\n            return null;\r\n        }\r\n        for (let i = 0, len = this._decorations.length; i < len; i++) {\r\n            let decorationId = this._decorations[i];\r\n            let r = this._editor.getModel().getDecorationRange(decorationId);\r\n            if (!r || r.startLineNumber < position.lineNumber) {\r\n                continue;\r\n            }\r\n            if (r.startLineNumber > position.lineNumber) {\r\n                return r;\r\n            }\r\n            if (r.startColumn < position.column) {\r\n                continue;\r\n            }\r\n            return r;\r\n        }\r\n        return this._editor.getModel().getDecorationRange(this._decorations[0]);\r\n    }\r\n    _allDecorations() {\r\n        let result = [];\r\n        result = result.concat(this._decorations);\r\n        result = result.concat(this._overviewRulerApproximateDecorations);\r\n        if (this._findScopeDecorationIds.length) {\r\n            result.push(...this._findScopeDecorationIds);\r\n        }\r\n        if (this._rangeHighlightDecorationId) {\r\n            result.push(this._rangeHighlightDecorationId);\r\n        }\r\n        return result;\r\n    }\r\n}\r\nFindDecorations._CURRENT_FIND_MATCH_DECORATION = ModelDecorationOptions.register({\r\n    stickiness: 1 /* NeverGrowsWhenTypingAtEdges */,\r\n    zIndex: 13,\r\n    className: 'currentFindMatch',\r\n    showIfCollapsed: true,\r\n    overviewRuler: {\r\n        color: themeColorFromId(overviewRulerFindMatchForeground),\r\n        position: OverviewRulerLane.Center\r\n    },\r\n    minimap: {\r\n        color: themeColorFromId(minimapFindMatch),\r\n        position: MinimapPosition.Inline\r\n    }\r\n});\r\nFindDecorations._FIND_MATCH_DECORATION = ModelDecorationOptions.register({\r\n    stickiness: 1 /* NeverGrowsWhenTypingAtEdges */,\r\n    className: 'findMatch',\r\n    showIfCollapsed: true,\r\n    overviewRuler: {\r\n        color: themeColorFromId(overviewRulerFindMatchForeground),\r\n        position: OverviewRulerLane.Center\r\n    },\r\n    minimap: {\r\n        color: themeColorFromId(minimapFindMatch),\r\n        position: MinimapPosition.Inline\r\n    }\r\n});\r\nFindDecorations._FIND_MATCH_NO_OVERVIEW_DECORATION = ModelDecorationOptions.register({\r\n    stickiness: 1 /* NeverGrowsWhenTypingAtEdges */,\r\n    className: 'findMatch',\r\n    showIfCollapsed: true\r\n});\r\nFindDecorations._FIND_MATCH_ONLY_OVERVIEW_DECORATION = ModelDecorationOptions.register({\r\n    stickiness: 1 /* NeverGrowsWhenTypingAtEdges */,\r\n    overviewRuler: {\r\n        color: themeColorFromId(overviewRulerFindMatchForeground),\r\n        position: OverviewRulerLane.Center\r\n    }\r\n});\r\nFindDecorations._RANGE_HIGHLIGHT_DECORATION = ModelDecorationOptions.register({\r\n    stickiness: 1 /* NeverGrowsWhenTypingAtEdges */,\r\n    className: 'rangeHighlight',\r\n    isWholeLine: true\r\n});\r\nFindDecorations._FIND_SCOPE_DECORATION = ModelDecorationOptions.register({\r\n    className: 'findScope',\r\n    isWholeLine: true\r\n});\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}