{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { KeyCodeUtils } from '../../../base/common/keyCodes.js';\nimport { BaseResolvedKeybinding } from './baseResolvedKeybinding.js';\n/**\r\n * Do not instantiate. Use KeybindingService to get a ResolvedKeybinding seeded with information about the current kb layout.\r\n */\nexport class USLayoutResolvedKeybinding extends BaseResolvedKeybinding {\n  constructor(actual, os) {\n    super(os, actual.parts);\n  }\n  _keyCodeToUILabel(keyCode) {\n    if (this._os === 2 /* Macintosh */) {\n      switch (keyCode) {\n        case 15 /* LeftArrow */:\n          return '←';\n        case 16 /* UpArrow */:\n          return '↑';\n        case 17 /* RightArrow */:\n          return '→';\n        case 18 /* DownArrow */:\n          return '↓';\n      }\n    }\n    return KeyCodeUtils.toString(keyCode);\n  }\n  _getLabel(keybinding) {\n    if (keybinding.isDuplicateModifierCase()) {\n      return '';\n    }\n    return this._keyCodeToUILabel(keybinding.keyCode);\n  }\n  _getAriaLabel(keybinding) {\n    if (keybinding.isDuplicateModifierCase()) {\n      return '';\n    }\n    return KeyCodeUtils.toString(keybinding.keyCode);\n  }\n  _getDispatchPart(keybinding) {\n    return USLayoutResolvedKeybinding.getDispatchStr(keybinding);\n  }\n  static getDispatchStr(keybinding) {\n    if (keybinding.isModifierKey()) {\n      return null;\n    }\n    let result = '';\n    if (keybinding.ctrlKey) {\n      result += 'ctrl+';\n    }\n    if (keybinding.shiftKey) {\n      result += 'shift+';\n    }\n    if (keybinding.altKey) {\n      result += 'alt+';\n    }\n    if (keybinding.metaKey) {\n      result += 'meta+';\n    }\n    result += KeyCodeUtils.toString(keybinding.keyCode);\n    return result;\n  }\n}","map":{"version":3,"names":["KeyCodeUtils","BaseResolvedKeybinding","USLayoutResolvedKeybinding","constructor","actual","os","parts","_keyCodeToUILabel","keyCode","_os","toString","_getLabel","keybinding","isDuplicateModifierCase","_getAriaLabel","_getDispatchPart","getDispatchStr","isModifierKey","result","ctrlKey","shiftKey","altKey","metaKey"],"sources":["C:/Users/Administrator/Desktop/sqllineage-master/sqllineagejs/node_modules/monaco-editor/esm/vs/platform/keybinding/common/usLayoutResolvedKeybinding.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { KeyCodeUtils } from '../../../base/common/keyCodes.js';\r\nimport { BaseResolvedKeybinding } from './baseResolvedKeybinding.js';\r\n/**\r\n * Do not instantiate. Use KeybindingService to get a ResolvedKeybinding seeded with information about the current kb layout.\r\n */\r\nexport class USLayoutResolvedKeybinding extends BaseResolvedKeybinding {\r\n    constructor(actual, os) {\r\n        super(os, actual.parts);\r\n    }\r\n    _keyCodeToUILabel(keyCode) {\r\n        if (this._os === 2 /* Macintosh */) {\r\n            switch (keyCode) {\r\n                case 15 /* LeftArrow */:\r\n                    return '←';\r\n                case 16 /* UpArrow */:\r\n                    return '↑';\r\n                case 17 /* RightArrow */:\r\n                    return '→';\r\n                case 18 /* DownArrow */:\r\n                    return '↓';\r\n            }\r\n        }\r\n        return KeyCodeUtils.toString(keyCode);\r\n    }\r\n    _getLabel(keybinding) {\r\n        if (keybinding.isDuplicateModifierCase()) {\r\n            return '';\r\n        }\r\n        return this._keyCodeToUILabel(keybinding.keyCode);\r\n    }\r\n    _getAriaLabel(keybinding) {\r\n        if (keybinding.isDuplicateModifierCase()) {\r\n            return '';\r\n        }\r\n        return KeyCodeUtils.toString(keybinding.keyCode);\r\n    }\r\n    _getDispatchPart(keybinding) {\r\n        return USLayoutResolvedKeybinding.getDispatchStr(keybinding);\r\n    }\r\n    static getDispatchStr(keybinding) {\r\n        if (keybinding.isModifierKey()) {\r\n            return null;\r\n        }\r\n        let result = '';\r\n        if (keybinding.ctrlKey) {\r\n            result += 'ctrl+';\r\n        }\r\n        if (keybinding.shiftKey) {\r\n            result += 'shift+';\r\n        }\r\n        if (keybinding.altKey) {\r\n            result += 'alt+';\r\n        }\r\n        if (keybinding.metaKey) {\r\n            result += 'meta+';\r\n        }\r\n        result += KeyCodeUtils.toString(keybinding.keyCode);\r\n        return result;\r\n    }\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,YAAY,QAAQ,kCAAkC;AAC/D,SAASC,sBAAsB,QAAQ,6BAA6B;AACpE;AACA;AACA;AACA,OAAO,MAAMC,0BAA0B,SAASD,sBAAsB,CAAC;EACnEE,WAAWA,CAACC,MAAM,EAAEC,EAAE,EAAE;IACpB,KAAK,CAACA,EAAE,EAAED,MAAM,CAACE,KAAK,CAAC;EAC3B;EACAC,iBAAiBA,CAACC,OAAO,EAAE;IACvB,IAAI,IAAI,CAACC,GAAG,KAAK,CAAC,CAAC,iBAAiB;MAChC,QAAQD,OAAO;QACX,KAAK,EAAE,CAAC;UACJ,OAAO,GAAG;QACd,KAAK,EAAE,CAAC;UACJ,OAAO,GAAG;QACd,KAAK,EAAE,CAAC;UACJ,OAAO,GAAG;QACd,KAAK,EAAE,CAAC;UACJ,OAAO,GAAG;MAClB;IACJ;IACA,OAAOR,YAAY,CAACU,QAAQ,CAACF,OAAO,CAAC;EACzC;EACAG,SAASA,CAACC,UAAU,EAAE;IAClB,IAAIA,UAAU,CAACC,uBAAuB,CAAC,CAAC,EAAE;MACtC,OAAO,EAAE;IACb;IACA,OAAO,IAAI,CAACN,iBAAiB,CAACK,UAAU,CAACJ,OAAO,CAAC;EACrD;EACAM,aAAaA,CAACF,UAAU,EAAE;IACtB,IAAIA,UAAU,CAACC,uBAAuB,CAAC,CAAC,EAAE;MACtC,OAAO,EAAE;IACb;IACA,OAAOb,YAAY,CAACU,QAAQ,CAACE,UAAU,CAACJ,OAAO,CAAC;EACpD;EACAO,gBAAgBA,CAACH,UAAU,EAAE;IACzB,OAAOV,0BAA0B,CAACc,cAAc,CAACJ,UAAU,CAAC;EAChE;EACA,OAAOI,cAAcA,CAACJ,UAAU,EAAE;IAC9B,IAAIA,UAAU,CAACK,aAAa,CAAC,CAAC,EAAE;MAC5B,OAAO,IAAI;IACf;IACA,IAAIC,MAAM,GAAG,EAAE;IACf,IAAIN,UAAU,CAACO,OAAO,EAAE;MACpBD,MAAM,IAAI,OAAO;IACrB;IACA,IAAIN,UAAU,CAACQ,QAAQ,EAAE;MACrBF,MAAM,IAAI,QAAQ;IACtB;IACA,IAAIN,UAAU,CAACS,MAAM,EAAE;MACnBH,MAAM,IAAI,MAAM;IACpB;IACA,IAAIN,UAAU,CAACU,OAAO,EAAE;MACpBJ,MAAM,IAAI,OAAO;IACrB;IACAA,MAAM,IAAIlB,YAAY,CAACU,QAAQ,CAACE,UAAU,CAACJ,OAAO,CAAC;IACnD,OAAOU,MAAM;EACjB;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}