{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { onUnexpectedExternalError, canceled, isPromiseCanceledError } from '../../../base/common/errors.js';\nimport * as modes from '../../common/modes.js';\nimport { Position } from '../../common/core/position.js';\nimport { RawContextKey } from '../../../platform/contextkey/common/contextkey.js';\nimport { CancellationToken } from '../../../base/common/cancellation.js';\nimport { Range } from '../../common/core/range.js';\nimport { FuzzyScore } from '../../../base/common/filters.js';\nimport { isDisposable, DisposableStore } from '../../../base/common/lifecycle.js';\nimport { MenuId } from '../../../platform/actions/common/actions.js';\nimport { SnippetParser } from '../snippet/snippetParser.js';\nimport { StopWatch } from '../../../base/common/stopwatch.js';\nimport { CommandsRegistry } from '../../../platform/commands/common/commands.js';\nimport { assertType } from '../../../base/common/types.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { ITextModelService } from '../../common/services/resolverService.js';\nexport const Context = {\n  Visible: new RawContextKey('suggestWidgetVisible', false),\n  DetailsVisible: new RawContextKey('suggestWidgetDetailsVisible', false),\n  MultipleSuggestions: new RawContextKey('suggestWidgetMultipleSuggestions', false),\n  MakesTextEdit: new RawContextKey('suggestionMakesTextEdit', true),\n  AcceptSuggestionsOnEnter: new RawContextKey('acceptSuggestionOnEnter', true),\n  HasInsertAndReplaceRange: new RawContextKey('suggestionHasInsertAndReplaceRange', false),\n  InsertMode: new RawContextKey('suggestionInsertMode', undefined),\n  CanResolve: new RawContextKey('suggestionCanResolve', false)\n};\nexport const suggestWidgetStatusbarMenu = new MenuId('suggestWidgetStatusBar');\nexport class CompletionItem {\n  constructor(position, completion, container, provider) {\n    this.position = position;\n    this.completion = completion;\n    this.container = container;\n    this.provider = provider;\n    // validation\n    this.isInvalid = false;\n    // sorting, filtering\n    this.score = FuzzyScore.Default;\n    this.distance = 0;\n    this.textLabel = typeof completion.label === 'string' ? completion.label : completion.label.name;\n    // ensure lower-variants (perf)\n    this.labelLow = this.textLabel.toLowerCase();\n    // validate label\n    this.isInvalid = !this.textLabel;\n    this.sortTextLow = completion.sortText && completion.sortText.toLowerCase();\n    this.filterTextLow = completion.filterText && completion.filterText.toLowerCase();\n    // normalize ranges\n    if (Range.isIRange(completion.range)) {\n      this.editStart = new Position(completion.range.startLineNumber, completion.range.startColumn);\n      this.editInsertEnd = new Position(completion.range.endLineNumber, completion.range.endColumn);\n      this.editReplaceEnd = new Position(completion.range.endLineNumber, completion.range.endColumn);\n      // validate range\n      this.isInvalid = this.isInvalid || Range.spansMultipleLines(completion.range) || completion.range.startLineNumber !== position.lineNumber;\n    } else {\n      this.editStart = new Position(completion.range.insert.startLineNumber, completion.range.insert.startColumn);\n      this.editInsertEnd = new Position(completion.range.insert.endLineNumber, completion.range.insert.endColumn);\n      this.editReplaceEnd = new Position(completion.range.replace.endLineNumber, completion.range.replace.endColumn);\n      // validate ranges\n      this.isInvalid = this.isInvalid || Range.spansMultipleLines(completion.range.insert) || Range.spansMultipleLines(completion.range.replace) || completion.range.insert.startLineNumber !== position.lineNumber || completion.range.replace.startLineNumber !== position.lineNumber || completion.range.insert.startColumn !== completion.range.replace.startColumn;\n    }\n    // create the suggestion resolver\n    if (typeof provider.resolveCompletionItem !== 'function') {\n      this._resolveCache = Promise.resolve();\n      this._isResolved = true;\n    }\n  }\n  // ---- resolving\n  get isResolved() {\n    return !!this._isResolved;\n  }\n  resolve(token) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this._resolveCache) {\n        const sub = token.onCancellationRequested(() => {\n          this._resolveCache = undefined;\n          this._isResolved = false;\n        });\n        this._resolveCache = Promise.resolve(this.provider.resolveCompletionItem(this.completion, token)).then(value => {\n          Object.assign(this.completion, value);\n          this._isResolved = true;\n          sub.dispose();\n        }, err => {\n          if (isPromiseCanceledError(err)) {\n            // the IPC queue will reject the request with the\n            // cancellation error -> reset cached\n            this._resolveCache = undefined;\n            this._isResolved = false;\n          }\n        });\n      }\n      return this._resolveCache;\n    });\n  }\n}\nexport class CompletionOptions {\n  constructor() {\n    let snippetSortOrder = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 2;\n    let kindFilter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Set();\n    let providerFilter = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Set();\n    this.snippetSortOrder = snippetSortOrder;\n    this.kindFilter = kindFilter;\n    this.providerFilter = providerFilter;\n  }\n}\nCompletionOptions.default = new CompletionOptions();\nlet _snippetSuggestSupport;\nexport function getSnippetSuggestSupport() {\n  return _snippetSuggestSupport;\n}\nexport class CompletionItemModel {\n  constructor(items, needsClipboard, durations, disposable) {\n    this.items = items;\n    this.needsClipboard = needsClipboard;\n    this.durations = durations;\n    this.disposable = disposable;\n  }\n}\nexport function provideSuggestionItems(model, position) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : CompletionOptions.default;\n  let context = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {\n    triggerKind: 0 /* Invoke */\n  };\n  let token = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : CancellationToken.None;\n  return __awaiter(this, void 0, void 0, function* () {\n    const sw = new StopWatch(true);\n    position = position.clone();\n    const word = model.getWordAtPosition(position);\n    const defaultReplaceRange = word ? new Range(position.lineNumber, word.startColumn, position.lineNumber, word.endColumn) : Range.fromPositions(position);\n    const defaultRange = {\n      replace: defaultReplaceRange,\n      insert: defaultReplaceRange.setEndPosition(position.lineNumber, position.column)\n    };\n    const result = [];\n    const disposables = new DisposableStore();\n    const durations = [];\n    let needsClipboard = false;\n    const onCompletionList = (provider, container, sw) => {\n      var _a, _b;\n      if (!container) {\n        return;\n      }\n      for (let suggestion of container.suggestions) {\n        if (!options.kindFilter.has(suggestion.kind)) {\n          // fill in default range when missing\n          if (!suggestion.range) {\n            suggestion.range = defaultRange;\n          }\n          // fill in default sortText when missing\n          if (!suggestion.sortText) {\n            suggestion.sortText = typeof suggestion.label === 'string' ? suggestion.label : suggestion.label.name;\n          }\n          if (!needsClipboard && suggestion.insertTextRules && suggestion.insertTextRules & 4 /* InsertAsSnippet */) {\n            needsClipboard = SnippetParser.guessNeedsClipboard(suggestion.insertText);\n          }\n          result.push(new CompletionItem(position, suggestion, container, provider));\n        }\n      }\n      if (isDisposable(container)) {\n        disposables.add(container);\n      }\n      durations.push({\n        providerName: (_a = provider._debugDisplayName) !== null && _a !== void 0 ? _a : 'unkown_provider',\n        elapsedProvider: (_b = container.duration) !== null && _b !== void 0 ? _b : -1,\n        elapsedOverall: sw.elapsed()\n      });\n    };\n    // ask for snippets in parallel to asking \"real\" providers. Only do something if configured to\n    // do so - no snippet filter, no special-providers-only request\n    const snippetCompletions = (() => __awaiter(this, void 0, void 0, function* () {\n      if (!_snippetSuggestSupport || options.kindFilter.has(27 /* Snippet */)) {\n        return;\n      }\n      if (options.providerFilter.size > 0 && !options.providerFilter.has(_snippetSuggestSupport)) {\n        return;\n      }\n      const sw = new StopWatch(true);\n      const list = yield _snippetSuggestSupport.provideCompletionItems(model, position, context, token);\n      onCompletionList(_snippetSuggestSupport, list, sw);\n    }))();\n    // add suggestions from contributed providers - providers are ordered in groups of\n    // equal score and once a group produces a result the process stops\n    // get provider groups, always add snippet suggestion provider\n    for (let providerGroup of modes.CompletionProviderRegistry.orderedGroups(model)) {\n      // for each support in the group ask for suggestions\n      let lenBefore = result.length;\n      yield Promise.all(providerGroup.map(provider => __awaiter(this, void 0, void 0, function* () {\n        if (options.providerFilter.size > 0 && !options.providerFilter.has(provider)) {\n          return;\n        }\n        try {\n          const sw = new StopWatch(true);\n          const list = yield provider.provideCompletionItems(model, position, context, token);\n          onCompletionList(provider, list, sw);\n        } catch (err) {\n          onUnexpectedExternalError(err);\n        }\n      })));\n      if (lenBefore !== result.length || token.isCancellationRequested) {\n        break;\n      }\n    }\n    yield snippetCompletions;\n    if (token.isCancellationRequested) {\n      disposables.dispose();\n      return Promise.reject(canceled());\n    }\n    return new CompletionItemModel(result.sort(getSuggestionComparator(options.snippetSortOrder)), needsClipboard, {\n      entries: durations,\n      elapsed: sw.elapsed()\n    }, disposables);\n  });\n}\nfunction defaultComparator(a, b) {\n  // check with 'sortText'\n  if (a.sortTextLow && b.sortTextLow) {\n    if (a.sortTextLow < b.sortTextLow) {\n      return -1;\n    } else if (a.sortTextLow > b.sortTextLow) {\n      return 1;\n    }\n  }\n  // check with 'label'\n  if (a.completion.label < b.completion.label) {\n    return -1;\n  } else if (a.completion.label > b.completion.label) {\n    return 1;\n  }\n  // check with 'type'\n  return a.completion.kind - b.completion.kind;\n}\nfunction snippetUpComparator(a, b) {\n  if (a.completion.kind !== b.completion.kind) {\n    if (a.completion.kind === 27 /* Snippet */) {\n      return -1;\n    } else if (b.completion.kind === 27 /* Snippet */) {\n      return 1;\n    }\n  }\n  return defaultComparator(a, b);\n}\nfunction snippetDownComparator(a, b) {\n  if (a.completion.kind !== b.completion.kind) {\n    if (a.completion.kind === 27 /* Snippet */) {\n      return 1;\n    } else if (b.completion.kind === 27 /* Snippet */) {\n      return -1;\n    }\n  }\n  return defaultComparator(a, b);\n}\nconst _snippetComparators = new Map();\n_snippetComparators.set(0 /* Top */, snippetUpComparator);\n_snippetComparators.set(2 /* Bottom */, snippetDownComparator);\n_snippetComparators.set(1 /* Inline */, defaultComparator);\nexport function getSuggestionComparator(snippetConfig) {\n  return _snippetComparators.get(snippetConfig);\n}\nCommandsRegistry.registerCommand('_executeCompletionItemProvider', function (accessor) {\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n  return __awaiter(void 0, void 0, void 0, function* () {\n    const [uri, position, triggerCharacter, maxItemsToResolve] = args;\n    assertType(URI.isUri(uri));\n    assertType(Position.isIPosition(position));\n    assertType(typeof triggerCharacter === 'string' || !triggerCharacter);\n    assertType(typeof maxItemsToResolve === 'number' || !maxItemsToResolve);\n    const ref = yield accessor.get(ITextModelService).createModelReference(uri);\n    try {\n      const result = {\n        incomplete: false,\n        suggestions: []\n      };\n      const resolving = [];\n      const completions = yield provideSuggestionItems(ref.object.textEditorModel, Position.lift(position), undefined, {\n        triggerCharacter,\n        triggerKind: triggerCharacter ? 1 /* TriggerCharacter */ : 0 /* Invoke */\n      });\n      for (const item of completions.items) {\n        if (resolving.length < (maxItemsToResolve !== null && maxItemsToResolve !== void 0 ? maxItemsToResolve : 0)) {\n          resolving.push(item.resolve(CancellationToken.None));\n        }\n        result.incomplete = result.incomplete || item.container.incomplete;\n        result.suggestions.push(item.completion);\n      }\n      try {\n        yield Promise.all(resolving);\n        return result;\n      } finally {\n        setTimeout(() => completions.disposable.dispose(), 100);\n      }\n    } finally {\n      ref.dispose();\n    }\n  });\n});\nconst _provider = new class {\n  constructor() {\n    this.onlyOnceSuggestions = [];\n  }\n  provideCompletionItems() {\n    let suggestions = this.onlyOnceSuggestions.slice(0);\n    let result = {\n      suggestions\n    };\n    this.onlyOnceSuggestions.length = 0;\n    return result;\n  }\n}();\nmodes.CompletionProviderRegistry.register('*', _provider);\nexport function showSimpleSuggestions(editor, suggestions) {\n  setTimeout(() => {\n    _provider.onlyOnceSuggestions.push(...suggestions);\n    editor.getContribution('editor.contrib.suggestController').triggerSuggest(new Set().add(_provider));\n  }, 0);\n}","map":{"version":3,"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","onUnexpectedExternalError","canceled","isPromiseCanceledError","modes","Position","RawContextKey","CancellationToken","Range","FuzzyScore","isDisposable","DisposableStore","MenuId","SnippetParser","StopWatch","CommandsRegistry","assertType","URI","ITextModelService","Context","Visible","DetailsVisible","MultipleSuggestions","MakesTextEdit","AcceptSuggestionsOnEnter","HasInsertAndReplaceRange","InsertMode","undefined","CanResolve","suggestWidgetStatusbarMenu","CompletionItem","constructor","position","completion","container","provider","isInvalid","score","Default","distance","textLabel","label","name","labelLow","toLowerCase","sortTextLow","sortText","filterTextLow","filterText","isIRange","range","editStart","startLineNumber","startColumn","editInsertEnd","endLineNumber","endColumn","editReplaceEnd","spansMultipleLines","lineNumber","insert","replace","resolveCompletionItem","_resolveCache","_isResolved","isResolved","token","sub","onCancellationRequested","Object","assign","dispose","err","CompletionOptions","snippetSortOrder","arguments","length","kindFilter","Set","providerFilter","default","_snippetSuggestSupport","getSnippetSuggestSupport","CompletionItemModel","items","needsClipboard","durations","disposable","provideSuggestionItems","model","options","context","triggerKind","None","sw","clone","word","getWordAtPosition","defaultReplaceRange","fromPositions","defaultRange","setEndPosition","column","disposables","onCompletionList","_a","_b","suggestion","suggestions","has","kind","insertTextRules","guessNeedsClipboard","insertText","push","add","providerName","_debugDisplayName","elapsedProvider","duration","elapsedOverall","elapsed","snippetCompletions","size","list","provideCompletionItems","providerGroup","CompletionProviderRegistry","orderedGroups","lenBefore","all","map","isCancellationRequested","sort","getSuggestionComparator","entries","defaultComparator","a","b","snippetUpComparator","snippetDownComparator","_snippetComparators","Map","set","snippetConfig","get","registerCommand","accessor","_len","args","Array","_key","uri","triggerCharacter","maxItemsToResolve","isUri","isIPosition","ref","createModelReference","incomplete","resolving","completions","object","textEditorModel","lift","item","setTimeout","_provider","onlyOnceSuggestions","slice","register","showSimpleSuggestions","editor","getContribution","triggerSuggest"],"sources":["C:/Users/Administrator/Desktop/sqllineage-master/sqllineagejs/node_modules/monaco-editor/esm/vs/editor/contrib/suggest/suggest.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nimport { onUnexpectedExternalError, canceled, isPromiseCanceledError } from '../../../base/common/errors.js';\r\nimport * as modes from '../../common/modes.js';\r\nimport { Position } from '../../common/core/position.js';\r\nimport { RawContextKey } from '../../../platform/contextkey/common/contextkey.js';\r\nimport { CancellationToken } from '../../../base/common/cancellation.js';\r\nimport { Range } from '../../common/core/range.js';\r\nimport { FuzzyScore } from '../../../base/common/filters.js';\r\nimport { isDisposable, DisposableStore } from '../../../base/common/lifecycle.js';\r\nimport { MenuId } from '../../../platform/actions/common/actions.js';\r\nimport { SnippetParser } from '../snippet/snippetParser.js';\r\nimport { StopWatch } from '../../../base/common/stopwatch.js';\r\nimport { CommandsRegistry } from '../../../platform/commands/common/commands.js';\r\nimport { assertType } from '../../../base/common/types.js';\r\nimport { URI } from '../../../base/common/uri.js';\r\nimport { ITextModelService } from '../../common/services/resolverService.js';\r\nexport const Context = {\r\n    Visible: new RawContextKey('suggestWidgetVisible', false),\r\n    DetailsVisible: new RawContextKey('suggestWidgetDetailsVisible', false),\r\n    MultipleSuggestions: new RawContextKey('suggestWidgetMultipleSuggestions', false),\r\n    MakesTextEdit: new RawContextKey('suggestionMakesTextEdit', true),\r\n    AcceptSuggestionsOnEnter: new RawContextKey('acceptSuggestionOnEnter', true),\r\n    HasInsertAndReplaceRange: new RawContextKey('suggestionHasInsertAndReplaceRange', false),\r\n    InsertMode: new RawContextKey('suggestionInsertMode', undefined),\r\n    CanResolve: new RawContextKey('suggestionCanResolve', false),\r\n};\r\nexport const suggestWidgetStatusbarMenu = new MenuId('suggestWidgetStatusBar');\r\nexport class CompletionItem {\r\n    constructor(position, completion, container, provider) {\r\n        this.position = position;\r\n        this.completion = completion;\r\n        this.container = container;\r\n        this.provider = provider;\r\n        // validation\r\n        this.isInvalid = false;\r\n        // sorting, filtering\r\n        this.score = FuzzyScore.Default;\r\n        this.distance = 0;\r\n        this.textLabel = typeof completion.label === 'string'\r\n            ? completion.label\r\n            : completion.label.name;\r\n        // ensure lower-variants (perf)\r\n        this.labelLow = this.textLabel.toLowerCase();\r\n        // validate label\r\n        this.isInvalid = !this.textLabel;\r\n        this.sortTextLow = completion.sortText && completion.sortText.toLowerCase();\r\n        this.filterTextLow = completion.filterText && completion.filterText.toLowerCase();\r\n        // normalize ranges\r\n        if (Range.isIRange(completion.range)) {\r\n            this.editStart = new Position(completion.range.startLineNumber, completion.range.startColumn);\r\n            this.editInsertEnd = new Position(completion.range.endLineNumber, completion.range.endColumn);\r\n            this.editReplaceEnd = new Position(completion.range.endLineNumber, completion.range.endColumn);\r\n            // validate range\r\n            this.isInvalid = this.isInvalid\r\n                || Range.spansMultipleLines(completion.range) || completion.range.startLineNumber !== position.lineNumber;\r\n        }\r\n        else {\r\n            this.editStart = new Position(completion.range.insert.startLineNumber, completion.range.insert.startColumn);\r\n            this.editInsertEnd = new Position(completion.range.insert.endLineNumber, completion.range.insert.endColumn);\r\n            this.editReplaceEnd = new Position(completion.range.replace.endLineNumber, completion.range.replace.endColumn);\r\n            // validate ranges\r\n            this.isInvalid = this.isInvalid\r\n                || Range.spansMultipleLines(completion.range.insert) || Range.spansMultipleLines(completion.range.replace)\r\n                || completion.range.insert.startLineNumber !== position.lineNumber || completion.range.replace.startLineNumber !== position.lineNumber\r\n                || completion.range.insert.startColumn !== completion.range.replace.startColumn;\r\n        }\r\n        // create the suggestion resolver\r\n        if (typeof provider.resolveCompletionItem !== 'function') {\r\n            this._resolveCache = Promise.resolve();\r\n            this._isResolved = true;\r\n        }\r\n    }\r\n    // ---- resolving\r\n    get isResolved() {\r\n        return !!this._isResolved;\r\n    }\r\n    resolve(token) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (!this._resolveCache) {\r\n                const sub = token.onCancellationRequested(() => {\r\n                    this._resolveCache = undefined;\r\n                    this._isResolved = false;\r\n                });\r\n                this._resolveCache = Promise.resolve(this.provider.resolveCompletionItem(this.completion, token)).then(value => {\r\n                    Object.assign(this.completion, value);\r\n                    this._isResolved = true;\r\n                    sub.dispose();\r\n                }, err => {\r\n                    if (isPromiseCanceledError(err)) {\r\n                        // the IPC queue will reject the request with the\r\n                        // cancellation error -> reset cached\r\n                        this._resolveCache = undefined;\r\n                        this._isResolved = false;\r\n                    }\r\n                });\r\n            }\r\n            return this._resolveCache;\r\n        });\r\n    }\r\n}\r\nexport class CompletionOptions {\r\n    constructor(snippetSortOrder = 2 /* Bottom */, kindFilter = new Set(), providerFilter = new Set()) {\r\n        this.snippetSortOrder = snippetSortOrder;\r\n        this.kindFilter = kindFilter;\r\n        this.providerFilter = providerFilter;\r\n    }\r\n}\r\nCompletionOptions.default = new CompletionOptions();\r\nlet _snippetSuggestSupport;\r\nexport function getSnippetSuggestSupport() {\r\n    return _snippetSuggestSupport;\r\n}\r\nexport class CompletionItemModel {\r\n    constructor(items, needsClipboard, durations, disposable) {\r\n        this.items = items;\r\n        this.needsClipboard = needsClipboard;\r\n        this.durations = durations;\r\n        this.disposable = disposable;\r\n    }\r\n}\r\nexport function provideSuggestionItems(model, position, options = CompletionOptions.default, context = { triggerKind: 0 /* Invoke */ }, token = CancellationToken.None) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        const sw = new StopWatch(true);\r\n        position = position.clone();\r\n        const word = model.getWordAtPosition(position);\r\n        const defaultReplaceRange = word ? new Range(position.lineNumber, word.startColumn, position.lineNumber, word.endColumn) : Range.fromPositions(position);\r\n        const defaultRange = { replace: defaultReplaceRange, insert: defaultReplaceRange.setEndPosition(position.lineNumber, position.column) };\r\n        const result = [];\r\n        const disposables = new DisposableStore();\r\n        const durations = [];\r\n        let needsClipboard = false;\r\n        const onCompletionList = (provider, container, sw) => {\r\n            var _a, _b;\r\n            if (!container) {\r\n                return;\r\n            }\r\n            for (let suggestion of container.suggestions) {\r\n                if (!options.kindFilter.has(suggestion.kind)) {\r\n                    // fill in default range when missing\r\n                    if (!suggestion.range) {\r\n                        suggestion.range = defaultRange;\r\n                    }\r\n                    // fill in default sortText when missing\r\n                    if (!suggestion.sortText) {\r\n                        suggestion.sortText = typeof suggestion.label === 'string' ? suggestion.label : suggestion.label.name;\r\n                    }\r\n                    if (!needsClipboard && suggestion.insertTextRules && suggestion.insertTextRules & 4 /* InsertAsSnippet */) {\r\n                        needsClipboard = SnippetParser.guessNeedsClipboard(suggestion.insertText);\r\n                    }\r\n                    result.push(new CompletionItem(position, suggestion, container, provider));\r\n                }\r\n            }\r\n            if (isDisposable(container)) {\r\n                disposables.add(container);\r\n            }\r\n            durations.push({\r\n                providerName: (_a = provider._debugDisplayName) !== null && _a !== void 0 ? _a : 'unkown_provider', elapsedProvider: (_b = container.duration) !== null && _b !== void 0 ? _b : -1,\r\n                elapsedOverall: sw.elapsed()\r\n            });\r\n        };\r\n        // ask for snippets in parallel to asking \"real\" providers. Only do something if configured to\r\n        // do so - no snippet filter, no special-providers-only request\r\n        const snippetCompletions = (() => __awaiter(this, void 0, void 0, function* () {\r\n            if (!_snippetSuggestSupport || options.kindFilter.has(27 /* Snippet */)) {\r\n                return;\r\n            }\r\n            if (options.providerFilter.size > 0 && !options.providerFilter.has(_snippetSuggestSupport)) {\r\n                return;\r\n            }\r\n            const sw = new StopWatch(true);\r\n            const list = yield _snippetSuggestSupport.provideCompletionItems(model, position, context, token);\r\n            onCompletionList(_snippetSuggestSupport, list, sw);\r\n        }))();\r\n        // add suggestions from contributed providers - providers are ordered in groups of\r\n        // equal score and once a group produces a result the process stops\r\n        // get provider groups, always add snippet suggestion provider\r\n        for (let providerGroup of modes.CompletionProviderRegistry.orderedGroups(model)) {\r\n            // for each support in the group ask for suggestions\r\n            let lenBefore = result.length;\r\n            yield Promise.all(providerGroup.map((provider) => __awaiter(this, void 0, void 0, function* () {\r\n                if (options.providerFilter.size > 0 && !options.providerFilter.has(provider)) {\r\n                    return;\r\n                }\r\n                try {\r\n                    const sw = new StopWatch(true);\r\n                    const list = yield provider.provideCompletionItems(model, position, context, token);\r\n                    onCompletionList(provider, list, sw);\r\n                }\r\n                catch (err) {\r\n                    onUnexpectedExternalError(err);\r\n                }\r\n            })));\r\n            if (lenBefore !== result.length || token.isCancellationRequested) {\r\n                break;\r\n            }\r\n        }\r\n        yield snippetCompletions;\r\n        if (token.isCancellationRequested) {\r\n            disposables.dispose();\r\n            return Promise.reject(canceled());\r\n        }\r\n        return new CompletionItemModel(result.sort(getSuggestionComparator(options.snippetSortOrder)), needsClipboard, { entries: durations, elapsed: sw.elapsed() }, disposables);\r\n    });\r\n}\r\nfunction defaultComparator(a, b) {\r\n    // check with 'sortText'\r\n    if (a.sortTextLow && b.sortTextLow) {\r\n        if (a.sortTextLow < b.sortTextLow) {\r\n            return -1;\r\n        }\r\n        else if (a.sortTextLow > b.sortTextLow) {\r\n            return 1;\r\n        }\r\n    }\r\n    // check with 'label'\r\n    if (a.completion.label < b.completion.label) {\r\n        return -1;\r\n    }\r\n    else if (a.completion.label > b.completion.label) {\r\n        return 1;\r\n    }\r\n    // check with 'type'\r\n    return a.completion.kind - b.completion.kind;\r\n}\r\nfunction snippetUpComparator(a, b) {\r\n    if (a.completion.kind !== b.completion.kind) {\r\n        if (a.completion.kind === 27 /* Snippet */) {\r\n            return -1;\r\n        }\r\n        else if (b.completion.kind === 27 /* Snippet */) {\r\n            return 1;\r\n        }\r\n    }\r\n    return defaultComparator(a, b);\r\n}\r\nfunction snippetDownComparator(a, b) {\r\n    if (a.completion.kind !== b.completion.kind) {\r\n        if (a.completion.kind === 27 /* Snippet */) {\r\n            return 1;\r\n        }\r\n        else if (b.completion.kind === 27 /* Snippet */) {\r\n            return -1;\r\n        }\r\n    }\r\n    return defaultComparator(a, b);\r\n}\r\nconst _snippetComparators = new Map();\r\n_snippetComparators.set(0 /* Top */, snippetUpComparator);\r\n_snippetComparators.set(2 /* Bottom */, snippetDownComparator);\r\n_snippetComparators.set(1 /* Inline */, defaultComparator);\r\nexport function getSuggestionComparator(snippetConfig) {\r\n    return _snippetComparators.get(snippetConfig);\r\n}\r\nCommandsRegistry.registerCommand('_executeCompletionItemProvider', (accessor, ...args) => __awaiter(void 0, void 0, void 0, function* () {\r\n    const [uri, position, triggerCharacter, maxItemsToResolve] = args;\r\n    assertType(URI.isUri(uri));\r\n    assertType(Position.isIPosition(position));\r\n    assertType(typeof triggerCharacter === 'string' || !triggerCharacter);\r\n    assertType(typeof maxItemsToResolve === 'number' || !maxItemsToResolve);\r\n    const ref = yield accessor.get(ITextModelService).createModelReference(uri);\r\n    try {\r\n        const result = {\r\n            incomplete: false,\r\n            suggestions: []\r\n        };\r\n        const resolving = [];\r\n        const completions = yield provideSuggestionItems(ref.object.textEditorModel, Position.lift(position), undefined, { triggerCharacter, triggerKind: triggerCharacter ? 1 /* TriggerCharacter */ : 0 /* Invoke */ });\r\n        for (const item of completions.items) {\r\n            if (resolving.length < (maxItemsToResolve !== null && maxItemsToResolve !== void 0 ? maxItemsToResolve : 0)) {\r\n                resolving.push(item.resolve(CancellationToken.None));\r\n            }\r\n            result.incomplete = result.incomplete || item.container.incomplete;\r\n            result.suggestions.push(item.completion);\r\n        }\r\n        try {\r\n            yield Promise.all(resolving);\r\n            return result;\r\n        }\r\n        finally {\r\n            setTimeout(() => completions.disposable.dispose(), 100);\r\n        }\r\n    }\r\n    finally {\r\n        ref.dispose();\r\n    }\r\n}));\r\nconst _provider = new class {\r\n    constructor() {\r\n        this.onlyOnceSuggestions = [];\r\n    }\r\n    provideCompletionItems() {\r\n        let suggestions = this.onlyOnceSuggestions.slice(0);\r\n        let result = { suggestions };\r\n        this.onlyOnceSuggestions.length = 0;\r\n        return result;\r\n    }\r\n};\r\nmodes.CompletionProviderRegistry.register('*', _provider);\r\nexport function showSimpleSuggestions(editor, suggestions) {\r\n    setTimeout(() => {\r\n        _provider.onlyOnceSuggestions.push(...suggestions);\r\n        editor.getContribution('editor.contrib.suggestController').triggerSuggest(new Set().add(_provider));\r\n    }, 0);\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}