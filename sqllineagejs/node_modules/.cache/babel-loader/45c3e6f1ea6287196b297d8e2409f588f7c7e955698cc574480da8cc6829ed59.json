{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { toUint32 } from '../../../base/common/uint.js';\nexport class PrefixSumIndexOfResult {\n  constructor(index, remainder) {\n    this.index = index;\n    this.remainder = remainder;\n  }\n}\nexport class PrefixSumComputer {\n  constructor(values) {\n    this.values = values;\n    this.prefixSum = new Uint32Array(values.length);\n    this.prefixSumValidIndex = new Int32Array(1);\n    this.prefixSumValidIndex[0] = -1;\n  }\n  insertValues(insertIndex, insertValues) {\n    insertIndex = toUint32(insertIndex);\n    const oldValues = this.values;\n    const oldPrefixSum = this.prefixSum;\n    const insertValuesLen = insertValues.length;\n    if (insertValuesLen === 0) {\n      return false;\n    }\n    this.values = new Uint32Array(oldValues.length + insertValuesLen);\n    this.values.set(oldValues.subarray(0, insertIndex), 0);\n    this.values.set(oldValues.subarray(insertIndex), insertIndex + insertValuesLen);\n    this.values.set(insertValues, insertIndex);\n    if (insertIndex - 1 < this.prefixSumValidIndex[0]) {\n      this.prefixSumValidIndex[0] = insertIndex - 1;\n    }\n    this.prefixSum = new Uint32Array(this.values.length);\n    if (this.prefixSumValidIndex[0] >= 0) {\n      this.prefixSum.set(oldPrefixSum.subarray(0, this.prefixSumValidIndex[0] + 1));\n    }\n    return true;\n  }\n  changeValue(index, value) {\n    index = toUint32(index);\n    value = toUint32(value);\n    if (this.values[index] === value) {\n      return false;\n    }\n    this.values[index] = value;\n    if (index - 1 < this.prefixSumValidIndex[0]) {\n      this.prefixSumValidIndex[0] = index - 1;\n    }\n    return true;\n  }\n  removeValues(startIndex, cnt) {\n    startIndex = toUint32(startIndex);\n    cnt = toUint32(cnt);\n    const oldValues = this.values;\n    const oldPrefixSum = this.prefixSum;\n    if (startIndex >= oldValues.length) {\n      return false;\n    }\n    let maxCnt = oldValues.length - startIndex;\n    if (cnt >= maxCnt) {\n      cnt = maxCnt;\n    }\n    if (cnt === 0) {\n      return false;\n    }\n    this.values = new Uint32Array(oldValues.length - cnt);\n    this.values.set(oldValues.subarray(0, startIndex), 0);\n    this.values.set(oldValues.subarray(startIndex + cnt), startIndex);\n    this.prefixSum = new Uint32Array(this.values.length);\n    if (startIndex - 1 < this.prefixSumValidIndex[0]) {\n      this.prefixSumValidIndex[0] = startIndex - 1;\n    }\n    if (this.prefixSumValidIndex[0] >= 0) {\n      this.prefixSum.set(oldPrefixSum.subarray(0, this.prefixSumValidIndex[0] + 1));\n    }\n    return true;\n  }\n  getTotalValue() {\n    if (this.values.length === 0) {\n      return 0;\n    }\n    return this._getAccumulatedValue(this.values.length - 1);\n  }\n  getAccumulatedValue(index) {\n    if (index < 0) {\n      return 0;\n    }\n    index = toUint32(index);\n    return this._getAccumulatedValue(index);\n  }\n  _getAccumulatedValue(index) {\n    if (index <= this.prefixSumValidIndex[0]) {\n      return this.prefixSum[index];\n    }\n    let startIndex = this.prefixSumValidIndex[0] + 1;\n    if (startIndex === 0) {\n      this.prefixSum[0] = this.values[0];\n      startIndex++;\n    }\n    if (index >= this.values.length) {\n      index = this.values.length - 1;\n    }\n    for (let i = startIndex; i <= index; i++) {\n      this.prefixSum[i] = this.prefixSum[i - 1] + this.values[i];\n    }\n    this.prefixSumValidIndex[0] = Math.max(this.prefixSumValidIndex[0], index);\n    return this.prefixSum[index];\n  }\n  getIndexOf(accumulatedValue) {\n    accumulatedValue = Math.floor(accumulatedValue); //@perf\n    // Compute all sums (to get a fully valid prefixSum)\n    this.getTotalValue();\n    let low = 0;\n    let high = this.values.length - 1;\n    let mid = 0;\n    let midStop = 0;\n    let midStart = 0;\n    while (low <= high) {\n      mid = low + (high - low) / 2 | 0;\n      midStop = this.prefixSum[mid];\n      midStart = midStop - this.values[mid];\n      if (accumulatedValue < midStart) {\n        high = mid - 1;\n      } else if (accumulatedValue >= midStop) {\n        low = mid + 1;\n      } else {\n        break;\n      }\n    }\n    return new PrefixSumIndexOfResult(mid, accumulatedValue - midStart);\n  }\n}","map":{"version":3,"names":["toUint32","PrefixSumIndexOfResult","constructor","index","remainder","PrefixSumComputer","values","prefixSum","Uint32Array","length","prefixSumValidIndex","Int32Array","insertValues","insertIndex","oldValues","oldPrefixSum","insertValuesLen","set","subarray","changeValue","value","removeValues","startIndex","cnt","maxCnt","getTotalValue","_getAccumulatedValue","getAccumulatedValue","i","Math","max","getIndexOf","accumulatedValue","floor","low","high","mid","midStop","midStart"],"sources":["C:/Users/Administrator/Desktop/sqllineage-master/sqllineagejs/node_modules/monaco-editor/esm/vs/editor/common/viewModel/prefixSumComputer.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { toUint32 } from '../../../base/common/uint.js';\r\nexport class PrefixSumIndexOfResult {\r\n    constructor(index, remainder) {\r\n        this.index = index;\r\n        this.remainder = remainder;\r\n    }\r\n}\r\nexport class PrefixSumComputer {\r\n    constructor(values) {\r\n        this.values = values;\r\n        this.prefixSum = new Uint32Array(values.length);\r\n        this.prefixSumValidIndex = new Int32Array(1);\r\n        this.prefixSumValidIndex[0] = -1;\r\n    }\r\n    insertValues(insertIndex, insertValues) {\r\n        insertIndex = toUint32(insertIndex);\r\n        const oldValues = this.values;\r\n        const oldPrefixSum = this.prefixSum;\r\n        const insertValuesLen = insertValues.length;\r\n        if (insertValuesLen === 0) {\r\n            return false;\r\n        }\r\n        this.values = new Uint32Array(oldValues.length + insertValuesLen);\r\n        this.values.set(oldValues.subarray(0, insertIndex), 0);\r\n        this.values.set(oldValues.subarray(insertIndex), insertIndex + insertValuesLen);\r\n        this.values.set(insertValues, insertIndex);\r\n        if (insertIndex - 1 < this.prefixSumValidIndex[0]) {\r\n            this.prefixSumValidIndex[0] = insertIndex - 1;\r\n        }\r\n        this.prefixSum = new Uint32Array(this.values.length);\r\n        if (this.prefixSumValidIndex[0] >= 0) {\r\n            this.prefixSum.set(oldPrefixSum.subarray(0, this.prefixSumValidIndex[0] + 1));\r\n        }\r\n        return true;\r\n    }\r\n    changeValue(index, value) {\r\n        index = toUint32(index);\r\n        value = toUint32(value);\r\n        if (this.values[index] === value) {\r\n            return false;\r\n        }\r\n        this.values[index] = value;\r\n        if (index - 1 < this.prefixSumValidIndex[0]) {\r\n            this.prefixSumValidIndex[0] = index - 1;\r\n        }\r\n        return true;\r\n    }\r\n    removeValues(startIndex, cnt) {\r\n        startIndex = toUint32(startIndex);\r\n        cnt = toUint32(cnt);\r\n        const oldValues = this.values;\r\n        const oldPrefixSum = this.prefixSum;\r\n        if (startIndex >= oldValues.length) {\r\n            return false;\r\n        }\r\n        let maxCnt = oldValues.length - startIndex;\r\n        if (cnt >= maxCnt) {\r\n            cnt = maxCnt;\r\n        }\r\n        if (cnt === 0) {\r\n            return false;\r\n        }\r\n        this.values = new Uint32Array(oldValues.length - cnt);\r\n        this.values.set(oldValues.subarray(0, startIndex), 0);\r\n        this.values.set(oldValues.subarray(startIndex + cnt), startIndex);\r\n        this.prefixSum = new Uint32Array(this.values.length);\r\n        if (startIndex - 1 < this.prefixSumValidIndex[0]) {\r\n            this.prefixSumValidIndex[0] = startIndex - 1;\r\n        }\r\n        if (this.prefixSumValidIndex[0] >= 0) {\r\n            this.prefixSum.set(oldPrefixSum.subarray(0, this.prefixSumValidIndex[0] + 1));\r\n        }\r\n        return true;\r\n    }\r\n    getTotalValue() {\r\n        if (this.values.length === 0) {\r\n            return 0;\r\n        }\r\n        return this._getAccumulatedValue(this.values.length - 1);\r\n    }\r\n    getAccumulatedValue(index) {\r\n        if (index < 0) {\r\n            return 0;\r\n        }\r\n        index = toUint32(index);\r\n        return this._getAccumulatedValue(index);\r\n    }\r\n    _getAccumulatedValue(index) {\r\n        if (index <= this.prefixSumValidIndex[0]) {\r\n            return this.prefixSum[index];\r\n        }\r\n        let startIndex = this.prefixSumValidIndex[0] + 1;\r\n        if (startIndex === 0) {\r\n            this.prefixSum[0] = this.values[0];\r\n            startIndex++;\r\n        }\r\n        if (index >= this.values.length) {\r\n            index = this.values.length - 1;\r\n        }\r\n        for (let i = startIndex; i <= index; i++) {\r\n            this.prefixSum[i] = this.prefixSum[i - 1] + this.values[i];\r\n        }\r\n        this.prefixSumValidIndex[0] = Math.max(this.prefixSumValidIndex[0], index);\r\n        return this.prefixSum[index];\r\n    }\r\n    getIndexOf(accumulatedValue) {\r\n        accumulatedValue = Math.floor(accumulatedValue); //@perf\r\n        // Compute all sums (to get a fully valid prefixSum)\r\n        this.getTotalValue();\r\n        let low = 0;\r\n        let high = this.values.length - 1;\r\n        let mid = 0;\r\n        let midStop = 0;\r\n        let midStart = 0;\r\n        while (low <= high) {\r\n            mid = low + ((high - low) / 2) | 0;\r\n            midStop = this.prefixSum[mid];\r\n            midStart = midStop - this.values[mid];\r\n            if (accumulatedValue < midStart) {\r\n                high = mid - 1;\r\n            }\r\n            else if (accumulatedValue >= midStop) {\r\n                low = mid + 1;\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        return new PrefixSumIndexOfResult(mid, accumulatedValue - midStart);\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}