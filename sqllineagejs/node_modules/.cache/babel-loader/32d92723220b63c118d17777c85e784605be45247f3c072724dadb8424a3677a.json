{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nexport class CodeActionKind {\n  constructor(value) {\n    this.value = value;\n  }\n  equals(other) {\n    return this.value === other.value;\n  }\n  contains(other) {\n    return this.equals(other) || this.value === '' || other.value.startsWith(this.value + CodeActionKind.sep);\n  }\n  intersects(other) {\n    return this.contains(other) || other.contains(this);\n  }\n  append(part) {\n    return new CodeActionKind(this.value + CodeActionKind.sep + part);\n  }\n}\nCodeActionKind.sep = '.';\nCodeActionKind.None = new CodeActionKind('@@none@@'); // Special code action that contains nothing\nCodeActionKind.Empty = new CodeActionKind('');\nCodeActionKind.QuickFix = new CodeActionKind('quickfix');\nCodeActionKind.Refactor = new CodeActionKind('refactor');\nCodeActionKind.Source = new CodeActionKind('source');\nCodeActionKind.SourceOrganizeImports = CodeActionKind.Source.append('organizeImports');\nCodeActionKind.SourceFixAll = CodeActionKind.Source.append('fixAll');\nexport function mayIncludeActionsOfKind(filter, providedKind) {\n  // A provided kind may be a subset or superset of our filtered kind.\n  if (filter.include && !filter.include.intersects(providedKind)) {\n    return false;\n  }\n  if (filter.excludes) {\n    if (filter.excludes.some(exclude => excludesAction(providedKind, exclude, filter.include))) {\n      return false;\n    }\n  }\n  // Don't return source actions unless they are explicitly requested\n  if (!filter.includeSourceActions && CodeActionKind.Source.contains(providedKind)) {\n    return false;\n  }\n  return true;\n}\nexport function filtersAction(filter, action) {\n  const actionKind = action.kind ? new CodeActionKind(action.kind) : undefined;\n  // Filter out actions by kind\n  if (filter.include) {\n    if (!actionKind || !filter.include.contains(actionKind)) {\n      return false;\n    }\n  }\n  if (filter.excludes) {\n    if (actionKind && filter.excludes.some(exclude => excludesAction(actionKind, exclude, filter.include))) {\n      return false;\n    }\n  }\n  // Don't return source actions unless they are explicitly requested\n  if (!filter.includeSourceActions) {\n    if (actionKind && CodeActionKind.Source.contains(actionKind)) {\n      return false;\n    }\n  }\n  if (filter.onlyIncludePreferredActions) {\n    if (!action.isPreferred) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction excludesAction(providedKind, exclude, include) {\n  if (!exclude.contains(providedKind)) {\n    return false;\n  }\n  if (include && exclude.contains(include)) {\n    // The include is more specific, don't filter out\n    return false;\n  }\n  return true;\n}\nexport class CodeActionCommandArgs {\n  constructor(kind, apply, preferred) {\n    this.kind = kind;\n    this.apply = apply;\n    this.preferred = preferred;\n  }\n  static fromUser(arg, defaults) {\n    if (!arg || typeof arg !== 'object') {\n      return new CodeActionCommandArgs(defaults.kind, defaults.apply, false);\n    }\n    return new CodeActionCommandArgs(CodeActionCommandArgs.getKindFromUser(arg, defaults.kind), CodeActionCommandArgs.getApplyFromUser(arg, defaults.apply), CodeActionCommandArgs.getPreferredUser(arg));\n  }\n  static getApplyFromUser(arg, defaultAutoApply) {\n    switch (typeof arg.apply === 'string' ? arg.apply.toLowerCase() : '') {\n      case 'first':\n        return \"first\" /* First */;\n      case 'never':\n        return \"never\" /* Never */;\n      case 'ifsingle':\n        return \"ifSingle\" /* IfSingle */;\n      default:\n        return defaultAutoApply;\n    }\n  }\n  static getKindFromUser(arg, defaultKind) {\n    return typeof arg.kind === 'string' ? new CodeActionKind(arg.kind) : defaultKind;\n  }\n  static getPreferredUser(arg) {\n    return typeof arg.preferred === 'boolean' ? arg.preferred : false;\n  }\n}","map":{"version":3,"names":["CodeActionKind","constructor","value","equals","other","contains","startsWith","sep","intersects","append","part","None","Empty","QuickFix","Refactor","Source","SourceOrganizeImports","SourceFixAll","mayIncludeActionsOfKind","filter","providedKind","include","excludes","some","exclude","excludesAction","includeSourceActions","filtersAction","action","actionKind","kind","undefined","onlyIncludePreferredActions","isPreferred","CodeActionCommandArgs","apply","preferred","fromUser","arg","defaults","getKindFromUser","getApplyFromUser","getPreferredUser","defaultAutoApply","toLowerCase","defaultKind"],"sources":["C:/Users/Administrator/Desktop/sqllineage-master/sqllineagejs/node_modules/monaco-editor/esm/vs/editor/contrib/codeAction/types.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nexport class CodeActionKind {\r\n    constructor(value) {\r\n        this.value = value;\r\n    }\r\n    equals(other) {\r\n        return this.value === other.value;\r\n    }\r\n    contains(other) {\r\n        return this.equals(other) || this.value === '' || other.value.startsWith(this.value + CodeActionKind.sep);\r\n    }\r\n    intersects(other) {\r\n        return this.contains(other) || other.contains(this);\r\n    }\r\n    append(part) {\r\n        return new CodeActionKind(this.value + CodeActionKind.sep + part);\r\n    }\r\n}\r\nCodeActionKind.sep = '.';\r\nCodeActionKind.None = new CodeActionKind('@@none@@'); // Special code action that contains nothing\r\nCodeActionKind.Empty = new CodeActionKind('');\r\nCodeActionKind.QuickFix = new CodeActionKind('quickfix');\r\nCodeActionKind.Refactor = new CodeActionKind('refactor');\r\nCodeActionKind.Source = new CodeActionKind('source');\r\nCodeActionKind.SourceOrganizeImports = CodeActionKind.Source.append('organizeImports');\r\nCodeActionKind.SourceFixAll = CodeActionKind.Source.append('fixAll');\r\nexport function mayIncludeActionsOfKind(filter, providedKind) {\r\n    // A provided kind may be a subset or superset of our filtered kind.\r\n    if (filter.include && !filter.include.intersects(providedKind)) {\r\n        return false;\r\n    }\r\n    if (filter.excludes) {\r\n        if (filter.excludes.some(exclude => excludesAction(providedKind, exclude, filter.include))) {\r\n            return false;\r\n        }\r\n    }\r\n    // Don't return source actions unless they are explicitly requested\r\n    if (!filter.includeSourceActions && CodeActionKind.Source.contains(providedKind)) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\nexport function filtersAction(filter, action) {\r\n    const actionKind = action.kind ? new CodeActionKind(action.kind) : undefined;\r\n    // Filter out actions by kind\r\n    if (filter.include) {\r\n        if (!actionKind || !filter.include.contains(actionKind)) {\r\n            return false;\r\n        }\r\n    }\r\n    if (filter.excludes) {\r\n        if (actionKind && filter.excludes.some(exclude => excludesAction(actionKind, exclude, filter.include))) {\r\n            return false;\r\n        }\r\n    }\r\n    // Don't return source actions unless they are explicitly requested\r\n    if (!filter.includeSourceActions) {\r\n        if (actionKind && CodeActionKind.Source.contains(actionKind)) {\r\n            return false;\r\n        }\r\n    }\r\n    if (filter.onlyIncludePreferredActions) {\r\n        if (!action.isPreferred) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction excludesAction(providedKind, exclude, include) {\r\n    if (!exclude.contains(providedKind)) {\r\n        return false;\r\n    }\r\n    if (include && exclude.contains(include)) {\r\n        // The include is more specific, don't filter out\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\nexport class CodeActionCommandArgs {\r\n    constructor(kind, apply, preferred) {\r\n        this.kind = kind;\r\n        this.apply = apply;\r\n        this.preferred = preferred;\r\n    }\r\n    static fromUser(arg, defaults) {\r\n        if (!arg || typeof arg !== 'object') {\r\n            return new CodeActionCommandArgs(defaults.kind, defaults.apply, false);\r\n        }\r\n        return new CodeActionCommandArgs(CodeActionCommandArgs.getKindFromUser(arg, defaults.kind), CodeActionCommandArgs.getApplyFromUser(arg, defaults.apply), CodeActionCommandArgs.getPreferredUser(arg));\r\n    }\r\n    static getApplyFromUser(arg, defaultAutoApply) {\r\n        switch (typeof arg.apply === 'string' ? arg.apply.toLowerCase() : '') {\r\n            case 'first': return \"first\" /* First */;\r\n            case 'never': return \"never\" /* Never */;\r\n            case 'ifsingle': return \"ifSingle\" /* IfSingle */;\r\n            default: return defaultAutoApply;\r\n        }\r\n    }\r\n    static getKindFromUser(arg, defaultKind) {\r\n        return typeof arg.kind === 'string'\r\n            ? new CodeActionKind(arg.kind)\r\n            : defaultKind;\r\n    }\r\n    static getPreferredUser(arg) {\r\n        return typeof arg.preferred === 'boolean'\r\n            ? arg.preferred\r\n            : false;\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}