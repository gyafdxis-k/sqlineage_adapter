{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nvar _a;\nimport { TimeoutTimer } from '../../../base/common/async.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { LineTokens } from '../../common/core/lineTokens.js';\nimport { TokenizationRegistry } from '../../common/modes.js';\nimport { RenderLineInput, renderViewLine2 as renderViewLine } from '../../common/viewLayout/viewLineRenderer.js';\nimport { ViewLineRenderingData } from '../../common/viewModel/viewModel.js';\nimport { MonarchTokenizer } from '../common/monarch/monarchLexer.js';\nconst ttPolicy = (_a = window.trustedTypes) === null || _a === void 0 ? void 0 : _a.createPolicy('standaloneColorizer', {\n  createHTML: value => value\n});\nexport class Colorizer {\n  static colorizeElement(themeService, modeService, domNode, options) {\n    options = options || {};\n    let theme = options.theme || 'vs';\n    let mimeType = options.mimeType || domNode.getAttribute('lang') || domNode.getAttribute('data-lang');\n    if (!mimeType) {\n      console.error('Mode not detected');\n      return Promise.resolve();\n    }\n    themeService.setTheme(theme);\n    let text = domNode.firstChild ? domNode.firstChild.nodeValue : '';\n    domNode.className += ' ' + theme;\n    let render = str => {\n      var _a;\n      const trustedhtml = (_a = ttPolicy === null || ttPolicy === void 0 ? void 0 : ttPolicy.createHTML(str)) !== null && _a !== void 0 ? _a : str;\n      domNode.innerHTML = trustedhtml;\n    };\n    return this.colorize(modeService, text || '', mimeType, options).then(render, err => console.error(err));\n  }\n  static colorize(modeService, text, mimeType, options) {\n    let tabSize = 4;\n    if (options && typeof options.tabSize === 'number') {\n      tabSize = options.tabSize;\n    }\n    if (strings.startsWithUTF8BOM(text)) {\n      text = text.substr(1);\n    }\n    let lines = strings.splitLines(text);\n    let language = modeService.getModeId(mimeType);\n    if (!language) {\n      return Promise.resolve(_fakeColorize(lines, tabSize));\n    }\n    // Send out the event to create the mode\n    modeService.triggerMode(language);\n    const tokenizationSupport = TokenizationRegistry.get(language);\n    if (tokenizationSupport) {\n      return _colorize(lines, tabSize, tokenizationSupport);\n    }\n    const tokenizationSupportPromise = TokenizationRegistry.getPromise(language);\n    if (tokenizationSupportPromise) {\n      // A tokenizer will be registered soon\n      return new Promise((resolve, reject) => {\n        tokenizationSupportPromise.then(tokenizationSupport => {\n          _colorize(lines, tabSize, tokenizationSupport).then(resolve, reject);\n        }, reject);\n      });\n    }\n    return new Promise((resolve, reject) => {\n      let listener = null;\n      let timeout = null;\n      const execute = () => {\n        if (listener) {\n          listener.dispose();\n          listener = null;\n        }\n        if (timeout) {\n          timeout.dispose();\n          timeout = null;\n        }\n        const tokenizationSupport = TokenizationRegistry.get(language);\n        if (tokenizationSupport) {\n          _colorize(lines, tabSize, tokenizationSupport).then(resolve, reject);\n          return;\n        }\n        resolve(_fakeColorize(lines, tabSize));\n      };\n      // wait 500ms for mode to load, then give up\n      timeout = new TimeoutTimer();\n      timeout.cancelAndSet(execute, 500);\n      listener = TokenizationRegistry.onDidChange(e => {\n        if (e.changedLanguages.indexOf(language) >= 0) {\n          execute();\n        }\n      });\n    });\n  }\n  static colorizeLine(line, mightContainNonBasicASCII, mightContainRTL, tokens) {\n    let tabSize = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 4;\n    const isBasicASCII = ViewLineRenderingData.isBasicASCII(line, mightContainNonBasicASCII);\n    const containsRTL = ViewLineRenderingData.containsRTL(line, isBasicASCII, mightContainRTL);\n    let renderResult = renderViewLine(new RenderLineInput(false, true, line, false, isBasicASCII, containsRTL, 0, tokens, [], tabSize, 0, 0, 0, 0, -1, 'none', false, false, null));\n    return renderResult.html;\n  }\n  static colorizeModelLine(model, lineNumber) {\n    let tabSize = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 4;\n    let content = model.getLineContent(lineNumber);\n    model.forceTokenization(lineNumber);\n    let tokens = model.getLineTokens(lineNumber);\n    let inflatedTokens = tokens.inflate();\n    return this.colorizeLine(content, model.mightContainNonBasicASCII(), model.mightContainRTL(), inflatedTokens, tabSize);\n  }\n}\nfunction _colorize(lines, tabSize, tokenizationSupport) {\n  return new Promise((c, e) => {\n    const execute = () => {\n      const result = _actualColorize(lines, tabSize, tokenizationSupport);\n      if (tokenizationSupport instanceof MonarchTokenizer) {\n        const status = tokenizationSupport.getLoadStatus();\n        if (status.loaded === false) {\n          status.promise.then(execute, e);\n          return;\n        }\n      }\n      c(result);\n    };\n    execute();\n  });\n}\nfunction _fakeColorize(lines, tabSize) {\n  let html = [];\n  const defaultMetadata = (0 /* None */ << 11 /* FONT_STYLE_OFFSET */ | 1 /* DefaultForeground */ << 14 /* FOREGROUND_OFFSET */ | 2 /* DefaultBackground */ << 23 /* BACKGROUND_OFFSET */) >>> 0;\n  const tokens = new Uint32Array(2);\n  tokens[0] = 0;\n  tokens[1] = defaultMetadata;\n  for (let i = 0, length = lines.length; i < length; i++) {\n    let line = lines[i];\n    tokens[0] = line.length;\n    const lineTokens = new LineTokens(tokens, line);\n    const isBasicASCII = ViewLineRenderingData.isBasicASCII(line, /* check for basic ASCII */true);\n    const containsRTL = ViewLineRenderingData.containsRTL(line, isBasicASCII, /* check for RTL */true);\n    let renderResult = renderViewLine(new RenderLineInput(false, true, line, false, isBasicASCII, containsRTL, 0, lineTokens, [], tabSize, 0, 0, 0, 0, -1, 'none', false, false, null));\n    html = html.concat(renderResult.html);\n    html.push('<br/>');\n  }\n  return html.join('');\n}\nfunction _actualColorize(lines, tabSize, tokenizationSupport) {\n  let html = [];\n  let state = tokenizationSupport.getInitialState();\n  for (let i = 0, length = lines.length; i < length; i++) {\n    let line = lines[i];\n    let tokenizeResult = tokenizationSupport.tokenize2(line, true, state, 0);\n    LineTokens.convertToEndOffset(tokenizeResult.tokens, line.length);\n    let lineTokens = new LineTokens(tokenizeResult.tokens, line);\n    const isBasicASCII = ViewLineRenderingData.isBasicASCII(line, /* check for basic ASCII */true);\n    const containsRTL = ViewLineRenderingData.containsRTL(line, isBasicASCII, /* check for RTL */true);\n    let renderResult = renderViewLine(new RenderLineInput(false, true, line, false, isBasicASCII, containsRTL, 0, lineTokens.inflate(), [], tabSize, 0, 0, 0, 0, -1, 'none', false, false, null));\n    html = html.concat(renderResult.html);\n    html.push('<br/>');\n    state = tokenizeResult.endState;\n  }\n  return html.join('');\n}","map":{"version":3,"names":["_a","TimeoutTimer","strings","LineTokens","TokenizationRegistry","RenderLineInput","renderViewLine2","renderViewLine","ViewLineRenderingData","MonarchTokenizer","ttPolicy","window","trustedTypes","createPolicy","createHTML","value","Colorizer","colorizeElement","themeService","modeService","domNode","options","theme","mimeType","getAttribute","console","error","Promise","resolve","setTheme","text","firstChild","nodeValue","className","render","str","trustedhtml","innerHTML","colorize","then","err","tabSize","startsWithUTF8BOM","substr","lines","splitLines","language","getModeId","_fakeColorize","triggerMode","tokenizationSupport","get","_colorize","tokenizationSupportPromise","getPromise","reject","listener","timeout","execute","dispose","cancelAndSet","onDidChange","e","changedLanguages","indexOf","colorizeLine","line","mightContainNonBasicASCII","mightContainRTL","tokens","arguments","length","undefined","isBasicASCII","containsRTL","renderResult","html","colorizeModelLine","model","lineNumber","content","getLineContent","forceTokenization","getLineTokens","inflatedTokens","inflate","c","result","_actualColorize","status","getLoadStatus","loaded","promise","defaultMetadata","Uint32Array","i","lineTokens","concat","push","join","state","getInitialState","tokenizeResult","tokenize2","convertToEndOffset","endState"],"sources":["C:/Users/Administrator/Desktop/sqllineage-master/sqllineagejs/node_modules/monaco-editor/esm/vs/editor/standalone/browser/colorizer.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nvar _a;\r\nimport { TimeoutTimer } from '../../../base/common/async.js';\r\nimport * as strings from '../../../base/common/strings.js';\r\nimport { LineTokens } from '../../common/core/lineTokens.js';\r\nimport { TokenizationRegistry } from '../../common/modes.js';\r\nimport { RenderLineInput, renderViewLine2 as renderViewLine } from '../../common/viewLayout/viewLineRenderer.js';\r\nimport { ViewLineRenderingData } from '../../common/viewModel/viewModel.js';\r\nimport { MonarchTokenizer } from '../common/monarch/monarchLexer.js';\r\nconst ttPolicy = (_a = window.trustedTypes) === null || _a === void 0 ? void 0 : _a.createPolicy('standaloneColorizer', { createHTML: value => value });\r\nexport class Colorizer {\r\n    static colorizeElement(themeService, modeService, domNode, options) {\r\n        options = options || {};\r\n        let theme = options.theme || 'vs';\r\n        let mimeType = options.mimeType || domNode.getAttribute('lang') || domNode.getAttribute('data-lang');\r\n        if (!mimeType) {\r\n            console.error('Mode not detected');\r\n            return Promise.resolve();\r\n        }\r\n        themeService.setTheme(theme);\r\n        let text = domNode.firstChild ? domNode.firstChild.nodeValue : '';\r\n        domNode.className += ' ' + theme;\r\n        let render = (str) => {\r\n            var _a;\r\n            const trustedhtml = (_a = ttPolicy === null || ttPolicy === void 0 ? void 0 : ttPolicy.createHTML(str)) !== null && _a !== void 0 ? _a : str;\r\n            domNode.innerHTML = trustedhtml;\r\n        };\r\n        return this.colorize(modeService, text || '', mimeType, options).then(render, (err) => console.error(err));\r\n    }\r\n    static colorize(modeService, text, mimeType, options) {\r\n        let tabSize = 4;\r\n        if (options && typeof options.tabSize === 'number') {\r\n            tabSize = options.tabSize;\r\n        }\r\n        if (strings.startsWithUTF8BOM(text)) {\r\n            text = text.substr(1);\r\n        }\r\n        let lines = strings.splitLines(text);\r\n        let language = modeService.getModeId(mimeType);\r\n        if (!language) {\r\n            return Promise.resolve(_fakeColorize(lines, tabSize));\r\n        }\r\n        // Send out the event to create the mode\r\n        modeService.triggerMode(language);\r\n        const tokenizationSupport = TokenizationRegistry.get(language);\r\n        if (tokenizationSupport) {\r\n            return _colorize(lines, tabSize, tokenizationSupport);\r\n        }\r\n        const tokenizationSupportPromise = TokenizationRegistry.getPromise(language);\r\n        if (tokenizationSupportPromise) {\r\n            // A tokenizer will be registered soon\r\n            return new Promise((resolve, reject) => {\r\n                tokenizationSupportPromise.then(tokenizationSupport => {\r\n                    _colorize(lines, tabSize, tokenizationSupport).then(resolve, reject);\r\n                }, reject);\r\n            });\r\n        }\r\n        return new Promise((resolve, reject) => {\r\n            let listener = null;\r\n            let timeout = null;\r\n            const execute = () => {\r\n                if (listener) {\r\n                    listener.dispose();\r\n                    listener = null;\r\n                }\r\n                if (timeout) {\r\n                    timeout.dispose();\r\n                    timeout = null;\r\n                }\r\n                const tokenizationSupport = TokenizationRegistry.get(language);\r\n                if (tokenizationSupport) {\r\n                    _colorize(lines, tabSize, tokenizationSupport).then(resolve, reject);\r\n                    return;\r\n                }\r\n                resolve(_fakeColorize(lines, tabSize));\r\n            };\r\n            // wait 500ms for mode to load, then give up\r\n            timeout = new TimeoutTimer();\r\n            timeout.cancelAndSet(execute, 500);\r\n            listener = TokenizationRegistry.onDidChange((e) => {\r\n                if (e.changedLanguages.indexOf(language) >= 0) {\r\n                    execute();\r\n                }\r\n            });\r\n        });\r\n    }\r\n    static colorizeLine(line, mightContainNonBasicASCII, mightContainRTL, tokens, tabSize = 4) {\r\n        const isBasicASCII = ViewLineRenderingData.isBasicASCII(line, mightContainNonBasicASCII);\r\n        const containsRTL = ViewLineRenderingData.containsRTL(line, isBasicASCII, mightContainRTL);\r\n        let renderResult = renderViewLine(new RenderLineInput(false, true, line, false, isBasicASCII, containsRTL, 0, tokens, [], tabSize, 0, 0, 0, 0, -1, 'none', false, false, null));\r\n        return renderResult.html;\r\n    }\r\n    static colorizeModelLine(model, lineNumber, tabSize = 4) {\r\n        let content = model.getLineContent(lineNumber);\r\n        model.forceTokenization(lineNumber);\r\n        let tokens = model.getLineTokens(lineNumber);\r\n        let inflatedTokens = tokens.inflate();\r\n        return this.colorizeLine(content, model.mightContainNonBasicASCII(), model.mightContainRTL(), inflatedTokens, tabSize);\r\n    }\r\n}\r\nfunction _colorize(lines, tabSize, tokenizationSupport) {\r\n    return new Promise((c, e) => {\r\n        const execute = () => {\r\n            const result = _actualColorize(lines, tabSize, tokenizationSupport);\r\n            if (tokenizationSupport instanceof MonarchTokenizer) {\r\n                const status = tokenizationSupport.getLoadStatus();\r\n                if (status.loaded === false) {\r\n                    status.promise.then(execute, e);\r\n                    return;\r\n                }\r\n            }\r\n            c(result);\r\n        };\r\n        execute();\r\n    });\r\n}\r\nfunction _fakeColorize(lines, tabSize) {\r\n    let html = [];\r\n    const defaultMetadata = ((0 /* None */ << 11 /* FONT_STYLE_OFFSET */)\r\n        | (1 /* DefaultForeground */ << 14 /* FOREGROUND_OFFSET */)\r\n        | (2 /* DefaultBackground */ << 23 /* BACKGROUND_OFFSET */)) >>> 0;\r\n    const tokens = new Uint32Array(2);\r\n    tokens[0] = 0;\r\n    tokens[1] = defaultMetadata;\r\n    for (let i = 0, length = lines.length; i < length; i++) {\r\n        let line = lines[i];\r\n        tokens[0] = line.length;\r\n        const lineTokens = new LineTokens(tokens, line);\r\n        const isBasicASCII = ViewLineRenderingData.isBasicASCII(line, /* check for basic ASCII */ true);\r\n        const containsRTL = ViewLineRenderingData.containsRTL(line, isBasicASCII, /* check for RTL */ true);\r\n        let renderResult = renderViewLine(new RenderLineInput(false, true, line, false, isBasicASCII, containsRTL, 0, lineTokens, [], tabSize, 0, 0, 0, 0, -1, 'none', false, false, null));\r\n        html = html.concat(renderResult.html);\r\n        html.push('<br/>');\r\n    }\r\n    return html.join('');\r\n}\r\nfunction _actualColorize(lines, tabSize, tokenizationSupport) {\r\n    let html = [];\r\n    let state = tokenizationSupport.getInitialState();\r\n    for (let i = 0, length = lines.length; i < length; i++) {\r\n        let line = lines[i];\r\n        let tokenizeResult = tokenizationSupport.tokenize2(line, true, state, 0);\r\n        LineTokens.convertToEndOffset(tokenizeResult.tokens, line.length);\r\n        let lineTokens = new LineTokens(tokenizeResult.tokens, line);\r\n        const isBasicASCII = ViewLineRenderingData.isBasicASCII(line, /* check for basic ASCII */ true);\r\n        const containsRTL = ViewLineRenderingData.containsRTL(line, isBasicASCII, /* check for RTL */ true);\r\n        let renderResult = renderViewLine(new RenderLineInput(false, true, line, false, isBasicASCII, containsRTL, 0, lineTokens.inflate(), [], tabSize, 0, 0, 0, 0, -1, 'none', false, false, null));\r\n        html = html.concat(renderResult.html);\r\n        html.push('<br/>');\r\n        state = tokenizeResult.endState;\r\n    }\r\n    return html.join('');\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}