{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport './decorations.css';\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\nimport { Range } from '../../../common/core/range.js';\nimport { HorizontalRange } from '../../../common/view/renderingContext.js';\nexport class DecorationsOverlay extends DynamicViewOverlay {\n  constructor(context) {\n    super();\n    this._context = context;\n    const options = this._context.configuration.options;\n    this._lineHeight = options.get(53 /* lineHeight */);\n    this._typicalHalfwidthCharacterWidth = options.get(38 /* fontInfo */).typicalHalfwidthCharacterWidth;\n    this._renderResult = null;\n    this._context.addEventHandler(this);\n  }\n  dispose() {\n    this._context.removeEventHandler(this);\n    this._renderResult = null;\n    super.dispose();\n  }\n  // --- begin event handlers\n  onConfigurationChanged(e) {\n    const options = this._context.configuration.options;\n    this._lineHeight = options.get(53 /* lineHeight */);\n    this._typicalHalfwidthCharacterWidth = options.get(38 /* fontInfo */).typicalHalfwidthCharacterWidth;\n    return true;\n  }\n  onDecorationsChanged(e) {\n    return true;\n  }\n  onFlushed(e) {\n    return true;\n  }\n  onLinesChanged(e) {\n    return true;\n  }\n  onLinesDeleted(e) {\n    return true;\n  }\n  onLinesInserted(e) {\n    return true;\n  }\n  onScrollChanged(e) {\n    return e.scrollTopChanged || e.scrollWidthChanged;\n  }\n  onZonesChanged(e) {\n    return true;\n  }\n  // --- end event handlers\n  prepareRender(ctx) {\n    const _decorations = ctx.getDecorationsInViewport();\n    // Keep only decorations with `className`\n    let decorations = [],\n      decorationsLen = 0;\n    for (let i = 0, len = _decorations.length; i < len; i++) {\n      const d = _decorations[i];\n      if (d.options.className) {\n        decorations[decorationsLen++] = d;\n      }\n    }\n    // Sort decorations for consistent render output\n    decorations = decorations.sort((a, b) => {\n      if (a.options.zIndex < b.options.zIndex) {\n        return -1;\n      }\n      if (a.options.zIndex > b.options.zIndex) {\n        return 1;\n      }\n      const aClassName = a.options.className;\n      const bClassName = b.options.className;\n      if (aClassName < bClassName) {\n        return -1;\n      }\n      if (aClassName > bClassName) {\n        return 1;\n      }\n      return Range.compareRangesUsingStarts(a.range, b.range);\n    });\n    const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n    const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n    const output = [];\n    for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n      const lineIndex = lineNumber - visibleStartLineNumber;\n      output[lineIndex] = '';\n    }\n    // Render first whole line decorations and then regular decorations\n    this._renderWholeLineDecorations(ctx, decorations, output);\n    this._renderNormalDecorations(ctx, decorations, output);\n    this._renderResult = output;\n  }\n  _renderWholeLineDecorations(ctx, decorations, output) {\n    const lineHeight = String(this._lineHeight);\n    const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n    const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n    for (let i = 0, lenI = decorations.length; i < lenI; i++) {\n      const d = decorations[i];\n      if (!d.options.isWholeLine) {\n        continue;\n      }\n      const decorationOutput = '<div class=\"cdr ' + d.options.className + '\" style=\"left:0;width:100%;height:' + lineHeight + 'px;\"></div>';\n      const startLineNumber = Math.max(d.range.startLineNumber, visibleStartLineNumber);\n      const endLineNumber = Math.min(d.range.endLineNumber, visibleEndLineNumber);\n      for (let j = startLineNumber; j <= endLineNumber; j++) {\n        const lineIndex = j - visibleStartLineNumber;\n        output[lineIndex] += decorationOutput;\n      }\n    }\n  }\n  _renderNormalDecorations(ctx, decorations, output) {\n    const lineHeight = String(this._lineHeight);\n    const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n    let prevClassName = null;\n    let prevShowIfCollapsed = false;\n    let prevRange = null;\n    for (let i = 0, lenI = decorations.length; i < lenI; i++) {\n      const d = decorations[i];\n      if (d.options.isWholeLine) {\n        continue;\n      }\n      const className = d.options.className;\n      const showIfCollapsed = Boolean(d.options.showIfCollapsed);\n      let range = d.range;\n      if (showIfCollapsed && range.endColumn === 1 && range.endLineNumber !== range.startLineNumber) {\n        range = new Range(range.startLineNumber, range.startColumn, range.endLineNumber - 1, this._context.model.getLineMaxColumn(range.endLineNumber - 1));\n      }\n      if (prevClassName === className && prevShowIfCollapsed === showIfCollapsed && Range.areIntersectingOrTouching(prevRange, range)) {\n        // merge into previous decoration\n        prevRange = Range.plusRange(prevRange, range);\n        continue;\n      }\n      // flush previous decoration\n      if (prevClassName !== null) {\n        this._renderNormalDecoration(ctx, prevRange, prevClassName, prevShowIfCollapsed, lineHeight, visibleStartLineNumber, output);\n      }\n      prevClassName = className;\n      prevShowIfCollapsed = showIfCollapsed;\n      prevRange = range;\n    }\n    if (prevClassName !== null) {\n      this._renderNormalDecoration(ctx, prevRange, prevClassName, prevShowIfCollapsed, lineHeight, visibleStartLineNumber, output);\n    }\n  }\n  _renderNormalDecoration(ctx, range, className, showIfCollapsed, lineHeight, visibleStartLineNumber, output) {\n    const linesVisibleRanges = ctx.linesVisibleRangesForRange(range, /*TODO@Alex*/className === 'findMatch');\n    if (!linesVisibleRanges) {\n      return;\n    }\n    for (let j = 0, lenJ = linesVisibleRanges.length; j < lenJ; j++) {\n      const lineVisibleRanges = linesVisibleRanges[j];\n      if (lineVisibleRanges.outsideRenderedLine) {\n        continue;\n      }\n      const lineIndex = lineVisibleRanges.lineNumber - visibleStartLineNumber;\n      if (showIfCollapsed && lineVisibleRanges.ranges.length === 1) {\n        const singleVisibleRange = lineVisibleRanges.ranges[0];\n        if (singleVisibleRange.width === 0) {\n          // collapsed range case => make the decoration visible by faking its width\n          lineVisibleRanges.ranges[0] = new HorizontalRange(singleVisibleRange.left, this._typicalHalfwidthCharacterWidth);\n        }\n      }\n      for (let k = 0, lenK = lineVisibleRanges.ranges.length; k < lenK; k++) {\n        const visibleRange = lineVisibleRanges.ranges[k];\n        const decorationOutput = '<div class=\"cdr ' + className + '\" style=\"left:' + String(visibleRange.left) + 'px;width:' + String(visibleRange.width) + 'px;height:' + lineHeight + 'px;\"></div>';\n        output[lineIndex] += decorationOutput;\n      }\n    }\n  }\n  render(startLineNumber, lineNumber) {\n    if (!this._renderResult) {\n      return '';\n    }\n    const lineIndex = lineNumber - startLineNumber;\n    if (lineIndex < 0 || lineIndex >= this._renderResult.length) {\n      return '';\n    }\n    return this._renderResult[lineIndex];\n  }\n}","map":{"version":3,"names":["DynamicViewOverlay","Range","HorizontalRange","DecorationsOverlay","constructor","context","_context","options","configuration","_lineHeight","get","_typicalHalfwidthCharacterWidth","typicalHalfwidthCharacterWidth","_renderResult","addEventHandler","dispose","removeEventHandler","onConfigurationChanged","e","onDecorationsChanged","onFlushed","onLinesChanged","onLinesDeleted","onLinesInserted","onScrollChanged","scrollTopChanged","scrollWidthChanged","onZonesChanged","prepareRender","ctx","_decorations","getDecorationsInViewport","decorations","decorationsLen","i","len","length","d","className","sort","a","b","zIndex","aClassName","bClassName","compareRangesUsingStarts","range","visibleStartLineNumber","visibleRange","startLineNumber","visibleEndLineNumber","endLineNumber","output","lineNumber","lineIndex","_renderWholeLineDecorations","_renderNormalDecorations","lineHeight","String","lenI","isWholeLine","decorationOutput","Math","max","min","j","prevClassName","prevShowIfCollapsed","prevRange","showIfCollapsed","Boolean","endColumn","startColumn","model","getLineMaxColumn","areIntersectingOrTouching","plusRange","_renderNormalDecoration","linesVisibleRanges","linesVisibleRangesForRange","lenJ","lineVisibleRanges","outsideRenderedLine","ranges","singleVisibleRange","width","left","k","lenK","render"],"sources":["C:/Users/Administrator/Desktop/sqllineage-master/sqllineagejs/node_modules/monaco-editor/esm/vs/editor/browser/viewParts/decorations/decorations.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport './decorations.css';\r\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\r\nimport { Range } from '../../../common/core/range.js';\r\nimport { HorizontalRange } from '../../../common/view/renderingContext.js';\r\nexport class DecorationsOverlay extends DynamicViewOverlay {\r\n    constructor(context) {\r\n        super();\r\n        this._context = context;\r\n        const options = this._context.configuration.options;\r\n        this._lineHeight = options.get(53 /* lineHeight */);\r\n        this._typicalHalfwidthCharacterWidth = options.get(38 /* fontInfo */).typicalHalfwidthCharacterWidth;\r\n        this._renderResult = null;\r\n        this._context.addEventHandler(this);\r\n    }\r\n    dispose() {\r\n        this._context.removeEventHandler(this);\r\n        this._renderResult = null;\r\n        super.dispose();\r\n    }\r\n    // --- begin event handlers\r\n    onConfigurationChanged(e) {\r\n        const options = this._context.configuration.options;\r\n        this._lineHeight = options.get(53 /* lineHeight */);\r\n        this._typicalHalfwidthCharacterWidth = options.get(38 /* fontInfo */).typicalHalfwidthCharacterWidth;\r\n        return true;\r\n    }\r\n    onDecorationsChanged(e) {\r\n        return true;\r\n    }\r\n    onFlushed(e) {\r\n        return true;\r\n    }\r\n    onLinesChanged(e) {\r\n        return true;\r\n    }\r\n    onLinesDeleted(e) {\r\n        return true;\r\n    }\r\n    onLinesInserted(e) {\r\n        return true;\r\n    }\r\n    onScrollChanged(e) {\r\n        return e.scrollTopChanged || e.scrollWidthChanged;\r\n    }\r\n    onZonesChanged(e) {\r\n        return true;\r\n    }\r\n    // --- end event handlers\r\n    prepareRender(ctx) {\r\n        const _decorations = ctx.getDecorationsInViewport();\r\n        // Keep only decorations with `className`\r\n        let decorations = [], decorationsLen = 0;\r\n        for (let i = 0, len = _decorations.length; i < len; i++) {\r\n            const d = _decorations[i];\r\n            if (d.options.className) {\r\n                decorations[decorationsLen++] = d;\r\n            }\r\n        }\r\n        // Sort decorations for consistent render output\r\n        decorations = decorations.sort((a, b) => {\r\n            if (a.options.zIndex < b.options.zIndex) {\r\n                return -1;\r\n            }\r\n            if (a.options.zIndex > b.options.zIndex) {\r\n                return 1;\r\n            }\r\n            const aClassName = a.options.className;\r\n            const bClassName = b.options.className;\r\n            if (aClassName < bClassName) {\r\n                return -1;\r\n            }\r\n            if (aClassName > bClassName) {\r\n                return 1;\r\n            }\r\n            return Range.compareRangesUsingStarts(a.range, b.range);\r\n        });\r\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\r\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\r\n        const output = [];\r\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\r\n            const lineIndex = lineNumber - visibleStartLineNumber;\r\n            output[lineIndex] = '';\r\n        }\r\n        // Render first whole line decorations and then regular decorations\r\n        this._renderWholeLineDecorations(ctx, decorations, output);\r\n        this._renderNormalDecorations(ctx, decorations, output);\r\n        this._renderResult = output;\r\n    }\r\n    _renderWholeLineDecorations(ctx, decorations, output) {\r\n        const lineHeight = String(this._lineHeight);\r\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\r\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\r\n        for (let i = 0, lenI = decorations.length; i < lenI; i++) {\r\n            const d = decorations[i];\r\n            if (!d.options.isWholeLine) {\r\n                continue;\r\n            }\r\n            const decorationOutput = ('<div class=\"cdr '\r\n                + d.options.className\r\n                + '\" style=\"left:0;width:100%;height:'\r\n                + lineHeight\r\n                + 'px;\"></div>');\r\n            const startLineNumber = Math.max(d.range.startLineNumber, visibleStartLineNumber);\r\n            const endLineNumber = Math.min(d.range.endLineNumber, visibleEndLineNumber);\r\n            for (let j = startLineNumber; j <= endLineNumber; j++) {\r\n                const lineIndex = j - visibleStartLineNumber;\r\n                output[lineIndex] += decorationOutput;\r\n            }\r\n        }\r\n    }\r\n    _renderNormalDecorations(ctx, decorations, output) {\r\n        const lineHeight = String(this._lineHeight);\r\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\r\n        let prevClassName = null;\r\n        let prevShowIfCollapsed = false;\r\n        let prevRange = null;\r\n        for (let i = 0, lenI = decorations.length; i < lenI; i++) {\r\n            const d = decorations[i];\r\n            if (d.options.isWholeLine) {\r\n                continue;\r\n            }\r\n            const className = d.options.className;\r\n            const showIfCollapsed = Boolean(d.options.showIfCollapsed);\r\n            let range = d.range;\r\n            if (showIfCollapsed && range.endColumn === 1 && range.endLineNumber !== range.startLineNumber) {\r\n                range = new Range(range.startLineNumber, range.startColumn, range.endLineNumber - 1, this._context.model.getLineMaxColumn(range.endLineNumber - 1));\r\n            }\r\n            if (prevClassName === className && prevShowIfCollapsed === showIfCollapsed && Range.areIntersectingOrTouching(prevRange, range)) {\r\n                // merge into previous decoration\r\n                prevRange = Range.plusRange(prevRange, range);\r\n                continue;\r\n            }\r\n            // flush previous decoration\r\n            if (prevClassName !== null) {\r\n                this._renderNormalDecoration(ctx, prevRange, prevClassName, prevShowIfCollapsed, lineHeight, visibleStartLineNumber, output);\r\n            }\r\n            prevClassName = className;\r\n            prevShowIfCollapsed = showIfCollapsed;\r\n            prevRange = range;\r\n        }\r\n        if (prevClassName !== null) {\r\n            this._renderNormalDecoration(ctx, prevRange, prevClassName, prevShowIfCollapsed, lineHeight, visibleStartLineNumber, output);\r\n        }\r\n    }\r\n    _renderNormalDecoration(ctx, range, className, showIfCollapsed, lineHeight, visibleStartLineNumber, output) {\r\n        const linesVisibleRanges = ctx.linesVisibleRangesForRange(range, /*TODO@Alex*/ className === 'findMatch');\r\n        if (!linesVisibleRanges) {\r\n            return;\r\n        }\r\n        for (let j = 0, lenJ = linesVisibleRanges.length; j < lenJ; j++) {\r\n            const lineVisibleRanges = linesVisibleRanges[j];\r\n            if (lineVisibleRanges.outsideRenderedLine) {\r\n                continue;\r\n            }\r\n            const lineIndex = lineVisibleRanges.lineNumber - visibleStartLineNumber;\r\n            if (showIfCollapsed && lineVisibleRanges.ranges.length === 1) {\r\n                const singleVisibleRange = lineVisibleRanges.ranges[0];\r\n                if (singleVisibleRange.width === 0) {\r\n                    // collapsed range case => make the decoration visible by faking its width\r\n                    lineVisibleRanges.ranges[0] = new HorizontalRange(singleVisibleRange.left, this._typicalHalfwidthCharacterWidth);\r\n                }\r\n            }\r\n            for (let k = 0, lenK = lineVisibleRanges.ranges.length; k < lenK; k++) {\r\n                const visibleRange = lineVisibleRanges.ranges[k];\r\n                const decorationOutput = ('<div class=\"cdr '\r\n                    + className\r\n                    + '\" style=\"left:'\r\n                    + String(visibleRange.left)\r\n                    + 'px;width:'\r\n                    + String(visibleRange.width)\r\n                    + 'px;height:'\r\n                    + lineHeight\r\n                    + 'px;\"></div>');\r\n                output[lineIndex] += decorationOutput;\r\n            }\r\n        }\r\n    }\r\n    render(startLineNumber, lineNumber) {\r\n        if (!this._renderResult) {\r\n            return '';\r\n        }\r\n        const lineIndex = lineNumber - startLineNumber;\r\n        if (lineIndex < 0 || lineIndex >= this._renderResult.length) {\r\n            return '';\r\n        }\r\n        return this._renderResult[lineIndex];\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}