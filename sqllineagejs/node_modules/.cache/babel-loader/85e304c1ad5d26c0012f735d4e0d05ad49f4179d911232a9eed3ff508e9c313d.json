{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../nls.js';\nimport { EditorAction, registerEditorAction } from '../../browser/editorExtensions.js';\nimport { ReplaceCommand } from '../../common/commands/replaceCommand.js';\nimport { Range } from '../../common/core/range.js';\nimport { EditorContextKeys } from '../../common/editorContextKeys.js';\nimport { MoveOperations } from '../../common/controller/cursorMoveOperations.js';\nclass TransposeLettersAction extends EditorAction {\n  constructor() {\n    super({\n      id: 'editor.action.transposeLetters',\n      label: nls.localize('transposeLetters.label', \"Transpose Letters\"),\n      alias: 'Transpose Letters',\n      precondition: EditorContextKeys.writable,\n      kbOpts: {\n        kbExpr: EditorContextKeys.textInputFocus,\n        primary: 0,\n        mac: {\n          primary: 256 /* WinCtrl */ | 50 /* KEY_T */\n        },\n\n        weight: 100 /* EditorContrib */\n      }\n    });\n  }\n\n  run(accessor, editor) {\n    if (!editor.hasModel()) {\n      return;\n    }\n    let model = editor.getModel();\n    let commands = [];\n    let selections = editor.getSelections();\n    for (let selection of selections) {\n      if (!selection.isEmpty()) {\n        continue;\n      }\n      let lineNumber = selection.startLineNumber;\n      let column = selection.startColumn;\n      let lastColumn = model.getLineMaxColumn(lineNumber);\n      if (lineNumber === 1 && (column === 1 || column === 2 && lastColumn === 2)) {\n        // at beginning of file, nothing to do\n        continue;\n      }\n      // handle special case: when at end of line, transpose left two chars\n      // otherwise, transpose left and right chars\n      let endPosition = column === lastColumn ? selection.getPosition() : MoveOperations.rightPosition(model, selection.getPosition().lineNumber, selection.getPosition().column);\n      let middlePosition = MoveOperations.leftPosition(model, endPosition.lineNumber, endPosition.column);\n      let beginPosition = MoveOperations.leftPosition(model, middlePosition.lineNumber, middlePosition.column);\n      let leftChar = model.getValueInRange(Range.fromPositions(beginPosition, middlePosition));\n      let rightChar = model.getValueInRange(Range.fromPositions(middlePosition, endPosition));\n      let replaceRange = Range.fromPositions(beginPosition, endPosition);\n      commands.push(new ReplaceCommand(replaceRange, rightChar + leftChar));\n    }\n    if (commands.length > 0) {\n      editor.pushUndoStop();\n      editor.executeCommands(this.id, commands);\n      editor.pushUndoStop();\n    }\n  }\n}\nregisterEditorAction(TransposeLettersAction);","map":{"version":3,"names":["nls","EditorAction","registerEditorAction","ReplaceCommand","Range","EditorContextKeys","MoveOperations","TransposeLettersAction","constructor","id","label","localize","alias","precondition","writable","kbOpts","kbExpr","textInputFocus","primary","mac","weight","run","accessor","editor","hasModel","model","getModel","commands","selections","getSelections","selection","isEmpty","lineNumber","startLineNumber","column","startColumn","lastColumn","getLineMaxColumn","endPosition","getPosition","rightPosition","middlePosition","leftPosition","beginPosition","leftChar","getValueInRange","fromPositions","rightChar","replaceRange","push","length","pushUndoStop","executeCommands"],"sources":["C:/Users/Administrator/Desktop/sqllineage-master/sqllineagejs/node_modules/monaco-editor/esm/vs/editor/contrib/caretOperations/transpose.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport * as nls from '../../../nls.js';\r\nimport { EditorAction, registerEditorAction } from '../../browser/editorExtensions.js';\r\nimport { ReplaceCommand } from '../../common/commands/replaceCommand.js';\r\nimport { Range } from '../../common/core/range.js';\r\nimport { EditorContextKeys } from '../../common/editorContextKeys.js';\r\nimport { MoveOperations } from '../../common/controller/cursorMoveOperations.js';\r\nclass TransposeLettersAction extends EditorAction {\r\n    constructor() {\r\n        super({\r\n            id: 'editor.action.transposeLetters',\r\n            label: nls.localize('transposeLetters.label', \"Transpose Letters\"),\r\n            alias: 'Transpose Letters',\r\n            precondition: EditorContextKeys.writable,\r\n            kbOpts: {\r\n                kbExpr: EditorContextKeys.textInputFocus,\r\n                primary: 0,\r\n                mac: {\r\n                    primary: 256 /* WinCtrl */ | 50 /* KEY_T */\r\n                },\r\n                weight: 100 /* EditorContrib */\r\n            }\r\n        });\r\n    }\r\n    run(accessor, editor) {\r\n        if (!editor.hasModel()) {\r\n            return;\r\n        }\r\n        let model = editor.getModel();\r\n        let commands = [];\r\n        let selections = editor.getSelections();\r\n        for (let selection of selections) {\r\n            if (!selection.isEmpty()) {\r\n                continue;\r\n            }\r\n            let lineNumber = selection.startLineNumber;\r\n            let column = selection.startColumn;\r\n            let lastColumn = model.getLineMaxColumn(lineNumber);\r\n            if (lineNumber === 1 && (column === 1 || (column === 2 && lastColumn === 2))) {\r\n                // at beginning of file, nothing to do\r\n                continue;\r\n            }\r\n            // handle special case: when at end of line, transpose left two chars\r\n            // otherwise, transpose left and right chars\r\n            let endPosition = (column === lastColumn) ?\r\n                selection.getPosition() :\r\n                MoveOperations.rightPosition(model, selection.getPosition().lineNumber, selection.getPosition().column);\r\n            let middlePosition = MoveOperations.leftPosition(model, endPosition.lineNumber, endPosition.column);\r\n            let beginPosition = MoveOperations.leftPosition(model, middlePosition.lineNumber, middlePosition.column);\r\n            let leftChar = model.getValueInRange(Range.fromPositions(beginPosition, middlePosition));\r\n            let rightChar = model.getValueInRange(Range.fromPositions(middlePosition, endPosition));\r\n            let replaceRange = Range.fromPositions(beginPosition, endPosition);\r\n            commands.push(new ReplaceCommand(replaceRange, rightChar + leftChar));\r\n        }\r\n        if (commands.length > 0) {\r\n            editor.pushUndoStop();\r\n            editor.executeCommands(this.id, commands);\r\n            editor.pushUndoStop();\r\n        }\r\n    }\r\n}\r\nregisterEditorAction(TransposeLettersAction);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}