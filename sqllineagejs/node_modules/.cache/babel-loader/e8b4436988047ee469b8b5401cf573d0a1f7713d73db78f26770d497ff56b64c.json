{"ast":null,"code":"import { Registry } from '../../registry/common/platform.js';\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\nimport { Extensions } from './configurationRegistry.js';\nexport const IConfigurationService = createDecorator('configurationService');\nexport function toValuesTree(properties, conflictReporter) {\n  const root = Object.create(null);\n  for (let key in properties) {\n    addToValueTree(root, key, properties[key], conflictReporter);\n  }\n  return root;\n}\nexport function addToValueTree(settingsTreeRoot, key, value, conflictReporter) {\n  const segments = key.split('.');\n  const last = segments.pop();\n  let curr = settingsTreeRoot;\n  for (let i = 0; i < segments.length; i++) {\n    let s = segments[i];\n    let obj = curr[s];\n    switch (typeof obj) {\n      case 'undefined':\n        obj = curr[s] = Object.create(null);\n        break;\n      case 'object':\n        break;\n      default:\n        conflictReporter(\"Ignoring \".concat(key, \" as \").concat(segments.slice(0, i + 1).join('.'), \" is \").concat(JSON.stringify(obj)));\n        return;\n    }\n    curr = obj;\n  }\n  if (typeof curr === 'object' && curr !== null) {\n    try {\n      curr[last] = value; // workaround https://github.com/microsoft/vscode/issues/13606\n    } catch (e) {\n      conflictReporter(\"Ignoring \".concat(key, \" as \").concat(segments.join('.'), \" is \").concat(JSON.stringify(curr)));\n    }\n  } else {\n    conflictReporter(\"Ignoring \".concat(key, \" as \").concat(segments.join('.'), \" is \").concat(JSON.stringify(curr)));\n  }\n}\nexport function removeFromValueTree(valueTree, key) {\n  const segments = key.split('.');\n  doRemoveFromValueTree(valueTree, segments);\n}\nfunction doRemoveFromValueTree(valueTree, segments) {\n  const first = segments.shift();\n  if (segments.length === 0) {\n    // Reached last segment\n    delete valueTree[first];\n    return;\n  }\n  if (Object.keys(valueTree).indexOf(first) !== -1) {\n    const value = valueTree[first];\n    if (typeof value === 'object' && !Array.isArray(value)) {\n      doRemoveFromValueTree(value, segments);\n      if (Object.keys(value).length === 0) {\n        delete valueTree[first];\n      }\n    }\n  }\n}\n/**\r\n * A helper function to get the configuration value with a specific settings path (e.g. config.some.setting)\r\n */\nexport function getConfigurationValue(config, settingPath, defaultValue) {\n  function accessSetting(config, path) {\n    let current = config;\n    for (const component of path) {\n      if (typeof current !== 'object' || current === null) {\n        return undefined;\n      }\n      current = current[component];\n    }\n    return current;\n  }\n  const path = settingPath.split('.');\n  const result = accessSetting(config, path);\n  return typeof result === 'undefined' ? defaultValue : result;\n}\nexport function getConfigurationKeys() {\n  const properties = Registry.as(Extensions.Configuration).getConfigurationProperties();\n  return Object.keys(properties);\n}\nexport function getDefaultValues() {\n  const valueTreeRoot = Object.create(null);\n  const properties = Registry.as(Extensions.Configuration).getConfigurationProperties();\n  for (let key in properties) {\n    let value = properties[key].default;\n    addToValueTree(valueTreeRoot, key, value, message => console.error(\"Conflict in default settings: \".concat(message)));\n  }\n  return valueTreeRoot;\n}","map":{"version":3,"names":["Registry","createDecorator","Extensions","IConfigurationService","toValuesTree","properties","conflictReporter","root","Object","create","key","addToValueTree","settingsTreeRoot","value","segments","split","last","pop","curr","i","length","s","obj","concat","slice","join","JSON","stringify","e","removeFromValueTree","valueTree","doRemoveFromValueTree","first","shift","keys","indexOf","Array","isArray","getConfigurationValue","config","settingPath","defaultValue","accessSetting","path","current","component","undefined","result","getConfigurationKeys","as","Configuration","getConfigurationProperties","getDefaultValues","valueTreeRoot","default","message","console","error"],"sources":["C:/Users/Administrator/Desktop/sqllineage-master/sqllineagejs/node_modules/monaco-editor/esm/vs/platform/configuration/common/configuration.js"],"sourcesContent":["import { Registry } from '../../registry/common/platform.js';\r\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\r\nimport { Extensions } from './configurationRegistry.js';\r\nexport const IConfigurationService = createDecorator('configurationService');\r\nexport function toValuesTree(properties, conflictReporter) {\r\n    const root = Object.create(null);\r\n    for (let key in properties) {\r\n        addToValueTree(root, key, properties[key], conflictReporter);\r\n    }\r\n    return root;\r\n}\r\nexport function addToValueTree(settingsTreeRoot, key, value, conflictReporter) {\r\n    const segments = key.split('.');\r\n    const last = segments.pop();\r\n    let curr = settingsTreeRoot;\r\n    for (let i = 0; i < segments.length; i++) {\r\n        let s = segments[i];\r\n        let obj = curr[s];\r\n        switch (typeof obj) {\r\n            case 'undefined':\r\n                obj = curr[s] = Object.create(null);\r\n                break;\r\n            case 'object':\r\n                break;\r\n            default:\r\n                conflictReporter(`Ignoring ${key} as ${segments.slice(0, i + 1).join('.')} is ${JSON.stringify(obj)}`);\r\n                return;\r\n        }\r\n        curr = obj;\r\n    }\r\n    if (typeof curr === 'object' && curr !== null) {\r\n        try {\r\n            curr[last] = value; // workaround https://github.com/microsoft/vscode/issues/13606\r\n        }\r\n        catch (e) {\r\n            conflictReporter(`Ignoring ${key} as ${segments.join('.')} is ${JSON.stringify(curr)}`);\r\n        }\r\n    }\r\n    else {\r\n        conflictReporter(`Ignoring ${key} as ${segments.join('.')} is ${JSON.stringify(curr)}`);\r\n    }\r\n}\r\nexport function removeFromValueTree(valueTree, key) {\r\n    const segments = key.split('.');\r\n    doRemoveFromValueTree(valueTree, segments);\r\n}\r\nfunction doRemoveFromValueTree(valueTree, segments) {\r\n    const first = segments.shift();\r\n    if (segments.length === 0) {\r\n        // Reached last segment\r\n        delete valueTree[first];\r\n        return;\r\n    }\r\n    if (Object.keys(valueTree).indexOf(first) !== -1) {\r\n        const value = valueTree[first];\r\n        if (typeof value === 'object' && !Array.isArray(value)) {\r\n            doRemoveFromValueTree(value, segments);\r\n            if (Object.keys(value).length === 0) {\r\n                delete valueTree[first];\r\n            }\r\n        }\r\n    }\r\n}\r\n/**\r\n * A helper function to get the configuration value with a specific settings path (e.g. config.some.setting)\r\n */\r\nexport function getConfigurationValue(config, settingPath, defaultValue) {\r\n    function accessSetting(config, path) {\r\n        let current = config;\r\n        for (const component of path) {\r\n            if (typeof current !== 'object' || current === null) {\r\n                return undefined;\r\n            }\r\n            current = current[component];\r\n        }\r\n        return current;\r\n    }\r\n    const path = settingPath.split('.');\r\n    const result = accessSetting(config, path);\r\n    return typeof result === 'undefined' ? defaultValue : result;\r\n}\r\nexport function getConfigurationKeys() {\r\n    const properties = Registry.as(Extensions.Configuration).getConfigurationProperties();\r\n    return Object.keys(properties);\r\n}\r\nexport function getDefaultValues() {\r\n    const valueTreeRoot = Object.create(null);\r\n    const properties = Registry.as(Extensions.Configuration).getConfigurationProperties();\r\n    for (let key in properties) {\r\n        let value = properties[key].default;\r\n        addToValueTree(valueTreeRoot, key, value, message => console.error(`Conflict in default settings: ${message}`));\r\n    }\r\n    return valueTreeRoot;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}