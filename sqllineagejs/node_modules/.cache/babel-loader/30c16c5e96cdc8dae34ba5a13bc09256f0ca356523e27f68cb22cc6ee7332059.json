{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\nimport * as dom from '../../../base/browser/dom.js';\nimport { DisposableStore } from '../../../base/common/lifecycle.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { AbstractCodeEditorService } from './abstractCodeEditorService.js';\nimport { isThemeColor } from '../../common/editorCommon.js';\nimport { OverviewRulerLane } from '../../common/model.js';\nimport { IThemeService } from '../../../platform/theme/common/themeService.js';\nexport class RefCountedStyleSheet {\n  constructor(parent, editorId, styleSheet) {\n    this._parent = parent;\n    this._editorId = editorId;\n    this._styleSheet = styleSheet;\n    this._refCount = 0;\n  }\n  ref() {\n    this._refCount++;\n  }\n  unref() {\n    var _a;\n    this._refCount--;\n    if (this._refCount === 0) {\n      (_a = this._styleSheet.parentNode) === null || _a === void 0 ? void 0 : _a.removeChild(this._styleSheet);\n      this._parent._removeEditorStyleSheets(this._editorId);\n    }\n  }\n  insertRule(rule, index) {\n    const sheet = this._styleSheet.sheet;\n    sheet.insertRule(rule, index);\n  }\n  removeRulesContainingSelector(ruleName) {\n    dom.removeCSSRulesContainingSelector(ruleName, this._styleSheet);\n  }\n}\nexport class GlobalStyleSheet {\n  constructor(styleSheet) {\n    this._styleSheet = styleSheet;\n  }\n  ref() {}\n  unref() {}\n  insertRule(rule, index) {\n    const sheet = this._styleSheet.sheet;\n    sheet.insertRule(rule, index);\n  }\n  removeRulesContainingSelector(ruleName) {\n    dom.removeCSSRulesContainingSelector(ruleName, this._styleSheet);\n  }\n}\nlet CodeEditorServiceImpl = class CodeEditorServiceImpl extends AbstractCodeEditorService {\n  constructor(themeService) {\n    let styleSheet = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    super();\n    this._decorationOptionProviders = new Map();\n    this._editorStyleSheets = new Map();\n    this._globalStyleSheet = styleSheet ? styleSheet : null;\n    this._themeService = themeService;\n  }\n  _getOrCreateGlobalStyleSheet() {\n    if (!this._globalStyleSheet) {\n      this._globalStyleSheet = new GlobalStyleSheet(dom.createStyleSheet());\n    }\n    return this._globalStyleSheet;\n  }\n  _getOrCreateStyleSheet(editor) {\n    if (!editor) {\n      return this._getOrCreateGlobalStyleSheet();\n    }\n    const domNode = editor.getContainerDomNode();\n    if (!dom.isInShadowDOM(domNode)) {\n      return this._getOrCreateGlobalStyleSheet();\n    }\n    const editorId = editor.getId();\n    if (!this._editorStyleSheets.has(editorId)) {\n      const refCountedStyleSheet = new RefCountedStyleSheet(this, editorId, dom.createStyleSheet(domNode));\n      this._editorStyleSheets.set(editorId, refCountedStyleSheet);\n    }\n    return this._editorStyleSheets.get(editorId);\n  }\n  _removeEditorStyleSheets(editorId) {\n    this._editorStyleSheets.delete(editorId);\n  }\n  registerDecorationType(key, options, parentTypeKey, editor) {\n    let provider = this._decorationOptionProviders.get(key);\n    if (!provider) {\n      const styleSheet = this._getOrCreateStyleSheet(editor);\n      const providerArgs = {\n        styleSheet: styleSheet,\n        key: key,\n        parentTypeKey: parentTypeKey,\n        options: options || Object.create(null)\n      };\n      if (!parentTypeKey) {\n        provider = new DecorationTypeOptionsProvider(this._themeService, styleSheet, providerArgs);\n      } else {\n        provider = new DecorationSubTypeOptionsProvider(this._themeService, styleSheet, providerArgs);\n      }\n      this._decorationOptionProviders.set(key, provider);\n      this._onDecorationTypeRegistered.fire(key);\n    }\n    provider.refCount++;\n  }\n  removeDecorationType(key) {\n    const provider = this._decorationOptionProviders.get(key);\n    if (provider) {\n      provider.refCount--;\n      if (provider.refCount <= 0) {\n        this._decorationOptionProviders.delete(key);\n        provider.dispose();\n        this.listCodeEditors().forEach(ed => ed.removeDecorations(key));\n      }\n    }\n  }\n  resolveDecorationOptions(decorationTypeKey, writable) {\n    const provider = this._decorationOptionProviders.get(decorationTypeKey);\n    if (!provider) {\n      throw new Error('Unknown decoration type key: ' + decorationTypeKey);\n    }\n    return provider.getOptions(this, writable);\n  }\n};\nCodeEditorServiceImpl = __decorate([__param(0, IThemeService)], CodeEditorServiceImpl);\nexport { CodeEditorServiceImpl };\nexport class DecorationSubTypeOptionsProvider {\n  constructor(themeService, styleSheet, providerArgs) {\n    this._styleSheet = styleSheet;\n    this._styleSheet.ref();\n    this._parentTypeKey = providerArgs.parentTypeKey;\n    this.refCount = 0;\n    this._beforeContentRules = new DecorationCSSRules(3 /* BeforeContentClassName */, providerArgs, themeService);\n    this._afterContentRules = new DecorationCSSRules(4 /* AfterContentClassName */, providerArgs, themeService);\n  }\n  getOptions(codeEditorService, writable) {\n    const options = codeEditorService.resolveDecorationOptions(this._parentTypeKey, true);\n    if (this._beforeContentRules) {\n      options.beforeContentClassName = this._beforeContentRules.className;\n    }\n    if (this._afterContentRules) {\n      options.afterContentClassName = this._afterContentRules.className;\n    }\n    return options;\n  }\n  dispose() {\n    if (this._beforeContentRules) {\n      this._beforeContentRules.dispose();\n      this._beforeContentRules = null;\n    }\n    if (this._afterContentRules) {\n      this._afterContentRules.dispose();\n      this._afterContentRules = null;\n    }\n    this._styleSheet.unref();\n  }\n}\nexport class DecorationTypeOptionsProvider {\n  constructor(themeService, styleSheet, providerArgs) {\n    this._disposables = new DisposableStore();\n    this._styleSheet = styleSheet;\n    this._styleSheet.ref();\n    this.refCount = 0;\n    const createCSSRules = type => {\n      const rules = new DecorationCSSRules(type, providerArgs, themeService);\n      this._disposables.add(rules);\n      if (rules.hasContent) {\n        return rules.className;\n      }\n      return undefined;\n    };\n    const createInlineCSSRules = type => {\n      const rules = new DecorationCSSRules(type, providerArgs, themeService);\n      this._disposables.add(rules);\n      if (rules.hasContent) {\n        return {\n          className: rules.className,\n          hasLetterSpacing: rules.hasLetterSpacing\n        };\n      }\n      return null;\n    };\n    this.className = createCSSRules(0 /* ClassName */);\n    const inlineData = createInlineCSSRules(1 /* InlineClassName */);\n    if (inlineData) {\n      this.inlineClassName = inlineData.className;\n      this.inlineClassNameAffectsLetterSpacing = inlineData.hasLetterSpacing;\n    }\n    this.beforeContentClassName = createCSSRules(3 /* BeforeContentClassName */);\n    this.afterContentClassName = createCSSRules(4 /* AfterContentClassName */);\n    this.glyphMarginClassName = createCSSRules(2 /* GlyphMarginClassName */);\n    const options = providerArgs.options;\n    this.isWholeLine = Boolean(options.isWholeLine);\n    this.stickiness = options.rangeBehavior;\n    const lightOverviewRulerColor = options.light && options.light.overviewRulerColor || options.overviewRulerColor;\n    const darkOverviewRulerColor = options.dark && options.dark.overviewRulerColor || options.overviewRulerColor;\n    if (typeof lightOverviewRulerColor !== 'undefined' || typeof darkOverviewRulerColor !== 'undefined') {\n      this.overviewRuler = {\n        color: lightOverviewRulerColor || darkOverviewRulerColor,\n        darkColor: darkOverviewRulerColor || lightOverviewRulerColor,\n        position: options.overviewRulerLane || OverviewRulerLane.Center\n      };\n    }\n  }\n  getOptions(codeEditorService, writable) {\n    if (!writable) {\n      return this;\n    }\n    return {\n      inlineClassName: this.inlineClassName,\n      beforeContentClassName: this.beforeContentClassName,\n      afterContentClassName: this.afterContentClassName,\n      className: this.className,\n      glyphMarginClassName: this.glyphMarginClassName,\n      isWholeLine: this.isWholeLine,\n      overviewRuler: this.overviewRuler,\n      stickiness: this.stickiness\n    };\n  }\n  dispose() {\n    this._disposables.dispose();\n    this._styleSheet.unref();\n  }\n}\nconst _CSS_MAP = {\n  color: 'color:{0} !important;',\n  opacity: 'opacity:{0};',\n  backgroundColor: 'background-color:{0};',\n  outline: 'outline:{0};',\n  outlineColor: 'outline-color:{0};',\n  outlineStyle: 'outline-style:{0};',\n  outlineWidth: 'outline-width:{0};',\n  border: 'border:{0};',\n  borderColor: 'border-color:{0};',\n  borderRadius: 'border-radius:{0};',\n  borderSpacing: 'border-spacing:{0};',\n  borderStyle: 'border-style:{0};',\n  borderWidth: 'border-width:{0};',\n  fontStyle: 'font-style:{0};',\n  fontWeight: 'font-weight:{0};',\n  fontSize: 'font-size:{0};',\n  fontFamily: 'font-family:{0};',\n  textDecoration: 'text-decoration:{0};',\n  cursor: 'cursor:{0};',\n  letterSpacing: 'letter-spacing:{0};',\n  gutterIconPath: 'background:{0} center center no-repeat;',\n  gutterIconSize: 'background-size:{0};',\n  contentText: 'content:\\'{0}\\';',\n  contentIconPath: 'content:{0};',\n  margin: 'margin:{0};',\n  padding: 'padding:{0};',\n  width: 'width:{0};',\n  height: 'height:{0};'\n};\nclass DecorationCSSRules {\n  constructor(ruleType, providerArgs, themeService) {\n    this._theme = themeService.getColorTheme();\n    this._ruleType = ruleType;\n    this._providerArgs = providerArgs;\n    this._usesThemeColors = false;\n    this._hasContent = false;\n    this._hasLetterSpacing = false;\n    let className = CSSNameHelper.getClassName(this._providerArgs.key, ruleType);\n    if (this._providerArgs.parentTypeKey) {\n      className = className + ' ' + CSSNameHelper.getClassName(this._providerArgs.parentTypeKey, ruleType);\n    }\n    this._className = className;\n    this._unThemedSelector = CSSNameHelper.getSelector(this._providerArgs.key, this._providerArgs.parentTypeKey, ruleType);\n    this._buildCSS();\n    if (this._usesThemeColors) {\n      this._themeListener = themeService.onDidColorThemeChange(theme => {\n        this._theme = themeService.getColorTheme();\n        this._removeCSS();\n        this._buildCSS();\n      });\n    } else {\n      this._themeListener = null;\n    }\n  }\n  dispose() {\n    if (this._hasContent) {\n      this._removeCSS();\n      this._hasContent = false;\n    }\n    if (this._themeListener) {\n      this._themeListener.dispose();\n      this._themeListener = null;\n    }\n  }\n  get hasContent() {\n    return this._hasContent;\n  }\n  get hasLetterSpacing() {\n    return this._hasLetterSpacing;\n  }\n  get className() {\n    return this._className;\n  }\n  _buildCSS() {\n    const options = this._providerArgs.options;\n    let unthemedCSS, lightCSS, darkCSS;\n    switch (this._ruleType) {\n      case 0 /* ClassName */:\n        unthemedCSS = this.getCSSTextForModelDecorationClassName(options);\n        lightCSS = this.getCSSTextForModelDecorationClassName(options.light);\n        darkCSS = this.getCSSTextForModelDecorationClassName(options.dark);\n        break;\n      case 1 /* InlineClassName */:\n        unthemedCSS = this.getCSSTextForModelDecorationInlineClassName(options);\n        lightCSS = this.getCSSTextForModelDecorationInlineClassName(options.light);\n        darkCSS = this.getCSSTextForModelDecorationInlineClassName(options.dark);\n        break;\n      case 2 /* GlyphMarginClassName */:\n        unthemedCSS = this.getCSSTextForModelDecorationGlyphMarginClassName(options);\n        lightCSS = this.getCSSTextForModelDecorationGlyphMarginClassName(options.light);\n        darkCSS = this.getCSSTextForModelDecorationGlyphMarginClassName(options.dark);\n        break;\n      case 3 /* BeforeContentClassName */:\n        unthemedCSS = this.getCSSTextForModelDecorationContentClassName(options.before);\n        lightCSS = this.getCSSTextForModelDecorationContentClassName(options.light && options.light.before);\n        darkCSS = this.getCSSTextForModelDecorationContentClassName(options.dark && options.dark.before);\n        break;\n      case 4 /* AfterContentClassName */:\n        unthemedCSS = this.getCSSTextForModelDecorationContentClassName(options.after);\n        lightCSS = this.getCSSTextForModelDecorationContentClassName(options.light && options.light.after);\n        darkCSS = this.getCSSTextForModelDecorationContentClassName(options.dark && options.dark.after);\n        break;\n      default:\n        throw new Error('Unknown rule type: ' + this._ruleType);\n    }\n    const sheet = this._providerArgs.styleSheet;\n    let hasContent = false;\n    if (unthemedCSS.length > 0) {\n      sheet.insertRule(\"\".concat(this._unThemedSelector, \" {\").concat(unthemedCSS, \"}\"), 0);\n      hasContent = true;\n    }\n    if (lightCSS.length > 0) {\n      sheet.insertRule(\".vs\".concat(this._unThemedSelector, \" {\").concat(lightCSS, \"}\"), 0);\n      hasContent = true;\n    }\n    if (darkCSS.length > 0) {\n      sheet.insertRule(\".vs-dark\".concat(this._unThemedSelector, \", .hc-black\").concat(this._unThemedSelector, \" {\").concat(darkCSS, \"}\"), 0);\n      hasContent = true;\n    }\n    this._hasContent = hasContent;\n  }\n  _removeCSS() {\n    this._providerArgs.styleSheet.removeRulesContainingSelector(this._unThemedSelector);\n  }\n  /**\r\n   * Build the CSS for decorations styled via `className`.\r\n   */\n  getCSSTextForModelDecorationClassName(opts) {\n    if (!opts) {\n      return '';\n    }\n    const cssTextArr = [];\n    this.collectCSSText(opts, ['backgroundColor'], cssTextArr);\n    this.collectCSSText(opts, ['outline', 'outlineColor', 'outlineStyle', 'outlineWidth'], cssTextArr);\n    this.collectBorderSettingsCSSText(opts, cssTextArr);\n    return cssTextArr.join('');\n  }\n  /**\r\n   * Build the CSS for decorations styled via `inlineClassName`.\r\n   */\n  getCSSTextForModelDecorationInlineClassName(opts) {\n    if (!opts) {\n      return '';\n    }\n    const cssTextArr = [];\n    this.collectCSSText(opts, ['fontStyle', 'fontWeight', 'textDecoration', 'cursor', 'color', 'opacity', 'letterSpacing'], cssTextArr);\n    if (opts.letterSpacing) {\n      this._hasLetterSpacing = true;\n    }\n    return cssTextArr.join('');\n  }\n  /**\r\n   * Build the CSS for decorations styled before or after content.\r\n   */\n  getCSSTextForModelDecorationContentClassName(opts) {\n    if (!opts) {\n      return '';\n    }\n    const cssTextArr = [];\n    if (typeof opts !== 'undefined') {\n      this.collectBorderSettingsCSSText(opts, cssTextArr);\n      if (typeof opts.contentIconPath !== 'undefined') {\n        cssTextArr.push(strings.format(_CSS_MAP.contentIconPath, dom.asCSSUrl(URI.revive(opts.contentIconPath))));\n      }\n      if (typeof opts.contentText === 'string') {\n        const truncated = opts.contentText.match(/^.*$/m)[0]; // only take first line\n        const escaped = truncated.replace(/['\\\\]/g, '\\\\$&');\n        cssTextArr.push(strings.format(_CSS_MAP.contentText, escaped));\n      }\n      this.collectCSSText(opts, ['fontStyle', 'fontWeight', 'fontSize', 'fontFamily', 'textDecoration', 'color', 'opacity', 'backgroundColor', 'margin', 'padding'], cssTextArr);\n      if (this.collectCSSText(opts, ['width', 'height'], cssTextArr)) {\n        cssTextArr.push('display:inline-block;');\n      }\n    }\n    return cssTextArr.join('');\n  }\n  /**\r\n   * Build the CSS for decorations styled via `glpyhMarginClassName`.\r\n   */\n  getCSSTextForModelDecorationGlyphMarginClassName(opts) {\n    if (!opts) {\n      return '';\n    }\n    const cssTextArr = [];\n    if (typeof opts.gutterIconPath !== 'undefined') {\n      cssTextArr.push(strings.format(_CSS_MAP.gutterIconPath, dom.asCSSUrl(URI.revive(opts.gutterIconPath))));\n      if (typeof opts.gutterIconSize !== 'undefined') {\n        cssTextArr.push(strings.format(_CSS_MAP.gutterIconSize, opts.gutterIconSize));\n      }\n    }\n    return cssTextArr.join('');\n  }\n  collectBorderSettingsCSSText(opts, cssTextArr) {\n    if (this.collectCSSText(opts, ['border', 'borderColor', 'borderRadius', 'borderSpacing', 'borderStyle', 'borderWidth'], cssTextArr)) {\n      cssTextArr.push(strings.format('box-sizing: border-box;'));\n      return true;\n    }\n    return false;\n  }\n  collectCSSText(opts, properties, cssTextArr) {\n    const lenBefore = cssTextArr.length;\n    for (let property of properties) {\n      const value = this.resolveValue(opts[property]);\n      if (typeof value === 'string') {\n        cssTextArr.push(strings.format(_CSS_MAP[property], value));\n      }\n    }\n    return cssTextArr.length !== lenBefore;\n  }\n  resolveValue(value) {\n    if (isThemeColor(value)) {\n      this._usesThemeColors = true;\n      const color = this._theme.getColor(value.id);\n      if (color) {\n        return color.toString();\n      }\n      return 'transparent';\n    }\n    return value;\n  }\n}\nclass CSSNameHelper {\n  static getClassName(key, type) {\n    return 'ced-' + key + '-' + type;\n  }\n  static getSelector(key, parentKey, ruleType) {\n    let selector = '.monaco-editor .' + this.getClassName(key, ruleType);\n    if (parentKey) {\n      selector = selector + '.' + this.getClassName(parentKey, ruleType);\n    }\n    if (ruleType === 3 /* BeforeContentClassName */) {\n      selector += '::before';\n    } else if (ruleType === 4 /* AfterContentClassName */) {\n      selector += '::after';\n    }\n    return selector;\n  }\n}","map":{"version":3,"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","dom","DisposableStore","strings","URI","AbstractCodeEditorService","isThemeColor","OverviewRulerLane","IThemeService","RefCountedStyleSheet","constructor","parent","editorId","styleSheet","_parent","_editorId","_styleSheet","_refCount","ref","unref","_a","parentNode","removeChild","_removeEditorStyleSheets","insertRule","rule","index","sheet","removeRulesContainingSelector","ruleName","removeCSSRulesContainingSelector","GlobalStyleSheet","CodeEditorServiceImpl","themeService","undefined","_decorationOptionProviders","Map","_editorStyleSheets","_globalStyleSheet","_themeService","_getOrCreateGlobalStyleSheet","createStyleSheet","_getOrCreateStyleSheet","editor","domNode","getContainerDomNode","isInShadowDOM","getId","has","refCountedStyleSheet","set","get","delete","registerDecorationType","options","parentTypeKey","provider","providerArgs","create","DecorationTypeOptionsProvider","DecorationSubTypeOptionsProvider","_onDecorationTypeRegistered","fire","refCount","removeDecorationType","dispose","listCodeEditors","forEach","ed","removeDecorations","resolveDecorationOptions","decorationTypeKey","writable","Error","getOptions","_parentTypeKey","_beforeContentRules","DecorationCSSRules","_afterContentRules","codeEditorService","beforeContentClassName","className","afterContentClassName","_disposables","createCSSRules","type","rules","add","hasContent","createInlineCSSRules","hasLetterSpacing","inlineData","inlineClassName","inlineClassNameAffectsLetterSpacing","glyphMarginClassName","isWholeLine","Boolean","stickiness","rangeBehavior","lightOverviewRulerColor","light","overviewRulerColor","darkOverviewRulerColor","dark","overviewRuler","color","darkColor","position","overviewRulerLane","Center","_CSS_MAP","opacity","backgroundColor","outline","outlineColor","outlineStyle","outlineWidth","border","borderColor","borderRadius","borderSpacing","borderStyle","borderWidth","fontStyle","fontWeight","fontSize","fontFamily","textDecoration","cursor","letterSpacing","gutterIconPath","gutterIconSize","contentText","contentIconPath","margin","padding","width","height","ruleType","_theme","getColorTheme","_ruleType","_providerArgs","_usesThemeColors","_hasContent","_hasLetterSpacing","CSSNameHelper","getClassName","_className","_unThemedSelector","getSelector","_buildCSS","_themeListener","onDidColorThemeChange","theme","_removeCSS","unthemedCSS","lightCSS","darkCSS","getCSSTextForModelDecorationClassName","getCSSTextForModelDecorationInlineClassName","getCSSTextForModelDecorationGlyphMarginClassName","getCSSTextForModelDecorationContentClassName","before","after","concat","opts","cssTextArr","collectCSSText","collectBorderSettingsCSSText","join","push","format","asCSSUrl","revive","truncated","match","escaped","replace","properties","lenBefore","property","value","resolveValue","getColor","id","toString","parentKey","selector"],"sources":["C:/Users/Administrator/Desktop/sqllineage-master/sqllineagejs/node_modules/monaco-editor/esm/vs/editor/browser/services/codeEditorServiceImpl.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n};\r\nimport * as dom from '../../../base/browser/dom.js';\r\nimport { DisposableStore } from '../../../base/common/lifecycle.js';\r\nimport * as strings from '../../../base/common/strings.js';\r\nimport { URI } from '../../../base/common/uri.js';\r\nimport { AbstractCodeEditorService } from './abstractCodeEditorService.js';\r\nimport { isThemeColor } from '../../common/editorCommon.js';\r\nimport { OverviewRulerLane } from '../../common/model.js';\r\nimport { IThemeService } from '../../../platform/theme/common/themeService.js';\r\nexport class RefCountedStyleSheet {\r\n    constructor(parent, editorId, styleSheet) {\r\n        this._parent = parent;\r\n        this._editorId = editorId;\r\n        this._styleSheet = styleSheet;\r\n        this._refCount = 0;\r\n    }\r\n    ref() {\r\n        this._refCount++;\r\n    }\r\n    unref() {\r\n        var _a;\r\n        this._refCount--;\r\n        if (this._refCount === 0) {\r\n            (_a = this._styleSheet.parentNode) === null || _a === void 0 ? void 0 : _a.removeChild(this._styleSheet);\r\n            this._parent._removeEditorStyleSheets(this._editorId);\r\n        }\r\n    }\r\n    insertRule(rule, index) {\r\n        const sheet = this._styleSheet.sheet;\r\n        sheet.insertRule(rule, index);\r\n    }\r\n    removeRulesContainingSelector(ruleName) {\r\n        dom.removeCSSRulesContainingSelector(ruleName, this._styleSheet);\r\n    }\r\n}\r\nexport class GlobalStyleSheet {\r\n    constructor(styleSheet) {\r\n        this._styleSheet = styleSheet;\r\n    }\r\n    ref() {\r\n    }\r\n    unref() {\r\n    }\r\n    insertRule(rule, index) {\r\n        const sheet = this._styleSheet.sheet;\r\n        sheet.insertRule(rule, index);\r\n    }\r\n    removeRulesContainingSelector(ruleName) {\r\n        dom.removeCSSRulesContainingSelector(ruleName, this._styleSheet);\r\n    }\r\n}\r\nlet CodeEditorServiceImpl = class CodeEditorServiceImpl extends AbstractCodeEditorService {\r\n    constructor(themeService, styleSheet = null) {\r\n        super();\r\n        this._decorationOptionProviders = new Map();\r\n        this._editorStyleSheets = new Map();\r\n        this._globalStyleSheet = styleSheet ? styleSheet : null;\r\n        this._themeService = themeService;\r\n    }\r\n    _getOrCreateGlobalStyleSheet() {\r\n        if (!this._globalStyleSheet) {\r\n            this._globalStyleSheet = new GlobalStyleSheet(dom.createStyleSheet());\r\n        }\r\n        return this._globalStyleSheet;\r\n    }\r\n    _getOrCreateStyleSheet(editor) {\r\n        if (!editor) {\r\n            return this._getOrCreateGlobalStyleSheet();\r\n        }\r\n        const domNode = editor.getContainerDomNode();\r\n        if (!dom.isInShadowDOM(domNode)) {\r\n            return this._getOrCreateGlobalStyleSheet();\r\n        }\r\n        const editorId = editor.getId();\r\n        if (!this._editorStyleSheets.has(editorId)) {\r\n            const refCountedStyleSheet = new RefCountedStyleSheet(this, editorId, dom.createStyleSheet(domNode));\r\n            this._editorStyleSheets.set(editorId, refCountedStyleSheet);\r\n        }\r\n        return this._editorStyleSheets.get(editorId);\r\n    }\r\n    _removeEditorStyleSheets(editorId) {\r\n        this._editorStyleSheets.delete(editorId);\r\n    }\r\n    registerDecorationType(key, options, parentTypeKey, editor) {\r\n        let provider = this._decorationOptionProviders.get(key);\r\n        if (!provider) {\r\n            const styleSheet = this._getOrCreateStyleSheet(editor);\r\n            const providerArgs = {\r\n                styleSheet: styleSheet,\r\n                key: key,\r\n                parentTypeKey: parentTypeKey,\r\n                options: options || Object.create(null)\r\n            };\r\n            if (!parentTypeKey) {\r\n                provider = new DecorationTypeOptionsProvider(this._themeService, styleSheet, providerArgs);\r\n            }\r\n            else {\r\n                provider = new DecorationSubTypeOptionsProvider(this._themeService, styleSheet, providerArgs);\r\n            }\r\n            this._decorationOptionProviders.set(key, provider);\r\n            this._onDecorationTypeRegistered.fire(key);\r\n        }\r\n        provider.refCount++;\r\n    }\r\n    removeDecorationType(key) {\r\n        const provider = this._decorationOptionProviders.get(key);\r\n        if (provider) {\r\n            provider.refCount--;\r\n            if (provider.refCount <= 0) {\r\n                this._decorationOptionProviders.delete(key);\r\n                provider.dispose();\r\n                this.listCodeEditors().forEach((ed) => ed.removeDecorations(key));\r\n            }\r\n        }\r\n    }\r\n    resolveDecorationOptions(decorationTypeKey, writable) {\r\n        const provider = this._decorationOptionProviders.get(decorationTypeKey);\r\n        if (!provider) {\r\n            throw new Error('Unknown decoration type key: ' + decorationTypeKey);\r\n        }\r\n        return provider.getOptions(this, writable);\r\n    }\r\n};\r\nCodeEditorServiceImpl = __decorate([\r\n    __param(0, IThemeService)\r\n], CodeEditorServiceImpl);\r\nexport { CodeEditorServiceImpl };\r\nexport class DecorationSubTypeOptionsProvider {\r\n    constructor(themeService, styleSheet, providerArgs) {\r\n        this._styleSheet = styleSheet;\r\n        this._styleSheet.ref();\r\n        this._parentTypeKey = providerArgs.parentTypeKey;\r\n        this.refCount = 0;\r\n        this._beforeContentRules = new DecorationCSSRules(3 /* BeforeContentClassName */, providerArgs, themeService);\r\n        this._afterContentRules = new DecorationCSSRules(4 /* AfterContentClassName */, providerArgs, themeService);\r\n    }\r\n    getOptions(codeEditorService, writable) {\r\n        const options = codeEditorService.resolveDecorationOptions(this._parentTypeKey, true);\r\n        if (this._beforeContentRules) {\r\n            options.beforeContentClassName = this._beforeContentRules.className;\r\n        }\r\n        if (this._afterContentRules) {\r\n            options.afterContentClassName = this._afterContentRules.className;\r\n        }\r\n        return options;\r\n    }\r\n    dispose() {\r\n        if (this._beforeContentRules) {\r\n            this._beforeContentRules.dispose();\r\n            this._beforeContentRules = null;\r\n        }\r\n        if (this._afterContentRules) {\r\n            this._afterContentRules.dispose();\r\n            this._afterContentRules = null;\r\n        }\r\n        this._styleSheet.unref();\r\n    }\r\n}\r\nexport class DecorationTypeOptionsProvider {\r\n    constructor(themeService, styleSheet, providerArgs) {\r\n        this._disposables = new DisposableStore();\r\n        this._styleSheet = styleSheet;\r\n        this._styleSheet.ref();\r\n        this.refCount = 0;\r\n        const createCSSRules = (type) => {\r\n            const rules = new DecorationCSSRules(type, providerArgs, themeService);\r\n            this._disposables.add(rules);\r\n            if (rules.hasContent) {\r\n                return rules.className;\r\n            }\r\n            return undefined;\r\n        };\r\n        const createInlineCSSRules = (type) => {\r\n            const rules = new DecorationCSSRules(type, providerArgs, themeService);\r\n            this._disposables.add(rules);\r\n            if (rules.hasContent) {\r\n                return { className: rules.className, hasLetterSpacing: rules.hasLetterSpacing };\r\n            }\r\n            return null;\r\n        };\r\n        this.className = createCSSRules(0 /* ClassName */);\r\n        const inlineData = createInlineCSSRules(1 /* InlineClassName */);\r\n        if (inlineData) {\r\n            this.inlineClassName = inlineData.className;\r\n            this.inlineClassNameAffectsLetterSpacing = inlineData.hasLetterSpacing;\r\n        }\r\n        this.beforeContentClassName = createCSSRules(3 /* BeforeContentClassName */);\r\n        this.afterContentClassName = createCSSRules(4 /* AfterContentClassName */);\r\n        this.glyphMarginClassName = createCSSRules(2 /* GlyphMarginClassName */);\r\n        const options = providerArgs.options;\r\n        this.isWholeLine = Boolean(options.isWholeLine);\r\n        this.stickiness = options.rangeBehavior;\r\n        const lightOverviewRulerColor = options.light && options.light.overviewRulerColor || options.overviewRulerColor;\r\n        const darkOverviewRulerColor = options.dark && options.dark.overviewRulerColor || options.overviewRulerColor;\r\n        if (typeof lightOverviewRulerColor !== 'undefined'\r\n            || typeof darkOverviewRulerColor !== 'undefined') {\r\n            this.overviewRuler = {\r\n                color: lightOverviewRulerColor || darkOverviewRulerColor,\r\n                darkColor: darkOverviewRulerColor || lightOverviewRulerColor,\r\n                position: options.overviewRulerLane || OverviewRulerLane.Center\r\n            };\r\n        }\r\n    }\r\n    getOptions(codeEditorService, writable) {\r\n        if (!writable) {\r\n            return this;\r\n        }\r\n        return {\r\n            inlineClassName: this.inlineClassName,\r\n            beforeContentClassName: this.beforeContentClassName,\r\n            afterContentClassName: this.afterContentClassName,\r\n            className: this.className,\r\n            glyphMarginClassName: this.glyphMarginClassName,\r\n            isWholeLine: this.isWholeLine,\r\n            overviewRuler: this.overviewRuler,\r\n            stickiness: this.stickiness\r\n        };\r\n    }\r\n    dispose() {\r\n        this._disposables.dispose();\r\n        this._styleSheet.unref();\r\n    }\r\n}\r\nconst _CSS_MAP = {\r\n    color: 'color:{0} !important;',\r\n    opacity: 'opacity:{0};',\r\n    backgroundColor: 'background-color:{0};',\r\n    outline: 'outline:{0};',\r\n    outlineColor: 'outline-color:{0};',\r\n    outlineStyle: 'outline-style:{0};',\r\n    outlineWidth: 'outline-width:{0};',\r\n    border: 'border:{0};',\r\n    borderColor: 'border-color:{0};',\r\n    borderRadius: 'border-radius:{0};',\r\n    borderSpacing: 'border-spacing:{0};',\r\n    borderStyle: 'border-style:{0};',\r\n    borderWidth: 'border-width:{0};',\r\n    fontStyle: 'font-style:{0};',\r\n    fontWeight: 'font-weight:{0};',\r\n    fontSize: 'font-size:{0};',\r\n    fontFamily: 'font-family:{0};',\r\n    textDecoration: 'text-decoration:{0};',\r\n    cursor: 'cursor:{0};',\r\n    letterSpacing: 'letter-spacing:{0};',\r\n    gutterIconPath: 'background:{0} center center no-repeat;',\r\n    gutterIconSize: 'background-size:{0};',\r\n    contentText: 'content:\\'{0}\\';',\r\n    contentIconPath: 'content:{0};',\r\n    margin: 'margin:{0};',\r\n    padding: 'padding:{0};',\r\n    width: 'width:{0};',\r\n    height: 'height:{0};'\r\n};\r\nclass DecorationCSSRules {\r\n    constructor(ruleType, providerArgs, themeService) {\r\n        this._theme = themeService.getColorTheme();\r\n        this._ruleType = ruleType;\r\n        this._providerArgs = providerArgs;\r\n        this._usesThemeColors = false;\r\n        this._hasContent = false;\r\n        this._hasLetterSpacing = false;\r\n        let className = CSSNameHelper.getClassName(this._providerArgs.key, ruleType);\r\n        if (this._providerArgs.parentTypeKey) {\r\n            className = className + ' ' + CSSNameHelper.getClassName(this._providerArgs.parentTypeKey, ruleType);\r\n        }\r\n        this._className = className;\r\n        this._unThemedSelector = CSSNameHelper.getSelector(this._providerArgs.key, this._providerArgs.parentTypeKey, ruleType);\r\n        this._buildCSS();\r\n        if (this._usesThemeColors) {\r\n            this._themeListener = themeService.onDidColorThemeChange(theme => {\r\n                this._theme = themeService.getColorTheme();\r\n                this._removeCSS();\r\n                this._buildCSS();\r\n            });\r\n        }\r\n        else {\r\n            this._themeListener = null;\r\n        }\r\n    }\r\n    dispose() {\r\n        if (this._hasContent) {\r\n            this._removeCSS();\r\n            this._hasContent = false;\r\n        }\r\n        if (this._themeListener) {\r\n            this._themeListener.dispose();\r\n            this._themeListener = null;\r\n        }\r\n    }\r\n    get hasContent() {\r\n        return this._hasContent;\r\n    }\r\n    get hasLetterSpacing() {\r\n        return this._hasLetterSpacing;\r\n    }\r\n    get className() {\r\n        return this._className;\r\n    }\r\n    _buildCSS() {\r\n        const options = this._providerArgs.options;\r\n        let unthemedCSS, lightCSS, darkCSS;\r\n        switch (this._ruleType) {\r\n            case 0 /* ClassName */:\r\n                unthemedCSS = this.getCSSTextForModelDecorationClassName(options);\r\n                lightCSS = this.getCSSTextForModelDecorationClassName(options.light);\r\n                darkCSS = this.getCSSTextForModelDecorationClassName(options.dark);\r\n                break;\r\n            case 1 /* InlineClassName */:\r\n                unthemedCSS = this.getCSSTextForModelDecorationInlineClassName(options);\r\n                lightCSS = this.getCSSTextForModelDecorationInlineClassName(options.light);\r\n                darkCSS = this.getCSSTextForModelDecorationInlineClassName(options.dark);\r\n                break;\r\n            case 2 /* GlyphMarginClassName */:\r\n                unthemedCSS = this.getCSSTextForModelDecorationGlyphMarginClassName(options);\r\n                lightCSS = this.getCSSTextForModelDecorationGlyphMarginClassName(options.light);\r\n                darkCSS = this.getCSSTextForModelDecorationGlyphMarginClassName(options.dark);\r\n                break;\r\n            case 3 /* BeforeContentClassName */:\r\n                unthemedCSS = this.getCSSTextForModelDecorationContentClassName(options.before);\r\n                lightCSS = this.getCSSTextForModelDecorationContentClassName(options.light && options.light.before);\r\n                darkCSS = this.getCSSTextForModelDecorationContentClassName(options.dark && options.dark.before);\r\n                break;\r\n            case 4 /* AfterContentClassName */:\r\n                unthemedCSS = this.getCSSTextForModelDecorationContentClassName(options.after);\r\n                lightCSS = this.getCSSTextForModelDecorationContentClassName(options.light && options.light.after);\r\n                darkCSS = this.getCSSTextForModelDecorationContentClassName(options.dark && options.dark.after);\r\n                break;\r\n            default:\r\n                throw new Error('Unknown rule type: ' + this._ruleType);\r\n        }\r\n        const sheet = this._providerArgs.styleSheet;\r\n        let hasContent = false;\r\n        if (unthemedCSS.length > 0) {\r\n            sheet.insertRule(`${this._unThemedSelector} {${unthemedCSS}}`, 0);\r\n            hasContent = true;\r\n        }\r\n        if (lightCSS.length > 0) {\r\n            sheet.insertRule(`.vs${this._unThemedSelector} {${lightCSS}}`, 0);\r\n            hasContent = true;\r\n        }\r\n        if (darkCSS.length > 0) {\r\n            sheet.insertRule(`.vs-dark${this._unThemedSelector}, .hc-black${this._unThemedSelector} {${darkCSS}}`, 0);\r\n            hasContent = true;\r\n        }\r\n        this._hasContent = hasContent;\r\n    }\r\n    _removeCSS() {\r\n        this._providerArgs.styleSheet.removeRulesContainingSelector(this._unThemedSelector);\r\n    }\r\n    /**\r\n     * Build the CSS for decorations styled via `className`.\r\n     */\r\n    getCSSTextForModelDecorationClassName(opts) {\r\n        if (!opts) {\r\n            return '';\r\n        }\r\n        const cssTextArr = [];\r\n        this.collectCSSText(opts, ['backgroundColor'], cssTextArr);\r\n        this.collectCSSText(opts, ['outline', 'outlineColor', 'outlineStyle', 'outlineWidth'], cssTextArr);\r\n        this.collectBorderSettingsCSSText(opts, cssTextArr);\r\n        return cssTextArr.join('');\r\n    }\r\n    /**\r\n     * Build the CSS for decorations styled via `inlineClassName`.\r\n     */\r\n    getCSSTextForModelDecorationInlineClassName(opts) {\r\n        if (!opts) {\r\n            return '';\r\n        }\r\n        const cssTextArr = [];\r\n        this.collectCSSText(opts, ['fontStyle', 'fontWeight', 'textDecoration', 'cursor', 'color', 'opacity', 'letterSpacing'], cssTextArr);\r\n        if (opts.letterSpacing) {\r\n            this._hasLetterSpacing = true;\r\n        }\r\n        return cssTextArr.join('');\r\n    }\r\n    /**\r\n     * Build the CSS for decorations styled before or after content.\r\n     */\r\n    getCSSTextForModelDecorationContentClassName(opts) {\r\n        if (!opts) {\r\n            return '';\r\n        }\r\n        const cssTextArr = [];\r\n        if (typeof opts !== 'undefined') {\r\n            this.collectBorderSettingsCSSText(opts, cssTextArr);\r\n            if (typeof opts.contentIconPath !== 'undefined') {\r\n                cssTextArr.push(strings.format(_CSS_MAP.contentIconPath, dom.asCSSUrl(URI.revive(opts.contentIconPath))));\r\n            }\r\n            if (typeof opts.contentText === 'string') {\r\n                const truncated = opts.contentText.match(/^.*$/m)[0]; // only take first line\r\n                const escaped = truncated.replace(/['\\\\]/g, '\\\\$&');\r\n                cssTextArr.push(strings.format(_CSS_MAP.contentText, escaped));\r\n            }\r\n            this.collectCSSText(opts, ['fontStyle', 'fontWeight', 'fontSize', 'fontFamily', 'textDecoration', 'color', 'opacity', 'backgroundColor', 'margin', 'padding'], cssTextArr);\r\n            if (this.collectCSSText(opts, ['width', 'height'], cssTextArr)) {\r\n                cssTextArr.push('display:inline-block;');\r\n            }\r\n        }\r\n        return cssTextArr.join('');\r\n    }\r\n    /**\r\n     * Build the CSS for decorations styled via `glpyhMarginClassName`.\r\n     */\r\n    getCSSTextForModelDecorationGlyphMarginClassName(opts) {\r\n        if (!opts) {\r\n            return '';\r\n        }\r\n        const cssTextArr = [];\r\n        if (typeof opts.gutterIconPath !== 'undefined') {\r\n            cssTextArr.push(strings.format(_CSS_MAP.gutterIconPath, dom.asCSSUrl(URI.revive(opts.gutterIconPath))));\r\n            if (typeof opts.gutterIconSize !== 'undefined') {\r\n                cssTextArr.push(strings.format(_CSS_MAP.gutterIconSize, opts.gutterIconSize));\r\n            }\r\n        }\r\n        return cssTextArr.join('');\r\n    }\r\n    collectBorderSettingsCSSText(opts, cssTextArr) {\r\n        if (this.collectCSSText(opts, ['border', 'borderColor', 'borderRadius', 'borderSpacing', 'borderStyle', 'borderWidth'], cssTextArr)) {\r\n            cssTextArr.push(strings.format('box-sizing: border-box;'));\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    collectCSSText(opts, properties, cssTextArr) {\r\n        const lenBefore = cssTextArr.length;\r\n        for (let property of properties) {\r\n            const value = this.resolveValue(opts[property]);\r\n            if (typeof value === 'string') {\r\n                cssTextArr.push(strings.format(_CSS_MAP[property], value));\r\n            }\r\n        }\r\n        return cssTextArr.length !== lenBefore;\r\n    }\r\n    resolveValue(value) {\r\n        if (isThemeColor(value)) {\r\n            this._usesThemeColors = true;\r\n            const color = this._theme.getColor(value.id);\r\n            if (color) {\r\n                return color.toString();\r\n            }\r\n            return 'transparent';\r\n        }\r\n        return value;\r\n    }\r\n}\r\nclass CSSNameHelper {\r\n    static getClassName(key, type) {\r\n        return 'ced-' + key + '-' + type;\r\n    }\r\n    static getSelector(key, parentKey, ruleType) {\r\n        let selector = '.monaco-editor .' + this.getClassName(key, ruleType);\r\n        if (parentKey) {\r\n            selector = selector + '.' + this.getClassName(parentKey, ruleType);\r\n        }\r\n        if (ruleType === 3 /* BeforeContentClassName */) {\r\n            selector += '::before';\r\n        }\r\n        else if (ruleType === 4 /* AfterContentClassName */) {\r\n            selector += '::after';\r\n        }\r\n        return selector;\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}