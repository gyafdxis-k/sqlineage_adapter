{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { StandardAutoClosingPairConditional } from '../languageConfiguration.js';\nexport class CharacterPairSupport {\n  constructor(config) {\n    if (config.autoClosingPairs) {\n      this._autoClosingPairs = config.autoClosingPairs.map(el => new StandardAutoClosingPairConditional(el));\n    } else if (config.brackets) {\n      this._autoClosingPairs = config.brackets.map(b => new StandardAutoClosingPairConditional({\n        open: b[0],\n        close: b[1]\n      }));\n    } else {\n      this._autoClosingPairs = [];\n    }\n    if (config.__electricCharacterSupport && config.__electricCharacterSupport.docComment) {\n      const docComment = config.__electricCharacterSupport.docComment;\n      // IDocComment is legacy, only partially supported\n      this._autoClosingPairs.push(new StandardAutoClosingPairConditional({\n        open: docComment.open,\n        close: docComment.close || ''\n      }));\n    }\n    this._autoCloseBefore = typeof config.autoCloseBefore === 'string' ? config.autoCloseBefore : CharacterPairSupport.DEFAULT_AUTOCLOSE_BEFORE_LANGUAGE_DEFINED;\n    this._surroundingPairs = config.surroundingPairs || this._autoClosingPairs;\n  }\n  getAutoClosingPairs() {\n    return this._autoClosingPairs;\n  }\n  getAutoCloseBeforeSet() {\n    return this._autoCloseBefore;\n  }\n  static shouldAutoClosePair(autoClosingPair, context, column) {\n    // Always complete on empty line\n    if (context.getTokenCount() === 0) {\n      return true;\n    }\n    const tokenIndex = context.findTokenIndexAtOffset(column - 2);\n    const standardTokenType = context.getStandardTokenType(tokenIndex);\n    return autoClosingPair.isOK(standardTokenType);\n  }\n  getSurroundingPairs() {\n    return this._surroundingPairs;\n  }\n}\nCharacterPairSupport.DEFAULT_AUTOCLOSE_BEFORE_LANGUAGE_DEFINED = ';:.,=}])> \\n\\t';","map":{"version":3,"names":["StandardAutoClosingPairConditional","CharacterPairSupport","constructor","config","autoClosingPairs","_autoClosingPairs","map","el","brackets","b","open","close","__electricCharacterSupport","docComment","push","_autoCloseBefore","autoCloseBefore","DEFAULT_AUTOCLOSE_BEFORE_LANGUAGE_DEFINED","_surroundingPairs","surroundingPairs","getAutoClosingPairs","getAutoCloseBeforeSet","shouldAutoClosePair","autoClosingPair","context","column","getTokenCount","tokenIndex","findTokenIndexAtOffset","standardTokenType","getStandardTokenType","isOK","getSurroundingPairs"],"sources":["C:/Users/Administrator/Desktop/sqllineage-master/sqllineagejs/node_modules/monaco-editor/esm/vs/editor/common/modes/supports/characterPair.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { StandardAutoClosingPairConditional } from '../languageConfiguration.js';\r\nexport class CharacterPairSupport {\r\n    constructor(config) {\r\n        if (config.autoClosingPairs) {\r\n            this._autoClosingPairs = config.autoClosingPairs.map(el => new StandardAutoClosingPairConditional(el));\r\n        }\r\n        else if (config.brackets) {\r\n            this._autoClosingPairs = config.brackets.map(b => new StandardAutoClosingPairConditional({ open: b[0], close: b[1] }));\r\n        }\r\n        else {\r\n            this._autoClosingPairs = [];\r\n        }\r\n        if (config.__electricCharacterSupport && config.__electricCharacterSupport.docComment) {\r\n            const docComment = config.__electricCharacterSupport.docComment;\r\n            // IDocComment is legacy, only partially supported\r\n            this._autoClosingPairs.push(new StandardAutoClosingPairConditional({ open: docComment.open, close: docComment.close || '' }));\r\n        }\r\n        this._autoCloseBefore = typeof config.autoCloseBefore === 'string' ? config.autoCloseBefore : CharacterPairSupport.DEFAULT_AUTOCLOSE_BEFORE_LANGUAGE_DEFINED;\r\n        this._surroundingPairs = config.surroundingPairs || this._autoClosingPairs;\r\n    }\r\n    getAutoClosingPairs() {\r\n        return this._autoClosingPairs;\r\n    }\r\n    getAutoCloseBeforeSet() {\r\n        return this._autoCloseBefore;\r\n    }\r\n    static shouldAutoClosePair(autoClosingPair, context, column) {\r\n        // Always complete on empty line\r\n        if (context.getTokenCount() === 0) {\r\n            return true;\r\n        }\r\n        const tokenIndex = context.findTokenIndexAtOffset(column - 2);\r\n        const standardTokenType = context.getStandardTokenType(tokenIndex);\r\n        return autoClosingPair.isOK(standardTokenType);\r\n    }\r\n    getSurroundingPairs() {\r\n        return this._surroundingPairs;\r\n    }\r\n}\r\nCharacterPairSupport.DEFAULT_AUTOCLOSE_BEFORE_LANGUAGE_DEFINED = ';:.,=}])> \\n\\t';\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,kCAAkC,QAAQ,6BAA6B;AAChF,OAAO,MAAMC,oBAAoB,CAAC;EAC9BC,WAAWA,CAACC,MAAM,EAAE;IAChB,IAAIA,MAAM,CAACC,gBAAgB,EAAE;MACzB,IAAI,CAACC,iBAAiB,GAAGF,MAAM,CAACC,gBAAgB,CAACE,GAAG,CAACC,EAAE,IAAI,IAAIP,kCAAkC,CAACO,EAAE,CAAC,CAAC;IAC1G,CAAC,MACI,IAAIJ,MAAM,CAACK,QAAQ,EAAE;MACtB,IAAI,CAACH,iBAAiB,GAAGF,MAAM,CAACK,QAAQ,CAACF,GAAG,CAACG,CAAC,IAAI,IAAIT,kCAAkC,CAAC;QAAEU,IAAI,EAAED,CAAC,CAAC,CAAC,CAAC;QAAEE,KAAK,EAAEF,CAAC,CAAC,CAAC;MAAE,CAAC,CAAC,CAAC;IAC1H,CAAC,MACI;MACD,IAAI,CAACJ,iBAAiB,GAAG,EAAE;IAC/B;IACA,IAAIF,MAAM,CAACS,0BAA0B,IAAIT,MAAM,CAACS,0BAA0B,CAACC,UAAU,EAAE;MACnF,MAAMA,UAAU,GAAGV,MAAM,CAACS,0BAA0B,CAACC,UAAU;MAC/D;MACA,IAAI,CAACR,iBAAiB,CAACS,IAAI,CAAC,IAAId,kCAAkC,CAAC;QAAEU,IAAI,EAAEG,UAAU,CAACH,IAAI;QAAEC,KAAK,EAAEE,UAAU,CAACF,KAAK,IAAI;MAAG,CAAC,CAAC,CAAC;IACjI;IACA,IAAI,CAACI,gBAAgB,GAAG,OAAOZ,MAAM,CAACa,eAAe,KAAK,QAAQ,GAAGb,MAAM,CAACa,eAAe,GAAGf,oBAAoB,CAACgB,yCAAyC;IAC5J,IAAI,CAACC,iBAAiB,GAAGf,MAAM,CAACgB,gBAAgB,IAAI,IAAI,CAACd,iBAAiB;EAC9E;EACAe,mBAAmBA,CAAA,EAAG;IAClB,OAAO,IAAI,CAACf,iBAAiB;EACjC;EACAgB,qBAAqBA,CAAA,EAAG;IACpB,OAAO,IAAI,CAACN,gBAAgB;EAChC;EACA,OAAOO,mBAAmBA,CAACC,eAAe,EAAEC,OAAO,EAAEC,MAAM,EAAE;IACzD;IACA,IAAID,OAAO,CAACE,aAAa,CAAC,CAAC,KAAK,CAAC,EAAE;MAC/B,OAAO,IAAI;IACf;IACA,MAAMC,UAAU,GAAGH,OAAO,CAACI,sBAAsB,CAACH,MAAM,GAAG,CAAC,CAAC;IAC7D,MAAMI,iBAAiB,GAAGL,OAAO,CAACM,oBAAoB,CAACH,UAAU,CAAC;IAClE,OAAOJ,eAAe,CAACQ,IAAI,CAACF,iBAAiB,CAAC;EAClD;EACAG,mBAAmBA,CAAA,EAAG;IAClB,OAAO,IAAI,CAACd,iBAAiB;EACjC;AACJ;AACAjB,oBAAoB,CAACgB,yCAAyC,GAAG,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}