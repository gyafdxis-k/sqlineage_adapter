{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { localize } from '../../../nls.js';\nimport { PickerQuickAccessProvider } from './pickerQuickAccess.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { or, matchesPrefix, matchesWords, matchesContiguousSubString } from '../../../base/common/filters.js';\nimport { withNullAsUndefined } from '../../../base/common/types.js';\nimport { LRUCache } from '../../../base/common/map.js';\nimport { IStorageService } from '../../storage/common/storage.js';\nimport { IConfigurationService } from '../../configuration/common/configuration.js';\nimport { IInstantiationService } from '../../instantiation/common/instantiation.js';\nimport { IKeybindingService } from '../../keybinding/common/keybinding.js';\nimport { ICommandService } from '../../commands/common/commands.js';\nimport { ITelemetryService } from '../../telemetry/common/telemetry.js';\nimport { isPromiseCanceledError } from '../../../base/common/errors.js';\nimport { INotificationService } from '../../notification/common/notification.js';\nimport { toErrorMessage } from '../../../base/common/errorMessage.js';\nlet AbstractCommandsQuickAccessProvider = class AbstractCommandsQuickAccessProvider extends PickerQuickAccessProvider {\n  constructor(options, instantiationService, keybindingService, commandService, telemetryService, notificationService) {\n    super(AbstractCommandsQuickAccessProvider.PREFIX, options);\n    this.options = options;\n    this.instantiationService = instantiationService;\n    this.keybindingService = keybindingService;\n    this.commandService = commandService;\n    this.telemetryService = telemetryService;\n    this.notificationService = notificationService;\n    this.commandsHistory = this._register(this.instantiationService.createInstance(CommandsHistory));\n  }\n  getPicks(filter, disposables, token) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // Ask subclass for all command picks\n      const allCommandPicks = yield this.getCommandPicks(disposables, token);\n      if (token.isCancellationRequested) {\n        return [];\n      }\n      // Filter\n      const filteredCommandPicks = [];\n      for (const commandPick of allCommandPicks) {\n        const labelHighlights = withNullAsUndefined(AbstractCommandsQuickAccessProvider.WORD_FILTER(filter, commandPick.label));\n        const aliasHighlights = commandPick.commandAlias ? withNullAsUndefined(AbstractCommandsQuickAccessProvider.WORD_FILTER(filter, commandPick.commandAlias)) : undefined;\n        // Add if matching in label or alias\n        if (labelHighlights || aliasHighlights) {\n          commandPick.highlights = {\n            label: labelHighlights,\n            detail: this.options.showAlias ? aliasHighlights : undefined\n          };\n          filteredCommandPicks.push(commandPick);\n        }\n        // Also add if we have a 100% command ID match\n        else if (filter === commandPick.commandId) {\n          filteredCommandPicks.push(commandPick);\n        }\n      }\n      // Add description to commands that have duplicate labels\n      const mapLabelToCommand = new Map();\n      for (const commandPick of filteredCommandPicks) {\n        const existingCommandForLabel = mapLabelToCommand.get(commandPick.label);\n        if (existingCommandForLabel) {\n          commandPick.description = commandPick.commandId;\n          existingCommandForLabel.description = existingCommandForLabel.commandId;\n        } else {\n          mapLabelToCommand.set(commandPick.label, commandPick);\n        }\n      }\n      // Sort by MRU order and fallback to name otherwise\n      filteredCommandPicks.sort((commandPickA, commandPickB) => {\n        const commandACounter = this.commandsHistory.peek(commandPickA.commandId);\n        const commandBCounter = this.commandsHistory.peek(commandPickB.commandId);\n        if (commandACounter && commandBCounter) {\n          return commandACounter > commandBCounter ? -1 : 1; // use more recently used command before older\n        }\n\n        if (commandACounter) {\n          return -1; // first command was used, so it wins over the non used one\n        }\n\n        if (commandBCounter) {\n          return 1; // other command was used so it wins over the command\n        }\n        // both commands were never used, so we sort by name\n        return commandPickA.label.localeCompare(commandPickB.label);\n      });\n      const commandPicks = [];\n      let addSeparator = false;\n      for (let i = 0; i < filteredCommandPicks.length; i++) {\n        const commandPick = filteredCommandPicks[i];\n        const keybinding = this.keybindingService.lookupKeybinding(commandPick.commandId);\n        const ariaLabel = keybinding ? localize('commandPickAriaLabelWithKeybinding', \"{0}, {1}\", commandPick.label, keybinding.getAriaLabel()) : commandPick.label;\n        // Separator: recently used\n        if (i === 0 && this.commandsHistory.peek(commandPick.commandId)) {\n          commandPicks.push({\n            type: 'separator',\n            label: localize('recentlyUsed', \"recently used\")\n          });\n          addSeparator = true;\n        }\n        // Separator: other commands\n        if (i !== 0 && addSeparator && !this.commandsHistory.peek(commandPick.commandId)) {\n          commandPicks.push({\n            type: 'separator',\n            label: localize('morecCommands', \"other commands\")\n          });\n          addSeparator = false; // only once\n        }\n        // Command\n        commandPicks.push(Object.assign(Object.assign({}, commandPick), {\n          ariaLabel,\n          detail: this.options.showAlias && commandPick.commandAlias !== commandPick.label ? commandPick.commandAlias : undefined,\n          keybinding,\n          accept: () => __awaiter(this, void 0, void 0, function* () {\n            // Add to history\n            this.commandsHistory.push(commandPick.commandId);\n            // Telementry\n            this.telemetryService.publicLog2('workbenchActionExecuted', {\n              id: commandPick.commandId,\n              from: 'quick open'\n            });\n            // Run\n            try {\n              yield this.commandService.executeCommand(commandPick.commandId);\n            } catch (error) {\n              if (!isPromiseCanceledError(error)) {\n                this.notificationService.error(localize('canNotRun', \"Command '{0}' resulted in an error ({1})\", commandPick.label, toErrorMessage(error)));\n              }\n            }\n          })\n        }));\n      }\n      return commandPicks;\n    });\n  }\n};\nAbstractCommandsQuickAccessProvider.PREFIX = '>';\nAbstractCommandsQuickAccessProvider.WORD_FILTER = or(matchesPrefix, matchesWords, matchesContiguousSubString);\nAbstractCommandsQuickAccessProvider = __decorate([__param(1, IInstantiationService), __param(2, IKeybindingService), __param(3, ICommandService), __param(4, ITelemetryService), __param(5, INotificationService)], AbstractCommandsQuickAccessProvider);\nexport { AbstractCommandsQuickAccessProvider };\nlet CommandsHistory = class CommandsHistory extends Disposable {\n  constructor(storageService, configurationService) {\n    super();\n    this.storageService = storageService;\n    this.configurationService = configurationService;\n    this.configuredCommandsHistoryLength = 0;\n    this.updateConfiguration();\n    this.load();\n    this.registerListeners();\n  }\n  registerListeners() {\n    this._register(this.configurationService.onDidChangeConfiguration(() => this.updateConfiguration()));\n  }\n  updateConfiguration() {\n    this.configuredCommandsHistoryLength = CommandsHistory.getConfiguredCommandHistoryLength(this.configurationService);\n    if (CommandsHistory.cache && CommandsHistory.cache.limit !== this.configuredCommandsHistoryLength) {\n      CommandsHistory.cache.limit = this.configuredCommandsHistoryLength;\n      CommandsHistory.saveState(this.storageService);\n    }\n  }\n  load() {\n    const raw = this.storageService.get(CommandsHistory.PREF_KEY_CACHE, 0 /* GLOBAL */);\n    let serializedCache;\n    if (raw) {\n      try {\n        serializedCache = JSON.parse(raw);\n      } catch (error) {\n        // invalid data\n      }\n    }\n    const cache = CommandsHistory.cache = new LRUCache(this.configuredCommandsHistoryLength, 1);\n    if (serializedCache) {\n      let entries;\n      if (serializedCache.usesLRU) {\n        entries = serializedCache.entries;\n      } else {\n        entries = serializedCache.entries.sort((a, b) => a.value - b.value);\n      }\n      entries.forEach(entry => cache.set(entry.key, entry.value));\n    }\n    CommandsHistory.counter = this.storageService.getNumber(CommandsHistory.PREF_KEY_COUNTER, 0 /* GLOBAL */, CommandsHistory.counter);\n  }\n  push(commandId) {\n    if (!CommandsHistory.cache) {\n      return;\n    }\n    CommandsHistory.cache.set(commandId, CommandsHistory.counter++); // set counter to command\n    CommandsHistory.saveState(this.storageService);\n  }\n  peek(commandId) {\n    var _a;\n    return (_a = CommandsHistory.cache) === null || _a === void 0 ? void 0 : _a.peek(commandId);\n  }\n  static saveState(storageService) {\n    if (!CommandsHistory.cache) {\n      return;\n    }\n    const serializedCache = {\n      usesLRU: true,\n      entries: []\n    };\n    CommandsHistory.cache.forEach((value, key) => serializedCache.entries.push({\n      key,\n      value\n    }));\n    storageService.store(CommandsHistory.PREF_KEY_CACHE, JSON.stringify(serializedCache), 0 /* GLOBAL */, 0 /* USER */);\n    storageService.store(CommandsHistory.PREF_KEY_COUNTER, CommandsHistory.counter, 0 /* GLOBAL */, 0 /* USER */);\n  }\n\n  static getConfiguredCommandHistoryLength(configurationService) {\n    var _a, _b;\n    const config = configurationService.getValue();\n    const configuredCommandHistoryLength = (_b = (_a = config.workbench) === null || _a === void 0 ? void 0 : _a.commandPalette) === null || _b === void 0 ? void 0 : _b.history;\n    if (typeof configuredCommandHistoryLength === 'number') {\n      return configuredCommandHistoryLength;\n    }\n    return CommandsHistory.DEFAULT_COMMANDS_HISTORY_LENGTH;\n  }\n};\nCommandsHistory.DEFAULT_COMMANDS_HISTORY_LENGTH = 50;\nCommandsHistory.PREF_KEY_CACHE = 'commandPalette.mru.cache';\nCommandsHistory.PREF_KEY_COUNTER = 'commandPalette.mru.counter';\nCommandsHistory.counter = 1;\nCommandsHistory = __decorate([__param(0, IStorageService), __param(1, IConfigurationService)], CommandsHistory);\nexport { CommandsHistory };","map":{"version":3,"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","localize","PickerQuickAccessProvider","Disposable","or","matchesPrefix","matchesWords","matchesContiguousSubString","withNullAsUndefined","LRUCache","IStorageService","IConfigurationService","IInstantiationService","IKeybindingService","ICommandService","ITelemetryService","isPromiseCanceledError","INotificationService","toErrorMessage","AbstractCommandsQuickAccessProvider","constructor","options","instantiationService","keybindingService","commandService","telemetryService","notificationService","PREFIX","commandsHistory","_register","createInstance","CommandsHistory","getPicks","filter","disposables","token","allCommandPicks","getCommandPicks","isCancellationRequested","filteredCommandPicks","commandPick","labelHighlights","WORD_FILTER","label","aliasHighlights","commandAlias","undefined","highlights","detail","showAlias","push","commandId","mapLabelToCommand","Map","existingCommandForLabel","get","description","set","sort","commandPickA","commandPickB","commandACounter","peek","commandBCounter","localeCompare","commandPicks","addSeparator","keybinding","lookupKeybinding","ariaLabel","getAriaLabel","type","assign","accept","publicLog2","id","from","executeCommand","error","storageService","configurationService","configuredCommandsHistoryLength","updateConfiguration","load","registerListeners","onDidChangeConfiguration","getConfiguredCommandHistoryLength","cache","limit","saveState","raw","PREF_KEY_CACHE","serializedCache","JSON","parse","entries","usesLRU","a","b","forEach","entry","counter","getNumber","PREF_KEY_COUNTER","_a","store","stringify","_b","config","getValue","configuredCommandHistoryLength","workbench","commandPalette","history","DEFAULT_COMMANDS_HISTORY_LENGTH"],"sources":["C:/Users/Administrator/Desktop/sqllineage-master/sqllineagejs/node_modules/monaco-editor/esm/vs/platform/quickinput/browser/commandsQuickAccess.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n};\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nimport { localize } from '../../../nls.js';\r\nimport { PickerQuickAccessProvider } from './pickerQuickAccess.js';\r\nimport { Disposable } from '../../../base/common/lifecycle.js';\r\nimport { or, matchesPrefix, matchesWords, matchesContiguousSubString } from '../../../base/common/filters.js';\r\nimport { withNullAsUndefined } from '../../../base/common/types.js';\r\nimport { LRUCache } from '../../../base/common/map.js';\r\nimport { IStorageService } from '../../storage/common/storage.js';\r\nimport { IConfigurationService } from '../../configuration/common/configuration.js';\r\nimport { IInstantiationService } from '../../instantiation/common/instantiation.js';\r\nimport { IKeybindingService } from '../../keybinding/common/keybinding.js';\r\nimport { ICommandService } from '../../commands/common/commands.js';\r\nimport { ITelemetryService } from '../../telemetry/common/telemetry.js';\r\nimport { isPromiseCanceledError } from '../../../base/common/errors.js';\r\nimport { INotificationService } from '../../notification/common/notification.js';\r\nimport { toErrorMessage } from '../../../base/common/errorMessage.js';\r\nlet AbstractCommandsQuickAccessProvider = class AbstractCommandsQuickAccessProvider extends PickerQuickAccessProvider {\r\n    constructor(options, instantiationService, keybindingService, commandService, telemetryService, notificationService) {\r\n        super(AbstractCommandsQuickAccessProvider.PREFIX, options);\r\n        this.options = options;\r\n        this.instantiationService = instantiationService;\r\n        this.keybindingService = keybindingService;\r\n        this.commandService = commandService;\r\n        this.telemetryService = telemetryService;\r\n        this.notificationService = notificationService;\r\n        this.commandsHistory = this._register(this.instantiationService.createInstance(CommandsHistory));\r\n    }\r\n    getPicks(filter, disposables, token) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            // Ask subclass for all command picks\r\n            const allCommandPicks = yield this.getCommandPicks(disposables, token);\r\n            if (token.isCancellationRequested) {\r\n                return [];\r\n            }\r\n            // Filter\r\n            const filteredCommandPicks = [];\r\n            for (const commandPick of allCommandPicks) {\r\n                const labelHighlights = withNullAsUndefined(AbstractCommandsQuickAccessProvider.WORD_FILTER(filter, commandPick.label));\r\n                const aliasHighlights = commandPick.commandAlias ? withNullAsUndefined(AbstractCommandsQuickAccessProvider.WORD_FILTER(filter, commandPick.commandAlias)) : undefined;\r\n                // Add if matching in label or alias\r\n                if (labelHighlights || aliasHighlights) {\r\n                    commandPick.highlights = {\r\n                        label: labelHighlights,\r\n                        detail: this.options.showAlias ? aliasHighlights : undefined\r\n                    };\r\n                    filteredCommandPicks.push(commandPick);\r\n                }\r\n                // Also add if we have a 100% command ID match\r\n                else if (filter === commandPick.commandId) {\r\n                    filteredCommandPicks.push(commandPick);\r\n                }\r\n            }\r\n            // Add description to commands that have duplicate labels\r\n            const mapLabelToCommand = new Map();\r\n            for (const commandPick of filteredCommandPicks) {\r\n                const existingCommandForLabel = mapLabelToCommand.get(commandPick.label);\r\n                if (existingCommandForLabel) {\r\n                    commandPick.description = commandPick.commandId;\r\n                    existingCommandForLabel.description = existingCommandForLabel.commandId;\r\n                }\r\n                else {\r\n                    mapLabelToCommand.set(commandPick.label, commandPick);\r\n                }\r\n            }\r\n            // Sort by MRU order and fallback to name otherwise\r\n            filteredCommandPicks.sort((commandPickA, commandPickB) => {\r\n                const commandACounter = this.commandsHistory.peek(commandPickA.commandId);\r\n                const commandBCounter = this.commandsHistory.peek(commandPickB.commandId);\r\n                if (commandACounter && commandBCounter) {\r\n                    return commandACounter > commandBCounter ? -1 : 1; // use more recently used command before older\r\n                }\r\n                if (commandACounter) {\r\n                    return -1; // first command was used, so it wins over the non used one\r\n                }\r\n                if (commandBCounter) {\r\n                    return 1; // other command was used so it wins over the command\r\n                }\r\n                // both commands were never used, so we sort by name\r\n                return commandPickA.label.localeCompare(commandPickB.label);\r\n            });\r\n            const commandPicks = [];\r\n            let addSeparator = false;\r\n            for (let i = 0; i < filteredCommandPicks.length; i++) {\r\n                const commandPick = filteredCommandPicks[i];\r\n                const keybinding = this.keybindingService.lookupKeybinding(commandPick.commandId);\r\n                const ariaLabel = keybinding ?\r\n                    localize('commandPickAriaLabelWithKeybinding', \"{0}, {1}\", commandPick.label, keybinding.getAriaLabel()) :\r\n                    commandPick.label;\r\n                // Separator: recently used\r\n                if (i === 0 && this.commandsHistory.peek(commandPick.commandId)) {\r\n                    commandPicks.push({ type: 'separator', label: localize('recentlyUsed', \"recently used\") });\r\n                    addSeparator = true;\r\n                }\r\n                // Separator: other commands\r\n                if (i !== 0 && addSeparator && !this.commandsHistory.peek(commandPick.commandId)) {\r\n                    commandPicks.push({ type: 'separator', label: localize('morecCommands', \"other commands\") });\r\n                    addSeparator = false; // only once\r\n                }\r\n                // Command\r\n                commandPicks.push(Object.assign(Object.assign({}, commandPick), { ariaLabel, detail: this.options.showAlias && commandPick.commandAlias !== commandPick.label ? commandPick.commandAlias : undefined, keybinding, accept: () => __awaiter(this, void 0, void 0, function* () {\r\n                        // Add to history\r\n                        this.commandsHistory.push(commandPick.commandId);\r\n                        // Telementry\r\n                        this.telemetryService.publicLog2('workbenchActionExecuted', {\r\n                            id: commandPick.commandId,\r\n                            from: 'quick open'\r\n                        });\r\n                        // Run\r\n                        try {\r\n                            yield this.commandService.executeCommand(commandPick.commandId);\r\n                        }\r\n                        catch (error) {\r\n                            if (!isPromiseCanceledError(error)) {\r\n                                this.notificationService.error(localize('canNotRun', \"Command '{0}' resulted in an error ({1})\", commandPick.label, toErrorMessage(error)));\r\n                            }\r\n                        }\r\n                    }) }));\r\n            }\r\n            return commandPicks;\r\n        });\r\n    }\r\n};\r\nAbstractCommandsQuickAccessProvider.PREFIX = '>';\r\nAbstractCommandsQuickAccessProvider.WORD_FILTER = or(matchesPrefix, matchesWords, matchesContiguousSubString);\r\nAbstractCommandsQuickAccessProvider = __decorate([\r\n    __param(1, IInstantiationService),\r\n    __param(2, IKeybindingService),\r\n    __param(3, ICommandService),\r\n    __param(4, ITelemetryService),\r\n    __param(5, INotificationService)\r\n], AbstractCommandsQuickAccessProvider);\r\nexport { AbstractCommandsQuickAccessProvider };\r\nlet CommandsHistory = class CommandsHistory extends Disposable {\r\n    constructor(storageService, configurationService) {\r\n        super();\r\n        this.storageService = storageService;\r\n        this.configurationService = configurationService;\r\n        this.configuredCommandsHistoryLength = 0;\r\n        this.updateConfiguration();\r\n        this.load();\r\n        this.registerListeners();\r\n    }\r\n    registerListeners() {\r\n        this._register(this.configurationService.onDidChangeConfiguration(() => this.updateConfiguration()));\r\n    }\r\n    updateConfiguration() {\r\n        this.configuredCommandsHistoryLength = CommandsHistory.getConfiguredCommandHistoryLength(this.configurationService);\r\n        if (CommandsHistory.cache && CommandsHistory.cache.limit !== this.configuredCommandsHistoryLength) {\r\n            CommandsHistory.cache.limit = this.configuredCommandsHistoryLength;\r\n            CommandsHistory.saveState(this.storageService);\r\n        }\r\n    }\r\n    load() {\r\n        const raw = this.storageService.get(CommandsHistory.PREF_KEY_CACHE, 0 /* GLOBAL */);\r\n        let serializedCache;\r\n        if (raw) {\r\n            try {\r\n                serializedCache = JSON.parse(raw);\r\n            }\r\n            catch (error) {\r\n                // invalid data\r\n            }\r\n        }\r\n        const cache = CommandsHistory.cache = new LRUCache(this.configuredCommandsHistoryLength, 1);\r\n        if (serializedCache) {\r\n            let entries;\r\n            if (serializedCache.usesLRU) {\r\n                entries = serializedCache.entries;\r\n            }\r\n            else {\r\n                entries = serializedCache.entries.sort((a, b) => a.value - b.value);\r\n            }\r\n            entries.forEach(entry => cache.set(entry.key, entry.value));\r\n        }\r\n        CommandsHistory.counter = this.storageService.getNumber(CommandsHistory.PREF_KEY_COUNTER, 0 /* GLOBAL */, CommandsHistory.counter);\r\n    }\r\n    push(commandId) {\r\n        if (!CommandsHistory.cache) {\r\n            return;\r\n        }\r\n        CommandsHistory.cache.set(commandId, CommandsHistory.counter++); // set counter to command\r\n        CommandsHistory.saveState(this.storageService);\r\n    }\r\n    peek(commandId) {\r\n        var _a;\r\n        return (_a = CommandsHistory.cache) === null || _a === void 0 ? void 0 : _a.peek(commandId);\r\n    }\r\n    static saveState(storageService) {\r\n        if (!CommandsHistory.cache) {\r\n            return;\r\n        }\r\n        const serializedCache = { usesLRU: true, entries: [] };\r\n        CommandsHistory.cache.forEach((value, key) => serializedCache.entries.push({ key, value }));\r\n        storageService.store(CommandsHistory.PREF_KEY_CACHE, JSON.stringify(serializedCache), 0 /* GLOBAL */, 0 /* USER */);\r\n        storageService.store(CommandsHistory.PREF_KEY_COUNTER, CommandsHistory.counter, 0 /* GLOBAL */, 0 /* USER */);\r\n    }\r\n    static getConfiguredCommandHistoryLength(configurationService) {\r\n        var _a, _b;\r\n        const config = configurationService.getValue();\r\n        const configuredCommandHistoryLength = (_b = (_a = config.workbench) === null || _a === void 0 ? void 0 : _a.commandPalette) === null || _b === void 0 ? void 0 : _b.history;\r\n        if (typeof configuredCommandHistoryLength === 'number') {\r\n            return configuredCommandHistoryLength;\r\n        }\r\n        return CommandsHistory.DEFAULT_COMMANDS_HISTORY_LENGTH;\r\n    }\r\n};\r\nCommandsHistory.DEFAULT_COMMANDS_HISTORY_LENGTH = 50;\r\nCommandsHistory.PREF_KEY_CACHE = 'commandPalette.mru.cache';\r\nCommandsHistory.PREF_KEY_COUNTER = 'commandPalette.mru.counter';\r\nCommandsHistory.counter = 1;\r\nCommandsHistory = __decorate([\r\n    __param(0, IStorageService),\r\n    __param(1, IConfigurationService)\r\n], CommandsHistory);\r\nexport { CommandsHistory };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}