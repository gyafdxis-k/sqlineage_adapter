{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../nls.js';\nimport { URI } from '../../base/common/uri.js';\nimport { ICodeEditorService } from './services/codeEditorService.js';\nimport { Position } from '../common/core/position.js';\nimport { IModelService } from '../common/services/modelService.js';\nimport { ITextModelService } from '../common/services/resolverService.js';\nimport { MenuId, MenuRegistry } from '../../platform/actions/common/actions.js';\nimport { CommandsRegistry } from '../../platform/commands/common/commands.js';\nimport { ContextKeyExpr, IContextKeyService } from '../../platform/contextkey/common/contextkey.js';\nimport { KeybindingsRegistry } from '../../platform/keybinding/common/keybindingsRegistry.js';\nimport { Registry } from '../../platform/registry/common/platform.js';\nimport { ITelemetryService } from '../../platform/telemetry/common/telemetry.js';\nimport { withNullAsUndefined, assertType } from '../../base/common/types.js';\nexport class Command {\n  constructor(opts) {\n    this.id = opts.id;\n    this.precondition = opts.precondition;\n    this._kbOpts = opts.kbOpts;\n    this._menuOpts = opts.menuOpts;\n    this._description = opts.description;\n  }\n  register() {\n    if (Array.isArray(this._menuOpts)) {\n      this._menuOpts.forEach(this._registerMenuItem, this);\n    } else if (this._menuOpts) {\n      this._registerMenuItem(this._menuOpts);\n    }\n    if (this._kbOpts) {\n      let kbWhen = this._kbOpts.kbExpr;\n      if (this.precondition) {\n        if (kbWhen) {\n          kbWhen = ContextKeyExpr.and(kbWhen, this.precondition);\n        } else {\n          kbWhen = this.precondition;\n        }\n      }\n      KeybindingsRegistry.registerCommandAndKeybindingRule({\n        id: this.id,\n        handler: (accessor, args) => this.runCommand(accessor, args),\n        weight: this._kbOpts.weight,\n        args: this._kbOpts.args,\n        when: kbWhen,\n        primary: this._kbOpts.primary,\n        secondary: this._kbOpts.secondary,\n        win: this._kbOpts.win,\n        linux: this._kbOpts.linux,\n        mac: this._kbOpts.mac,\n        description: this._description\n      });\n    } else {\n      CommandsRegistry.registerCommand({\n        id: this.id,\n        handler: (accessor, args) => this.runCommand(accessor, args),\n        description: this._description\n      });\n    }\n  }\n  _registerMenuItem(item) {\n    MenuRegistry.appendMenuItem(item.menuId, {\n      group: item.group,\n      command: {\n        id: this.id,\n        title: item.title,\n        icon: item.icon,\n        precondition: this.precondition\n      },\n      when: item.when,\n      order: item.order\n    });\n  }\n}\nexport class MultiCommand extends Command {\n  constructor() {\n    super(...arguments);\n    this._implementations = [];\n  }\n  /**\r\n   * A higher priority gets to be looked at first\r\n   */\n  addImplementation(priority, implementation) {\n    this._implementations.push([priority, implementation]);\n    this._implementations.sort((a, b) => b[0] - a[0]);\n    return {\n      dispose: () => {\n        for (let i = 0; i < this._implementations.length; i++) {\n          if (this._implementations[i][1] === implementation) {\n            this._implementations.splice(i, 1);\n            return;\n          }\n        }\n      }\n    };\n  }\n  runCommand(accessor, args) {\n    for (const impl of this._implementations) {\n      const result = impl[1](accessor, args);\n      if (result) {\n        if (typeof result === 'boolean') {\n          return;\n        }\n        return result;\n      }\n    }\n  }\n}\n//#endregion\n/**\r\n * A command that delegates to another command's implementation.\r\n *\r\n * This lets different commands be registered but share the same implementation\r\n */\nexport class ProxyCommand extends Command {\n  constructor(command, opts) {\n    super(opts);\n    this.command = command;\n  }\n  runCommand(accessor, args) {\n    return this.command.runCommand(accessor, args);\n  }\n}\nexport class EditorCommand extends Command {\n  /**\r\n   * Create a command class that is bound to a certain editor contribution.\r\n   */\n  static bindToContribution(controllerGetter) {\n    return class EditorControllerCommandImpl extends EditorCommand {\n      constructor(opts) {\n        super(opts);\n        this._callback = opts.handler;\n      }\n      runEditorCommand(accessor, editor, args) {\n        const controller = controllerGetter(editor);\n        if (controller) {\n          this._callback(controllerGetter(editor), args);\n        }\n      }\n    };\n  }\n  runCommand(accessor, args) {\n    const codeEditorService = accessor.get(ICodeEditorService);\n    // Find the editor with text focus or active\n    const editor = codeEditorService.getFocusedCodeEditor() || codeEditorService.getActiveCodeEditor();\n    if (!editor) {\n      // well, at least we tried...\n      return;\n    }\n    return editor.invokeWithinContext(editorAccessor => {\n      const kbService = editorAccessor.get(IContextKeyService);\n      if (!kbService.contextMatchesRules(withNullAsUndefined(this.precondition))) {\n        // precondition does not hold\n        return;\n      }\n      return this.runEditorCommand(editorAccessor, editor, args);\n    });\n  }\n}\nexport class EditorAction extends EditorCommand {\n  constructor(opts) {\n    super(EditorAction.convertOptions(opts));\n    this.label = opts.label;\n    this.alias = opts.alias;\n  }\n  static convertOptions(opts) {\n    let menuOpts;\n    if (Array.isArray(opts.menuOpts)) {\n      menuOpts = opts.menuOpts;\n    } else if (opts.menuOpts) {\n      menuOpts = [opts.menuOpts];\n    } else {\n      menuOpts = [];\n    }\n    function withDefaults(item) {\n      if (!item.menuId) {\n        item.menuId = MenuId.EditorContext;\n      }\n      if (!item.title) {\n        item.title = opts.label;\n      }\n      item.when = ContextKeyExpr.and(opts.precondition, item.when);\n      return item;\n    }\n    if (Array.isArray(opts.contextMenuOpts)) {\n      menuOpts.push(...opts.contextMenuOpts.map(withDefaults));\n    } else if (opts.contextMenuOpts) {\n      menuOpts.push(withDefaults(opts.contextMenuOpts));\n    }\n    opts.menuOpts = menuOpts;\n    return opts;\n  }\n  runEditorCommand(accessor, editor, args) {\n    this.reportTelemetry(accessor, editor);\n    return this.run(accessor, editor, args || {});\n  }\n  reportTelemetry(accessor, editor) {\n    accessor.get(ITelemetryService).publicLog2('editorActionInvoked', {\n      name: this.label,\n      id: this.id\n    });\n  }\n}\nexport class MultiEditorAction extends EditorAction {\n  constructor(opts) {\n    super(opts);\n    this._implementations = [];\n  }\n  runEditorCommand(accessor, editor, args) {\n    this.reportTelemetry(accessor, editor);\n    for (const impl of this._implementations) {\n      if (impl[1](accessor, args)) {\n        return;\n      }\n    }\n    return this.run(accessor, editor, args || {});\n  }\n}\n//#endregion\n// --- Registration of commands and actions\nexport function registerModelAndPositionCommand(id, handler) {\n  CommandsRegistry.registerCommand(id, function (accessor) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    const [resource, position] = args;\n    assertType(URI.isUri(resource));\n    assertType(Position.isIPosition(position));\n    const model = accessor.get(IModelService).getModel(resource);\n    if (model) {\n      const editorPosition = Position.lift(position);\n      return handler(model, editorPosition, ...args.slice(2));\n    }\n    return accessor.get(ITextModelService).createModelReference(resource).then(reference => {\n      return new Promise((resolve, reject) => {\n        try {\n          const result = handler(reference.object.textEditorModel, Position.lift(position), args.slice(2));\n          resolve(result);\n        } catch (err) {\n          reject(err);\n        }\n      }).finally(() => {\n        reference.dispose();\n      });\n    });\n  });\n}\nexport function registerModelCommand(id, handler) {\n  CommandsRegistry.registerCommand(id, function (accessor) {\n    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      args[_key2 - 1] = arguments[_key2];\n    }\n    const [resource] = args;\n    assertType(URI.isUri(resource));\n    const model = accessor.get(IModelService).getModel(resource);\n    if (model) {\n      return handler(model, ...args.slice(1));\n    }\n    return accessor.get(ITextModelService).createModelReference(resource).then(reference => {\n      return new Promise((resolve, reject) => {\n        try {\n          const result = handler(reference.object.textEditorModel, args.slice(1));\n          resolve(result);\n        } catch (err) {\n          reject(err);\n        }\n      }).finally(() => {\n        reference.dispose();\n      });\n    });\n  });\n}\nexport function registerEditorCommand(editorCommand) {\n  EditorContributionRegistry.INSTANCE.registerEditorCommand(editorCommand);\n  return editorCommand;\n}\nexport function registerEditorAction(ctor) {\n  const action = new ctor();\n  EditorContributionRegistry.INSTANCE.registerEditorAction(action);\n  return action;\n}\nexport function registerMultiEditorAction(action) {\n  EditorContributionRegistry.INSTANCE.registerEditorAction(action);\n  return action;\n}\nexport function registerInstantiatedEditorAction(editorAction) {\n  EditorContributionRegistry.INSTANCE.registerEditorAction(editorAction);\n}\nexport function registerEditorContribution(id, ctor) {\n  EditorContributionRegistry.INSTANCE.registerEditorContribution(id, ctor);\n}\nexport var EditorExtensionsRegistry;\n(function (EditorExtensionsRegistry) {\n  function getEditorCommand(commandId) {\n    return EditorContributionRegistry.INSTANCE.getEditorCommand(commandId);\n  }\n  EditorExtensionsRegistry.getEditorCommand = getEditorCommand;\n  function getEditorActions() {\n    return EditorContributionRegistry.INSTANCE.getEditorActions();\n  }\n  EditorExtensionsRegistry.getEditorActions = getEditorActions;\n  function getEditorContributions() {\n    return EditorContributionRegistry.INSTANCE.getEditorContributions();\n  }\n  EditorExtensionsRegistry.getEditorContributions = getEditorContributions;\n  function getSomeEditorContributions(ids) {\n    return EditorContributionRegistry.INSTANCE.getEditorContributions().filter(c => ids.indexOf(c.id) >= 0);\n  }\n  EditorExtensionsRegistry.getSomeEditorContributions = getSomeEditorContributions;\n  function getDiffEditorContributions() {\n    return EditorContributionRegistry.INSTANCE.getDiffEditorContributions();\n  }\n  EditorExtensionsRegistry.getDiffEditorContributions = getDiffEditorContributions;\n})(EditorExtensionsRegistry || (EditorExtensionsRegistry = {}));\n// Editor extension points\nconst Extensions = {\n  EditorCommonContributions: 'editor.contributions'\n};\nclass EditorContributionRegistry {\n  constructor() {\n    this.editorContributions = [];\n    this.diffEditorContributions = [];\n    this.editorActions = [];\n    this.editorCommands = Object.create(null);\n  }\n  registerEditorContribution(id, ctor) {\n    this.editorContributions.push({\n      id,\n      ctor: ctor\n    });\n  }\n  getEditorContributions() {\n    return this.editorContributions.slice(0);\n  }\n  getDiffEditorContributions() {\n    return this.diffEditorContributions.slice(0);\n  }\n  registerEditorAction(action) {\n    action.register();\n    this.editorActions.push(action);\n  }\n  getEditorActions() {\n    return this.editorActions.slice(0);\n  }\n  registerEditorCommand(editorCommand) {\n    editorCommand.register();\n    this.editorCommands[editorCommand.id] = editorCommand;\n  }\n  getEditorCommand(commandId) {\n    return this.editorCommands[commandId] || null;\n  }\n}\nEditorContributionRegistry.INSTANCE = new EditorContributionRegistry();\nRegistry.add(Extensions.EditorCommonContributions, EditorContributionRegistry.INSTANCE);\nfunction registerCommand(command) {\n  command.register();\n  return command;\n}\nexport const UndoCommand = registerCommand(new MultiCommand({\n  id: 'undo',\n  precondition: undefined,\n  kbOpts: {\n    weight: 0 /* EditorCore */,\n    primary: 2048 /* CtrlCmd */ | 56 /* KEY_Z */\n  },\n\n  menuOpts: [{\n    menuId: MenuId.MenubarEditMenu,\n    group: '1_do',\n    title: nls.localize({\n      key: 'miUndo',\n      comment: ['&& denotes a mnemonic']\n    }, \"&&Undo\"),\n    order: 1\n  }, {\n    menuId: MenuId.CommandPalette,\n    group: '',\n    title: nls.localize('undo', \"Undo\"),\n    order: 1\n  }]\n}));\nregisterCommand(new ProxyCommand(UndoCommand, {\n  id: 'default:undo',\n  precondition: undefined\n}));\nexport const RedoCommand = registerCommand(new MultiCommand({\n  id: 'redo',\n  precondition: undefined,\n  kbOpts: {\n    weight: 0 /* EditorCore */,\n    primary: 2048 /* CtrlCmd */ | 55 /* KEY_Y */,\n    secondary: [2048 /* CtrlCmd */ | 1024 /* Shift */ | 56 /* KEY_Z */],\n    mac: {\n      primary: 2048 /* CtrlCmd */ | 1024 /* Shift */ | 56 /* KEY_Z */\n    }\n  },\n\n  menuOpts: [{\n    menuId: MenuId.MenubarEditMenu,\n    group: '1_do',\n    title: nls.localize({\n      key: 'miRedo',\n      comment: ['&& denotes a mnemonic']\n    }, \"&&Redo\"),\n    order: 2\n  }, {\n    menuId: MenuId.CommandPalette,\n    group: '',\n    title: nls.localize('redo', \"Redo\"),\n    order: 1\n  }]\n}));\nregisterCommand(new ProxyCommand(RedoCommand, {\n  id: 'default:redo',\n  precondition: undefined\n}));\nexport const SelectAllCommand = registerCommand(new MultiCommand({\n  id: 'editor.action.selectAll',\n  precondition: undefined,\n  kbOpts: {\n    weight: 0 /* EditorCore */,\n    kbExpr: null,\n    primary: 2048 /* CtrlCmd */ | 31 /* KEY_A */\n  },\n\n  menuOpts: [{\n    menuId: MenuId.MenubarSelectionMenu,\n    group: '1_basic',\n    title: nls.localize({\n      key: 'miSelectAll',\n      comment: ['&& denotes a mnemonic']\n    }, \"&&Select All\"),\n    order: 1\n  }, {\n    menuId: MenuId.CommandPalette,\n    group: '',\n    title: nls.localize('selectAll', \"Select All\"),\n    order: 1\n  }]\n}));","map":{"version":3,"names":["nls","URI","ICodeEditorService","Position","IModelService","ITextModelService","MenuId","MenuRegistry","CommandsRegistry","ContextKeyExpr","IContextKeyService","KeybindingsRegistry","Registry","ITelemetryService","withNullAsUndefined","assertType","Command","constructor","opts","id","precondition","_kbOpts","kbOpts","_menuOpts","menuOpts","_description","description","register","Array","isArray","forEach","_registerMenuItem","kbWhen","kbExpr","and","registerCommandAndKeybindingRule","handler","accessor","args","runCommand","weight","when","primary","secondary","win","linux","mac","registerCommand","item","appendMenuItem","menuId","group","command","title","icon","order","MultiCommand","arguments","_implementations","addImplementation","priority","implementation","push","sort","a","b","dispose","i","length","splice","impl","result","ProxyCommand","EditorCommand","bindToContribution","controllerGetter","EditorControllerCommandImpl","_callback","runEditorCommand","editor","controller","codeEditorService","get","getFocusedCodeEditor","getActiveCodeEditor","invokeWithinContext","editorAccessor","kbService","contextMatchesRules","EditorAction","convertOptions","label","alias","withDefaults","EditorContext","contextMenuOpts","map","reportTelemetry","run","publicLog2","name","MultiEditorAction","registerModelAndPositionCommand","_len","_key","resource","position","isUri","isIPosition","model","getModel","editorPosition","lift","slice","createModelReference","then","reference","Promise","resolve","reject","object","textEditorModel","err","finally","registerModelCommand","_len2","_key2","registerEditorCommand","editorCommand","EditorContributionRegistry","INSTANCE","registerEditorAction","ctor","action","registerMultiEditorAction","registerInstantiatedEditorAction","editorAction","registerEditorContribution","EditorExtensionsRegistry","getEditorCommand","commandId","getEditorActions","getEditorContributions","getSomeEditorContributions","ids","filter","c","indexOf","getDiffEditorContributions","Extensions","EditorCommonContributions","editorContributions","diffEditorContributions","editorActions","editorCommands","Object","create","add","UndoCommand","undefined","MenubarEditMenu","localize","key","comment","CommandPalette","RedoCommand","SelectAllCommand","MenubarSelectionMenu"],"sources":["C:/Users/Administrator/Desktop/sqllineage-master/sqllineagejs/node_modules/monaco-editor/esm/vs/editor/browser/editorExtensions.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport * as nls from '../../nls.js';\r\nimport { URI } from '../../base/common/uri.js';\r\nimport { ICodeEditorService } from './services/codeEditorService.js';\r\nimport { Position } from '../common/core/position.js';\r\nimport { IModelService } from '../common/services/modelService.js';\r\nimport { ITextModelService } from '../common/services/resolverService.js';\r\nimport { MenuId, MenuRegistry } from '../../platform/actions/common/actions.js';\r\nimport { CommandsRegistry } from '../../platform/commands/common/commands.js';\r\nimport { ContextKeyExpr, IContextKeyService } from '../../platform/contextkey/common/contextkey.js';\r\nimport { KeybindingsRegistry } from '../../platform/keybinding/common/keybindingsRegistry.js';\r\nimport { Registry } from '../../platform/registry/common/platform.js';\r\nimport { ITelemetryService } from '../../platform/telemetry/common/telemetry.js';\r\nimport { withNullAsUndefined, assertType } from '../../base/common/types.js';\r\nexport class Command {\r\n    constructor(opts) {\r\n        this.id = opts.id;\r\n        this.precondition = opts.precondition;\r\n        this._kbOpts = opts.kbOpts;\r\n        this._menuOpts = opts.menuOpts;\r\n        this._description = opts.description;\r\n    }\r\n    register() {\r\n        if (Array.isArray(this._menuOpts)) {\r\n            this._menuOpts.forEach(this._registerMenuItem, this);\r\n        }\r\n        else if (this._menuOpts) {\r\n            this._registerMenuItem(this._menuOpts);\r\n        }\r\n        if (this._kbOpts) {\r\n            let kbWhen = this._kbOpts.kbExpr;\r\n            if (this.precondition) {\r\n                if (kbWhen) {\r\n                    kbWhen = ContextKeyExpr.and(kbWhen, this.precondition);\r\n                }\r\n                else {\r\n                    kbWhen = this.precondition;\r\n                }\r\n            }\r\n            KeybindingsRegistry.registerCommandAndKeybindingRule({\r\n                id: this.id,\r\n                handler: (accessor, args) => this.runCommand(accessor, args),\r\n                weight: this._kbOpts.weight,\r\n                args: this._kbOpts.args,\r\n                when: kbWhen,\r\n                primary: this._kbOpts.primary,\r\n                secondary: this._kbOpts.secondary,\r\n                win: this._kbOpts.win,\r\n                linux: this._kbOpts.linux,\r\n                mac: this._kbOpts.mac,\r\n                description: this._description\r\n            });\r\n        }\r\n        else {\r\n            CommandsRegistry.registerCommand({\r\n                id: this.id,\r\n                handler: (accessor, args) => this.runCommand(accessor, args),\r\n                description: this._description\r\n            });\r\n        }\r\n    }\r\n    _registerMenuItem(item) {\r\n        MenuRegistry.appendMenuItem(item.menuId, {\r\n            group: item.group,\r\n            command: {\r\n                id: this.id,\r\n                title: item.title,\r\n                icon: item.icon,\r\n                precondition: this.precondition\r\n            },\r\n            when: item.when,\r\n            order: item.order\r\n        });\r\n    }\r\n}\r\nexport class MultiCommand extends Command {\r\n    constructor() {\r\n        super(...arguments);\r\n        this._implementations = [];\r\n    }\r\n    /**\r\n     * A higher priority gets to be looked at first\r\n     */\r\n    addImplementation(priority, implementation) {\r\n        this._implementations.push([priority, implementation]);\r\n        this._implementations.sort((a, b) => b[0] - a[0]);\r\n        return {\r\n            dispose: () => {\r\n                for (let i = 0; i < this._implementations.length; i++) {\r\n                    if (this._implementations[i][1] === implementation) {\r\n                        this._implementations.splice(i, 1);\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n        };\r\n    }\r\n    runCommand(accessor, args) {\r\n        for (const impl of this._implementations) {\r\n            const result = impl[1](accessor, args);\r\n            if (result) {\r\n                if (typeof result === 'boolean') {\r\n                    return;\r\n                }\r\n                return result;\r\n            }\r\n        }\r\n    }\r\n}\r\n//#endregion\r\n/**\r\n * A command that delegates to another command's implementation.\r\n *\r\n * This lets different commands be registered but share the same implementation\r\n */\r\nexport class ProxyCommand extends Command {\r\n    constructor(command, opts) {\r\n        super(opts);\r\n        this.command = command;\r\n    }\r\n    runCommand(accessor, args) {\r\n        return this.command.runCommand(accessor, args);\r\n    }\r\n}\r\nexport class EditorCommand extends Command {\r\n    /**\r\n     * Create a command class that is bound to a certain editor contribution.\r\n     */\r\n    static bindToContribution(controllerGetter) {\r\n        return class EditorControllerCommandImpl extends EditorCommand {\r\n            constructor(opts) {\r\n                super(opts);\r\n                this._callback = opts.handler;\r\n            }\r\n            runEditorCommand(accessor, editor, args) {\r\n                const controller = controllerGetter(editor);\r\n                if (controller) {\r\n                    this._callback(controllerGetter(editor), args);\r\n                }\r\n            }\r\n        };\r\n    }\r\n    runCommand(accessor, args) {\r\n        const codeEditorService = accessor.get(ICodeEditorService);\r\n        // Find the editor with text focus or active\r\n        const editor = codeEditorService.getFocusedCodeEditor() || codeEditorService.getActiveCodeEditor();\r\n        if (!editor) {\r\n            // well, at least we tried...\r\n            return;\r\n        }\r\n        return editor.invokeWithinContext((editorAccessor) => {\r\n            const kbService = editorAccessor.get(IContextKeyService);\r\n            if (!kbService.contextMatchesRules(withNullAsUndefined(this.precondition))) {\r\n                // precondition does not hold\r\n                return;\r\n            }\r\n            return this.runEditorCommand(editorAccessor, editor, args);\r\n        });\r\n    }\r\n}\r\nexport class EditorAction extends EditorCommand {\r\n    constructor(opts) {\r\n        super(EditorAction.convertOptions(opts));\r\n        this.label = opts.label;\r\n        this.alias = opts.alias;\r\n    }\r\n    static convertOptions(opts) {\r\n        let menuOpts;\r\n        if (Array.isArray(opts.menuOpts)) {\r\n            menuOpts = opts.menuOpts;\r\n        }\r\n        else if (opts.menuOpts) {\r\n            menuOpts = [opts.menuOpts];\r\n        }\r\n        else {\r\n            menuOpts = [];\r\n        }\r\n        function withDefaults(item) {\r\n            if (!item.menuId) {\r\n                item.menuId = MenuId.EditorContext;\r\n            }\r\n            if (!item.title) {\r\n                item.title = opts.label;\r\n            }\r\n            item.when = ContextKeyExpr.and(opts.precondition, item.when);\r\n            return item;\r\n        }\r\n        if (Array.isArray(opts.contextMenuOpts)) {\r\n            menuOpts.push(...opts.contextMenuOpts.map(withDefaults));\r\n        }\r\n        else if (opts.contextMenuOpts) {\r\n            menuOpts.push(withDefaults(opts.contextMenuOpts));\r\n        }\r\n        opts.menuOpts = menuOpts;\r\n        return opts;\r\n    }\r\n    runEditorCommand(accessor, editor, args) {\r\n        this.reportTelemetry(accessor, editor);\r\n        return this.run(accessor, editor, args || {});\r\n    }\r\n    reportTelemetry(accessor, editor) {\r\n        accessor.get(ITelemetryService).publicLog2('editorActionInvoked', { name: this.label, id: this.id });\r\n    }\r\n}\r\nexport class MultiEditorAction extends EditorAction {\r\n    constructor(opts) {\r\n        super(opts);\r\n        this._implementations = [];\r\n    }\r\n    runEditorCommand(accessor, editor, args) {\r\n        this.reportTelemetry(accessor, editor);\r\n        for (const impl of this._implementations) {\r\n            if (impl[1](accessor, args)) {\r\n                return;\r\n            }\r\n        }\r\n        return this.run(accessor, editor, args || {});\r\n    }\r\n}\r\n//#endregion\r\n// --- Registration of commands and actions\r\nexport function registerModelAndPositionCommand(id, handler) {\r\n    CommandsRegistry.registerCommand(id, function (accessor, ...args) {\r\n        const [resource, position] = args;\r\n        assertType(URI.isUri(resource));\r\n        assertType(Position.isIPosition(position));\r\n        const model = accessor.get(IModelService).getModel(resource);\r\n        if (model) {\r\n            const editorPosition = Position.lift(position);\r\n            return handler(model, editorPosition, ...args.slice(2));\r\n        }\r\n        return accessor.get(ITextModelService).createModelReference(resource).then(reference => {\r\n            return new Promise((resolve, reject) => {\r\n                try {\r\n                    const result = handler(reference.object.textEditorModel, Position.lift(position), args.slice(2));\r\n                    resolve(result);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }).finally(() => {\r\n                reference.dispose();\r\n            });\r\n        });\r\n    });\r\n}\r\nexport function registerModelCommand(id, handler) {\r\n    CommandsRegistry.registerCommand(id, function (accessor, ...args) {\r\n        const [resource] = args;\r\n        assertType(URI.isUri(resource));\r\n        const model = accessor.get(IModelService).getModel(resource);\r\n        if (model) {\r\n            return handler(model, ...args.slice(1));\r\n        }\r\n        return accessor.get(ITextModelService).createModelReference(resource).then(reference => {\r\n            return new Promise((resolve, reject) => {\r\n                try {\r\n                    const result = handler(reference.object.textEditorModel, args.slice(1));\r\n                    resolve(result);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                }\r\n            }).finally(() => {\r\n                reference.dispose();\r\n            });\r\n        });\r\n    });\r\n}\r\nexport function registerEditorCommand(editorCommand) {\r\n    EditorContributionRegistry.INSTANCE.registerEditorCommand(editorCommand);\r\n    return editorCommand;\r\n}\r\nexport function registerEditorAction(ctor) {\r\n    const action = new ctor();\r\n    EditorContributionRegistry.INSTANCE.registerEditorAction(action);\r\n    return action;\r\n}\r\nexport function registerMultiEditorAction(action) {\r\n    EditorContributionRegistry.INSTANCE.registerEditorAction(action);\r\n    return action;\r\n}\r\nexport function registerInstantiatedEditorAction(editorAction) {\r\n    EditorContributionRegistry.INSTANCE.registerEditorAction(editorAction);\r\n}\r\nexport function registerEditorContribution(id, ctor) {\r\n    EditorContributionRegistry.INSTANCE.registerEditorContribution(id, ctor);\r\n}\r\nexport var EditorExtensionsRegistry;\r\n(function (EditorExtensionsRegistry) {\r\n    function getEditorCommand(commandId) {\r\n        return EditorContributionRegistry.INSTANCE.getEditorCommand(commandId);\r\n    }\r\n    EditorExtensionsRegistry.getEditorCommand = getEditorCommand;\r\n    function getEditorActions() {\r\n        return EditorContributionRegistry.INSTANCE.getEditorActions();\r\n    }\r\n    EditorExtensionsRegistry.getEditorActions = getEditorActions;\r\n    function getEditorContributions() {\r\n        return EditorContributionRegistry.INSTANCE.getEditorContributions();\r\n    }\r\n    EditorExtensionsRegistry.getEditorContributions = getEditorContributions;\r\n    function getSomeEditorContributions(ids) {\r\n        return EditorContributionRegistry.INSTANCE.getEditorContributions().filter(c => ids.indexOf(c.id) >= 0);\r\n    }\r\n    EditorExtensionsRegistry.getSomeEditorContributions = getSomeEditorContributions;\r\n    function getDiffEditorContributions() {\r\n        return EditorContributionRegistry.INSTANCE.getDiffEditorContributions();\r\n    }\r\n    EditorExtensionsRegistry.getDiffEditorContributions = getDiffEditorContributions;\r\n})(EditorExtensionsRegistry || (EditorExtensionsRegistry = {}));\r\n// Editor extension points\r\nconst Extensions = {\r\n    EditorCommonContributions: 'editor.contributions'\r\n};\r\nclass EditorContributionRegistry {\r\n    constructor() {\r\n        this.editorContributions = [];\r\n        this.diffEditorContributions = [];\r\n        this.editorActions = [];\r\n        this.editorCommands = Object.create(null);\r\n    }\r\n    registerEditorContribution(id, ctor) {\r\n        this.editorContributions.push({ id, ctor: ctor });\r\n    }\r\n    getEditorContributions() {\r\n        return this.editorContributions.slice(0);\r\n    }\r\n    getDiffEditorContributions() {\r\n        return this.diffEditorContributions.slice(0);\r\n    }\r\n    registerEditorAction(action) {\r\n        action.register();\r\n        this.editorActions.push(action);\r\n    }\r\n    getEditorActions() {\r\n        return this.editorActions.slice(0);\r\n    }\r\n    registerEditorCommand(editorCommand) {\r\n        editorCommand.register();\r\n        this.editorCommands[editorCommand.id] = editorCommand;\r\n    }\r\n    getEditorCommand(commandId) {\r\n        return (this.editorCommands[commandId] || null);\r\n    }\r\n}\r\nEditorContributionRegistry.INSTANCE = new EditorContributionRegistry();\r\nRegistry.add(Extensions.EditorCommonContributions, EditorContributionRegistry.INSTANCE);\r\nfunction registerCommand(command) {\r\n    command.register();\r\n    return command;\r\n}\r\nexport const UndoCommand = registerCommand(new MultiCommand({\r\n    id: 'undo',\r\n    precondition: undefined,\r\n    kbOpts: {\r\n        weight: 0 /* EditorCore */,\r\n        primary: 2048 /* CtrlCmd */ | 56 /* KEY_Z */\r\n    },\r\n    menuOpts: [{\r\n            menuId: MenuId.MenubarEditMenu,\r\n            group: '1_do',\r\n            title: nls.localize({ key: 'miUndo', comment: ['&& denotes a mnemonic'] }, \"&&Undo\"),\r\n            order: 1\r\n        }, {\r\n            menuId: MenuId.CommandPalette,\r\n            group: '',\r\n            title: nls.localize('undo', \"Undo\"),\r\n            order: 1\r\n        }]\r\n}));\r\nregisterCommand(new ProxyCommand(UndoCommand, { id: 'default:undo', precondition: undefined }));\r\nexport const RedoCommand = registerCommand(new MultiCommand({\r\n    id: 'redo',\r\n    precondition: undefined,\r\n    kbOpts: {\r\n        weight: 0 /* EditorCore */,\r\n        primary: 2048 /* CtrlCmd */ | 55 /* KEY_Y */,\r\n        secondary: [2048 /* CtrlCmd */ | 1024 /* Shift */ | 56 /* KEY_Z */],\r\n        mac: { primary: 2048 /* CtrlCmd */ | 1024 /* Shift */ | 56 /* KEY_Z */ }\r\n    },\r\n    menuOpts: [{\r\n            menuId: MenuId.MenubarEditMenu,\r\n            group: '1_do',\r\n            title: nls.localize({ key: 'miRedo', comment: ['&& denotes a mnemonic'] }, \"&&Redo\"),\r\n            order: 2\r\n        }, {\r\n            menuId: MenuId.CommandPalette,\r\n            group: '',\r\n            title: nls.localize('redo', \"Redo\"),\r\n            order: 1\r\n        }]\r\n}));\r\nregisterCommand(new ProxyCommand(RedoCommand, { id: 'default:redo', precondition: undefined }));\r\nexport const SelectAllCommand = registerCommand(new MultiCommand({\r\n    id: 'editor.action.selectAll',\r\n    precondition: undefined,\r\n    kbOpts: {\r\n        weight: 0 /* EditorCore */,\r\n        kbExpr: null,\r\n        primary: 2048 /* CtrlCmd */ | 31 /* KEY_A */\r\n    },\r\n    menuOpts: [{\r\n            menuId: MenuId.MenubarSelectionMenu,\r\n            group: '1_basic',\r\n            title: nls.localize({ key: 'miSelectAll', comment: ['&& denotes a mnemonic'] }, \"&&Select All\"),\r\n            order: 1\r\n        }, {\r\n            menuId: MenuId.CommandPalette,\r\n            group: '',\r\n            title: nls.localize('selectAll', \"Select All\"),\r\n            order: 1\r\n        }]\r\n}));\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}