{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { isWindows } from './platform.js';\nimport * as paths from './path.js';\nconst _schemePattern = /^\\w[\\w\\d+.-]*$/;\nconst _singleSlashStart = /^\\//;\nconst _doubleSlashStart = /^\\/\\//;\nfunction _validateUri(ret, _strict) {\n  // scheme, must be set\n  if (!ret.scheme && _strict) {\n    throw new Error(\"[UriError]: Scheme is missing: {scheme: \\\"\\\", authority: \\\"\".concat(ret.authority, \"\\\", path: \\\"\").concat(ret.path, \"\\\", query: \\\"\").concat(ret.query, \"\\\", fragment: \\\"\").concat(ret.fragment, \"\\\"}\"));\n  }\n  // scheme, https://tools.ietf.org/html/rfc3986#section-3.1\n  // ALPHA *( ALPHA / DIGIT / \"+\" / \"-\" / \".\" )\n  if (ret.scheme && !_schemePattern.test(ret.scheme)) {\n    throw new Error('[UriError]: Scheme contains illegal characters.');\n  }\n  // path, http://tools.ietf.org/html/rfc3986#section-3.3\n  // If a URI contains an authority component, then the path component\n  // must either be empty or begin with a slash (\"/\") character.  If a URI\n  // does not contain an authority component, then the path cannot begin\n  // with two slash characters (\"//\").\n  if (ret.path) {\n    if (ret.authority) {\n      if (!_singleSlashStart.test(ret.path)) {\n        throw new Error('[UriError]: If a URI contains an authority component, then the path component must either be empty or begin with a slash (\"/\") character');\n      }\n    } else {\n      if (_doubleSlashStart.test(ret.path)) {\n        throw new Error('[UriError]: If a URI does not contain an authority component, then the path cannot begin with two slash characters (\"//\")');\n      }\n    }\n  }\n}\n// for a while we allowed uris *without* schemes and this is the migration\n// for them, e.g. an uri without scheme and without strict-mode warns and falls\n// back to the file-scheme. that should cause the least carnage and still be a\n// clear warning\nfunction _schemeFix(scheme, _strict) {\n  if (!scheme && !_strict) {\n    return 'file';\n  }\n  return scheme;\n}\n// implements a bit of https://tools.ietf.org/html/rfc3986#section-5\nfunction _referenceResolution(scheme, path) {\n  // the slash-character is our 'default base' as we don't\n  // support constructing URIs relative to other URIs. This\n  // also means that we alter and potentially break paths.\n  // see https://tools.ietf.org/html/rfc3986#section-5.1.4\n  switch (scheme) {\n    case 'https':\n    case 'http':\n    case 'file':\n      if (!path) {\n        path = _slash;\n      } else if (path[0] !== _slash) {\n        path = _slash + path;\n      }\n      break;\n  }\n  return path;\n}\nconst _empty = '';\nconst _slash = '/';\nconst _regexp = /^(([^:/?#]+?):)?(\\/\\/([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?/;\n/**\r\n * Uniform Resource Identifier (URI) http://tools.ietf.org/html/rfc3986.\r\n * This class is a simple parser which creates the basic component parts\r\n * (http://tools.ietf.org/html/rfc3986#section-3) with minimal validation\r\n * and encoding.\r\n *\r\n * ```txt\r\n *       foo://example.com:8042/over/there?name=ferret#nose\r\n *       \\_/   \\______________/\\_________/ \\_________/ \\__/\r\n *        |           |            |            |        |\r\n *     scheme     authority       path        query   fragment\r\n *        |   _____________________|__\r\n *       / \\ /                        \\\r\n *       urn:example:animal:ferret:nose\r\n * ```\r\n */\nexport class URI {\n  /**\r\n   * @internal\r\n   */\n  constructor(schemeOrData, authority, path, query, fragment) {\n    let _strict = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n    if (typeof schemeOrData === 'object') {\n      this.scheme = schemeOrData.scheme || _empty;\n      this.authority = schemeOrData.authority || _empty;\n      this.path = schemeOrData.path || _empty;\n      this.query = schemeOrData.query || _empty;\n      this.fragment = schemeOrData.fragment || _empty;\n      // no validation because it's this URI\n      // that creates uri components.\n      // _validateUri(this);\n    } else {\n      this.scheme = _schemeFix(schemeOrData, _strict);\n      this.authority = authority || _empty;\n      this.path = _referenceResolution(this.scheme, path || _empty);\n      this.query = query || _empty;\n      this.fragment = fragment || _empty;\n      _validateUri(this, _strict);\n    }\n  }\n  static isUri(thing) {\n    if (thing instanceof URI) {\n      return true;\n    }\n    if (!thing) {\n      return false;\n    }\n    return typeof thing.authority === 'string' && typeof thing.fragment === 'string' && typeof thing.path === 'string' && typeof thing.query === 'string' && typeof thing.scheme === 'string' && typeof thing.fsPath === 'string' && typeof thing.with === 'function' && typeof thing.toString === 'function';\n  }\n  // ---- filesystem path -----------------------\n  /**\r\n   * Returns a string representing the corresponding file system path of this URI.\r\n   * Will handle UNC paths, normalizes windows drive letters to lower-case, and uses the\r\n   * platform specific path separator.\r\n   *\r\n   * * Will *not* validate the path for invalid characters and semantics.\r\n   * * Will *not* look at the scheme of this URI.\r\n   * * The result shall *not* be used for display purposes but for accessing a file on disk.\r\n   *\r\n   *\r\n   * The *difference* to `URI#path` is the use of the platform specific separator and the handling\r\n   * of UNC paths. See the below sample of a file-uri with an authority (UNC path).\r\n   *\r\n   * ```ts\r\n      const u = URI.parse('file://server/c$/folder/file.txt')\r\n      u.authority === 'server'\r\n      u.path === '/shares/c$/file.txt'\r\n      u.fsPath === '\\\\server\\c$\\folder\\file.txt'\r\n  ```\r\n   *\r\n   * Using `URI#path` to read a file (using fs-apis) would not be enough because parts of the path,\r\n   * namely the server name, would be missing. Therefore `URI#fsPath` exists - it's sugar to ease working\r\n   * with URIs that represent files on disk (`file` scheme).\r\n   */\n  get fsPath() {\n    // if (this.scheme !== 'file') {\n    // \tconsole.warn(`[UriError] calling fsPath with scheme ${this.scheme}`);\n    // }\n    return uriToFsPath(this, false);\n  }\n  // ---- modify to new -------------------------\n  with(change) {\n    if (!change) {\n      return this;\n    }\n    let {\n      scheme,\n      authority,\n      path,\n      query,\n      fragment\n    } = change;\n    if (scheme === undefined) {\n      scheme = this.scheme;\n    } else if (scheme === null) {\n      scheme = _empty;\n    }\n    if (authority === undefined) {\n      authority = this.authority;\n    } else if (authority === null) {\n      authority = _empty;\n    }\n    if (path === undefined) {\n      path = this.path;\n    } else if (path === null) {\n      path = _empty;\n    }\n    if (query === undefined) {\n      query = this.query;\n    } else if (query === null) {\n      query = _empty;\n    }\n    if (fragment === undefined) {\n      fragment = this.fragment;\n    } else if (fragment === null) {\n      fragment = _empty;\n    }\n    if (scheme === this.scheme && authority === this.authority && path === this.path && query === this.query && fragment === this.fragment) {\n      return this;\n    }\n    return new Uri(scheme, authority, path, query, fragment);\n  }\n  // ---- parse & validate ------------------------\n  /**\r\n   * Creates a new URI from a string, e.g. `http://www.msft.com/some/path`,\r\n   * `file:///usr/home`, or `scheme:with/path`.\r\n   *\r\n   * @param value A string which represents an URI (see `URI#toString`).\r\n   */\n  static parse(value) {\n    let _strict = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    const match = _regexp.exec(value);\n    if (!match) {\n      return new Uri(_empty, _empty, _empty, _empty, _empty);\n    }\n    return new Uri(match[2] || _empty, percentDecode(match[4] || _empty), percentDecode(match[5] || _empty), percentDecode(match[7] || _empty), percentDecode(match[9] || _empty), _strict);\n  }\n  /**\r\n   * Creates a new URI from a file system path, e.g. `c:\\my\\files`,\r\n   * `/usr/home`, or `\\\\server\\share\\some\\path`.\r\n   *\r\n   * The *difference* between `URI#parse` and `URI#file` is that the latter treats the argument\r\n   * as path, not as stringified-uri. E.g. `URI.file(path)` is **not the same as**\r\n   * `URI.parse('file://' + path)` because the path might contain characters that are\r\n   * interpreted (# and ?). See the following sample:\r\n   * ```ts\r\n  const good = URI.file('/coding/c#/project1');\r\n  good.scheme === 'file';\r\n  good.path === '/coding/c#/project1';\r\n  good.fragment === '';\r\n  const bad = URI.parse('file://' + '/coding/c#/project1');\r\n  bad.scheme === 'file';\r\n  bad.path === '/coding/c'; // path is now broken\r\n  bad.fragment === '/project1';\r\n  ```\r\n   *\r\n   * @param path A file system path (see `URI#fsPath`)\r\n   */\n  static file(path) {\n    let authority = _empty;\n    // normalize to fwd-slashes on windows,\n    // on other systems bwd-slashes are valid\n    // filename character, eg /f\\oo/ba\\r.txt\n    if (isWindows) {\n      path = path.replace(/\\\\/g, _slash);\n    }\n    // check for authority as used in UNC shares\n    // or use the path as given\n    if (path[0] === _slash && path[1] === _slash) {\n      const idx = path.indexOf(_slash, 2);\n      if (idx === -1) {\n        authority = path.substring(2);\n        path = _slash;\n      } else {\n        authority = path.substring(2, idx);\n        path = path.substring(idx) || _slash;\n      }\n    }\n    return new Uri('file', authority, path, _empty, _empty);\n  }\n  static from(components) {\n    return new Uri(components.scheme, components.authority, components.path, components.query, components.fragment);\n  }\n  /**\r\n   * Join a URI path with path fragments and normalizes the resulting path.\r\n   *\r\n   * @param uri The input URI.\r\n   * @param pathFragment The path fragment to add to the URI path.\r\n   * @returns The resulting URI.\r\n   */\n  static joinPath(uri) {\n    if (!uri.path) {\n      throw new Error(\"[UriError]: cannot call joinPath on URI without path\");\n    }\n    let newPath;\n    for (var _len = arguments.length, pathFragment = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      pathFragment[_key - 1] = arguments[_key];\n    }\n    if (isWindows && uri.scheme === 'file') {\n      newPath = URI.file(paths.win32.join(uriToFsPath(uri, true), ...pathFragment)).path;\n    } else {\n      newPath = paths.posix.join(uri.path, ...pathFragment);\n    }\n    return uri.with({\n      path: newPath\n    });\n  }\n  // ---- printing/externalize ---------------------------\n  /**\r\n   * Creates a string representation for this URI. It's guaranteed that calling\r\n   * `URI.parse` with the result of this function creates an URI which is equal\r\n   * to this URI.\r\n   *\r\n   * * The result shall *not* be used for display purposes but for externalization or transport.\r\n   * * The result will be encoded using the percentage encoding and encoding happens mostly\r\n   * ignore the scheme-specific encoding rules.\r\n   *\r\n   * @param skipEncoding Do not encode the result, default is `false`\r\n   */\n  toString() {\n    let skipEncoding = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    return _asFormatted(this, skipEncoding);\n  }\n  toJSON() {\n    return this;\n  }\n  static revive(data) {\n    if (!data) {\n      return data;\n    } else if (data instanceof URI) {\n      return data;\n    } else {\n      const result = new Uri(data);\n      result._formatted = data.external;\n      result._fsPath = data._sep === _pathSepMarker ? data.fsPath : null;\n      return result;\n    }\n  }\n}\nconst _pathSepMarker = isWindows ? 1 : undefined;\n// This class exists so that URI is compatibile with vscode.Uri (API).\nclass Uri extends URI {\n  constructor() {\n    super(...arguments);\n    this._formatted = null;\n    this._fsPath = null;\n  }\n  get fsPath() {\n    if (!this._fsPath) {\n      this._fsPath = uriToFsPath(this, false);\n    }\n    return this._fsPath;\n  }\n  toString() {\n    let skipEncoding = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    if (!skipEncoding) {\n      if (!this._formatted) {\n        this._formatted = _asFormatted(this, false);\n      }\n      return this._formatted;\n    } else {\n      // we don't cache that\n      return _asFormatted(this, true);\n    }\n  }\n  toJSON() {\n    const res = {\n      $mid: 1\n    };\n    // cached state\n    if (this._fsPath) {\n      res.fsPath = this._fsPath;\n      res._sep = _pathSepMarker;\n    }\n    if (this._formatted) {\n      res.external = this._formatted;\n    }\n    // uri components\n    if (this.path) {\n      res.path = this.path;\n    }\n    if (this.scheme) {\n      res.scheme = this.scheme;\n    }\n    if (this.authority) {\n      res.authority = this.authority;\n    }\n    if (this.query) {\n      res.query = this.query;\n    }\n    if (this.fragment) {\n      res.fragment = this.fragment;\n    }\n    return res;\n  }\n}\n// reserved characters: https://tools.ietf.org/html/rfc3986#section-2.2\nconst encodeTable = {\n  [58 /* Colon */]: '%3A',\n  [47 /* Slash */]: '%2F',\n  [63 /* QuestionMark */]: '%3F',\n  [35 /* Hash */]: '%23',\n  [91 /* OpenSquareBracket */]: '%5B',\n  [93 /* CloseSquareBracket */]: '%5D',\n  [64 /* AtSign */]: '%40',\n  [33 /* ExclamationMark */]: '%21',\n  [36 /* DollarSign */]: '%24',\n  [38 /* Ampersand */]: '%26',\n  [39 /* SingleQuote */]: '%27',\n  [40 /* OpenParen */]: '%28',\n  [41 /* CloseParen */]: '%29',\n  [42 /* Asterisk */]: '%2A',\n  [43 /* Plus */]: '%2B',\n  [44 /* Comma */]: '%2C',\n  [59 /* Semicolon */]: '%3B',\n  [61 /* Equals */]: '%3D',\n  [32 /* Space */]: '%20'\n};\nfunction encodeURIComponentFast(uriComponent, allowSlash) {\n  let res = undefined;\n  let nativeEncodePos = -1;\n  for (let pos = 0; pos < uriComponent.length; pos++) {\n    const code = uriComponent.charCodeAt(pos);\n    // unreserved characters: https://tools.ietf.org/html/rfc3986#section-2.3\n    if (code >= 97 /* a */ && code <= 122 /* z */ || code >= 65 /* A */ && code <= 90 /* Z */ || code >= 48 /* Digit0 */ && code <= 57 /* Digit9 */ || code === 45 /* Dash */ || code === 46 /* Period */ || code === 95 /* Underline */ || code === 126 /* Tilde */ || allowSlash && code === 47 /* Slash */) {\n      // check if we are delaying native encode\n      if (nativeEncodePos !== -1) {\n        res += encodeURIComponent(uriComponent.substring(nativeEncodePos, pos));\n        nativeEncodePos = -1;\n      }\n      // check if we write into a new string (by default we try to return the param)\n      if (res !== undefined) {\n        res += uriComponent.charAt(pos);\n      }\n    } else {\n      // encoding needed, we need to allocate a new string\n      if (res === undefined) {\n        res = uriComponent.substr(0, pos);\n      }\n      // check with default table first\n      const escaped = encodeTable[code];\n      if (escaped !== undefined) {\n        // check if we are delaying native encode\n        if (nativeEncodePos !== -1) {\n          res += encodeURIComponent(uriComponent.substring(nativeEncodePos, pos));\n          nativeEncodePos = -1;\n        }\n        // append escaped variant to result\n        res += escaped;\n      } else if (nativeEncodePos === -1) {\n        // use native encode only when needed\n        nativeEncodePos = pos;\n      }\n    }\n  }\n  if (nativeEncodePos !== -1) {\n    res += encodeURIComponent(uriComponent.substring(nativeEncodePos));\n  }\n  return res !== undefined ? res : uriComponent;\n}\nfunction encodeURIComponentMinimal(path) {\n  let res = undefined;\n  for (let pos = 0; pos < path.length; pos++) {\n    const code = path.charCodeAt(pos);\n    if (code === 35 /* Hash */ || code === 63 /* QuestionMark */) {\n      if (res === undefined) {\n        res = path.substr(0, pos);\n      }\n      res += encodeTable[code];\n    } else {\n      if (res !== undefined) {\n        res += path[pos];\n      }\n    }\n  }\n  return res !== undefined ? res : path;\n}\n/**\r\n * Compute `fsPath` for the given uri\r\n */\nexport function uriToFsPath(uri, keepDriveLetterCasing) {\n  let value;\n  if (uri.authority && uri.path.length > 1 && uri.scheme === 'file') {\n    // unc path: file://shares/c$/far/boo\n    value = \"//\".concat(uri.authority).concat(uri.path);\n  } else if (uri.path.charCodeAt(0) === 47 /* Slash */ && (uri.path.charCodeAt(1) >= 65 /* A */ && uri.path.charCodeAt(1) <= 90 /* Z */ || uri.path.charCodeAt(1) >= 97 /* a */ && uri.path.charCodeAt(1) <= 122 /* z */) && uri.path.charCodeAt(2) === 58 /* Colon */) {\n    if (!keepDriveLetterCasing) {\n      // windows drive letter: file:///c:/far/boo\n      value = uri.path[1].toLowerCase() + uri.path.substr(2);\n    } else {\n      value = uri.path.substr(1);\n    }\n  } else {\n    // other path\n    value = uri.path;\n  }\n  if (isWindows) {\n    value = value.replace(/\\//g, '\\\\');\n  }\n  return value;\n}\n/**\r\n * Create the external version of a uri\r\n */\nfunction _asFormatted(uri, skipEncoding) {\n  const encoder = !skipEncoding ? encodeURIComponentFast : encodeURIComponentMinimal;\n  let res = '';\n  let {\n    scheme,\n    authority,\n    path,\n    query,\n    fragment\n  } = uri;\n  if (scheme) {\n    res += scheme;\n    res += ':';\n  }\n  if (authority || scheme === 'file') {\n    res += _slash;\n    res += _slash;\n  }\n  if (authority) {\n    let idx = authority.indexOf('@');\n    if (idx !== -1) {\n      // <user>@<auth>\n      const userinfo = authority.substr(0, idx);\n      authority = authority.substr(idx + 1);\n      idx = userinfo.indexOf(':');\n      if (idx === -1) {\n        res += encoder(userinfo, false);\n      } else {\n        // <user>:<pass>@<auth>\n        res += encoder(userinfo.substr(0, idx), false);\n        res += ':';\n        res += encoder(userinfo.substr(idx + 1), false);\n      }\n      res += '@';\n    }\n    authority = authority.toLowerCase();\n    idx = authority.indexOf(':');\n    if (idx === -1) {\n      res += encoder(authority, false);\n    } else {\n      // <auth>:<port>\n      res += encoder(authority.substr(0, idx), false);\n      res += authority.substr(idx);\n    }\n  }\n  if (path) {\n    // lower-case windows drive letters in /C:/fff or C:/fff\n    if (path.length >= 3 && path.charCodeAt(0) === 47 /* Slash */ && path.charCodeAt(2) === 58 /* Colon */) {\n      const code = path.charCodeAt(1);\n      if (code >= 65 /* A */ && code <= 90 /* Z */) {\n        path = \"/\".concat(String.fromCharCode(code + 32), \":\").concat(path.substr(3)); // \"/c:\".length === 3\n      }\n    } else if (path.length >= 2 && path.charCodeAt(1) === 58 /* Colon */) {\n      const code = path.charCodeAt(0);\n      if (code >= 65 /* A */ && code <= 90 /* Z */) {\n        path = \"\".concat(String.fromCharCode(code + 32), \":\").concat(path.substr(2)); // \"/c:\".length === 3\n      }\n    }\n    // encode the rest of the path\n    res += encoder(path, true);\n  }\n  if (query) {\n    res += '?';\n    res += encoder(query, false);\n  }\n  if (fragment) {\n    res += '#';\n    res += !skipEncoding ? encodeURIComponentFast(fragment, false) : fragment;\n  }\n  return res;\n}\n// --- decode\nfunction decodeURIComponentGraceful(str) {\n  try {\n    return decodeURIComponent(str);\n  } catch (_a) {\n    if (str.length > 3) {\n      return str.substr(0, 3) + decodeURIComponentGraceful(str.substr(3));\n    } else {\n      return str;\n    }\n  }\n}\nconst _rEncodedAsHex = /(%[0-9A-Za-z][0-9A-Za-z])+/g;\nfunction percentDecode(str) {\n  if (!str.match(_rEncodedAsHex)) {\n    return str;\n  }\n  return str.replace(_rEncodedAsHex, match => decodeURIComponentGraceful(match));\n}","map":{"version":3,"names":["isWindows","paths","_schemePattern","_singleSlashStart","_doubleSlashStart","_validateUri","ret","_strict","scheme","Error","concat","authority","path","query","fragment","test","_schemeFix","_referenceResolution","_slash","_empty","_regexp","URI","constructor","schemeOrData","arguments","length","undefined","isUri","thing","fsPath","with","toString","uriToFsPath","change","Uri","parse","value","match","exec","percentDecode","file","replace","idx","indexOf","substring","from","components","joinPath","uri","newPath","_len","pathFragment","Array","_key","win32","join","posix","skipEncoding","_asFormatted","toJSON","revive","data","result","_formatted","external","_fsPath","_sep","_pathSepMarker","res","$mid","encodeTable","encodeURIComponentFast","uriComponent","allowSlash","nativeEncodePos","pos","code","charCodeAt","encodeURIComponent","charAt","substr","escaped","encodeURIComponentMinimal","keepDriveLetterCasing","toLowerCase","encoder","userinfo","String","fromCharCode","decodeURIComponentGraceful","str","decodeURIComponent","_a","_rEncodedAsHex"],"sources":["C:/Users/Administrator/Desktop/sqllineage-master/sqllineagejs/node_modules/monaco-editor/esm/vs/base/common/uri.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { isWindows } from './platform.js';\r\nimport * as paths from './path.js';\r\nconst _schemePattern = /^\\w[\\w\\d+.-]*$/;\r\nconst _singleSlashStart = /^\\//;\r\nconst _doubleSlashStart = /^\\/\\//;\r\nfunction _validateUri(ret, _strict) {\r\n    // scheme, must be set\r\n    if (!ret.scheme && _strict) {\r\n        throw new Error(`[UriError]: Scheme is missing: {scheme: \"\", authority: \"${ret.authority}\", path: \"${ret.path}\", query: \"${ret.query}\", fragment: \"${ret.fragment}\"}`);\r\n    }\r\n    // scheme, https://tools.ietf.org/html/rfc3986#section-3.1\r\n    // ALPHA *( ALPHA / DIGIT / \"+\" / \"-\" / \".\" )\r\n    if (ret.scheme && !_schemePattern.test(ret.scheme)) {\r\n        throw new Error('[UriError]: Scheme contains illegal characters.');\r\n    }\r\n    // path, http://tools.ietf.org/html/rfc3986#section-3.3\r\n    // If a URI contains an authority component, then the path component\r\n    // must either be empty or begin with a slash (\"/\") character.  If a URI\r\n    // does not contain an authority component, then the path cannot begin\r\n    // with two slash characters (\"//\").\r\n    if (ret.path) {\r\n        if (ret.authority) {\r\n            if (!_singleSlashStart.test(ret.path)) {\r\n                throw new Error('[UriError]: If a URI contains an authority component, then the path component must either be empty or begin with a slash (\"/\") character');\r\n            }\r\n        }\r\n        else {\r\n            if (_doubleSlashStart.test(ret.path)) {\r\n                throw new Error('[UriError]: If a URI does not contain an authority component, then the path cannot begin with two slash characters (\"//\")');\r\n            }\r\n        }\r\n    }\r\n}\r\n// for a while we allowed uris *without* schemes and this is the migration\r\n// for them, e.g. an uri without scheme and without strict-mode warns and falls\r\n// back to the file-scheme. that should cause the least carnage and still be a\r\n// clear warning\r\nfunction _schemeFix(scheme, _strict) {\r\n    if (!scheme && !_strict) {\r\n        return 'file';\r\n    }\r\n    return scheme;\r\n}\r\n// implements a bit of https://tools.ietf.org/html/rfc3986#section-5\r\nfunction _referenceResolution(scheme, path) {\r\n    // the slash-character is our 'default base' as we don't\r\n    // support constructing URIs relative to other URIs. This\r\n    // also means that we alter and potentially break paths.\r\n    // see https://tools.ietf.org/html/rfc3986#section-5.1.4\r\n    switch (scheme) {\r\n        case 'https':\r\n        case 'http':\r\n        case 'file':\r\n            if (!path) {\r\n                path = _slash;\r\n            }\r\n            else if (path[0] !== _slash) {\r\n                path = _slash + path;\r\n            }\r\n            break;\r\n    }\r\n    return path;\r\n}\r\nconst _empty = '';\r\nconst _slash = '/';\r\nconst _regexp = /^(([^:/?#]+?):)?(\\/\\/([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?/;\r\n/**\r\n * Uniform Resource Identifier (URI) http://tools.ietf.org/html/rfc3986.\r\n * This class is a simple parser which creates the basic component parts\r\n * (http://tools.ietf.org/html/rfc3986#section-3) with minimal validation\r\n * and encoding.\r\n *\r\n * ```txt\r\n *       foo://example.com:8042/over/there?name=ferret#nose\r\n *       \\_/   \\______________/\\_________/ \\_________/ \\__/\r\n *        |           |            |            |        |\r\n *     scheme     authority       path        query   fragment\r\n *        |   _____________________|__\r\n *       / \\ /                        \\\r\n *       urn:example:animal:ferret:nose\r\n * ```\r\n */\r\nexport class URI {\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor(schemeOrData, authority, path, query, fragment, _strict = false) {\r\n        if (typeof schemeOrData === 'object') {\r\n            this.scheme = schemeOrData.scheme || _empty;\r\n            this.authority = schemeOrData.authority || _empty;\r\n            this.path = schemeOrData.path || _empty;\r\n            this.query = schemeOrData.query || _empty;\r\n            this.fragment = schemeOrData.fragment || _empty;\r\n            // no validation because it's this URI\r\n            // that creates uri components.\r\n            // _validateUri(this);\r\n        }\r\n        else {\r\n            this.scheme = _schemeFix(schemeOrData, _strict);\r\n            this.authority = authority || _empty;\r\n            this.path = _referenceResolution(this.scheme, path || _empty);\r\n            this.query = query || _empty;\r\n            this.fragment = fragment || _empty;\r\n            _validateUri(this, _strict);\r\n        }\r\n    }\r\n    static isUri(thing) {\r\n        if (thing instanceof URI) {\r\n            return true;\r\n        }\r\n        if (!thing) {\r\n            return false;\r\n        }\r\n        return typeof thing.authority === 'string'\r\n            && typeof thing.fragment === 'string'\r\n            && typeof thing.path === 'string'\r\n            && typeof thing.query === 'string'\r\n            && typeof thing.scheme === 'string'\r\n            && typeof thing.fsPath === 'string'\r\n            && typeof thing.with === 'function'\r\n            && typeof thing.toString === 'function';\r\n    }\r\n    // ---- filesystem path -----------------------\r\n    /**\r\n     * Returns a string representing the corresponding file system path of this URI.\r\n     * Will handle UNC paths, normalizes windows drive letters to lower-case, and uses the\r\n     * platform specific path separator.\r\n     *\r\n     * * Will *not* validate the path for invalid characters and semantics.\r\n     * * Will *not* look at the scheme of this URI.\r\n     * * The result shall *not* be used for display purposes but for accessing a file on disk.\r\n     *\r\n     *\r\n     * The *difference* to `URI#path` is the use of the platform specific separator and the handling\r\n     * of UNC paths. See the below sample of a file-uri with an authority (UNC path).\r\n     *\r\n     * ```ts\r\n        const u = URI.parse('file://server/c$/folder/file.txt')\r\n        u.authority === 'server'\r\n        u.path === '/shares/c$/file.txt'\r\n        u.fsPath === '\\\\server\\c$\\folder\\file.txt'\r\n    ```\r\n     *\r\n     * Using `URI#path` to read a file (using fs-apis) would not be enough because parts of the path,\r\n     * namely the server name, would be missing. Therefore `URI#fsPath` exists - it's sugar to ease working\r\n     * with URIs that represent files on disk (`file` scheme).\r\n     */\r\n    get fsPath() {\r\n        // if (this.scheme !== 'file') {\r\n        // \tconsole.warn(`[UriError] calling fsPath with scheme ${this.scheme}`);\r\n        // }\r\n        return uriToFsPath(this, false);\r\n    }\r\n    // ---- modify to new -------------------------\r\n    with(change) {\r\n        if (!change) {\r\n            return this;\r\n        }\r\n        let { scheme, authority, path, query, fragment } = change;\r\n        if (scheme === undefined) {\r\n            scheme = this.scheme;\r\n        }\r\n        else if (scheme === null) {\r\n            scheme = _empty;\r\n        }\r\n        if (authority === undefined) {\r\n            authority = this.authority;\r\n        }\r\n        else if (authority === null) {\r\n            authority = _empty;\r\n        }\r\n        if (path === undefined) {\r\n            path = this.path;\r\n        }\r\n        else if (path === null) {\r\n            path = _empty;\r\n        }\r\n        if (query === undefined) {\r\n            query = this.query;\r\n        }\r\n        else if (query === null) {\r\n            query = _empty;\r\n        }\r\n        if (fragment === undefined) {\r\n            fragment = this.fragment;\r\n        }\r\n        else if (fragment === null) {\r\n            fragment = _empty;\r\n        }\r\n        if (scheme === this.scheme\r\n            && authority === this.authority\r\n            && path === this.path\r\n            && query === this.query\r\n            && fragment === this.fragment) {\r\n            return this;\r\n        }\r\n        return new Uri(scheme, authority, path, query, fragment);\r\n    }\r\n    // ---- parse & validate ------------------------\r\n    /**\r\n     * Creates a new URI from a string, e.g. `http://www.msft.com/some/path`,\r\n     * `file:///usr/home`, or `scheme:with/path`.\r\n     *\r\n     * @param value A string which represents an URI (see `URI#toString`).\r\n     */\r\n    static parse(value, _strict = false) {\r\n        const match = _regexp.exec(value);\r\n        if (!match) {\r\n            return new Uri(_empty, _empty, _empty, _empty, _empty);\r\n        }\r\n        return new Uri(match[2] || _empty, percentDecode(match[4] || _empty), percentDecode(match[5] || _empty), percentDecode(match[7] || _empty), percentDecode(match[9] || _empty), _strict);\r\n    }\r\n    /**\r\n     * Creates a new URI from a file system path, e.g. `c:\\my\\files`,\r\n     * `/usr/home`, or `\\\\server\\share\\some\\path`.\r\n     *\r\n     * The *difference* between `URI#parse` and `URI#file` is that the latter treats the argument\r\n     * as path, not as stringified-uri. E.g. `URI.file(path)` is **not the same as**\r\n     * `URI.parse('file://' + path)` because the path might contain characters that are\r\n     * interpreted (# and ?). See the following sample:\r\n     * ```ts\r\n    const good = URI.file('/coding/c#/project1');\r\n    good.scheme === 'file';\r\n    good.path === '/coding/c#/project1';\r\n    good.fragment === '';\r\n    const bad = URI.parse('file://' + '/coding/c#/project1');\r\n    bad.scheme === 'file';\r\n    bad.path === '/coding/c'; // path is now broken\r\n    bad.fragment === '/project1';\r\n    ```\r\n     *\r\n     * @param path A file system path (see `URI#fsPath`)\r\n     */\r\n    static file(path) {\r\n        let authority = _empty;\r\n        // normalize to fwd-slashes on windows,\r\n        // on other systems bwd-slashes are valid\r\n        // filename character, eg /f\\oo/ba\\r.txt\r\n        if (isWindows) {\r\n            path = path.replace(/\\\\/g, _slash);\r\n        }\r\n        // check for authority as used in UNC shares\r\n        // or use the path as given\r\n        if (path[0] === _slash && path[1] === _slash) {\r\n            const idx = path.indexOf(_slash, 2);\r\n            if (idx === -1) {\r\n                authority = path.substring(2);\r\n                path = _slash;\r\n            }\r\n            else {\r\n                authority = path.substring(2, idx);\r\n                path = path.substring(idx) || _slash;\r\n            }\r\n        }\r\n        return new Uri('file', authority, path, _empty, _empty);\r\n    }\r\n    static from(components) {\r\n        return new Uri(components.scheme, components.authority, components.path, components.query, components.fragment);\r\n    }\r\n    /**\r\n     * Join a URI path with path fragments and normalizes the resulting path.\r\n     *\r\n     * @param uri The input URI.\r\n     * @param pathFragment The path fragment to add to the URI path.\r\n     * @returns The resulting URI.\r\n     */\r\n    static joinPath(uri, ...pathFragment) {\r\n        if (!uri.path) {\r\n            throw new Error(`[UriError]: cannot call joinPath on URI without path`);\r\n        }\r\n        let newPath;\r\n        if (isWindows && uri.scheme === 'file') {\r\n            newPath = URI.file(paths.win32.join(uriToFsPath(uri, true), ...pathFragment)).path;\r\n        }\r\n        else {\r\n            newPath = paths.posix.join(uri.path, ...pathFragment);\r\n        }\r\n        return uri.with({ path: newPath });\r\n    }\r\n    // ---- printing/externalize ---------------------------\r\n    /**\r\n     * Creates a string representation for this URI. It's guaranteed that calling\r\n     * `URI.parse` with the result of this function creates an URI which is equal\r\n     * to this URI.\r\n     *\r\n     * * The result shall *not* be used for display purposes but for externalization or transport.\r\n     * * The result will be encoded using the percentage encoding and encoding happens mostly\r\n     * ignore the scheme-specific encoding rules.\r\n     *\r\n     * @param skipEncoding Do not encode the result, default is `false`\r\n     */\r\n    toString(skipEncoding = false) {\r\n        return _asFormatted(this, skipEncoding);\r\n    }\r\n    toJSON() {\r\n        return this;\r\n    }\r\n    static revive(data) {\r\n        if (!data) {\r\n            return data;\r\n        }\r\n        else if (data instanceof URI) {\r\n            return data;\r\n        }\r\n        else {\r\n            const result = new Uri(data);\r\n            result._formatted = data.external;\r\n            result._fsPath = data._sep === _pathSepMarker ? data.fsPath : null;\r\n            return result;\r\n        }\r\n    }\r\n}\r\nconst _pathSepMarker = isWindows ? 1 : undefined;\r\n// This class exists so that URI is compatibile with vscode.Uri (API).\r\nclass Uri extends URI {\r\n    constructor() {\r\n        super(...arguments);\r\n        this._formatted = null;\r\n        this._fsPath = null;\r\n    }\r\n    get fsPath() {\r\n        if (!this._fsPath) {\r\n            this._fsPath = uriToFsPath(this, false);\r\n        }\r\n        return this._fsPath;\r\n    }\r\n    toString(skipEncoding = false) {\r\n        if (!skipEncoding) {\r\n            if (!this._formatted) {\r\n                this._formatted = _asFormatted(this, false);\r\n            }\r\n            return this._formatted;\r\n        }\r\n        else {\r\n            // we don't cache that\r\n            return _asFormatted(this, true);\r\n        }\r\n    }\r\n    toJSON() {\r\n        const res = {\r\n            $mid: 1\r\n        };\r\n        // cached state\r\n        if (this._fsPath) {\r\n            res.fsPath = this._fsPath;\r\n            res._sep = _pathSepMarker;\r\n        }\r\n        if (this._formatted) {\r\n            res.external = this._formatted;\r\n        }\r\n        // uri components\r\n        if (this.path) {\r\n            res.path = this.path;\r\n        }\r\n        if (this.scheme) {\r\n            res.scheme = this.scheme;\r\n        }\r\n        if (this.authority) {\r\n            res.authority = this.authority;\r\n        }\r\n        if (this.query) {\r\n            res.query = this.query;\r\n        }\r\n        if (this.fragment) {\r\n            res.fragment = this.fragment;\r\n        }\r\n        return res;\r\n    }\r\n}\r\n// reserved characters: https://tools.ietf.org/html/rfc3986#section-2.2\r\nconst encodeTable = {\r\n    [58 /* Colon */]: '%3A',\r\n    [47 /* Slash */]: '%2F',\r\n    [63 /* QuestionMark */]: '%3F',\r\n    [35 /* Hash */]: '%23',\r\n    [91 /* OpenSquareBracket */]: '%5B',\r\n    [93 /* CloseSquareBracket */]: '%5D',\r\n    [64 /* AtSign */]: '%40',\r\n    [33 /* ExclamationMark */]: '%21',\r\n    [36 /* DollarSign */]: '%24',\r\n    [38 /* Ampersand */]: '%26',\r\n    [39 /* SingleQuote */]: '%27',\r\n    [40 /* OpenParen */]: '%28',\r\n    [41 /* CloseParen */]: '%29',\r\n    [42 /* Asterisk */]: '%2A',\r\n    [43 /* Plus */]: '%2B',\r\n    [44 /* Comma */]: '%2C',\r\n    [59 /* Semicolon */]: '%3B',\r\n    [61 /* Equals */]: '%3D',\r\n    [32 /* Space */]: '%20',\r\n};\r\nfunction encodeURIComponentFast(uriComponent, allowSlash) {\r\n    let res = undefined;\r\n    let nativeEncodePos = -1;\r\n    for (let pos = 0; pos < uriComponent.length; pos++) {\r\n        const code = uriComponent.charCodeAt(pos);\r\n        // unreserved characters: https://tools.ietf.org/html/rfc3986#section-2.3\r\n        if ((code >= 97 /* a */ && code <= 122 /* z */)\r\n            || (code >= 65 /* A */ && code <= 90 /* Z */)\r\n            || (code >= 48 /* Digit0 */ && code <= 57 /* Digit9 */)\r\n            || code === 45 /* Dash */\r\n            || code === 46 /* Period */\r\n            || code === 95 /* Underline */\r\n            || code === 126 /* Tilde */\r\n            || (allowSlash && code === 47 /* Slash */)) {\r\n            // check if we are delaying native encode\r\n            if (nativeEncodePos !== -1) {\r\n                res += encodeURIComponent(uriComponent.substring(nativeEncodePos, pos));\r\n                nativeEncodePos = -1;\r\n            }\r\n            // check if we write into a new string (by default we try to return the param)\r\n            if (res !== undefined) {\r\n                res += uriComponent.charAt(pos);\r\n            }\r\n        }\r\n        else {\r\n            // encoding needed, we need to allocate a new string\r\n            if (res === undefined) {\r\n                res = uriComponent.substr(0, pos);\r\n            }\r\n            // check with default table first\r\n            const escaped = encodeTable[code];\r\n            if (escaped !== undefined) {\r\n                // check if we are delaying native encode\r\n                if (nativeEncodePos !== -1) {\r\n                    res += encodeURIComponent(uriComponent.substring(nativeEncodePos, pos));\r\n                    nativeEncodePos = -1;\r\n                }\r\n                // append escaped variant to result\r\n                res += escaped;\r\n            }\r\n            else if (nativeEncodePos === -1) {\r\n                // use native encode only when needed\r\n                nativeEncodePos = pos;\r\n            }\r\n        }\r\n    }\r\n    if (nativeEncodePos !== -1) {\r\n        res += encodeURIComponent(uriComponent.substring(nativeEncodePos));\r\n    }\r\n    return res !== undefined ? res : uriComponent;\r\n}\r\nfunction encodeURIComponentMinimal(path) {\r\n    let res = undefined;\r\n    for (let pos = 0; pos < path.length; pos++) {\r\n        const code = path.charCodeAt(pos);\r\n        if (code === 35 /* Hash */ || code === 63 /* QuestionMark */) {\r\n            if (res === undefined) {\r\n                res = path.substr(0, pos);\r\n            }\r\n            res += encodeTable[code];\r\n        }\r\n        else {\r\n            if (res !== undefined) {\r\n                res += path[pos];\r\n            }\r\n        }\r\n    }\r\n    return res !== undefined ? res : path;\r\n}\r\n/**\r\n * Compute `fsPath` for the given uri\r\n */\r\nexport function uriToFsPath(uri, keepDriveLetterCasing) {\r\n    let value;\r\n    if (uri.authority && uri.path.length > 1 && uri.scheme === 'file') {\r\n        // unc path: file://shares/c$/far/boo\r\n        value = `//${uri.authority}${uri.path}`;\r\n    }\r\n    else if (uri.path.charCodeAt(0) === 47 /* Slash */\r\n        && (uri.path.charCodeAt(1) >= 65 /* A */ && uri.path.charCodeAt(1) <= 90 /* Z */ || uri.path.charCodeAt(1) >= 97 /* a */ && uri.path.charCodeAt(1) <= 122 /* z */)\r\n        && uri.path.charCodeAt(2) === 58 /* Colon */) {\r\n        if (!keepDriveLetterCasing) {\r\n            // windows drive letter: file:///c:/far/boo\r\n            value = uri.path[1].toLowerCase() + uri.path.substr(2);\r\n        }\r\n        else {\r\n            value = uri.path.substr(1);\r\n        }\r\n    }\r\n    else {\r\n        // other path\r\n        value = uri.path;\r\n    }\r\n    if (isWindows) {\r\n        value = value.replace(/\\//g, '\\\\');\r\n    }\r\n    return value;\r\n}\r\n/**\r\n * Create the external version of a uri\r\n */\r\nfunction _asFormatted(uri, skipEncoding) {\r\n    const encoder = !skipEncoding\r\n        ? encodeURIComponentFast\r\n        : encodeURIComponentMinimal;\r\n    let res = '';\r\n    let { scheme, authority, path, query, fragment } = uri;\r\n    if (scheme) {\r\n        res += scheme;\r\n        res += ':';\r\n    }\r\n    if (authority || scheme === 'file') {\r\n        res += _slash;\r\n        res += _slash;\r\n    }\r\n    if (authority) {\r\n        let idx = authority.indexOf('@');\r\n        if (idx !== -1) {\r\n            // <user>@<auth>\r\n            const userinfo = authority.substr(0, idx);\r\n            authority = authority.substr(idx + 1);\r\n            idx = userinfo.indexOf(':');\r\n            if (idx === -1) {\r\n                res += encoder(userinfo, false);\r\n            }\r\n            else {\r\n                // <user>:<pass>@<auth>\r\n                res += encoder(userinfo.substr(0, idx), false);\r\n                res += ':';\r\n                res += encoder(userinfo.substr(idx + 1), false);\r\n            }\r\n            res += '@';\r\n        }\r\n        authority = authority.toLowerCase();\r\n        idx = authority.indexOf(':');\r\n        if (idx === -1) {\r\n            res += encoder(authority, false);\r\n        }\r\n        else {\r\n            // <auth>:<port>\r\n            res += encoder(authority.substr(0, idx), false);\r\n            res += authority.substr(idx);\r\n        }\r\n    }\r\n    if (path) {\r\n        // lower-case windows drive letters in /C:/fff or C:/fff\r\n        if (path.length >= 3 && path.charCodeAt(0) === 47 /* Slash */ && path.charCodeAt(2) === 58 /* Colon */) {\r\n            const code = path.charCodeAt(1);\r\n            if (code >= 65 /* A */ && code <= 90 /* Z */) {\r\n                path = `/${String.fromCharCode(code + 32)}:${path.substr(3)}`; // \"/c:\".length === 3\r\n            }\r\n        }\r\n        else if (path.length >= 2 && path.charCodeAt(1) === 58 /* Colon */) {\r\n            const code = path.charCodeAt(0);\r\n            if (code >= 65 /* A */ && code <= 90 /* Z */) {\r\n                path = `${String.fromCharCode(code + 32)}:${path.substr(2)}`; // \"/c:\".length === 3\r\n            }\r\n        }\r\n        // encode the rest of the path\r\n        res += encoder(path, true);\r\n    }\r\n    if (query) {\r\n        res += '?';\r\n        res += encoder(query, false);\r\n    }\r\n    if (fragment) {\r\n        res += '#';\r\n        res += !skipEncoding ? encodeURIComponentFast(fragment, false) : fragment;\r\n    }\r\n    return res;\r\n}\r\n// --- decode\r\nfunction decodeURIComponentGraceful(str) {\r\n    try {\r\n        return decodeURIComponent(str);\r\n    }\r\n    catch (_a) {\r\n        if (str.length > 3) {\r\n            return str.substr(0, 3) + decodeURIComponentGraceful(str.substr(3));\r\n        }\r\n        else {\r\n            return str;\r\n        }\r\n    }\r\n}\r\nconst _rEncodedAsHex = /(%[0-9A-Za-z][0-9A-Za-z])+/g;\r\nfunction percentDecode(str) {\r\n    if (!str.match(_rEncodedAsHex)) {\r\n        return str;\r\n    }\r\n    return str.replace(_rEncodedAsHex, (match) => decodeURIComponentGraceful(match));\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}