{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { CursorState } from './cursorCommon.js';\nimport { OneCursor } from './oneCursor.js';\nimport { Selection } from '../core/selection.js';\nexport class CursorCollection {\n  constructor(context) {\n    this.context = context;\n    this.primaryCursor = new OneCursor(context);\n    this.secondaryCursors = [];\n    this.lastAddedCursorIndex = 0;\n  }\n  dispose() {\n    this.primaryCursor.dispose(this.context);\n    this.killSecondaryCursors();\n  }\n  startTrackingSelections() {\n    this.primaryCursor.startTrackingSelection(this.context);\n    for (let i = 0, len = this.secondaryCursors.length; i < len; i++) {\n      this.secondaryCursors[i].startTrackingSelection(this.context);\n    }\n  }\n  stopTrackingSelections() {\n    this.primaryCursor.stopTrackingSelection(this.context);\n    for (let i = 0, len = this.secondaryCursors.length; i < len; i++) {\n      this.secondaryCursors[i].stopTrackingSelection(this.context);\n    }\n  }\n  updateContext(context) {\n    this.context = context;\n  }\n  ensureValidState() {\n    this.primaryCursor.ensureValidState(this.context);\n    for (let i = 0, len = this.secondaryCursors.length; i < len; i++) {\n      this.secondaryCursors[i].ensureValidState(this.context);\n    }\n  }\n  readSelectionFromMarkers() {\n    let result = [];\n    result[0] = this.primaryCursor.readSelectionFromMarkers(this.context);\n    for (let i = 0, len = this.secondaryCursors.length; i < len; i++) {\n      result[i + 1] = this.secondaryCursors[i].readSelectionFromMarkers(this.context);\n    }\n    return result;\n  }\n  getAll() {\n    let result = [];\n    result[0] = this.primaryCursor.asCursorState();\n    for (let i = 0, len = this.secondaryCursors.length; i < len; i++) {\n      result[i + 1] = this.secondaryCursors[i].asCursorState();\n    }\n    return result;\n  }\n  getViewPositions() {\n    let result = [];\n    result[0] = this.primaryCursor.viewState.position;\n    for (let i = 0, len = this.secondaryCursors.length; i < len; i++) {\n      result[i + 1] = this.secondaryCursors[i].viewState.position;\n    }\n    return result;\n  }\n  getTopMostViewPosition() {\n    let result = this.primaryCursor.viewState.position;\n    for (let i = 0, len = this.secondaryCursors.length; i < len; i++) {\n      const viewPosition = this.secondaryCursors[i].viewState.position;\n      if (viewPosition.isBefore(result)) {\n        result = viewPosition;\n      }\n    }\n    return result;\n  }\n  getBottomMostViewPosition() {\n    let result = this.primaryCursor.viewState.position;\n    for (let i = 0, len = this.secondaryCursors.length; i < len; i++) {\n      const viewPosition = this.secondaryCursors[i].viewState.position;\n      if (result.isBeforeOrEqual(viewPosition)) {\n        result = viewPosition;\n      }\n    }\n    return result;\n  }\n  getSelections() {\n    let result = [];\n    result[0] = this.primaryCursor.modelState.selection;\n    for (let i = 0, len = this.secondaryCursors.length; i < len; i++) {\n      result[i + 1] = this.secondaryCursors[i].modelState.selection;\n    }\n    return result;\n  }\n  getViewSelections() {\n    let result = [];\n    result[0] = this.primaryCursor.viewState.selection;\n    for (let i = 0, len = this.secondaryCursors.length; i < len; i++) {\n      result[i + 1] = this.secondaryCursors[i].viewState.selection;\n    }\n    return result;\n  }\n  setSelections(selections) {\n    this.setStates(CursorState.fromModelSelections(selections));\n  }\n  getPrimaryCursor() {\n    return this.primaryCursor.asCursorState();\n  }\n  setStates(states) {\n    if (states === null) {\n      return;\n    }\n    this.primaryCursor.setState(this.context, states[0].modelState, states[0].viewState);\n    this._setSecondaryStates(states.slice(1));\n  }\n  /**\r\n   * Creates or disposes secondary cursors as necessary to match the number of `secondarySelections`.\r\n   */\n  _setSecondaryStates(secondaryStates) {\n    const secondaryCursorsLength = this.secondaryCursors.length;\n    const secondaryStatesLength = secondaryStates.length;\n    if (secondaryCursorsLength < secondaryStatesLength) {\n      let createCnt = secondaryStatesLength - secondaryCursorsLength;\n      for (let i = 0; i < createCnt; i++) {\n        this._addSecondaryCursor();\n      }\n    } else if (secondaryCursorsLength > secondaryStatesLength) {\n      let removeCnt = secondaryCursorsLength - secondaryStatesLength;\n      for (let i = 0; i < removeCnt; i++) {\n        this._removeSecondaryCursor(this.secondaryCursors.length - 1);\n      }\n    }\n    for (let i = 0; i < secondaryStatesLength; i++) {\n      this.secondaryCursors[i].setState(this.context, secondaryStates[i].modelState, secondaryStates[i].viewState);\n    }\n  }\n  killSecondaryCursors() {\n    this._setSecondaryStates([]);\n  }\n  _addSecondaryCursor() {\n    this.secondaryCursors.push(new OneCursor(this.context));\n    this.lastAddedCursorIndex = this.secondaryCursors.length;\n  }\n  getLastAddedCursorIndex() {\n    if (this.secondaryCursors.length === 0 || this.lastAddedCursorIndex === 0) {\n      return 0;\n    }\n    return this.lastAddedCursorIndex;\n  }\n  _removeSecondaryCursor(removeIndex) {\n    if (this.lastAddedCursorIndex >= removeIndex + 1) {\n      this.lastAddedCursorIndex--;\n    }\n    this.secondaryCursors[removeIndex].dispose(this.context);\n    this.secondaryCursors.splice(removeIndex, 1);\n  }\n  _getAll() {\n    let result = [];\n    result[0] = this.primaryCursor;\n    for (let i = 0, len = this.secondaryCursors.length; i < len; i++) {\n      result[i + 1] = this.secondaryCursors[i];\n    }\n    return result;\n  }\n  normalize() {\n    if (this.secondaryCursors.length === 0) {\n      return;\n    }\n    let cursors = this._getAll();\n    let sortedCursors = [];\n    for (let i = 0, len = cursors.length; i < len; i++) {\n      sortedCursors.push({\n        index: i,\n        selection: cursors[i].modelState.selection\n      });\n    }\n    sortedCursors.sort((a, b) => {\n      if (a.selection.startLineNumber === b.selection.startLineNumber) {\n        return a.selection.startColumn - b.selection.startColumn;\n      }\n      return a.selection.startLineNumber - b.selection.startLineNumber;\n    });\n    for (let sortedCursorIndex = 0; sortedCursorIndex < sortedCursors.length - 1; sortedCursorIndex++) {\n      const current = sortedCursors[sortedCursorIndex];\n      const next = sortedCursors[sortedCursorIndex + 1];\n      const currentSelection = current.selection;\n      const nextSelection = next.selection;\n      if (!this.context.cursorConfig.multiCursorMergeOverlapping) {\n        continue;\n      }\n      let shouldMergeCursors;\n      if (nextSelection.isEmpty() || currentSelection.isEmpty()) {\n        // Merge touching cursors if one of them is collapsed\n        shouldMergeCursors = nextSelection.getStartPosition().isBeforeOrEqual(currentSelection.getEndPosition());\n      } else {\n        // Merge only overlapping cursors (i.e. allow touching ranges)\n        shouldMergeCursors = nextSelection.getStartPosition().isBefore(currentSelection.getEndPosition());\n      }\n      if (shouldMergeCursors) {\n        const winnerSortedCursorIndex = current.index < next.index ? sortedCursorIndex : sortedCursorIndex + 1;\n        const looserSortedCursorIndex = current.index < next.index ? sortedCursorIndex + 1 : sortedCursorIndex;\n        const looserIndex = sortedCursors[looserSortedCursorIndex].index;\n        const winnerIndex = sortedCursors[winnerSortedCursorIndex].index;\n        const looserSelection = sortedCursors[looserSortedCursorIndex].selection;\n        const winnerSelection = sortedCursors[winnerSortedCursorIndex].selection;\n        if (!looserSelection.equalsSelection(winnerSelection)) {\n          const resultingRange = looserSelection.plusRange(winnerSelection);\n          const looserSelectionIsLTR = looserSelection.selectionStartLineNumber === looserSelection.startLineNumber && looserSelection.selectionStartColumn === looserSelection.startColumn;\n          const winnerSelectionIsLTR = winnerSelection.selectionStartLineNumber === winnerSelection.startLineNumber && winnerSelection.selectionStartColumn === winnerSelection.startColumn;\n          // Give more importance to the last added cursor (think Ctrl-dragging + hitting another cursor)\n          let resultingSelectionIsLTR;\n          if (looserIndex === this.lastAddedCursorIndex) {\n            resultingSelectionIsLTR = looserSelectionIsLTR;\n            this.lastAddedCursorIndex = winnerIndex;\n          } else {\n            // Winner takes it all\n            resultingSelectionIsLTR = winnerSelectionIsLTR;\n          }\n          let resultingSelection;\n          if (resultingSelectionIsLTR) {\n            resultingSelection = new Selection(resultingRange.startLineNumber, resultingRange.startColumn, resultingRange.endLineNumber, resultingRange.endColumn);\n          } else {\n            resultingSelection = new Selection(resultingRange.endLineNumber, resultingRange.endColumn, resultingRange.startLineNumber, resultingRange.startColumn);\n          }\n          sortedCursors[winnerSortedCursorIndex].selection = resultingSelection;\n          const resultingState = CursorState.fromModelSelection(resultingSelection);\n          cursors[winnerIndex].setState(this.context, resultingState.modelState, resultingState.viewState);\n        }\n        for (const sortedCursor of sortedCursors) {\n          if (sortedCursor.index > looserIndex) {\n            sortedCursor.index--;\n          }\n        }\n        cursors.splice(looserIndex, 1);\n        sortedCursors.splice(looserSortedCursorIndex, 1);\n        this._removeSecondaryCursor(looserIndex - 1);\n        sortedCursorIndex--;\n      }\n    }\n  }\n}","map":{"version":3,"names":["CursorState","OneCursor","Selection","CursorCollection","constructor","context","primaryCursor","secondaryCursors","lastAddedCursorIndex","dispose","killSecondaryCursors","startTrackingSelections","startTrackingSelection","i","len","length","stopTrackingSelections","stopTrackingSelection","updateContext","ensureValidState","readSelectionFromMarkers","result","getAll","asCursorState","getViewPositions","viewState","position","getTopMostViewPosition","viewPosition","isBefore","getBottomMostViewPosition","isBeforeOrEqual","getSelections","modelState","selection","getViewSelections","setSelections","selections","setStates","fromModelSelections","getPrimaryCursor","states","setState","_setSecondaryStates","slice","secondaryStates","secondaryCursorsLength","secondaryStatesLength","createCnt","_addSecondaryCursor","removeCnt","_removeSecondaryCursor","push","getLastAddedCursorIndex","removeIndex","splice","_getAll","normalize","cursors","sortedCursors","index","sort","a","b","startLineNumber","startColumn","sortedCursorIndex","current","next","currentSelection","nextSelection","cursorConfig","multiCursorMergeOverlapping","shouldMergeCursors","isEmpty","getStartPosition","getEndPosition","winnerSortedCursorIndex","looserSortedCursorIndex","looserIndex","winnerIndex","looserSelection","winnerSelection","equalsSelection","resultingRange","plusRange","looserSelectionIsLTR","selectionStartLineNumber","selectionStartColumn","winnerSelectionIsLTR","resultingSelectionIsLTR","resultingSelection","endLineNumber","endColumn","resultingState","fromModelSelection","sortedCursor"],"sources":["C:/Users/Administrator/Desktop/sqllineage-master/sqllineagejs/node_modules/monaco-editor/esm/vs/editor/common/controller/cursorCollection.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { CursorState } from './cursorCommon.js';\r\nimport { OneCursor } from './oneCursor.js';\r\nimport { Selection } from '../core/selection.js';\r\nexport class CursorCollection {\r\n    constructor(context) {\r\n        this.context = context;\r\n        this.primaryCursor = new OneCursor(context);\r\n        this.secondaryCursors = [];\r\n        this.lastAddedCursorIndex = 0;\r\n    }\r\n    dispose() {\r\n        this.primaryCursor.dispose(this.context);\r\n        this.killSecondaryCursors();\r\n    }\r\n    startTrackingSelections() {\r\n        this.primaryCursor.startTrackingSelection(this.context);\r\n        for (let i = 0, len = this.secondaryCursors.length; i < len; i++) {\r\n            this.secondaryCursors[i].startTrackingSelection(this.context);\r\n        }\r\n    }\r\n    stopTrackingSelections() {\r\n        this.primaryCursor.stopTrackingSelection(this.context);\r\n        for (let i = 0, len = this.secondaryCursors.length; i < len; i++) {\r\n            this.secondaryCursors[i].stopTrackingSelection(this.context);\r\n        }\r\n    }\r\n    updateContext(context) {\r\n        this.context = context;\r\n    }\r\n    ensureValidState() {\r\n        this.primaryCursor.ensureValidState(this.context);\r\n        for (let i = 0, len = this.secondaryCursors.length; i < len; i++) {\r\n            this.secondaryCursors[i].ensureValidState(this.context);\r\n        }\r\n    }\r\n    readSelectionFromMarkers() {\r\n        let result = [];\r\n        result[0] = this.primaryCursor.readSelectionFromMarkers(this.context);\r\n        for (let i = 0, len = this.secondaryCursors.length; i < len; i++) {\r\n            result[i + 1] = this.secondaryCursors[i].readSelectionFromMarkers(this.context);\r\n        }\r\n        return result;\r\n    }\r\n    getAll() {\r\n        let result = [];\r\n        result[0] = this.primaryCursor.asCursorState();\r\n        for (let i = 0, len = this.secondaryCursors.length; i < len; i++) {\r\n            result[i + 1] = this.secondaryCursors[i].asCursorState();\r\n        }\r\n        return result;\r\n    }\r\n    getViewPositions() {\r\n        let result = [];\r\n        result[0] = this.primaryCursor.viewState.position;\r\n        for (let i = 0, len = this.secondaryCursors.length; i < len; i++) {\r\n            result[i + 1] = this.secondaryCursors[i].viewState.position;\r\n        }\r\n        return result;\r\n    }\r\n    getTopMostViewPosition() {\r\n        let result = this.primaryCursor.viewState.position;\r\n        for (let i = 0, len = this.secondaryCursors.length; i < len; i++) {\r\n            const viewPosition = this.secondaryCursors[i].viewState.position;\r\n            if (viewPosition.isBefore(result)) {\r\n                result = viewPosition;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    getBottomMostViewPosition() {\r\n        let result = this.primaryCursor.viewState.position;\r\n        for (let i = 0, len = this.secondaryCursors.length; i < len; i++) {\r\n            const viewPosition = this.secondaryCursors[i].viewState.position;\r\n            if (result.isBeforeOrEqual(viewPosition)) {\r\n                result = viewPosition;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    getSelections() {\r\n        let result = [];\r\n        result[0] = this.primaryCursor.modelState.selection;\r\n        for (let i = 0, len = this.secondaryCursors.length; i < len; i++) {\r\n            result[i + 1] = this.secondaryCursors[i].modelState.selection;\r\n        }\r\n        return result;\r\n    }\r\n    getViewSelections() {\r\n        let result = [];\r\n        result[0] = this.primaryCursor.viewState.selection;\r\n        for (let i = 0, len = this.secondaryCursors.length; i < len; i++) {\r\n            result[i + 1] = this.secondaryCursors[i].viewState.selection;\r\n        }\r\n        return result;\r\n    }\r\n    setSelections(selections) {\r\n        this.setStates(CursorState.fromModelSelections(selections));\r\n    }\r\n    getPrimaryCursor() {\r\n        return this.primaryCursor.asCursorState();\r\n    }\r\n    setStates(states) {\r\n        if (states === null) {\r\n            return;\r\n        }\r\n        this.primaryCursor.setState(this.context, states[0].modelState, states[0].viewState);\r\n        this._setSecondaryStates(states.slice(1));\r\n    }\r\n    /**\r\n     * Creates or disposes secondary cursors as necessary to match the number of `secondarySelections`.\r\n     */\r\n    _setSecondaryStates(secondaryStates) {\r\n        const secondaryCursorsLength = this.secondaryCursors.length;\r\n        const secondaryStatesLength = secondaryStates.length;\r\n        if (secondaryCursorsLength < secondaryStatesLength) {\r\n            let createCnt = secondaryStatesLength - secondaryCursorsLength;\r\n            for (let i = 0; i < createCnt; i++) {\r\n                this._addSecondaryCursor();\r\n            }\r\n        }\r\n        else if (secondaryCursorsLength > secondaryStatesLength) {\r\n            let removeCnt = secondaryCursorsLength - secondaryStatesLength;\r\n            for (let i = 0; i < removeCnt; i++) {\r\n                this._removeSecondaryCursor(this.secondaryCursors.length - 1);\r\n            }\r\n        }\r\n        for (let i = 0; i < secondaryStatesLength; i++) {\r\n            this.secondaryCursors[i].setState(this.context, secondaryStates[i].modelState, secondaryStates[i].viewState);\r\n        }\r\n    }\r\n    killSecondaryCursors() {\r\n        this._setSecondaryStates([]);\r\n    }\r\n    _addSecondaryCursor() {\r\n        this.secondaryCursors.push(new OneCursor(this.context));\r\n        this.lastAddedCursorIndex = this.secondaryCursors.length;\r\n    }\r\n    getLastAddedCursorIndex() {\r\n        if (this.secondaryCursors.length === 0 || this.lastAddedCursorIndex === 0) {\r\n            return 0;\r\n        }\r\n        return this.lastAddedCursorIndex;\r\n    }\r\n    _removeSecondaryCursor(removeIndex) {\r\n        if (this.lastAddedCursorIndex >= removeIndex + 1) {\r\n            this.lastAddedCursorIndex--;\r\n        }\r\n        this.secondaryCursors[removeIndex].dispose(this.context);\r\n        this.secondaryCursors.splice(removeIndex, 1);\r\n    }\r\n    _getAll() {\r\n        let result = [];\r\n        result[0] = this.primaryCursor;\r\n        for (let i = 0, len = this.secondaryCursors.length; i < len; i++) {\r\n            result[i + 1] = this.secondaryCursors[i];\r\n        }\r\n        return result;\r\n    }\r\n    normalize() {\r\n        if (this.secondaryCursors.length === 0) {\r\n            return;\r\n        }\r\n        let cursors = this._getAll();\r\n        let sortedCursors = [];\r\n        for (let i = 0, len = cursors.length; i < len; i++) {\r\n            sortedCursors.push({\r\n                index: i,\r\n                selection: cursors[i].modelState.selection,\r\n            });\r\n        }\r\n        sortedCursors.sort((a, b) => {\r\n            if (a.selection.startLineNumber === b.selection.startLineNumber) {\r\n                return a.selection.startColumn - b.selection.startColumn;\r\n            }\r\n            return a.selection.startLineNumber - b.selection.startLineNumber;\r\n        });\r\n        for (let sortedCursorIndex = 0; sortedCursorIndex < sortedCursors.length - 1; sortedCursorIndex++) {\r\n            const current = sortedCursors[sortedCursorIndex];\r\n            const next = sortedCursors[sortedCursorIndex + 1];\r\n            const currentSelection = current.selection;\r\n            const nextSelection = next.selection;\r\n            if (!this.context.cursorConfig.multiCursorMergeOverlapping) {\r\n                continue;\r\n            }\r\n            let shouldMergeCursors;\r\n            if (nextSelection.isEmpty() || currentSelection.isEmpty()) {\r\n                // Merge touching cursors if one of them is collapsed\r\n                shouldMergeCursors = nextSelection.getStartPosition().isBeforeOrEqual(currentSelection.getEndPosition());\r\n            }\r\n            else {\r\n                // Merge only overlapping cursors (i.e. allow touching ranges)\r\n                shouldMergeCursors = nextSelection.getStartPosition().isBefore(currentSelection.getEndPosition());\r\n            }\r\n            if (shouldMergeCursors) {\r\n                const winnerSortedCursorIndex = current.index < next.index ? sortedCursorIndex : sortedCursorIndex + 1;\r\n                const looserSortedCursorIndex = current.index < next.index ? sortedCursorIndex + 1 : sortedCursorIndex;\r\n                const looserIndex = sortedCursors[looserSortedCursorIndex].index;\r\n                const winnerIndex = sortedCursors[winnerSortedCursorIndex].index;\r\n                const looserSelection = sortedCursors[looserSortedCursorIndex].selection;\r\n                const winnerSelection = sortedCursors[winnerSortedCursorIndex].selection;\r\n                if (!looserSelection.equalsSelection(winnerSelection)) {\r\n                    const resultingRange = looserSelection.plusRange(winnerSelection);\r\n                    const looserSelectionIsLTR = (looserSelection.selectionStartLineNumber === looserSelection.startLineNumber && looserSelection.selectionStartColumn === looserSelection.startColumn);\r\n                    const winnerSelectionIsLTR = (winnerSelection.selectionStartLineNumber === winnerSelection.startLineNumber && winnerSelection.selectionStartColumn === winnerSelection.startColumn);\r\n                    // Give more importance to the last added cursor (think Ctrl-dragging + hitting another cursor)\r\n                    let resultingSelectionIsLTR;\r\n                    if (looserIndex === this.lastAddedCursorIndex) {\r\n                        resultingSelectionIsLTR = looserSelectionIsLTR;\r\n                        this.lastAddedCursorIndex = winnerIndex;\r\n                    }\r\n                    else {\r\n                        // Winner takes it all\r\n                        resultingSelectionIsLTR = winnerSelectionIsLTR;\r\n                    }\r\n                    let resultingSelection;\r\n                    if (resultingSelectionIsLTR) {\r\n                        resultingSelection = new Selection(resultingRange.startLineNumber, resultingRange.startColumn, resultingRange.endLineNumber, resultingRange.endColumn);\r\n                    }\r\n                    else {\r\n                        resultingSelection = new Selection(resultingRange.endLineNumber, resultingRange.endColumn, resultingRange.startLineNumber, resultingRange.startColumn);\r\n                    }\r\n                    sortedCursors[winnerSortedCursorIndex].selection = resultingSelection;\r\n                    const resultingState = CursorState.fromModelSelection(resultingSelection);\r\n                    cursors[winnerIndex].setState(this.context, resultingState.modelState, resultingState.viewState);\r\n                }\r\n                for (const sortedCursor of sortedCursors) {\r\n                    if (sortedCursor.index > looserIndex) {\r\n                        sortedCursor.index--;\r\n                    }\r\n                }\r\n                cursors.splice(looserIndex, 1);\r\n                sortedCursors.splice(looserSortedCursorIndex, 1);\r\n                this._removeSecondaryCursor(looserIndex - 1);\r\n                sortedCursorIndex--;\r\n            }\r\n        }\r\n    }\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,WAAW,QAAQ,mBAAmB;AAC/C,SAASC,SAAS,QAAQ,gBAAgB;AAC1C,SAASC,SAAS,QAAQ,sBAAsB;AAChD,OAAO,MAAMC,gBAAgB,CAAC;EAC1BC,WAAWA,CAACC,OAAO,EAAE;IACjB,IAAI,CAACA,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,aAAa,GAAG,IAAIL,SAAS,CAACI,OAAO,CAAC;IAC3C,IAAI,CAACE,gBAAgB,GAAG,EAAE;IAC1B,IAAI,CAACC,oBAAoB,GAAG,CAAC;EACjC;EACAC,OAAOA,CAAA,EAAG;IACN,IAAI,CAACH,aAAa,CAACG,OAAO,CAAC,IAAI,CAACJ,OAAO,CAAC;IACxC,IAAI,CAACK,oBAAoB,CAAC,CAAC;EAC/B;EACAC,uBAAuBA,CAAA,EAAG;IACtB,IAAI,CAACL,aAAa,CAACM,sBAAsB,CAAC,IAAI,CAACP,OAAO,CAAC;IACvD,KAAK,IAAIQ,CAAC,GAAG,CAAC,EAAEC,GAAG,GAAG,IAAI,CAACP,gBAAgB,CAACQ,MAAM,EAAEF,CAAC,GAAGC,GAAG,EAAED,CAAC,EAAE,EAAE;MAC9D,IAAI,CAACN,gBAAgB,CAACM,CAAC,CAAC,CAACD,sBAAsB,CAAC,IAAI,CAACP,OAAO,CAAC;IACjE;EACJ;EACAW,sBAAsBA,CAAA,EAAG;IACrB,IAAI,CAACV,aAAa,CAACW,qBAAqB,CAAC,IAAI,CAACZ,OAAO,CAAC;IACtD,KAAK,IAAIQ,CAAC,GAAG,CAAC,EAAEC,GAAG,GAAG,IAAI,CAACP,gBAAgB,CAACQ,MAAM,EAAEF,CAAC,GAAGC,GAAG,EAAED,CAAC,EAAE,EAAE;MAC9D,IAAI,CAACN,gBAAgB,CAACM,CAAC,CAAC,CAACI,qBAAqB,CAAC,IAAI,CAACZ,OAAO,CAAC;IAChE;EACJ;EACAa,aAAaA,CAACb,OAAO,EAAE;IACnB,IAAI,CAACA,OAAO,GAAGA,OAAO;EAC1B;EACAc,gBAAgBA,CAAA,EAAG;IACf,IAAI,CAACb,aAAa,CAACa,gBAAgB,CAAC,IAAI,CAACd,OAAO,CAAC;IACjD,KAAK,IAAIQ,CAAC,GAAG,CAAC,EAAEC,GAAG,GAAG,IAAI,CAACP,gBAAgB,CAACQ,MAAM,EAAEF,CAAC,GAAGC,GAAG,EAAED,CAAC,EAAE,EAAE;MAC9D,IAAI,CAACN,gBAAgB,CAACM,CAAC,CAAC,CAACM,gBAAgB,CAAC,IAAI,CAACd,OAAO,CAAC;IAC3D;EACJ;EACAe,wBAAwBA,CAAA,EAAG;IACvB,IAAIC,MAAM,GAAG,EAAE;IACfA,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI,CAACf,aAAa,CAACc,wBAAwB,CAAC,IAAI,CAACf,OAAO,CAAC;IACrE,KAAK,IAAIQ,CAAC,GAAG,CAAC,EAAEC,GAAG,GAAG,IAAI,CAACP,gBAAgB,CAACQ,MAAM,EAAEF,CAAC,GAAGC,GAAG,EAAED,CAAC,EAAE,EAAE;MAC9DQ,MAAM,CAACR,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAACN,gBAAgB,CAACM,CAAC,CAAC,CAACO,wBAAwB,CAAC,IAAI,CAACf,OAAO,CAAC;IACnF;IACA,OAAOgB,MAAM;EACjB;EACAC,MAAMA,CAAA,EAAG;IACL,IAAID,MAAM,GAAG,EAAE;IACfA,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI,CAACf,aAAa,CAACiB,aAAa,CAAC,CAAC;IAC9C,KAAK,IAAIV,CAAC,GAAG,CAAC,EAAEC,GAAG,GAAG,IAAI,CAACP,gBAAgB,CAACQ,MAAM,EAAEF,CAAC,GAAGC,GAAG,EAAED,CAAC,EAAE,EAAE;MAC9DQ,MAAM,CAACR,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAACN,gBAAgB,CAACM,CAAC,CAAC,CAACU,aAAa,CAAC,CAAC;IAC5D;IACA,OAAOF,MAAM;EACjB;EACAG,gBAAgBA,CAAA,EAAG;IACf,IAAIH,MAAM,GAAG,EAAE;IACfA,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI,CAACf,aAAa,CAACmB,SAAS,CAACC,QAAQ;IACjD,KAAK,IAAIb,CAAC,GAAG,CAAC,EAAEC,GAAG,GAAG,IAAI,CAACP,gBAAgB,CAACQ,MAAM,EAAEF,CAAC,GAAGC,GAAG,EAAED,CAAC,EAAE,EAAE;MAC9DQ,MAAM,CAACR,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAACN,gBAAgB,CAACM,CAAC,CAAC,CAACY,SAAS,CAACC,QAAQ;IAC/D;IACA,OAAOL,MAAM;EACjB;EACAM,sBAAsBA,CAAA,EAAG;IACrB,IAAIN,MAAM,GAAG,IAAI,CAACf,aAAa,CAACmB,SAAS,CAACC,QAAQ;IAClD,KAAK,IAAIb,CAAC,GAAG,CAAC,EAAEC,GAAG,GAAG,IAAI,CAACP,gBAAgB,CAACQ,MAAM,EAAEF,CAAC,GAAGC,GAAG,EAAED,CAAC,EAAE,EAAE;MAC9D,MAAMe,YAAY,GAAG,IAAI,CAACrB,gBAAgB,CAACM,CAAC,CAAC,CAACY,SAAS,CAACC,QAAQ;MAChE,IAAIE,YAAY,CAACC,QAAQ,CAACR,MAAM,CAAC,EAAE;QAC/BA,MAAM,GAAGO,YAAY;MACzB;IACJ;IACA,OAAOP,MAAM;EACjB;EACAS,yBAAyBA,CAAA,EAAG;IACxB,IAAIT,MAAM,GAAG,IAAI,CAACf,aAAa,CAACmB,SAAS,CAACC,QAAQ;IAClD,KAAK,IAAIb,CAAC,GAAG,CAAC,EAAEC,GAAG,GAAG,IAAI,CAACP,gBAAgB,CAACQ,MAAM,EAAEF,CAAC,GAAGC,GAAG,EAAED,CAAC,EAAE,EAAE;MAC9D,MAAMe,YAAY,GAAG,IAAI,CAACrB,gBAAgB,CAACM,CAAC,CAAC,CAACY,SAAS,CAACC,QAAQ;MAChE,IAAIL,MAAM,CAACU,eAAe,CAACH,YAAY,CAAC,EAAE;QACtCP,MAAM,GAAGO,YAAY;MACzB;IACJ;IACA,OAAOP,MAAM;EACjB;EACAW,aAAaA,CAAA,EAAG;IACZ,IAAIX,MAAM,GAAG,EAAE;IACfA,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI,CAACf,aAAa,CAAC2B,UAAU,CAACC,SAAS;IACnD,KAAK,IAAIrB,CAAC,GAAG,CAAC,EAAEC,GAAG,GAAG,IAAI,CAACP,gBAAgB,CAACQ,MAAM,EAAEF,CAAC,GAAGC,GAAG,EAAED,CAAC,EAAE,EAAE;MAC9DQ,MAAM,CAACR,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAACN,gBAAgB,CAACM,CAAC,CAAC,CAACoB,UAAU,CAACC,SAAS;IACjE;IACA,OAAOb,MAAM;EACjB;EACAc,iBAAiBA,CAAA,EAAG;IAChB,IAAId,MAAM,GAAG,EAAE;IACfA,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI,CAACf,aAAa,CAACmB,SAAS,CAACS,SAAS;IAClD,KAAK,IAAIrB,CAAC,GAAG,CAAC,EAAEC,GAAG,GAAG,IAAI,CAACP,gBAAgB,CAACQ,MAAM,EAAEF,CAAC,GAAGC,GAAG,EAAED,CAAC,EAAE,EAAE;MAC9DQ,MAAM,CAACR,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAACN,gBAAgB,CAACM,CAAC,CAAC,CAACY,SAAS,CAACS,SAAS;IAChE;IACA,OAAOb,MAAM;EACjB;EACAe,aAAaA,CAACC,UAAU,EAAE;IACtB,IAAI,CAACC,SAAS,CAACtC,WAAW,CAACuC,mBAAmB,CAACF,UAAU,CAAC,CAAC;EAC/D;EACAG,gBAAgBA,CAAA,EAAG;IACf,OAAO,IAAI,CAAClC,aAAa,CAACiB,aAAa,CAAC,CAAC;EAC7C;EACAe,SAASA,CAACG,MAAM,EAAE;IACd,IAAIA,MAAM,KAAK,IAAI,EAAE;MACjB;IACJ;IACA,IAAI,CAACnC,aAAa,CAACoC,QAAQ,CAAC,IAAI,CAACrC,OAAO,EAAEoC,MAAM,CAAC,CAAC,CAAC,CAACR,UAAU,EAAEQ,MAAM,CAAC,CAAC,CAAC,CAAChB,SAAS,CAAC;IACpF,IAAI,CAACkB,mBAAmB,CAACF,MAAM,CAACG,KAAK,CAAC,CAAC,CAAC,CAAC;EAC7C;EACA;AACJ;AACA;EACID,mBAAmBA,CAACE,eAAe,EAAE;IACjC,MAAMC,sBAAsB,GAAG,IAAI,CAACvC,gBAAgB,CAACQ,MAAM;IAC3D,MAAMgC,qBAAqB,GAAGF,eAAe,CAAC9B,MAAM;IACpD,IAAI+B,sBAAsB,GAAGC,qBAAqB,EAAE;MAChD,IAAIC,SAAS,GAAGD,qBAAqB,GAAGD,sBAAsB;MAC9D,KAAK,IAAIjC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGmC,SAAS,EAAEnC,CAAC,EAAE,EAAE;QAChC,IAAI,CAACoC,mBAAmB,CAAC,CAAC;MAC9B;IACJ,CAAC,MACI,IAAIH,sBAAsB,GAAGC,qBAAqB,EAAE;MACrD,IAAIG,SAAS,GAAGJ,sBAAsB,GAAGC,qBAAqB;MAC9D,KAAK,IAAIlC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGqC,SAAS,EAAErC,CAAC,EAAE,EAAE;QAChC,IAAI,CAACsC,sBAAsB,CAAC,IAAI,CAAC5C,gBAAgB,CAACQ,MAAM,GAAG,CAAC,CAAC;MACjE;IACJ;IACA,KAAK,IAAIF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGkC,qBAAqB,EAAElC,CAAC,EAAE,EAAE;MAC5C,IAAI,CAACN,gBAAgB,CAACM,CAAC,CAAC,CAAC6B,QAAQ,CAAC,IAAI,CAACrC,OAAO,EAAEwC,eAAe,CAAChC,CAAC,CAAC,CAACoB,UAAU,EAAEY,eAAe,CAAChC,CAAC,CAAC,CAACY,SAAS,CAAC;IAChH;EACJ;EACAf,oBAAoBA,CAAA,EAAG;IACnB,IAAI,CAACiC,mBAAmB,CAAC,EAAE,CAAC;EAChC;EACAM,mBAAmBA,CAAA,EAAG;IAClB,IAAI,CAAC1C,gBAAgB,CAAC6C,IAAI,CAAC,IAAInD,SAAS,CAAC,IAAI,CAACI,OAAO,CAAC,CAAC;IACvD,IAAI,CAACG,oBAAoB,GAAG,IAAI,CAACD,gBAAgB,CAACQ,MAAM;EAC5D;EACAsC,uBAAuBA,CAAA,EAAG;IACtB,IAAI,IAAI,CAAC9C,gBAAgB,CAACQ,MAAM,KAAK,CAAC,IAAI,IAAI,CAACP,oBAAoB,KAAK,CAAC,EAAE;MACvE,OAAO,CAAC;IACZ;IACA,OAAO,IAAI,CAACA,oBAAoB;EACpC;EACA2C,sBAAsBA,CAACG,WAAW,EAAE;IAChC,IAAI,IAAI,CAAC9C,oBAAoB,IAAI8C,WAAW,GAAG,CAAC,EAAE;MAC9C,IAAI,CAAC9C,oBAAoB,EAAE;IAC/B;IACA,IAAI,CAACD,gBAAgB,CAAC+C,WAAW,CAAC,CAAC7C,OAAO,CAAC,IAAI,CAACJ,OAAO,CAAC;IACxD,IAAI,CAACE,gBAAgB,CAACgD,MAAM,CAACD,WAAW,EAAE,CAAC,CAAC;EAChD;EACAE,OAAOA,CAAA,EAAG;IACN,IAAInC,MAAM,GAAG,EAAE;IACfA,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI,CAACf,aAAa;IAC9B,KAAK,IAAIO,CAAC,GAAG,CAAC,EAAEC,GAAG,GAAG,IAAI,CAACP,gBAAgB,CAACQ,MAAM,EAAEF,CAAC,GAAGC,GAAG,EAAED,CAAC,EAAE,EAAE;MAC9DQ,MAAM,CAACR,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAACN,gBAAgB,CAACM,CAAC,CAAC;IAC5C;IACA,OAAOQ,MAAM;EACjB;EACAoC,SAASA,CAAA,EAAG;IACR,IAAI,IAAI,CAAClD,gBAAgB,CAACQ,MAAM,KAAK,CAAC,EAAE;MACpC;IACJ;IACA,IAAI2C,OAAO,GAAG,IAAI,CAACF,OAAO,CAAC,CAAC;IAC5B,IAAIG,aAAa,GAAG,EAAE;IACtB,KAAK,IAAI9C,CAAC,GAAG,CAAC,EAAEC,GAAG,GAAG4C,OAAO,CAAC3C,MAAM,EAAEF,CAAC,GAAGC,GAAG,EAAED,CAAC,EAAE,EAAE;MAChD8C,aAAa,CAACP,IAAI,CAAC;QACfQ,KAAK,EAAE/C,CAAC;QACRqB,SAAS,EAAEwB,OAAO,CAAC7C,CAAC,CAAC,CAACoB,UAAU,CAACC;MACrC,CAAC,CAAC;IACN;IACAyB,aAAa,CAACE,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;MACzB,IAAID,CAAC,CAAC5B,SAAS,CAAC8B,eAAe,KAAKD,CAAC,CAAC7B,SAAS,CAAC8B,eAAe,EAAE;QAC7D,OAAOF,CAAC,CAAC5B,SAAS,CAAC+B,WAAW,GAAGF,CAAC,CAAC7B,SAAS,CAAC+B,WAAW;MAC5D;MACA,OAAOH,CAAC,CAAC5B,SAAS,CAAC8B,eAAe,GAAGD,CAAC,CAAC7B,SAAS,CAAC8B,eAAe;IACpE,CAAC,CAAC;IACF,KAAK,IAAIE,iBAAiB,GAAG,CAAC,EAAEA,iBAAiB,GAAGP,aAAa,CAAC5C,MAAM,GAAG,CAAC,EAAEmD,iBAAiB,EAAE,EAAE;MAC/F,MAAMC,OAAO,GAAGR,aAAa,CAACO,iBAAiB,CAAC;MAChD,MAAME,IAAI,GAAGT,aAAa,CAACO,iBAAiB,GAAG,CAAC,CAAC;MACjD,MAAMG,gBAAgB,GAAGF,OAAO,CAACjC,SAAS;MAC1C,MAAMoC,aAAa,GAAGF,IAAI,CAAClC,SAAS;MACpC,IAAI,CAAC,IAAI,CAAC7B,OAAO,CAACkE,YAAY,CAACC,2BAA2B,EAAE;QACxD;MACJ;MACA,IAAIC,kBAAkB;MACtB,IAAIH,aAAa,CAACI,OAAO,CAAC,CAAC,IAAIL,gBAAgB,CAACK,OAAO,CAAC,CAAC,EAAE;QACvD;QACAD,kBAAkB,GAAGH,aAAa,CAACK,gBAAgB,CAAC,CAAC,CAAC5C,eAAe,CAACsC,gBAAgB,CAACO,cAAc,CAAC,CAAC,CAAC;MAC5G,CAAC,MACI;QACD;QACAH,kBAAkB,GAAGH,aAAa,CAACK,gBAAgB,CAAC,CAAC,CAAC9C,QAAQ,CAACwC,gBAAgB,CAACO,cAAc,CAAC,CAAC,CAAC;MACrG;MACA,IAAIH,kBAAkB,EAAE;QACpB,MAAMI,uBAAuB,GAAGV,OAAO,CAACP,KAAK,GAAGQ,IAAI,CAACR,KAAK,GAAGM,iBAAiB,GAAGA,iBAAiB,GAAG,CAAC;QACtG,MAAMY,uBAAuB,GAAGX,OAAO,CAACP,KAAK,GAAGQ,IAAI,CAACR,KAAK,GAAGM,iBAAiB,GAAG,CAAC,GAAGA,iBAAiB;QACtG,MAAMa,WAAW,GAAGpB,aAAa,CAACmB,uBAAuB,CAAC,CAAClB,KAAK;QAChE,MAAMoB,WAAW,GAAGrB,aAAa,CAACkB,uBAAuB,CAAC,CAACjB,KAAK;QAChE,MAAMqB,eAAe,GAAGtB,aAAa,CAACmB,uBAAuB,CAAC,CAAC5C,SAAS;QACxE,MAAMgD,eAAe,GAAGvB,aAAa,CAACkB,uBAAuB,CAAC,CAAC3C,SAAS;QACxE,IAAI,CAAC+C,eAAe,CAACE,eAAe,CAACD,eAAe,CAAC,EAAE;UACnD,MAAME,cAAc,GAAGH,eAAe,CAACI,SAAS,CAACH,eAAe,CAAC;UACjE,MAAMI,oBAAoB,GAAIL,eAAe,CAACM,wBAAwB,KAAKN,eAAe,CAACjB,eAAe,IAAIiB,eAAe,CAACO,oBAAoB,KAAKP,eAAe,CAAChB,WAAY;UACnL,MAAMwB,oBAAoB,GAAIP,eAAe,CAACK,wBAAwB,KAAKL,eAAe,CAAClB,eAAe,IAAIkB,eAAe,CAACM,oBAAoB,KAAKN,eAAe,CAACjB,WAAY;UACnL;UACA,IAAIyB,uBAAuB;UAC3B,IAAIX,WAAW,KAAK,IAAI,CAACvE,oBAAoB,EAAE;YAC3CkF,uBAAuB,GAAGJ,oBAAoB;YAC9C,IAAI,CAAC9E,oBAAoB,GAAGwE,WAAW;UAC3C,CAAC,MACI;YACD;YACAU,uBAAuB,GAAGD,oBAAoB;UAClD;UACA,IAAIE,kBAAkB;UACtB,IAAID,uBAAuB,EAAE;YACzBC,kBAAkB,GAAG,IAAIzF,SAAS,CAACkF,cAAc,CAACpB,eAAe,EAAEoB,cAAc,CAACnB,WAAW,EAAEmB,cAAc,CAACQ,aAAa,EAAER,cAAc,CAACS,SAAS,CAAC;UAC1J,CAAC,MACI;YACDF,kBAAkB,GAAG,IAAIzF,SAAS,CAACkF,cAAc,CAACQ,aAAa,EAAER,cAAc,CAACS,SAAS,EAAET,cAAc,CAACpB,eAAe,EAAEoB,cAAc,CAACnB,WAAW,CAAC;UAC1J;UACAN,aAAa,CAACkB,uBAAuB,CAAC,CAAC3C,SAAS,GAAGyD,kBAAkB;UACrE,MAAMG,cAAc,GAAG9F,WAAW,CAAC+F,kBAAkB,CAACJ,kBAAkB,CAAC;UACzEjC,OAAO,CAACsB,WAAW,CAAC,CAACtC,QAAQ,CAAC,IAAI,CAACrC,OAAO,EAAEyF,cAAc,CAAC7D,UAAU,EAAE6D,cAAc,CAACrE,SAAS,CAAC;QACpG;QACA,KAAK,MAAMuE,YAAY,IAAIrC,aAAa,EAAE;UACtC,IAAIqC,YAAY,CAACpC,KAAK,GAAGmB,WAAW,EAAE;YAClCiB,YAAY,CAACpC,KAAK,EAAE;UACxB;QACJ;QACAF,OAAO,CAACH,MAAM,CAACwB,WAAW,EAAE,CAAC,CAAC;QAC9BpB,aAAa,CAACJ,MAAM,CAACuB,uBAAuB,EAAE,CAAC,CAAC;QAChD,IAAI,CAAC3B,sBAAsB,CAAC4B,WAAW,GAAG,CAAC,CAAC;QAC5Cb,iBAAiB,EAAE;MACvB;IACJ;EACJ;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}