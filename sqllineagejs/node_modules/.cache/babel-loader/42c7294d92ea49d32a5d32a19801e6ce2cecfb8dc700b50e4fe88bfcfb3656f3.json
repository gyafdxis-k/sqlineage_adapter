{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { Scrollable } from '../../../base/common/scrollable.js';\nimport { LinesLayout } from './linesLayout.js';\nimport { Viewport } from '../viewModel/viewModel.js';\nimport { ContentSizeChangedEvent } from '../viewModel/viewModelEventDispatcher.js';\nconst SMOOTH_SCROLLING_TIME = 125;\nclass EditorScrollDimensions {\n  constructor(width, contentWidth, height, contentHeight) {\n    width = width | 0;\n    contentWidth = contentWidth | 0;\n    height = height | 0;\n    contentHeight = contentHeight | 0;\n    if (width < 0) {\n      width = 0;\n    }\n    if (contentWidth < 0) {\n      contentWidth = 0;\n    }\n    if (height < 0) {\n      height = 0;\n    }\n    if (contentHeight < 0) {\n      contentHeight = 0;\n    }\n    this.width = width;\n    this.contentWidth = contentWidth;\n    this.scrollWidth = Math.max(width, contentWidth);\n    this.height = height;\n    this.contentHeight = contentHeight;\n    this.scrollHeight = Math.max(height, contentHeight);\n  }\n  equals(other) {\n    return this.width === other.width && this.contentWidth === other.contentWidth && this.height === other.height && this.contentHeight === other.contentHeight;\n  }\n}\nclass EditorScrollable extends Disposable {\n  constructor(smoothScrollDuration, scheduleAtNextAnimationFrame) {\n    super();\n    this._onDidContentSizeChange = this._register(new Emitter());\n    this.onDidContentSizeChange = this._onDidContentSizeChange.event;\n    this._dimensions = new EditorScrollDimensions(0, 0, 0, 0);\n    this._scrollable = this._register(new Scrollable(smoothScrollDuration, scheduleAtNextAnimationFrame));\n    this.onDidScroll = this._scrollable.onScroll;\n  }\n  getScrollable() {\n    return this._scrollable;\n  }\n  setSmoothScrollDuration(smoothScrollDuration) {\n    this._scrollable.setSmoothScrollDuration(smoothScrollDuration);\n  }\n  validateScrollPosition(scrollPosition) {\n    return this._scrollable.validateScrollPosition(scrollPosition);\n  }\n  getScrollDimensions() {\n    return this._dimensions;\n  }\n  setScrollDimensions(dimensions) {\n    if (this._dimensions.equals(dimensions)) {\n      return;\n    }\n    const oldDimensions = this._dimensions;\n    this._dimensions = dimensions;\n    this._scrollable.setScrollDimensions({\n      width: dimensions.width,\n      scrollWidth: dimensions.scrollWidth,\n      height: dimensions.height,\n      scrollHeight: dimensions.scrollHeight\n    }, true);\n    const contentWidthChanged = oldDimensions.contentWidth !== dimensions.contentWidth;\n    const contentHeightChanged = oldDimensions.contentHeight !== dimensions.contentHeight;\n    if (contentWidthChanged || contentHeightChanged) {\n      this._onDidContentSizeChange.fire(new ContentSizeChangedEvent(oldDimensions.contentWidth, oldDimensions.contentHeight, dimensions.contentWidth, dimensions.contentHeight));\n    }\n  }\n  getFutureScrollPosition() {\n    return this._scrollable.getFutureScrollPosition();\n  }\n  getCurrentScrollPosition() {\n    return this._scrollable.getCurrentScrollPosition();\n  }\n  setScrollPositionNow(update) {\n    this._scrollable.setScrollPositionNow(update);\n  }\n  setScrollPositionSmooth(update) {\n    this._scrollable.setScrollPositionSmooth(update);\n  }\n}\nexport class ViewLayout extends Disposable {\n  constructor(configuration, lineCount, scheduleAtNextAnimationFrame) {\n    super();\n    this._configuration = configuration;\n    const options = this._configuration.options;\n    const layoutInfo = options.get(124 /* layoutInfo */);\n    const padding = options.get(69 /* padding */);\n    this._linesLayout = new LinesLayout(lineCount, options.get(53 /* lineHeight */), padding.top, padding.bottom);\n    this._scrollable = this._register(new EditorScrollable(0, scheduleAtNextAnimationFrame));\n    this._configureSmoothScrollDuration();\n    this._scrollable.setScrollDimensions(new EditorScrollDimensions(layoutInfo.contentWidth, 0, layoutInfo.height, 0));\n    this.onDidScroll = this._scrollable.onDidScroll;\n    this.onDidContentSizeChange = this._scrollable.onDidContentSizeChange;\n    this._updateHeight();\n  }\n  dispose() {\n    super.dispose();\n  }\n  getScrollable() {\n    return this._scrollable.getScrollable();\n  }\n  onHeightMaybeChanged() {\n    this._updateHeight();\n  }\n  _configureSmoothScrollDuration() {\n    this._scrollable.setSmoothScrollDuration(this._configuration.options.get(98 /* smoothScrolling */) ? SMOOTH_SCROLLING_TIME : 0);\n  }\n  // ---- begin view event handlers\n  onConfigurationChanged(e) {\n    const options = this._configuration.options;\n    if (e.hasChanged(53 /* lineHeight */)) {\n      this._linesLayout.setLineHeight(options.get(53 /* lineHeight */));\n    }\n\n    if (e.hasChanged(69 /* padding */)) {\n      const padding = options.get(69 /* padding */);\n      this._linesLayout.setPadding(padding.top, padding.bottom);\n    }\n    if (e.hasChanged(124 /* layoutInfo */)) {\n      const layoutInfo = options.get(124 /* layoutInfo */);\n      const width = layoutInfo.contentWidth;\n      const height = layoutInfo.height;\n      const scrollDimensions = this._scrollable.getScrollDimensions();\n      const contentWidth = scrollDimensions.contentWidth;\n      this._scrollable.setScrollDimensions(new EditorScrollDimensions(width, scrollDimensions.contentWidth, height, this._getContentHeight(width, height, contentWidth)));\n    } else {\n      this._updateHeight();\n    }\n    if (e.hasChanged(98 /* smoothScrolling */)) {\n      this._configureSmoothScrollDuration();\n    }\n  }\n  onFlushed(lineCount) {\n    this._linesLayout.onFlushed(lineCount);\n  }\n  onLinesDeleted(fromLineNumber, toLineNumber) {\n    this._linesLayout.onLinesDeleted(fromLineNumber, toLineNumber);\n  }\n  onLinesInserted(fromLineNumber, toLineNumber) {\n    this._linesLayout.onLinesInserted(fromLineNumber, toLineNumber);\n  }\n  // ---- end view event handlers\n  _getHorizontalScrollbarHeight(width, scrollWidth) {\n    const options = this._configuration.options;\n    const scrollbar = options.get(87 /* scrollbar */);\n    if (scrollbar.horizontal === 2 /* Hidden */) {\n      // horizontal scrollbar not visible\n      return 0;\n    }\n    if (width >= scrollWidth) {\n      // horizontal scrollbar not visible\n      return 0;\n    }\n    return scrollbar.horizontalScrollbarSize;\n  }\n  _getContentHeight(width, height, contentWidth) {\n    const options = this._configuration.options;\n    let result = this._linesLayout.getLinesTotalHeight();\n    if (options.get(89 /* scrollBeyondLastLine */)) {\n      result += Math.max(0, height - options.get(53 /* lineHeight */) - options.get(69 /* padding */).bottom);\n    } else {\n      result += this._getHorizontalScrollbarHeight(width, contentWidth);\n    }\n    return result;\n  }\n  _updateHeight() {\n    const scrollDimensions = this._scrollable.getScrollDimensions();\n    const width = scrollDimensions.width;\n    const height = scrollDimensions.height;\n    const contentWidth = scrollDimensions.contentWidth;\n    this._scrollable.setScrollDimensions(new EditorScrollDimensions(width, scrollDimensions.contentWidth, height, this._getContentHeight(width, height, contentWidth)));\n  }\n  // ---- Layouting logic\n  getCurrentViewport() {\n    const scrollDimensions = this._scrollable.getScrollDimensions();\n    const currentScrollPosition = this._scrollable.getCurrentScrollPosition();\n    return new Viewport(currentScrollPosition.scrollTop, currentScrollPosition.scrollLeft, scrollDimensions.width, scrollDimensions.height);\n  }\n  getFutureViewport() {\n    const scrollDimensions = this._scrollable.getScrollDimensions();\n    const currentScrollPosition = this._scrollable.getFutureScrollPosition();\n    return new Viewport(currentScrollPosition.scrollTop, currentScrollPosition.scrollLeft, scrollDimensions.width, scrollDimensions.height);\n  }\n  _computeContentWidth(maxLineWidth) {\n    const options = this._configuration.options;\n    const wrappingInfo = options.get(125 /* wrappingInfo */);\n    const fontInfo = options.get(38 /* fontInfo */);\n    if (wrappingInfo.isViewportWrapping) {\n      const layoutInfo = options.get(124 /* layoutInfo */);\n      const minimap = options.get(59 /* minimap */);\n      if (maxLineWidth > layoutInfo.contentWidth + fontInfo.typicalHalfwidthCharacterWidth) {\n        // This is a case where viewport wrapping is on, but the line extends above the viewport\n        if (minimap.enabled && minimap.side === 'right') {\n          // We need to accomodate the scrollbar width\n          return maxLineWidth + layoutInfo.verticalScrollbarWidth;\n        }\n      }\n      return maxLineWidth;\n    } else {\n      const extraHorizontalSpace = options.get(88 /* scrollBeyondLastColumn */) * fontInfo.typicalHalfwidthCharacterWidth;\n      const whitespaceMinWidth = this._linesLayout.getWhitespaceMinWidth();\n      return Math.max(maxLineWidth + extraHorizontalSpace, whitespaceMinWidth);\n    }\n  }\n  setMaxLineWidth(maxLineWidth) {\n    const scrollDimensions = this._scrollable.getScrollDimensions();\n    // const newScrollWidth = ;\n    this._scrollable.setScrollDimensions(new EditorScrollDimensions(scrollDimensions.width, this._computeContentWidth(maxLineWidth), scrollDimensions.height, scrollDimensions.contentHeight));\n    // The height might depend on the fact that there is a horizontal scrollbar or not\n    this._updateHeight();\n  }\n  // ---- view state\n  saveState() {\n    const currentScrollPosition = this._scrollable.getFutureScrollPosition();\n    let scrollTop = currentScrollPosition.scrollTop;\n    let firstLineNumberInViewport = this._linesLayout.getLineNumberAtOrAfterVerticalOffset(scrollTop);\n    let whitespaceAboveFirstLine = this._linesLayout.getWhitespaceAccumulatedHeightBeforeLineNumber(firstLineNumberInViewport);\n    return {\n      scrollTop: scrollTop,\n      scrollTopWithoutViewZones: scrollTop - whitespaceAboveFirstLine,\n      scrollLeft: currentScrollPosition.scrollLeft\n    };\n  }\n  // ---- IVerticalLayoutProvider\n  changeWhitespace(callback) {\n    const hadAChange = this._linesLayout.changeWhitespace(callback);\n    if (hadAChange) {\n      this.onHeightMaybeChanged();\n    }\n    return hadAChange;\n  }\n  getVerticalOffsetForLineNumber(lineNumber) {\n    return this._linesLayout.getVerticalOffsetForLineNumber(lineNumber);\n  }\n  isAfterLines(verticalOffset) {\n    return this._linesLayout.isAfterLines(verticalOffset);\n  }\n  isInTopPadding(verticalOffset) {\n    return this._linesLayout.isInTopPadding(verticalOffset);\n  }\n  isInBottomPadding(verticalOffset) {\n    return this._linesLayout.isInBottomPadding(verticalOffset);\n  }\n  getLineNumberAtVerticalOffset(verticalOffset) {\n    return this._linesLayout.getLineNumberAtOrAfterVerticalOffset(verticalOffset);\n  }\n  getWhitespaceAtVerticalOffset(verticalOffset) {\n    return this._linesLayout.getWhitespaceAtVerticalOffset(verticalOffset);\n  }\n  getLinesViewportData() {\n    const visibleBox = this.getCurrentViewport();\n    return this._linesLayout.getLinesViewportData(visibleBox.top, visibleBox.top + visibleBox.height);\n  }\n  getLinesViewportDataAtScrollTop(scrollTop) {\n    // do some minimal validations on scrollTop\n    const scrollDimensions = this._scrollable.getScrollDimensions();\n    if (scrollTop + scrollDimensions.height > scrollDimensions.scrollHeight) {\n      scrollTop = scrollDimensions.scrollHeight - scrollDimensions.height;\n    }\n    if (scrollTop < 0) {\n      scrollTop = 0;\n    }\n    return this._linesLayout.getLinesViewportData(scrollTop, scrollTop + scrollDimensions.height);\n  }\n  getWhitespaceViewportData() {\n    const visibleBox = this.getCurrentViewport();\n    return this._linesLayout.getWhitespaceViewportData(visibleBox.top, visibleBox.top + visibleBox.height);\n  }\n  getWhitespaces() {\n    return this._linesLayout.getWhitespaces();\n  }\n  // ---- IScrollingProvider\n  getContentWidth() {\n    const scrollDimensions = this._scrollable.getScrollDimensions();\n    return scrollDimensions.contentWidth;\n  }\n  getScrollWidth() {\n    const scrollDimensions = this._scrollable.getScrollDimensions();\n    return scrollDimensions.scrollWidth;\n  }\n  getContentHeight() {\n    const scrollDimensions = this._scrollable.getScrollDimensions();\n    return scrollDimensions.contentHeight;\n  }\n  getScrollHeight() {\n    const scrollDimensions = this._scrollable.getScrollDimensions();\n    return scrollDimensions.scrollHeight;\n  }\n  getCurrentScrollLeft() {\n    const currentScrollPosition = this._scrollable.getCurrentScrollPosition();\n    return currentScrollPosition.scrollLeft;\n  }\n  getCurrentScrollTop() {\n    const currentScrollPosition = this._scrollable.getCurrentScrollPosition();\n    return currentScrollPosition.scrollTop;\n  }\n  validateScrollPosition(scrollPosition) {\n    return this._scrollable.validateScrollPosition(scrollPosition);\n  }\n  setScrollPosition(position, type) {\n    if (type === 1 /* Immediate */) {\n      this._scrollable.setScrollPositionNow(position);\n    } else {\n      this._scrollable.setScrollPositionSmooth(position);\n    }\n  }\n  deltaScrollNow(deltaScrollLeft, deltaScrollTop) {\n    const currentScrollPosition = this._scrollable.getCurrentScrollPosition();\n    this._scrollable.setScrollPositionNow({\n      scrollLeft: currentScrollPosition.scrollLeft + deltaScrollLeft,\n      scrollTop: currentScrollPosition.scrollTop + deltaScrollTop\n    });\n  }\n}","map":{"version":3,"names":["Emitter","Disposable","Scrollable","LinesLayout","Viewport","ContentSizeChangedEvent","SMOOTH_SCROLLING_TIME","EditorScrollDimensions","constructor","width","contentWidth","height","contentHeight","scrollWidth","Math","max","scrollHeight","equals","other","EditorScrollable","smoothScrollDuration","scheduleAtNextAnimationFrame","_onDidContentSizeChange","_register","onDidContentSizeChange","event","_dimensions","_scrollable","onDidScroll","onScroll","getScrollable","setSmoothScrollDuration","validateScrollPosition","scrollPosition","getScrollDimensions","setScrollDimensions","dimensions","oldDimensions","contentWidthChanged","contentHeightChanged","fire","getFutureScrollPosition","getCurrentScrollPosition","setScrollPositionNow","update","setScrollPositionSmooth","ViewLayout","configuration","lineCount","_configuration","options","layoutInfo","get","padding","_linesLayout","top","bottom","_configureSmoothScrollDuration","_updateHeight","dispose","onHeightMaybeChanged","onConfigurationChanged","e","hasChanged","setLineHeight","setPadding","scrollDimensions","_getContentHeight","onFlushed","onLinesDeleted","fromLineNumber","toLineNumber","onLinesInserted","_getHorizontalScrollbarHeight","scrollbar","horizontal","horizontalScrollbarSize","result","getLinesTotalHeight","getCurrentViewport","currentScrollPosition","scrollTop","scrollLeft","getFutureViewport","_computeContentWidth","maxLineWidth","wrappingInfo","fontInfo","isViewportWrapping","minimap","typicalHalfwidthCharacterWidth","enabled","side","verticalScrollbarWidth","extraHorizontalSpace","whitespaceMinWidth","getWhitespaceMinWidth","setMaxLineWidth","saveState","firstLineNumberInViewport","getLineNumberAtOrAfterVerticalOffset","whitespaceAboveFirstLine","getWhitespaceAccumulatedHeightBeforeLineNumber","scrollTopWithoutViewZones","changeWhitespace","callback","hadAChange","getVerticalOffsetForLineNumber","lineNumber","isAfterLines","verticalOffset","isInTopPadding","isInBottomPadding","getLineNumberAtVerticalOffset","getWhitespaceAtVerticalOffset","getLinesViewportData","visibleBox","getLinesViewportDataAtScrollTop","getWhitespaceViewportData","getWhitespaces","getContentWidth","getScrollWidth","getContentHeight","getScrollHeight","getCurrentScrollLeft","getCurrentScrollTop","setScrollPosition","position","type","deltaScrollNow","deltaScrollLeft","deltaScrollTop"],"sources":["C:/Users/Administrator/Desktop/sqllineage-master/sqllineagejs/node_modules/monaco-editor/esm/vs/editor/common/viewLayout/viewLayout.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { Emitter } from '../../../base/common/event.js';\r\nimport { Disposable } from '../../../base/common/lifecycle.js';\r\nimport { Scrollable } from '../../../base/common/scrollable.js';\r\nimport { LinesLayout } from './linesLayout.js';\r\nimport { Viewport } from '../viewModel/viewModel.js';\r\nimport { ContentSizeChangedEvent } from '../viewModel/viewModelEventDispatcher.js';\r\nconst SMOOTH_SCROLLING_TIME = 125;\r\nclass EditorScrollDimensions {\r\n    constructor(width, contentWidth, height, contentHeight) {\r\n        width = width | 0;\r\n        contentWidth = contentWidth | 0;\r\n        height = height | 0;\r\n        contentHeight = contentHeight | 0;\r\n        if (width < 0) {\r\n            width = 0;\r\n        }\r\n        if (contentWidth < 0) {\r\n            contentWidth = 0;\r\n        }\r\n        if (height < 0) {\r\n            height = 0;\r\n        }\r\n        if (contentHeight < 0) {\r\n            contentHeight = 0;\r\n        }\r\n        this.width = width;\r\n        this.contentWidth = contentWidth;\r\n        this.scrollWidth = Math.max(width, contentWidth);\r\n        this.height = height;\r\n        this.contentHeight = contentHeight;\r\n        this.scrollHeight = Math.max(height, contentHeight);\r\n    }\r\n    equals(other) {\r\n        return (this.width === other.width\r\n            && this.contentWidth === other.contentWidth\r\n            && this.height === other.height\r\n            && this.contentHeight === other.contentHeight);\r\n    }\r\n}\r\nclass EditorScrollable extends Disposable {\r\n    constructor(smoothScrollDuration, scheduleAtNextAnimationFrame) {\r\n        super();\r\n        this._onDidContentSizeChange = this._register(new Emitter());\r\n        this.onDidContentSizeChange = this._onDidContentSizeChange.event;\r\n        this._dimensions = new EditorScrollDimensions(0, 0, 0, 0);\r\n        this._scrollable = this._register(new Scrollable(smoothScrollDuration, scheduleAtNextAnimationFrame));\r\n        this.onDidScroll = this._scrollable.onScroll;\r\n    }\r\n    getScrollable() {\r\n        return this._scrollable;\r\n    }\r\n    setSmoothScrollDuration(smoothScrollDuration) {\r\n        this._scrollable.setSmoothScrollDuration(smoothScrollDuration);\r\n    }\r\n    validateScrollPosition(scrollPosition) {\r\n        return this._scrollable.validateScrollPosition(scrollPosition);\r\n    }\r\n    getScrollDimensions() {\r\n        return this._dimensions;\r\n    }\r\n    setScrollDimensions(dimensions) {\r\n        if (this._dimensions.equals(dimensions)) {\r\n            return;\r\n        }\r\n        const oldDimensions = this._dimensions;\r\n        this._dimensions = dimensions;\r\n        this._scrollable.setScrollDimensions({\r\n            width: dimensions.width,\r\n            scrollWidth: dimensions.scrollWidth,\r\n            height: dimensions.height,\r\n            scrollHeight: dimensions.scrollHeight\r\n        }, true);\r\n        const contentWidthChanged = (oldDimensions.contentWidth !== dimensions.contentWidth);\r\n        const contentHeightChanged = (oldDimensions.contentHeight !== dimensions.contentHeight);\r\n        if (contentWidthChanged || contentHeightChanged) {\r\n            this._onDidContentSizeChange.fire(new ContentSizeChangedEvent(oldDimensions.contentWidth, oldDimensions.contentHeight, dimensions.contentWidth, dimensions.contentHeight));\r\n        }\r\n    }\r\n    getFutureScrollPosition() {\r\n        return this._scrollable.getFutureScrollPosition();\r\n    }\r\n    getCurrentScrollPosition() {\r\n        return this._scrollable.getCurrentScrollPosition();\r\n    }\r\n    setScrollPositionNow(update) {\r\n        this._scrollable.setScrollPositionNow(update);\r\n    }\r\n    setScrollPositionSmooth(update) {\r\n        this._scrollable.setScrollPositionSmooth(update);\r\n    }\r\n}\r\nexport class ViewLayout extends Disposable {\r\n    constructor(configuration, lineCount, scheduleAtNextAnimationFrame) {\r\n        super();\r\n        this._configuration = configuration;\r\n        const options = this._configuration.options;\r\n        const layoutInfo = options.get(124 /* layoutInfo */);\r\n        const padding = options.get(69 /* padding */);\r\n        this._linesLayout = new LinesLayout(lineCount, options.get(53 /* lineHeight */), padding.top, padding.bottom);\r\n        this._scrollable = this._register(new EditorScrollable(0, scheduleAtNextAnimationFrame));\r\n        this._configureSmoothScrollDuration();\r\n        this._scrollable.setScrollDimensions(new EditorScrollDimensions(layoutInfo.contentWidth, 0, layoutInfo.height, 0));\r\n        this.onDidScroll = this._scrollable.onDidScroll;\r\n        this.onDidContentSizeChange = this._scrollable.onDidContentSizeChange;\r\n        this._updateHeight();\r\n    }\r\n    dispose() {\r\n        super.dispose();\r\n    }\r\n    getScrollable() {\r\n        return this._scrollable.getScrollable();\r\n    }\r\n    onHeightMaybeChanged() {\r\n        this._updateHeight();\r\n    }\r\n    _configureSmoothScrollDuration() {\r\n        this._scrollable.setSmoothScrollDuration(this._configuration.options.get(98 /* smoothScrolling */) ? SMOOTH_SCROLLING_TIME : 0);\r\n    }\r\n    // ---- begin view event handlers\r\n    onConfigurationChanged(e) {\r\n        const options = this._configuration.options;\r\n        if (e.hasChanged(53 /* lineHeight */)) {\r\n            this._linesLayout.setLineHeight(options.get(53 /* lineHeight */));\r\n        }\r\n        if (e.hasChanged(69 /* padding */)) {\r\n            const padding = options.get(69 /* padding */);\r\n            this._linesLayout.setPadding(padding.top, padding.bottom);\r\n        }\r\n        if (e.hasChanged(124 /* layoutInfo */)) {\r\n            const layoutInfo = options.get(124 /* layoutInfo */);\r\n            const width = layoutInfo.contentWidth;\r\n            const height = layoutInfo.height;\r\n            const scrollDimensions = this._scrollable.getScrollDimensions();\r\n            const contentWidth = scrollDimensions.contentWidth;\r\n            this._scrollable.setScrollDimensions(new EditorScrollDimensions(width, scrollDimensions.contentWidth, height, this._getContentHeight(width, height, contentWidth)));\r\n        }\r\n        else {\r\n            this._updateHeight();\r\n        }\r\n        if (e.hasChanged(98 /* smoothScrolling */)) {\r\n            this._configureSmoothScrollDuration();\r\n        }\r\n    }\r\n    onFlushed(lineCount) {\r\n        this._linesLayout.onFlushed(lineCount);\r\n    }\r\n    onLinesDeleted(fromLineNumber, toLineNumber) {\r\n        this._linesLayout.onLinesDeleted(fromLineNumber, toLineNumber);\r\n    }\r\n    onLinesInserted(fromLineNumber, toLineNumber) {\r\n        this._linesLayout.onLinesInserted(fromLineNumber, toLineNumber);\r\n    }\r\n    // ---- end view event handlers\r\n    _getHorizontalScrollbarHeight(width, scrollWidth) {\r\n        const options = this._configuration.options;\r\n        const scrollbar = options.get(87 /* scrollbar */);\r\n        if (scrollbar.horizontal === 2 /* Hidden */) {\r\n            // horizontal scrollbar not visible\r\n            return 0;\r\n        }\r\n        if (width >= scrollWidth) {\r\n            // horizontal scrollbar not visible\r\n            return 0;\r\n        }\r\n        return scrollbar.horizontalScrollbarSize;\r\n    }\r\n    _getContentHeight(width, height, contentWidth) {\r\n        const options = this._configuration.options;\r\n        let result = this._linesLayout.getLinesTotalHeight();\r\n        if (options.get(89 /* scrollBeyondLastLine */)) {\r\n            result += Math.max(0, height - options.get(53 /* lineHeight */) - options.get(69 /* padding */).bottom);\r\n        }\r\n        else {\r\n            result += this._getHorizontalScrollbarHeight(width, contentWidth);\r\n        }\r\n        return result;\r\n    }\r\n    _updateHeight() {\r\n        const scrollDimensions = this._scrollable.getScrollDimensions();\r\n        const width = scrollDimensions.width;\r\n        const height = scrollDimensions.height;\r\n        const contentWidth = scrollDimensions.contentWidth;\r\n        this._scrollable.setScrollDimensions(new EditorScrollDimensions(width, scrollDimensions.contentWidth, height, this._getContentHeight(width, height, contentWidth)));\r\n    }\r\n    // ---- Layouting logic\r\n    getCurrentViewport() {\r\n        const scrollDimensions = this._scrollable.getScrollDimensions();\r\n        const currentScrollPosition = this._scrollable.getCurrentScrollPosition();\r\n        return new Viewport(currentScrollPosition.scrollTop, currentScrollPosition.scrollLeft, scrollDimensions.width, scrollDimensions.height);\r\n    }\r\n    getFutureViewport() {\r\n        const scrollDimensions = this._scrollable.getScrollDimensions();\r\n        const currentScrollPosition = this._scrollable.getFutureScrollPosition();\r\n        return new Viewport(currentScrollPosition.scrollTop, currentScrollPosition.scrollLeft, scrollDimensions.width, scrollDimensions.height);\r\n    }\r\n    _computeContentWidth(maxLineWidth) {\r\n        const options = this._configuration.options;\r\n        const wrappingInfo = options.get(125 /* wrappingInfo */);\r\n        const fontInfo = options.get(38 /* fontInfo */);\r\n        if (wrappingInfo.isViewportWrapping) {\r\n            const layoutInfo = options.get(124 /* layoutInfo */);\r\n            const minimap = options.get(59 /* minimap */);\r\n            if (maxLineWidth > layoutInfo.contentWidth + fontInfo.typicalHalfwidthCharacterWidth) {\r\n                // This is a case where viewport wrapping is on, but the line extends above the viewport\r\n                if (minimap.enabled && minimap.side === 'right') {\r\n                    // We need to accomodate the scrollbar width\r\n                    return maxLineWidth + layoutInfo.verticalScrollbarWidth;\r\n                }\r\n            }\r\n            return maxLineWidth;\r\n        }\r\n        else {\r\n            const extraHorizontalSpace = options.get(88 /* scrollBeyondLastColumn */) * fontInfo.typicalHalfwidthCharacterWidth;\r\n            const whitespaceMinWidth = this._linesLayout.getWhitespaceMinWidth();\r\n            return Math.max(maxLineWidth + extraHorizontalSpace, whitespaceMinWidth);\r\n        }\r\n    }\r\n    setMaxLineWidth(maxLineWidth) {\r\n        const scrollDimensions = this._scrollable.getScrollDimensions();\r\n        // const newScrollWidth = ;\r\n        this._scrollable.setScrollDimensions(new EditorScrollDimensions(scrollDimensions.width, this._computeContentWidth(maxLineWidth), scrollDimensions.height, scrollDimensions.contentHeight));\r\n        // The height might depend on the fact that there is a horizontal scrollbar or not\r\n        this._updateHeight();\r\n    }\r\n    // ---- view state\r\n    saveState() {\r\n        const currentScrollPosition = this._scrollable.getFutureScrollPosition();\r\n        let scrollTop = currentScrollPosition.scrollTop;\r\n        let firstLineNumberInViewport = this._linesLayout.getLineNumberAtOrAfterVerticalOffset(scrollTop);\r\n        let whitespaceAboveFirstLine = this._linesLayout.getWhitespaceAccumulatedHeightBeforeLineNumber(firstLineNumberInViewport);\r\n        return {\r\n            scrollTop: scrollTop,\r\n            scrollTopWithoutViewZones: scrollTop - whitespaceAboveFirstLine,\r\n            scrollLeft: currentScrollPosition.scrollLeft\r\n        };\r\n    }\r\n    // ---- IVerticalLayoutProvider\r\n    changeWhitespace(callback) {\r\n        const hadAChange = this._linesLayout.changeWhitespace(callback);\r\n        if (hadAChange) {\r\n            this.onHeightMaybeChanged();\r\n        }\r\n        return hadAChange;\r\n    }\r\n    getVerticalOffsetForLineNumber(lineNumber) {\r\n        return this._linesLayout.getVerticalOffsetForLineNumber(lineNumber);\r\n    }\r\n    isAfterLines(verticalOffset) {\r\n        return this._linesLayout.isAfterLines(verticalOffset);\r\n    }\r\n    isInTopPadding(verticalOffset) {\r\n        return this._linesLayout.isInTopPadding(verticalOffset);\r\n    }\r\n    isInBottomPadding(verticalOffset) {\r\n        return this._linesLayout.isInBottomPadding(verticalOffset);\r\n    }\r\n    getLineNumberAtVerticalOffset(verticalOffset) {\r\n        return this._linesLayout.getLineNumberAtOrAfterVerticalOffset(verticalOffset);\r\n    }\r\n    getWhitespaceAtVerticalOffset(verticalOffset) {\r\n        return this._linesLayout.getWhitespaceAtVerticalOffset(verticalOffset);\r\n    }\r\n    getLinesViewportData() {\r\n        const visibleBox = this.getCurrentViewport();\r\n        return this._linesLayout.getLinesViewportData(visibleBox.top, visibleBox.top + visibleBox.height);\r\n    }\r\n    getLinesViewportDataAtScrollTop(scrollTop) {\r\n        // do some minimal validations on scrollTop\r\n        const scrollDimensions = this._scrollable.getScrollDimensions();\r\n        if (scrollTop + scrollDimensions.height > scrollDimensions.scrollHeight) {\r\n            scrollTop = scrollDimensions.scrollHeight - scrollDimensions.height;\r\n        }\r\n        if (scrollTop < 0) {\r\n            scrollTop = 0;\r\n        }\r\n        return this._linesLayout.getLinesViewportData(scrollTop, scrollTop + scrollDimensions.height);\r\n    }\r\n    getWhitespaceViewportData() {\r\n        const visibleBox = this.getCurrentViewport();\r\n        return this._linesLayout.getWhitespaceViewportData(visibleBox.top, visibleBox.top + visibleBox.height);\r\n    }\r\n    getWhitespaces() {\r\n        return this._linesLayout.getWhitespaces();\r\n    }\r\n    // ---- IScrollingProvider\r\n    getContentWidth() {\r\n        const scrollDimensions = this._scrollable.getScrollDimensions();\r\n        return scrollDimensions.contentWidth;\r\n    }\r\n    getScrollWidth() {\r\n        const scrollDimensions = this._scrollable.getScrollDimensions();\r\n        return scrollDimensions.scrollWidth;\r\n    }\r\n    getContentHeight() {\r\n        const scrollDimensions = this._scrollable.getScrollDimensions();\r\n        return scrollDimensions.contentHeight;\r\n    }\r\n    getScrollHeight() {\r\n        const scrollDimensions = this._scrollable.getScrollDimensions();\r\n        return scrollDimensions.scrollHeight;\r\n    }\r\n    getCurrentScrollLeft() {\r\n        const currentScrollPosition = this._scrollable.getCurrentScrollPosition();\r\n        return currentScrollPosition.scrollLeft;\r\n    }\r\n    getCurrentScrollTop() {\r\n        const currentScrollPosition = this._scrollable.getCurrentScrollPosition();\r\n        return currentScrollPosition.scrollTop;\r\n    }\r\n    validateScrollPosition(scrollPosition) {\r\n        return this._scrollable.validateScrollPosition(scrollPosition);\r\n    }\r\n    setScrollPosition(position, type) {\r\n        if (type === 1 /* Immediate */) {\r\n            this._scrollable.setScrollPositionNow(position);\r\n        }\r\n        else {\r\n            this._scrollable.setScrollPositionSmooth(position);\r\n        }\r\n    }\r\n    deltaScrollNow(deltaScrollLeft, deltaScrollTop) {\r\n        const currentScrollPosition = this._scrollable.getCurrentScrollPosition();\r\n        this._scrollable.setScrollPositionNow({\r\n            scrollLeft: currentScrollPosition.scrollLeft + deltaScrollLeft,\r\n            scrollTop: currentScrollPosition.scrollTop + deltaScrollTop\r\n        });\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}