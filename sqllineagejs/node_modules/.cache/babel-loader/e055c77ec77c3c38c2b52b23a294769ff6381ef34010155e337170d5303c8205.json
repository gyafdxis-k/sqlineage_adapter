{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\n/**\r\n * A position in the editor.\r\n */\nexport class Position {\n  constructor(lineNumber, column) {\n    this.lineNumber = lineNumber;\n    this.column = column;\n  }\n  /**\r\n   * Create a new position from this position.\r\n   *\r\n   * @param newLineNumber new line number\r\n   * @param newColumn new column\r\n   */\n  with() {\n    let newLineNumber = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.lineNumber;\n    let newColumn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.column;\n    if (newLineNumber === this.lineNumber && newColumn === this.column) {\n      return this;\n    } else {\n      return new Position(newLineNumber, newColumn);\n    }\n  }\n  /**\r\n   * Derive a new position from this position.\r\n   *\r\n   * @param deltaLineNumber line number delta\r\n   * @param deltaColumn column delta\r\n   */\n  delta() {\n    let deltaLineNumber = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    let deltaColumn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    return this.with(this.lineNumber + deltaLineNumber, this.column + deltaColumn);\n  }\n  /**\r\n   * Test if this position equals other position\r\n   */\n  equals(other) {\n    return Position.equals(this, other);\n  }\n  /**\r\n   * Test if position `a` equals position `b`\r\n   */\n  static equals(a, b) {\n    if (!a && !b) {\n      return true;\n    }\n    return !!a && !!b && a.lineNumber === b.lineNumber && a.column === b.column;\n  }\n  /**\r\n   * Test if this position is before other position.\r\n   * If the two positions are equal, the result will be false.\r\n   */\n  isBefore(other) {\n    return Position.isBefore(this, other);\n  }\n  /**\r\n   * Test if position `a` is before position `b`.\r\n   * If the two positions are equal, the result will be false.\r\n   */\n  static isBefore(a, b) {\n    if (a.lineNumber < b.lineNumber) {\n      return true;\n    }\n    if (b.lineNumber < a.lineNumber) {\n      return false;\n    }\n    return a.column < b.column;\n  }\n  /**\r\n   * Test if this position is before other position.\r\n   * If the two positions are equal, the result will be true.\r\n   */\n  isBeforeOrEqual(other) {\n    return Position.isBeforeOrEqual(this, other);\n  }\n  /**\r\n   * Test if position `a` is before position `b`.\r\n   * If the two positions are equal, the result will be true.\r\n   */\n  static isBeforeOrEqual(a, b) {\n    if (a.lineNumber < b.lineNumber) {\n      return true;\n    }\n    if (b.lineNumber < a.lineNumber) {\n      return false;\n    }\n    return a.column <= b.column;\n  }\n  /**\r\n   * A function that compares positions, useful for sorting\r\n   */\n  static compare(a, b) {\n    let aLineNumber = a.lineNumber | 0;\n    let bLineNumber = b.lineNumber | 0;\n    if (aLineNumber === bLineNumber) {\n      let aColumn = a.column | 0;\n      let bColumn = b.column | 0;\n      return aColumn - bColumn;\n    }\n    return aLineNumber - bLineNumber;\n  }\n  /**\r\n   * Clone this position.\r\n   */\n  clone() {\n    return new Position(this.lineNumber, this.column);\n  }\n  /**\r\n   * Convert to a human-readable representation.\r\n   */\n  toString() {\n    return '(' + this.lineNumber + ',' + this.column + ')';\n  }\n  // ---\n  /**\r\n   * Create a `Position` from an `IPosition`.\r\n   */\n  static lift(pos) {\n    return new Position(pos.lineNumber, pos.column);\n  }\n  /**\r\n   * Test if `obj` is an `IPosition`.\r\n   */\n  static isIPosition(obj) {\n    return obj && typeof obj.lineNumber === 'number' && typeof obj.column === 'number';\n  }\n}","map":{"version":3,"names":["Position","constructor","lineNumber","column","with","newLineNumber","arguments","length","undefined","newColumn","delta","deltaLineNumber","deltaColumn","equals","other","a","b","isBefore","isBeforeOrEqual","compare","aLineNumber","bLineNumber","aColumn","bColumn","clone","toString","lift","pos","isIPosition","obj"],"sources":["C:/Users/Administrator/Desktop/sqllineage-master/sqllineagejs/node_modules/monaco-editor/esm/vs/editor/common/core/position.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n/**\r\n * A position in the editor.\r\n */\r\nexport class Position {\r\n    constructor(lineNumber, column) {\r\n        this.lineNumber = lineNumber;\r\n        this.column = column;\r\n    }\r\n    /**\r\n     * Create a new position from this position.\r\n     *\r\n     * @param newLineNumber new line number\r\n     * @param newColumn new column\r\n     */\r\n    with(newLineNumber = this.lineNumber, newColumn = this.column) {\r\n        if (newLineNumber === this.lineNumber && newColumn === this.column) {\r\n            return this;\r\n        }\r\n        else {\r\n            return new Position(newLineNumber, newColumn);\r\n        }\r\n    }\r\n    /**\r\n     * Derive a new position from this position.\r\n     *\r\n     * @param deltaLineNumber line number delta\r\n     * @param deltaColumn column delta\r\n     */\r\n    delta(deltaLineNumber = 0, deltaColumn = 0) {\r\n        return this.with(this.lineNumber + deltaLineNumber, this.column + deltaColumn);\r\n    }\r\n    /**\r\n     * Test if this position equals other position\r\n     */\r\n    equals(other) {\r\n        return Position.equals(this, other);\r\n    }\r\n    /**\r\n     * Test if position `a` equals position `b`\r\n     */\r\n    static equals(a, b) {\r\n        if (!a && !b) {\r\n            return true;\r\n        }\r\n        return (!!a &&\r\n            !!b &&\r\n            a.lineNumber === b.lineNumber &&\r\n            a.column === b.column);\r\n    }\r\n    /**\r\n     * Test if this position is before other position.\r\n     * If the two positions are equal, the result will be false.\r\n     */\r\n    isBefore(other) {\r\n        return Position.isBefore(this, other);\r\n    }\r\n    /**\r\n     * Test if position `a` is before position `b`.\r\n     * If the two positions are equal, the result will be false.\r\n     */\r\n    static isBefore(a, b) {\r\n        if (a.lineNumber < b.lineNumber) {\r\n            return true;\r\n        }\r\n        if (b.lineNumber < a.lineNumber) {\r\n            return false;\r\n        }\r\n        return a.column < b.column;\r\n    }\r\n    /**\r\n     * Test if this position is before other position.\r\n     * If the two positions are equal, the result will be true.\r\n     */\r\n    isBeforeOrEqual(other) {\r\n        return Position.isBeforeOrEqual(this, other);\r\n    }\r\n    /**\r\n     * Test if position `a` is before position `b`.\r\n     * If the two positions are equal, the result will be true.\r\n     */\r\n    static isBeforeOrEqual(a, b) {\r\n        if (a.lineNumber < b.lineNumber) {\r\n            return true;\r\n        }\r\n        if (b.lineNumber < a.lineNumber) {\r\n            return false;\r\n        }\r\n        return a.column <= b.column;\r\n    }\r\n    /**\r\n     * A function that compares positions, useful for sorting\r\n     */\r\n    static compare(a, b) {\r\n        let aLineNumber = a.lineNumber | 0;\r\n        let bLineNumber = b.lineNumber | 0;\r\n        if (aLineNumber === bLineNumber) {\r\n            let aColumn = a.column | 0;\r\n            let bColumn = b.column | 0;\r\n            return aColumn - bColumn;\r\n        }\r\n        return aLineNumber - bLineNumber;\r\n    }\r\n    /**\r\n     * Clone this position.\r\n     */\r\n    clone() {\r\n        return new Position(this.lineNumber, this.column);\r\n    }\r\n    /**\r\n     * Convert to a human-readable representation.\r\n     */\r\n    toString() {\r\n        return '(' + this.lineNumber + ',' + this.column + ')';\r\n    }\r\n    // ---\r\n    /**\r\n     * Create a `Position` from an `IPosition`.\r\n     */\r\n    static lift(pos) {\r\n        return new Position(pos.lineNumber, pos.column);\r\n    }\r\n    /**\r\n     * Test if `obj` is an `IPosition`.\r\n     */\r\n    static isIPosition(obj) {\r\n        return (obj\r\n            && (typeof obj.lineNumber === 'number')\r\n            && (typeof obj.column === 'number'));\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}