{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { EditorWorkerClient } from './editorWorkerServiceImpl.js';\nimport * as types from '../../../base/common/types.js';\n/**\r\n * Create a new web worker that has model syncing capabilities built in.\r\n * Specify an AMD module to load that will `create` an object that will be proxied.\r\n */\nexport function createWebWorker(modelService, opts) {\n  return new MonacoWebWorkerImpl(modelService, opts);\n}\nclass MonacoWebWorkerImpl extends EditorWorkerClient {\n  constructor(modelService, opts) {\n    super(modelService, opts.keepIdleModels || false, opts.label);\n    this._foreignModuleId = opts.moduleId;\n    this._foreignModuleCreateData = opts.createData || null;\n    this._foreignModuleHost = opts.host || null;\n    this._foreignProxy = null;\n  }\n  // foreign host request\n  fhr(method, args) {\n    if (!this._foreignModuleHost || typeof this._foreignModuleHost[method] !== 'function') {\n      return Promise.reject(new Error('Missing method ' + method + ' or missing main thread foreign host.'));\n    }\n    try {\n      return Promise.resolve(this._foreignModuleHost[method].apply(this._foreignModuleHost, args));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  }\n  _getForeignProxy() {\n    if (!this._foreignProxy) {\n      this._foreignProxy = this._getProxy().then(proxy => {\n        const foreignHostMethods = this._foreignModuleHost ? types.getAllMethodNames(this._foreignModuleHost) : [];\n        return proxy.loadForeignModule(this._foreignModuleId, this._foreignModuleCreateData, foreignHostMethods).then(foreignMethods => {\n          this._foreignModuleCreateData = null;\n          const proxyMethodRequest = (method, args) => {\n            return proxy.fmr(method, args);\n          };\n          const createProxyMethod = (method, proxyMethodRequest) => {\n            return function () {\n              const args = Array.prototype.slice.call(arguments, 0);\n              return proxyMethodRequest(method, args);\n            };\n          };\n          let foreignProxy = {};\n          for (const foreignMethod of foreignMethods) {\n            foreignProxy[foreignMethod] = createProxyMethod(foreignMethod, proxyMethodRequest);\n          }\n          return foreignProxy;\n        });\n      });\n    }\n    return this._foreignProxy;\n  }\n  getProxy() {\n    return this._getForeignProxy();\n  }\n  withSyncedResources(resources) {\n    return this._withSyncedResources(resources).then(_ => this.getProxy());\n  }\n}","map":{"version":3,"names":["EditorWorkerClient","types","createWebWorker","modelService","opts","MonacoWebWorkerImpl","constructor","keepIdleModels","label","_foreignModuleId","moduleId","_foreignModuleCreateData","createData","_foreignModuleHost","host","_foreignProxy","fhr","method","args","Promise","reject","Error","resolve","apply","e","_getForeignProxy","_getProxy","then","proxy","foreignHostMethods","getAllMethodNames","loadForeignModule","foreignMethods","proxyMethodRequest","fmr","createProxyMethod","Array","prototype","slice","call","arguments","foreignProxy","foreignMethod","getProxy","withSyncedResources","resources","_withSyncedResources","_"],"sources":["C:/Users/Administrator/Desktop/sqllineage-master/sqllineagejs/node_modules/monaco-editor/esm/vs/editor/common/services/webWorker.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { EditorWorkerClient } from './editorWorkerServiceImpl.js';\r\nimport * as types from '../../../base/common/types.js';\r\n/**\r\n * Create a new web worker that has model syncing capabilities built in.\r\n * Specify an AMD module to load that will `create` an object that will be proxied.\r\n */\r\nexport function createWebWorker(modelService, opts) {\r\n    return new MonacoWebWorkerImpl(modelService, opts);\r\n}\r\nclass MonacoWebWorkerImpl extends EditorWorkerClient {\r\n    constructor(modelService, opts) {\r\n        super(modelService, opts.keepIdleModels || false, opts.label);\r\n        this._foreignModuleId = opts.moduleId;\r\n        this._foreignModuleCreateData = opts.createData || null;\r\n        this._foreignModuleHost = opts.host || null;\r\n        this._foreignProxy = null;\r\n    }\r\n    // foreign host request\r\n    fhr(method, args) {\r\n        if (!this._foreignModuleHost || typeof this._foreignModuleHost[method] !== 'function') {\r\n            return Promise.reject(new Error('Missing method ' + method + ' or missing main thread foreign host.'));\r\n        }\r\n        try {\r\n            return Promise.resolve(this._foreignModuleHost[method].apply(this._foreignModuleHost, args));\r\n        }\r\n        catch (e) {\r\n            return Promise.reject(e);\r\n        }\r\n    }\r\n    _getForeignProxy() {\r\n        if (!this._foreignProxy) {\r\n            this._foreignProxy = this._getProxy().then((proxy) => {\r\n                const foreignHostMethods = this._foreignModuleHost ? types.getAllMethodNames(this._foreignModuleHost) : [];\r\n                return proxy.loadForeignModule(this._foreignModuleId, this._foreignModuleCreateData, foreignHostMethods).then((foreignMethods) => {\r\n                    this._foreignModuleCreateData = null;\r\n                    const proxyMethodRequest = (method, args) => {\r\n                        return proxy.fmr(method, args);\r\n                    };\r\n                    const createProxyMethod = (method, proxyMethodRequest) => {\r\n                        return function () {\r\n                            const args = Array.prototype.slice.call(arguments, 0);\r\n                            return proxyMethodRequest(method, args);\r\n                        };\r\n                    };\r\n                    let foreignProxy = {};\r\n                    for (const foreignMethod of foreignMethods) {\r\n                        foreignProxy[foreignMethod] = createProxyMethod(foreignMethod, proxyMethodRequest);\r\n                    }\r\n                    return foreignProxy;\r\n                });\r\n            });\r\n        }\r\n        return this._foreignProxy;\r\n    }\r\n    getProxy() {\r\n        return this._getForeignProxy();\r\n    }\r\n    withSyncedResources(resources) {\r\n        return this._withSyncedResources(resources).then(_ => this.getProxy());\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}