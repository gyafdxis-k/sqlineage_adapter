{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { URI } from './uri.js';\nimport { Schemas } from './network.js';\nimport { isWindows } from './platform.js';\nimport { basename } from './resources.js';\nimport { hasDriveLetter, isRootOrDriveLetter } from './extpath.js';\nexport function getBaseLabel(resource) {\n  if (!resource) {\n    return undefined;\n  }\n  if (typeof resource === 'string') {\n    resource = URI.file(resource);\n  }\n  const base = basename(resource) || (resource.scheme === Schemas.file ? resource.fsPath : resource.path) /* can be empty string if '/' is passed in */;\n  // convert c: => C:\n  if (isWindows && isRootOrDriveLetter(base)) {\n    return normalizeDriveLetter(base);\n  }\n  return base;\n}\nexport function normalizeDriveLetter(path) {\n  if (hasDriveLetter(path)) {\n    return path.charAt(0).toUpperCase() + path.slice(1);\n  }\n  return path;\n}","map":{"version":3,"names":["URI","Schemas","isWindows","basename","hasDriveLetter","isRootOrDriveLetter","getBaseLabel","resource","undefined","file","base","scheme","fsPath","path","normalizeDriveLetter","charAt","toUpperCase","slice"],"sources":["C:/Users/Administrator/Desktop/sqllineage-master/sqllineagejs/node_modules/monaco-editor/esm/vs/base/common/labels.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { URI } from './uri.js';\r\nimport { Schemas } from './network.js';\r\nimport { isWindows } from './platform.js';\r\nimport { basename } from './resources.js';\r\nimport { hasDriveLetter, isRootOrDriveLetter } from './extpath.js';\r\nexport function getBaseLabel(resource) {\r\n    if (!resource) {\r\n        return undefined;\r\n    }\r\n    if (typeof resource === 'string') {\r\n        resource = URI.file(resource);\r\n    }\r\n    const base = basename(resource) || (resource.scheme === Schemas.file ? resource.fsPath : resource.path) /* can be empty string if '/' is passed in */;\r\n    // convert c: => C:\r\n    if (isWindows && isRootOrDriveLetter(base)) {\r\n        return normalizeDriveLetter(base);\r\n    }\r\n    return base;\r\n}\r\nexport function normalizeDriveLetter(path) {\r\n    if (hasDriveLetter(path)) {\r\n        return path.charAt(0).toUpperCase() + path.slice(1);\r\n    }\r\n    return path;\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,GAAG,QAAQ,UAAU;AAC9B,SAASC,OAAO,QAAQ,cAAc;AACtC,SAASC,SAAS,QAAQ,eAAe;AACzC,SAASC,QAAQ,QAAQ,gBAAgB;AACzC,SAASC,cAAc,EAAEC,mBAAmB,QAAQ,cAAc;AAClE,OAAO,SAASC,YAAYA,CAACC,QAAQ,EAAE;EACnC,IAAI,CAACA,QAAQ,EAAE;IACX,OAAOC,SAAS;EACpB;EACA,IAAI,OAAOD,QAAQ,KAAK,QAAQ,EAAE;IAC9BA,QAAQ,GAAGP,GAAG,CAACS,IAAI,CAACF,QAAQ,CAAC;EACjC;EACA,MAAMG,IAAI,GAAGP,QAAQ,CAACI,QAAQ,CAAC,KAAKA,QAAQ,CAACI,MAAM,KAAKV,OAAO,CAACQ,IAAI,GAAGF,QAAQ,CAACK,MAAM,GAAGL,QAAQ,CAACM,IAAI,CAAC,CAAC;EACxG;EACA,IAAIX,SAAS,IAAIG,mBAAmB,CAACK,IAAI,CAAC,EAAE;IACxC,OAAOI,oBAAoB,CAACJ,IAAI,CAAC;EACrC;EACA,OAAOA,IAAI;AACf;AACA,OAAO,SAASI,oBAAoBA,CAACD,IAAI,EAAE;EACvC,IAAIT,cAAc,CAACS,IAAI,CAAC,EAAE;IACtB,OAAOA,IAAI,CAACE,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,GAAGH,IAAI,CAACI,KAAK,CAAC,CAAC,CAAC;EACvD;EACA,OAAOJ,IAAI;AACf"},"metadata":{},"sourceType":"module","externalDependencies":[]}