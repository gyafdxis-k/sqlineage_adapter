{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { CharacterClassifier } from '../core/characterClassifier.js';\nexport class WordCharacterClassifier extends CharacterClassifier {\n  constructor(wordSeparators) {\n    super(0 /* Regular */);\n    for (let i = 0, len = wordSeparators.length; i < len; i++) {\n      this.set(wordSeparators.charCodeAt(i), 2 /* WordSeparator */);\n    }\n\n    this.set(32 /* Space */, 1 /* Whitespace */);\n    this.set(9 /* Tab */, 1 /* Whitespace */);\n  }\n}\n\nfunction once(computeFn) {\n  let cache = {}; // TODO@Alex unbounded cache\n  return input => {\n    if (!cache.hasOwnProperty(input)) {\n      cache[input] = computeFn(input);\n    }\n    return cache[input];\n  };\n}\nexport const getMapForWordSeparators = once(input => new WordCharacterClassifier(input));","map":{"version":3,"names":["CharacterClassifier","WordCharacterClassifier","constructor","wordSeparators","i","len","length","set","charCodeAt","once","computeFn","cache","input","hasOwnProperty","getMapForWordSeparators"],"sources":["C:/Users/Administrator/Desktop/sqllineage-master/sqllineagejs/node_modules/monaco-editor/esm/vs/editor/common/controller/wordCharacterClassifier.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { CharacterClassifier } from '../core/characterClassifier.js';\r\nexport class WordCharacterClassifier extends CharacterClassifier {\r\n    constructor(wordSeparators) {\r\n        super(0 /* Regular */);\r\n        for (let i = 0, len = wordSeparators.length; i < len; i++) {\r\n            this.set(wordSeparators.charCodeAt(i), 2 /* WordSeparator */);\r\n        }\r\n        this.set(32 /* Space */, 1 /* Whitespace */);\r\n        this.set(9 /* Tab */, 1 /* Whitespace */);\r\n    }\r\n}\r\nfunction once(computeFn) {\r\n    let cache = {}; // TODO@Alex unbounded cache\r\n    return (input) => {\r\n        if (!cache.hasOwnProperty(input)) {\r\n            cache[input] = computeFn(input);\r\n        }\r\n        return cache[input];\r\n    };\r\n}\r\nexport const getMapForWordSeparators = once((input) => new WordCharacterClassifier(input));\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,mBAAmB,QAAQ,gCAAgC;AACpE,OAAO,MAAMC,uBAAuB,SAASD,mBAAmB,CAAC;EAC7DE,WAAWA,CAACC,cAAc,EAAE;IACxB,KAAK,CAAC,CAAC,CAAC,aAAa,CAAC;IACtB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEC,GAAG,GAAGF,cAAc,CAACG,MAAM,EAAEF,CAAC,GAAGC,GAAG,EAAED,CAAC,EAAE,EAAE;MACvD,IAAI,CAACG,GAAG,CAACJ,cAAc,CAACK,UAAU,CAACJ,CAAC,CAAC,EAAE,CAAC,CAAC,mBAAmB,CAAC;IACjE;;IACA,IAAI,CAACG,GAAG,CAAC,EAAE,CAAC,aAAa,CAAC,CAAC,gBAAgB,CAAC;IAC5C,IAAI,CAACA,GAAG,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,gBAAgB,CAAC;EAC7C;AACJ;;AACA,SAASE,IAAIA,CAACC,SAAS,EAAE;EACrB,IAAIC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC;EAChB,OAAQC,KAAK,IAAK;IACd,IAAI,CAACD,KAAK,CAACE,cAAc,CAACD,KAAK,CAAC,EAAE;MAC9BD,KAAK,CAACC,KAAK,CAAC,GAAGF,SAAS,CAACE,KAAK,CAAC;IACnC;IACA,OAAOD,KAAK,CAACC,KAAK,CAAC;EACvB,CAAC;AACL;AACA,OAAO,MAAME,uBAAuB,GAAGL,IAAI,CAAEG,KAAK,IAAK,IAAIX,uBAAuB,CAACW,KAAK,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}