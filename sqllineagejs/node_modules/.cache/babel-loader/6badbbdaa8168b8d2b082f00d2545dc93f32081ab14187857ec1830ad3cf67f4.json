{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../nls.js';\nimport * as path from '../../../base/common/path.js';\nimport { dirname } from '../../../base/common/resources.js';\nimport { Text } from './snippetParser.js';\nimport { LanguageConfigurationRegistry } from '../../common/modes/languageConfigurationRegistry.js';\nimport { getLeadingWhitespace, commonPrefixLength, isFalsyOrWhitespace, splitLines } from '../../../base/common/strings.js';\nimport { toWorkspaceIdentifier, WORKSPACE_EXTENSION, isSingleFolderWorkspaceIdentifier } from '../../../platform/workspaces/common/workspaces.js';\nimport { normalizeDriveLetter } from '../../../base/common/labels.js';\nimport { generateUuid } from '../../../base/common/uuid.js';\nexport class CompositeSnippetVariableResolver {\n  constructor(_delegates) {\n    this._delegates = _delegates;\n    //\n  }\n\n  resolve(variable) {\n    for (const delegate of this._delegates) {\n      let value = delegate.resolve(variable);\n      if (value !== undefined) {\n        return value;\n      }\n    }\n    return undefined;\n  }\n}\nexport class SelectionBasedVariableResolver {\n  constructor(_model, _selection, _selectionIdx, _overtypingCapturer) {\n    this._model = _model;\n    this._selection = _selection;\n    this._selectionIdx = _selectionIdx;\n    this._overtypingCapturer = _overtypingCapturer;\n    //\n  }\n\n  resolve(variable) {\n    const {\n      name\n    } = variable;\n    if (name === 'SELECTION' || name === 'TM_SELECTED_TEXT') {\n      let value = this._model.getValueInRange(this._selection) || undefined;\n      let isMultiline = this._selection.startLineNumber !== this._selection.endLineNumber;\n      // If there was no selected text, try to get last overtyped text\n      if (!value && this._overtypingCapturer) {\n        const info = this._overtypingCapturer.getLastOvertypedInfo(this._selectionIdx);\n        if (info) {\n          value = info.value;\n          isMultiline = info.multiline;\n        }\n      }\n      if (value && isMultiline && variable.snippet) {\n        // Selection is a multiline string which we indentation we now\n        // need to adjust. We compare the indentation of this variable\n        // with the indentation at the editor position and add potential\n        // extra indentation to the value\n        const line = this._model.getLineContent(this._selection.startLineNumber);\n        const lineLeadingWhitespace = getLeadingWhitespace(line, 0, this._selection.startColumn - 1);\n        let varLeadingWhitespace = lineLeadingWhitespace;\n        variable.snippet.walk(marker => {\n          if (marker === variable) {\n            return false;\n          }\n          if (marker instanceof Text) {\n            varLeadingWhitespace = getLeadingWhitespace(splitLines(marker.value).pop());\n          }\n          return true;\n        });\n        const whitespaceCommonLength = commonPrefixLength(varLeadingWhitespace, lineLeadingWhitespace);\n        value = value.replace(/(\\r\\n|\\r|\\n)(.*)/g, (m, newline, rest) => \"\".concat(newline).concat(varLeadingWhitespace.substr(whitespaceCommonLength)).concat(rest));\n      }\n      return value;\n    } else if (name === 'TM_CURRENT_LINE') {\n      return this._model.getLineContent(this._selection.positionLineNumber);\n    } else if (name === 'TM_CURRENT_WORD') {\n      const info = this._model.getWordAtPosition({\n        lineNumber: this._selection.positionLineNumber,\n        column: this._selection.positionColumn\n      });\n      return info && info.word || undefined;\n    } else if (name === 'TM_LINE_INDEX') {\n      return String(this._selection.positionLineNumber - 1);\n    } else if (name === 'TM_LINE_NUMBER') {\n      return String(this._selection.positionLineNumber);\n    }\n    return undefined;\n  }\n}\nexport class ModelBasedVariableResolver {\n  constructor(_labelService, _model) {\n    this._labelService = _labelService;\n    this._model = _model;\n    //\n  }\n\n  resolve(variable) {\n    const {\n      name\n    } = variable;\n    if (name === 'TM_FILENAME') {\n      return path.basename(this._model.uri.fsPath);\n    } else if (name === 'TM_FILENAME_BASE') {\n      const name = path.basename(this._model.uri.fsPath);\n      const idx = name.lastIndexOf('.');\n      if (idx <= 0) {\n        return name;\n      } else {\n        return name.slice(0, idx);\n      }\n    } else if (name === 'TM_DIRECTORY' && this._labelService) {\n      if (path.dirname(this._model.uri.fsPath) === '.') {\n        return '';\n      }\n      return this._labelService.getUriLabel(dirname(this._model.uri));\n    } else if (name === 'TM_FILEPATH' && this._labelService) {\n      return this._labelService.getUriLabel(this._model.uri);\n    } else if (name === 'RELATIVE_FILEPATH' && this._labelService) {\n      return this._labelService.getUriLabel(this._model.uri, {\n        relative: true,\n        noPrefix: true\n      });\n    }\n    return undefined;\n  }\n}\nexport class ClipboardBasedVariableResolver {\n  constructor(_readClipboardText, _selectionIdx, _selectionCount, _spread) {\n    this._readClipboardText = _readClipboardText;\n    this._selectionIdx = _selectionIdx;\n    this._selectionCount = _selectionCount;\n    this._spread = _spread;\n    //\n  }\n\n  resolve(variable) {\n    if (variable.name !== 'CLIPBOARD') {\n      return undefined;\n    }\n    const clipboardText = this._readClipboardText();\n    if (!clipboardText) {\n      return undefined;\n    }\n    // `spread` is assigning each cursor a line of the clipboard\n    // text whenever there the line count equals the cursor count\n    // and when enabled\n    if (this._spread) {\n      const lines = clipboardText.split(/\\r\\n|\\n|\\r/).filter(s => !isFalsyOrWhitespace(s));\n      if (lines.length === this._selectionCount) {\n        return lines[this._selectionIdx];\n      }\n    }\n    return clipboardText;\n  }\n}\nexport class CommentBasedVariableResolver {\n  constructor(_model, _selection) {\n    this._model = _model;\n    this._selection = _selection;\n    //\n  }\n\n  resolve(variable) {\n    const {\n      name\n    } = variable;\n    const langId = this._model.getLanguageIdAtPosition(this._selection.selectionStartLineNumber, this._selection.selectionStartColumn);\n    const config = LanguageConfigurationRegistry.getComments(langId);\n    if (!config) {\n      return undefined;\n    }\n    if (name === 'LINE_COMMENT') {\n      return config.lineCommentToken || undefined;\n    } else if (name === 'BLOCK_COMMENT_START') {\n      return config.blockCommentStartToken || undefined;\n    } else if (name === 'BLOCK_COMMENT_END') {\n      return config.blockCommentEndToken || undefined;\n    }\n    return undefined;\n  }\n}\nexport class TimeBasedVariableResolver {\n  resolve(variable) {\n    const {\n      name\n    } = variable;\n    if (name === 'CURRENT_YEAR') {\n      return String(new Date().getFullYear());\n    } else if (name === 'CURRENT_YEAR_SHORT') {\n      return String(new Date().getFullYear()).slice(-2);\n    } else if (name === 'CURRENT_MONTH') {\n      return String(new Date().getMonth().valueOf() + 1).padStart(2, '0');\n    } else if (name === 'CURRENT_DATE') {\n      return String(new Date().getDate().valueOf()).padStart(2, '0');\n    } else if (name === 'CURRENT_HOUR') {\n      return String(new Date().getHours().valueOf()).padStart(2, '0');\n    } else if (name === 'CURRENT_MINUTE') {\n      return String(new Date().getMinutes().valueOf()).padStart(2, '0');\n    } else if (name === 'CURRENT_SECOND') {\n      return String(new Date().getSeconds().valueOf()).padStart(2, '0');\n    } else if (name === 'CURRENT_DAY_NAME') {\n      return TimeBasedVariableResolver.dayNames[new Date().getDay()];\n    } else if (name === 'CURRENT_DAY_NAME_SHORT') {\n      return TimeBasedVariableResolver.dayNamesShort[new Date().getDay()];\n    } else if (name === 'CURRENT_MONTH_NAME') {\n      return TimeBasedVariableResolver.monthNames[new Date().getMonth()];\n    } else if (name === 'CURRENT_MONTH_NAME_SHORT') {\n      return TimeBasedVariableResolver.monthNamesShort[new Date().getMonth()];\n    } else if (name === 'CURRENT_SECONDS_UNIX') {\n      return String(Math.floor(Date.now() / 1000));\n    }\n    return undefined;\n  }\n}\nTimeBasedVariableResolver.dayNames = [nls.localize('Sunday', \"Sunday\"), nls.localize('Monday', \"Monday\"), nls.localize('Tuesday', \"Tuesday\"), nls.localize('Wednesday', \"Wednesday\"), nls.localize('Thursday', \"Thursday\"), nls.localize('Friday', \"Friday\"), nls.localize('Saturday', \"Saturday\")];\nTimeBasedVariableResolver.dayNamesShort = [nls.localize('SundayShort', \"Sun\"), nls.localize('MondayShort', \"Mon\"), nls.localize('TuesdayShort', \"Tue\"), nls.localize('WednesdayShort', \"Wed\"), nls.localize('ThursdayShort', \"Thu\"), nls.localize('FridayShort', \"Fri\"), nls.localize('SaturdayShort', \"Sat\")];\nTimeBasedVariableResolver.monthNames = [nls.localize('January', \"January\"), nls.localize('February', \"February\"), nls.localize('March', \"March\"), nls.localize('April', \"April\"), nls.localize('May', \"May\"), nls.localize('June', \"June\"), nls.localize('July', \"July\"), nls.localize('August', \"August\"), nls.localize('September', \"September\"), nls.localize('October', \"October\"), nls.localize('November', \"November\"), nls.localize('December', \"December\")];\nTimeBasedVariableResolver.monthNamesShort = [nls.localize('JanuaryShort', \"Jan\"), nls.localize('FebruaryShort', \"Feb\"), nls.localize('MarchShort', \"Mar\"), nls.localize('AprilShort', \"Apr\"), nls.localize('MayShort', \"May\"), nls.localize('JuneShort', \"Jun\"), nls.localize('JulyShort', \"Jul\"), nls.localize('AugustShort', \"Aug\"), nls.localize('SeptemberShort', \"Sep\"), nls.localize('OctoberShort', \"Oct\"), nls.localize('NovemberShort', \"Nov\"), nls.localize('DecemberShort', \"Dec\")];\nexport class WorkspaceBasedVariableResolver {\n  constructor(_workspaceService) {\n    this._workspaceService = _workspaceService;\n    //\n  }\n\n  resolve(variable) {\n    if (!this._workspaceService) {\n      return undefined;\n    }\n    const workspaceIdentifier = toWorkspaceIdentifier(this._workspaceService.getWorkspace());\n    if (!workspaceIdentifier) {\n      return undefined;\n    }\n    if (variable.name === 'WORKSPACE_NAME') {\n      return this._resolveWorkspaceName(workspaceIdentifier);\n    } else if (variable.name === 'WORKSPACE_FOLDER') {\n      return this._resoveWorkspacePath(workspaceIdentifier);\n    }\n    return undefined;\n  }\n  _resolveWorkspaceName(workspaceIdentifier) {\n    if (isSingleFolderWorkspaceIdentifier(workspaceIdentifier)) {\n      return path.basename(workspaceIdentifier.uri.path);\n    }\n    let filename = path.basename(workspaceIdentifier.configPath.path);\n    if (filename.endsWith(WORKSPACE_EXTENSION)) {\n      filename = filename.substr(0, filename.length - WORKSPACE_EXTENSION.length - 1);\n    }\n    return filename;\n  }\n  _resoveWorkspacePath(workspaceIdentifier) {\n    if (isSingleFolderWorkspaceIdentifier(workspaceIdentifier)) {\n      return normalizeDriveLetter(workspaceIdentifier.uri.fsPath);\n    }\n    let filename = path.basename(workspaceIdentifier.configPath.path);\n    let folderpath = workspaceIdentifier.configPath.fsPath;\n    if (folderpath.endsWith(filename)) {\n      folderpath = folderpath.substr(0, folderpath.length - filename.length - 1);\n    }\n    return folderpath ? normalizeDriveLetter(folderpath) : '/';\n  }\n}\nexport class RandomBasedVariableResolver {\n  resolve(variable) {\n    const {\n      name\n    } = variable;\n    if (name === 'RANDOM') {\n      return Math.random().toString().slice(-6);\n    } else if (name === 'RANDOM_HEX') {\n      return Math.random().toString(16).slice(-6);\n    } else if (name === 'UUID') {\n      return generateUuid();\n    }\n    return undefined;\n  }\n}","map":{"version":3,"names":["nls","path","dirname","Text","LanguageConfigurationRegistry","getLeadingWhitespace","commonPrefixLength","isFalsyOrWhitespace","splitLines","toWorkspaceIdentifier","WORKSPACE_EXTENSION","isSingleFolderWorkspaceIdentifier","normalizeDriveLetter","generateUuid","CompositeSnippetVariableResolver","constructor","_delegates","resolve","variable","delegate","value","undefined","SelectionBasedVariableResolver","_model","_selection","_selectionIdx","_overtypingCapturer","name","getValueInRange","isMultiline","startLineNumber","endLineNumber","info","getLastOvertypedInfo","multiline","snippet","line","getLineContent","lineLeadingWhitespace","startColumn","varLeadingWhitespace","walk","marker","pop","whitespaceCommonLength","replace","m","newline","rest","concat","substr","positionLineNumber","getWordAtPosition","lineNumber","column","positionColumn","word","String","ModelBasedVariableResolver","_labelService","basename","uri","fsPath","idx","lastIndexOf","slice","getUriLabel","relative","noPrefix","ClipboardBasedVariableResolver","_readClipboardText","_selectionCount","_spread","clipboardText","lines","split","filter","s","length","CommentBasedVariableResolver","langId","getLanguageIdAtPosition","selectionStartLineNumber","selectionStartColumn","config","getComments","lineCommentToken","blockCommentStartToken","blockCommentEndToken","TimeBasedVariableResolver","Date","getFullYear","getMonth","valueOf","padStart","getDate","getHours","getMinutes","getSeconds","dayNames","getDay","dayNamesShort","monthNames","monthNamesShort","Math","floor","now","localize","WorkspaceBasedVariableResolver","_workspaceService","workspaceIdentifier","getWorkspace","_resolveWorkspaceName","_resoveWorkspacePath","filename","configPath","endsWith","folderpath","RandomBasedVariableResolver","random","toString"],"sources":["C:/Users/Administrator/Desktop/sqllineage-master/sqllineagejs/node_modules/monaco-editor/esm/vs/editor/contrib/snippet/snippetVariables.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport * as nls from '../../../nls.js';\r\nimport * as path from '../../../base/common/path.js';\r\nimport { dirname } from '../../../base/common/resources.js';\r\nimport { Text } from './snippetParser.js';\r\nimport { LanguageConfigurationRegistry } from '../../common/modes/languageConfigurationRegistry.js';\r\nimport { getLeadingWhitespace, commonPrefixLength, isFalsyOrWhitespace, splitLines } from '../../../base/common/strings.js';\r\nimport { toWorkspaceIdentifier, WORKSPACE_EXTENSION, isSingleFolderWorkspaceIdentifier } from '../../../platform/workspaces/common/workspaces.js';\r\nimport { normalizeDriveLetter } from '../../../base/common/labels.js';\r\nimport { generateUuid } from '../../../base/common/uuid.js';\r\nexport class CompositeSnippetVariableResolver {\r\n    constructor(_delegates) {\r\n        this._delegates = _delegates;\r\n        //\r\n    }\r\n    resolve(variable) {\r\n        for (const delegate of this._delegates) {\r\n            let value = delegate.resolve(variable);\r\n            if (value !== undefined) {\r\n                return value;\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n}\r\nexport class SelectionBasedVariableResolver {\r\n    constructor(_model, _selection, _selectionIdx, _overtypingCapturer) {\r\n        this._model = _model;\r\n        this._selection = _selection;\r\n        this._selectionIdx = _selectionIdx;\r\n        this._overtypingCapturer = _overtypingCapturer;\r\n        //\r\n    }\r\n    resolve(variable) {\r\n        const { name } = variable;\r\n        if (name === 'SELECTION' || name === 'TM_SELECTED_TEXT') {\r\n            let value = this._model.getValueInRange(this._selection) || undefined;\r\n            let isMultiline = this._selection.startLineNumber !== this._selection.endLineNumber;\r\n            // If there was no selected text, try to get last overtyped text\r\n            if (!value && this._overtypingCapturer) {\r\n                const info = this._overtypingCapturer.getLastOvertypedInfo(this._selectionIdx);\r\n                if (info) {\r\n                    value = info.value;\r\n                    isMultiline = info.multiline;\r\n                }\r\n            }\r\n            if (value && isMultiline && variable.snippet) {\r\n                // Selection is a multiline string which we indentation we now\r\n                // need to adjust. We compare the indentation of this variable\r\n                // with the indentation at the editor position and add potential\r\n                // extra indentation to the value\r\n                const line = this._model.getLineContent(this._selection.startLineNumber);\r\n                const lineLeadingWhitespace = getLeadingWhitespace(line, 0, this._selection.startColumn - 1);\r\n                let varLeadingWhitespace = lineLeadingWhitespace;\r\n                variable.snippet.walk(marker => {\r\n                    if (marker === variable) {\r\n                        return false;\r\n                    }\r\n                    if (marker instanceof Text) {\r\n                        varLeadingWhitespace = getLeadingWhitespace(splitLines(marker.value).pop());\r\n                    }\r\n                    return true;\r\n                });\r\n                const whitespaceCommonLength = commonPrefixLength(varLeadingWhitespace, lineLeadingWhitespace);\r\n                value = value.replace(/(\\r\\n|\\r|\\n)(.*)/g, (m, newline, rest) => `${newline}${varLeadingWhitespace.substr(whitespaceCommonLength)}${rest}`);\r\n            }\r\n            return value;\r\n        }\r\n        else if (name === 'TM_CURRENT_LINE') {\r\n            return this._model.getLineContent(this._selection.positionLineNumber);\r\n        }\r\n        else if (name === 'TM_CURRENT_WORD') {\r\n            const info = this._model.getWordAtPosition({\r\n                lineNumber: this._selection.positionLineNumber,\r\n                column: this._selection.positionColumn\r\n            });\r\n            return info && info.word || undefined;\r\n        }\r\n        else if (name === 'TM_LINE_INDEX') {\r\n            return String(this._selection.positionLineNumber - 1);\r\n        }\r\n        else if (name === 'TM_LINE_NUMBER') {\r\n            return String(this._selection.positionLineNumber);\r\n        }\r\n        return undefined;\r\n    }\r\n}\r\nexport class ModelBasedVariableResolver {\r\n    constructor(_labelService, _model) {\r\n        this._labelService = _labelService;\r\n        this._model = _model;\r\n        //\r\n    }\r\n    resolve(variable) {\r\n        const { name } = variable;\r\n        if (name === 'TM_FILENAME') {\r\n            return path.basename(this._model.uri.fsPath);\r\n        }\r\n        else if (name === 'TM_FILENAME_BASE') {\r\n            const name = path.basename(this._model.uri.fsPath);\r\n            const idx = name.lastIndexOf('.');\r\n            if (idx <= 0) {\r\n                return name;\r\n            }\r\n            else {\r\n                return name.slice(0, idx);\r\n            }\r\n        }\r\n        else if (name === 'TM_DIRECTORY' && this._labelService) {\r\n            if (path.dirname(this._model.uri.fsPath) === '.') {\r\n                return '';\r\n            }\r\n            return this._labelService.getUriLabel(dirname(this._model.uri));\r\n        }\r\n        else if (name === 'TM_FILEPATH' && this._labelService) {\r\n            return this._labelService.getUriLabel(this._model.uri);\r\n        }\r\n        else if (name === 'RELATIVE_FILEPATH' && this._labelService) {\r\n            return this._labelService.getUriLabel(this._model.uri, { relative: true, noPrefix: true });\r\n        }\r\n        return undefined;\r\n    }\r\n}\r\nexport class ClipboardBasedVariableResolver {\r\n    constructor(_readClipboardText, _selectionIdx, _selectionCount, _spread) {\r\n        this._readClipboardText = _readClipboardText;\r\n        this._selectionIdx = _selectionIdx;\r\n        this._selectionCount = _selectionCount;\r\n        this._spread = _spread;\r\n        //\r\n    }\r\n    resolve(variable) {\r\n        if (variable.name !== 'CLIPBOARD') {\r\n            return undefined;\r\n        }\r\n        const clipboardText = this._readClipboardText();\r\n        if (!clipboardText) {\r\n            return undefined;\r\n        }\r\n        // `spread` is assigning each cursor a line of the clipboard\r\n        // text whenever there the line count equals the cursor count\r\n        // and when enabled\r\n        if (this._spread) {\r\n            const lines = clipboardText.split(/\\r\\n|\\n|\\r/).filter(s => !isFalsyOrWhitespace(s));\r\n            if (lines.length === this._selectionCount) {\r\n                return lines[this._selectionIdx];\r\n            }\r\n        }\r\n        return clipboardText;\r\n    }\r\n}\r\nexport class CommentBasedVariableResolver {\r\n    constructor(_model, _selection) {\r\n        this._model = _model;\r\n        this._selection = _selection;\r\n        //\r\n    }\r\n    resolve(variable) {\r\n        const { name } = variable;\r\n        const langId = this._model.getLanguageIdAtPosition(this._selection.selectionStartLineNumber, this._selection.selectionStartColumn);\r\n        const config = LanguageConfigurationRegistry.getComments(langId);\r\n        if (!config) {\r\n            return undefined;\r\n        }\r\n        if (name === 'LINE_COMMENT') {\r\n            return config.lineCommentToken || undefined;\r\n        }\r\n        else if (name === 'BLOCK_COMMENT_START') {\r\n            return config.blockCommentStartToken || undefined;\r\n        }\r\n        else if (name === 'BLOCK_COMMENT_END') {\r\n            return config.blockCommentEndToken || undefined;\r\n        }\r\n        return undefined;\r\n    }\r\n}\r\nexport class TimeBasedVariableResolver {\r\n    resolve(variable) {\r\n        const { name } = variable;\r\n        if (name === 'CURRENT_YEAR') {\r\n            return String(new Date().getFullYear());\r\n        }\r\n        else if (name === 'CURRENT_YEAR_SHORT') {\r\n            return String(new Date().getFullYear()).slice(-2);\r\n        }\r\n        else if (name === 'CURRENT_MONTH') {\r\n            return String(new Date().getMonth().valueOf() + 1).padStart(2, '0');\r\n        }\r\n        else if (name === 'CURRENT_DATE') {\r\n            return String(new Date().getDate().valueOf()).padStart(2, '0');\r\n        }\r\n        else if (name === 'CURRENT_HOUR') {\r\n            return String(new Date().getHours().valueOf()).padStart(2, '0');\r\n        }\r\n        else if (name === 'CURRENT_MINUTE') {\r\n            return String(new Date().getMinutes().valueOf()).padStart(2, '0');\r\n        }\r\n        else if (name === 'CURRENT_SECOND') {\r\n            return String(new Date().getSeconds().valueOf()).padStart(2, '0');\r\n        }\r\n        else if (name === 'CURRENT_DAY_NAME') {\r\n            return TimeBasedVariableResolver.dayNames[new Date().getDay()];\r\n        }\r\n        else if (name === 'CURRENT_DAY_NAME_SHORT') {\r\n            return TimeBasedVariableResolver.dayNamesShort[new Date().getDay()];\r\n        }\r\n        else if (name === 'CURRENT_MONTH_NAME') {\r\n            return TimeBasedVariableResolver.monthNames[new Date().getMonth()];\r\n        }\r\n        else if (name === 'CURRENT_MONTH_NAME_SHORT') {\r\n            return TimeBasedVariableResolver.monthNamesShort[new Date().getMonth()];\r\n        }\r\n        else if (name === 'CURRENT_SECONDS_UNIX') {\r\n            return String(Math.floor(Date.now() / 1000));\r\n        }\r\n        return undefined;\r\n    }\r\n}\r\nTimeBasedVariableResolver.dayNames = [nls.localize('Sunday', \"Sunday\"), nls.localize('Monday', \"Monday\"), nls.localize('Tuesday', \"Tuesday\"), nls.localize('Wednesday', \"Wednesday\"), nls.localize('Thursday', \"Thursday\"), nls.localize('Friday', \"Friday\"), nls.localize('Saturday', \"Saturday\")];\r\nTimeBasedVariableResolver.dayNamesShort = [nls.localize('SundayShort', \"Sun\"), nls.localize('MondayShort', \"Mon\"), nls.localize('TuesdayShort', \"Tue\"), nls.localize('WednesdayShort', \"Wed\"), nls.localize('ThursdayShort', \"Thu\"), nls.localize('FridayShort', \"Fri\"), nls.localize('SaturdayShort', \"Sat\")];\r\nTimeBasedVariableResolver.monthNames = [nls.localize('January', \"January\"), nls.localize('February', \"February\"), nls.localize('March', \"March\"), nls.localize('April', \"April\"), nls.localize('May', \"May\"), nls.localize('June', \"June\"), nls.localize('July', \"July\"), nls.localize('August', \"August\"), nls.localize('September', \"September\"), nls.localize('October', \"October\"), nls.localize('November', \"November\"), nls.localize('December', \"December\")];\r\nTimeBasedVariableResolver.monthNamesShort = [nls.localize('JanuaryShort', \"Jan\"), nls.localize('FebruaryShort', \"Feb\"), nls.localize('MarchShort', \"Mar\"), nls.localize('AprilShort', \"Apr\"), nls.localize('MayShort', \"May\"), nls.localize('JuneShort', \"Jun\"), nls.localize('JulyShort', \"Jul\"), nls.localize('AugustShort', \"Aug\"), nls.localize('SeptemberShort', \"Sep\"), nls.localize('OctoberShort', \"Oct\"), nls.localize('NovemberShort', \"Nov\"), nls.localize('DecemberShort', \"Dec\")];\r\nexport class WorkspaceBasedVariableResolver {\r\n    constructor(_workspaceService) {\r\n        this._workspaceService = _workspaceService;\r\n        //\r\n    }\r\n    resolve(variable) {\r\n        if (!this._workspaceService) {\r\n            return undefined;\r\n        }\r\n        const workspaceIdentifier = toWorkspaceIdentifier(this._workspaceService.getWorkspace());\r\n        if (!workspaceIdentifier) {\r\n            return undefined;\r\n        }\r\n        if (variable.name === 'WORKSPACE_NAME') {\r\n            return this._resolveWorkspaceName(workspaceIdentifier);\r\n        }\r\n        else if (variable.name === 'WORKSPACE_FOLDER') {\r\n            return this._resoveWorkspacePath(workspaceIdentifier);\r\n        }\r\n        return undefined;\r\n    }\r\n    _resolveWorkspaceName(workspaceIdentifier) {\r\n        if (isSingleFolderWorkspaceIdentifier(workspaceIdentifier)) {\r\n            return path.basename(workspaceIdentifier.uri.path);\r\n        }\r\n        let filename = path.basename(workspaceIdentifier.configPath.path);\r\n        if (filename.endsWith(WORKSPACE_EXTENSION)) {\r\n            filename = filename.substr(0, filename.length - WORKSPACE_EXTENSION.length - 1);\r\n        }\r\n        return filename;\r\n    }\r\n    _resoveWorkspacePath(workspaceIdentifier) {\r\n        if (isSingleFolderWorkspaceIdentifier(workspaceIdentifier)) {\r\n            return normalizeDriveLetter(workspaceIdentifier.uri.fsPath);\r\n        }\r\n        let filename = path.basename(workspaceIdentifier.configPath.path);\r\n        let folderpath = workspaceIdentifier.configPath.fsPath;\r\n        if (folderpath.endsWith(filename)) {\r\n            folderpath = folderpath.substr(0, folderpath.length - filename.length - 1);\r\n        }\r\n        return (folderpath ? normalizeDriveLetter(folderpath) : '/');\r\n    }\r\n}\r\nexport class RandomBasedVariableResolver {\r\n    resolve(variable) {\r\n        const { name } = variable;\r\n        if (name === 'RANDOM') {\r\n            return Math.random().toString().slice(-6);\r\n        }\r\n        else if (name === 'RANDOM_HEX') {\r\n            return Math.random().toString(16).slice(-6);\r\n        }\r\n        else if (name === 'UUID') {\r\n            return generateUuid();\r\n        }\r\n        return undefined;\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}