{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nexport var Iterable;\n(function (Iterable) {\n  function is(thing) {\n    return thing && typeof thing === 'object' && typeof thing[Symbol.iterator] === 'function';\n  }\n  Iterable.is = is;\n  const _empty = Object.freeze([]);\n  function empty() {\n    return _empty;\n  }\n  Iterable.empty = empty;\n  function* single(element) {\n    yield element;\n  }\n  Iterable.single = single;\n  function from(iterable) {\n    return iterable || _empty;\n  }\n  Iterable.from = from;\n  function isEmpty(iterable) {\n    return !iterable || iterable[Symbol.iterator]().next().done === true;\n  }\n  Iterable.isEmpty = isEmpty;\n  function first(iterable) {\n    return iterable[Symbol.iterator]().next().value;\n  }\n  Iterable.first = first;\n  function some(iterable, predicate) {\n    for (const element of iterable) {\n      if (predicate(element)) {\n        return true;\n      }\n    }\n    return false;\n  }\n  Iterable.some = some;\n  function* filter(iterable, predicate) {\n    for (const element of iterable) {\n      if (predicate(element)) {\n        yield element;\n      }\n    }\n  }\n  Iterable.filter = filter;\n  function* map(iterable, fn) {\n    for (const element of iterable) {\n      yield fn(element);\n    }\n  }\n  Iterable.map = map;\n  function* concat() {\n    for (var _len = arguments.length, iterables = new Array(_len), _key = 0; _key < _len; _key++) {\n      iterables[_key] = arguments[_key];\n    }\n    for (const iterable of iterables) {\n      for (const element of iterable) {\n        yield element;\n      }\n    }\n  }\n  Iterable.concat = concat;\n  function* concatNested(iterables) {\n    for (const iterable of iterables) {\n      for (const element of iterable) {\n        yield element;\n      }\n    }\n  }\n  Iterable.concatNested = concatNested;\n  /**\r\n   * Returns an iterable slice of the array, with the same semantics as `array.slice()`.\r\n   */\n  function slice(iterable, from) {\n    let to = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : iterable.length;\n    return function* () {\n      if (from < 0) {\n        from += iterable.length;\n      }\n      if (to < 0) {\n        to += iterable.length;\n      } else if (to > iterable.length) {\n        to = iterable.length;\n      }\n      for (; from < to; from++) {\n        yield iterable[from];\n      }\n    }();\n  }\n  Iterable.slice = slice;\n  /**\r\n   * Consumes `atMost` elements from iterable and returns the consumed elements,\r\n   * and an iterable for the rest of the elements.\r\n   */\n  function consume(iterable) {\n    let atMost = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Number.POSITIVE_INFINITY;\n    const consumed = [];\n    if (atMost === 0) {\n      return [consumed, iterable];\n    }\n    const iterator = iterable[Symbol.iterator]();\n    for (let i = 0; i < atMost; i++) {\n      const next = iterator.next();\n      if (next.done) {\n        return [consumed, Iterable.empty()];\n      }\n      consumed.push(next.value);\n    }\n    return [consumed, {\n      [Symbol.iterator]() {\n        return iterator;\n      }\n    }];\n  }\n  Iterable.consume = consume;\n})(Iterable || (Iterable = {}));","map":{"version":3,"names":["Iterable","is","thing","Symbol","iterator","_empty","Object","freeze","empty","single","element","from","iterable","isEmpty","next","done","first","value","some","predicate","filter","map","fn","concat","_len","arguments","length","iterables","Array","_key","concatNested","slice","to","undefined","consume","atMost","Number","POSITIVE_INFINITY","consumed","i","push"],"sources":["C:/Users/Administrator/Desktop/sqllineage-master/sqllineagejs/node_modules/monaco-editor/esm/vs/base/common/iterator.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nexport var Iterable;\r\n(function (Iterable) {\r\n    function is(thing) {\r\n        return thing && typeof thing === 'object' && typeof thing[Symbol.iterator] === 'function';\r\n    }\r\n    Iterable.is = is;\r\n    const _empty = Object.freeze([]);\r\n    function empty() {\r\n        return _empty;\r\n    }\r\n    Iterable.empty = empty;\r\n    function* single(element) {\r\n        yield element;\r\n    }\r\n    Iterable.single = single;\r\n    function from(iterable) {\r\n        return iterable || _empty;\r\n    }\r\n    Iterable.from = from;\r\n    function isEmpty(iterable) {\r\n        return !iterable || iterable[Symbol.iterator]().next().done === true;\r\n    }\r\n    Iterable.isEmpty = isEmpty;\r\n    function first(iterable) {\r\n        return iterable[Symbol.iterator]().next().value;\r\n    }\r\n    Iterable.first = first;\r\n    function some(iterable, predicate) {\r\n        for (const element of iterable) {\r\n            if (predicate(element)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    Iterable.some = some;\r\n    function* filter(iterable, predicate) {\r\n        for (const element of iterable) {\r\n            if (predicate(element)) {\r\n                yield element;\r\n            }\r\n        }\r\n    }\r\n    Iterable.filter = filter;\r\n    function* map(iterable, fn) {\r\n        for (const element of iterable) {\r\n            yield fn(element);\r\n        }\r\n    }\r\n    Iterable.map = map;\r\n    function* concat(...iterables) {\r\n        for (const iterable of iterables) {\r\n            for (const element of iterable) {\r\n                yield element;\r\n            }\r\n        }\r\n    }\r\n    Iterable.concat = concat;\r\n    function* concatNested(iterables) {\r\n        for (const iterable of iterables) {\r\n            for (const element of iterable) {\r\n                yield element;\r\n            }\r\n        }\r\n    }\r\n    Iterable.concatNested = concatNested;\r\n    /**\r\n     * Returns an iterable slice of the array, with the same semantics as `array.slice()`.\r\n     */\r\n    function* slice(iterable, from, to = iterable.length) {\r\n        if (from < 0) {\r\n            from += iterable.length;\r\n        }\r\n        if (to < 0) {\r\n            to += iterable.length;\r\n        }\r\n        else if (to > iterable.length) {\r\n            to = iterable.length;\r\n        }\r\n        for (; from < to; from++) {\r\n            yield iterable[from];\r\n        }\r\n    }\r\n    Iterable.slice = slice;\r\n    /**\r\n     * Consumes `atMost` elements from iterable and returns the consumed elements,\r\n     * and an iterable for the rest of the elements.\r\n     */\r\n    function consume(iterable, atMost = Number.POSITIVE_INFINITY) {\r\n        const consumed = [];\r\n        if (atMost === 0) {\r\n            return [consumed, iterable];\r\n        }\r\n        const iterator = iterable[Symbol.iterator]();\r\n        for (let i = 0; i < atMost; i++) {\r\n            const next = iterator.next();\r\n            if (next.done) {\r\n                return [consumed, Iterable.empty()];\r\n            }\r\n            consumed.push(next.value);\r\n        }\r\n        return [consumed, { [Symbol.iterator]() { return iterator; } }];\r\n    }\r\n    Iterable.consume = consume;\r\n})(Iterable || (Iterable = {}));\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,OAAO,IAAIA,QAAQ;AACnB,CAAC,UAAUA,QAAQ,EAAE;EACjB,SAASC,EAAEA,CAACC,KAAK,EAAE;IACf,OAAOA,KAAK,IAAI,OAAOA,KAAK,KAAK,QAAQ,IAAI,OAAOA,KAAK,CAACC,MAAM,CAACC,QAAQ,CAAC,KAAK,UAAU;EAC7F;EACAJ,QAAQ,CAACC,EAAE,GAAGA,EAAE;EAChB,MAAMI,MAAM,GAAGC,MAAM,CAACC,MAAM,CAAC,EAAE,CAAC;EAChC,SAASC,KAAKA,CAAA,EAAG;IACb,OAAOH,MAAM;EACjB;EACAL,QAAQ,CAACQ,KAAK,GAAGA,KAAK;EACtB,UAAUC,MAAMA,CAACC,OAAO,EAAE;IACtB,MAAMA,OAAO;EACjB;EACAV,QAAQ,CAACS,MAAM,GAAGA,MAAM;EACxB,SAASE,IAAIA,CAACC,QAAQ,EAAE;IACpB,OAAOA,QAAQ,IAAIP,MAAM;EAC7B;EACAL,QAAQ,CAACW,IAAI,GAAGA,IAAI;EACpB,SAASE,OAAOA,CAACD,QAAQ,EAAE;IACvB,OAAO,CAACA,QAAQ,IAAIA,QAAQ,CAACT,MAAM,CAACC,QAAQ,CAAC,CAAC,CAAC,CAACU,IAAI,CAAC,CAAC,CAACC,IAAI,KAAK,IAAI;EACxE;EACAf,QAAQ,CAACa,OAAO,GAAGA,OAAO;EAC1B,SAASG,KAAKA,CAACJ,QAAQ,EAAE;IACrB,OAAOA,QAAQ,CAACT,MAAM,CAACC,QAAQ,CAAC,CAAC,CAAC,CAACU,IAAI,CAAC,CAAC,CAACG,KAAK;EACnD;EACAjB,QAAQ,CAACgB,KAAK,GAAGA,KAAK;EACtB,SAASE,IAAIA,CAACN,QAAQ,EAAEO,SAAS,EAAE;IAC/B,KAAK,MAAMT,OAAO,IAAIE,QAAQ,EAAE;MAC5B,IAAIO,SAAS,CAACT,OAAO,CAAC,EAAE;QACpB,OAAO,IAAI;MACf;IACJ;IACA,OAAO,KAAK;EAChB;EACAV,QAAQ,CAACkB,IAAI,GAAGA,IAAI;EACpB,UAAUE,MAAMA,CAACR,QAAQ,EAAEO,SAAS,EAAE;IAClC,KAAK,MAAMT,OAAO,IAAIE,QAAQ,EAAE;MAC5B,IAAIO,SAAS,CAACT,OAAO,CAAC,EAAE;QACpB,MAAMA,OAAO;MACjB;IACJ;EACJ;EACAV,QAAQ,CAACoB,MAAM,GAAGA,MAAM;EACxB,UAAUC,GAAGA,CAACT,QAAQ,EAAEU,EAAE,EAAE;IACxB,KAAK,MAAMZ,OAAO,IAAIE,QAAQ,EAAE;MAC5B,MAAMU,EAAE,CAACZ,OAAO,CAAC;IACrB;EACJ;EACAV,QAAQ,CAACqB,GAAG,GAAGA,GAAG;EAClB,UAAUE,MAAMA,CAAA,EAAe;IAAA,SAAAC,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAAXC,SAAS,OAAAC,KAAA,CAAAJ,IAAA,GAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;MAATF,SAAS,CAAAE,IAAA,IAAAJ,SAAA,CAAAI,IAAA;IAAA;IACzB,KAAK,MAAMjB,QAAQ,IAAIe,SAAS,EAAE;MAC9B,KAAK,MAAMjB,OAAO,IAAIE,QAAQ,EAAE;QAC5B,MAAMF,OAAO;MACjB;IACJ;EACJ;EACAV,QAAQ,CAACuB,MAAM,GAAGA,MAAM;EACxB,UAAUO,YAAYA,CAACH,SAAS,EAAE;IAC9B,KAAK,MAAMf,QAAQ,IAAIe,SAAS,EAAE;MAC9B,KAAK,MAAMjB,OAAO,IAAIE,QAAQ,EAAE;QAC5B,MAAMF,OAAO;MACjB;IACJ;EACJ;EACAV,QAAQ,CAAC8B,YAAY,GAAGA,YAAY;EACpC;AACJ;AACA;EACI,SAAUC,KAAKA,CAACnB,QAAQ,EAAED,IAAI;IAAA,IAAEqB,EAAE,GAAAP,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAQ,SAAA,GAAAR,SAAA,MAAGb,QAAQ,CAACc,MAAM;IAAA,oBAAE;MAClD,IAAIf,IAAI,GAAG,CAAC,EAAE;QACVA,IAAI,IAAIC,QAAQ,CAACc,MAAM;MAC3B;MACA,IAAIM,EAAE,GAAG,CAAC,EAAE;QACRA,EAAE,IAAIpB,QAAQ,CAACc,MAAM;MACzB,CAAC,MACI,IAAIM,EAAE,GAAGpB,QAAQ,CAACc,MAAM,EAAE;QAC3BM,EAAE,GAAGpB,QAAQ,CAACc,MAAM;MACxB;MACA,OAAOf,IAAI,GAAGqB,EAAE,EAAErB,IAAI,EAAE,EAAE;QACtB,MAAMC,QAAQ,CAACD,IAAI,CAAC;MACxB;IACJ,CAAC;EAAA;EACDX,QAAQ,CAAC+B,KAAK,GAAGA,KAAK;EACtB;AACJ;AACA;AACA;EACI,SAASG,OAAOA,CAACtB,QAAQ,EAAqC;IAAA,IAAnCuB,MAAM,GAAAV,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAQ,SAAA,GAAAR,SAAA,MAAGW,MAAM,CAACC,iBAAiB;IACxD,MAAMC,QAAQ,GAAG,EAAE;IACnB,IAAIH,MAAM,KAAK,CAAC,EAAE;MACd,OAAO,CAACG,QAAQ,EAAE1B,QAAQ,CAAC;IAC/B;IACA,MAAMR,QAAQ,GAAGQ,QAAQ,CAACT,MAAM,CAACC,QAAQ,CAAC,CAAC,CAAC;IAC5C,KAAK,IAAImC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,MAAM,EAAEI,CAAC,EAAE,EAAE;MAC7B,MAAMzB,IAAI,GAAGV,QAAQ,CAACU,IAAI,CAAC,CAAC;MAC5B,IAAIA,IAAI,CAACC,IAAI,EAAE;QACX,OAAO,CAACuB,QAAQ,EAAEtC,QAAQ,CAACQ,KAAK,CAAC,CAAC,CAAC;MACvC;MACA8B,QAAQ,CAACE,IAAI,CAAC1B,IAAI,CAACG,KAAK,CAAC;IAC7B;IACA,OAAO,CAACqB,QAAQ,EAAE;MAAE,CAACnC,MAAM,CAACC,QAAQ,IAAI;QAAE,OAAOA,QAAQ;MAAE;IAAE,CAAC,CAAC;EACnE;EACAJ,QAAQ,CAACkC,OAAO,GAAGA,OAAO;AAC9B,CAAC,EAAElC,QAAQ,KAAKA,QAAQ,GAAG,CAAC,CAAC,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}