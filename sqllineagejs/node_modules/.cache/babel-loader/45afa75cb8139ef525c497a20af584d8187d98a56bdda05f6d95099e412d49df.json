{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport './bracketMatching.css';\nimport * as nls from '../../../nls.js';\nimport { RunOnceScheduler } from '../../../base/common/async.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { EditorAction, registerEditorAction, registerEditorContribution } from '../../browser/editorExtensions.js';\nimport { Position } from '../../common/core/position.js';\nimport { Range } from '../../common/core/range.js';\nimport { Selection } from '../../common/core/selection.js';\nimport { EditorContextKeys } from '../../common/editorContextKeys.js';\nimport { OverviewRulerLane } from '../../common/model.js';\nimport { ModelDecorationOptions } from '../../common/model/textModel.js';\nimport { editorBracketMatchBackground, editorBracketMatchBorder } from '../../common/view/editorColorRegistry.js';\nimport { registerColor } from '../../../platform/theme/common/colorRegistry.js';\nimport { registerThemingParticipant, themeColorFromId } from '../../../platform/theme/common/themeService.js';\nimport { MenuRegistry, MenuId } from '../../../platform/actions/common/actions.js';\nconst overviewRulerBracketMatchForeground = registerColor('editorOverviewRuler.bracketMatchForeground', {\n  dark: '#A0A0A0',\n  light: '#A0A0A0',\n  hc: '#A0A0A0'\n}, nls.localize('overviewRulerBracketMatchForeground', 'Overview ruler marker color for matching brackets.'));\nclass JumpToBracketAction extends EditorAction {\n  constructor() {\n    super({\n      id: 'editor.action.jumpToBracket',\n      label: nls.localize('smartSelect.jumpBracket', \"Go to Bracket\"),\n      alias: 'Go to Bracket',\n      precondition: undefined,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: 2048 /* CtrlCmd */ | 1024 /* Shift */ | 88 /* US_BACKSLASH */,\n        weight: 100 /* EditorContrib */\n      }\n    });\n  }\n\n  run(accessor, editor) {\n    let controller = BracketMatchingController.get(editor);\n    if (!controller) {\n      return;\n    }\n    controller.jumpToBracket();\n  }\n}\nclass SelectToBracketAction extends EditorAction {\n  constructor() {\n    super({\n      id: 'editor.action.selectToBracket',\n      label: nls.localize('smartSelect.selectToBracket', \"Select to Bracket\"),\n      alias: 'Select to Bracket',\n      precondition: undefined,\n      description: {\n        description: \"Select to Bracket\",\n        args: [{\n          name: 'args',\n          schema: {\n            type: 'object',\n            properties: {\n              'selectBrackets': {\n                type: 'boolean',\n                default: true\n              }\n            }\n          }\n        }]\n      }\n    });\n  }\n  run(accessor, editor, args) {\n    const controller = BracketMatchingController.get(editor);\n    if (!controller) {\n      return;\n    }\n    let selectBrackets = true;\n    if (args && args.selectBrackets === false) {\n      selectBrackets = false;\n    }\n    controller.selectToBracket(selectBrackets);\n  }\n}\nclass BracketsData {\n  constructor(position, brackets, options) {\n    this.position = position;\n    this.brackets = brackets;\n    this.options = options;\n  }\n}\nexport class BracketMatchingController extends Disposable {\n  constructor(editor) {\n    super();\n    this._editor = editor;\n    this._lastBracketsData = [];\n    this._lastVersionId = 0;\n    this._decorations = [];\n    this._updateBracketsSoon = this._register(new RunOnceScheduler(() => this._updateBrackets(), 50));\n    this._matchBrackets = this._editor.getOption(58 /* matchBrackets */);\n    this._updateBracketsSoon.schedule();\n    this._register(editor.onDidChangeCursorPosition(e => {\n      if (this._matchBrackets === 'never') {\n        // Early exit if nothing needs to be done!\n        // Leave some form of early exit check here if you wish to continue being a cursor position change listener ;)\n        return;\n      }\n      this._updateBracketsSoon.schedule();\n    }));\n    this._register(editor.onDidChangeModelContent(e => {\n      this._updateBracketsSoon.schedule();\n    }));\n    this._register(editor.onDidChangeModel(e => {\n      this._lastBracketsData = [];\n      this._decorations = [];\n      this._updateBracketsSoon.schedule();\n    }));\n    this._register(editor.onDidChangeModelLanguageConfiguration(e => {\n      this._lastBracketsData = [];\n      this._updateBracketsSoon.schedule();\n    }));\n    this._register(editor.onDidChangeConfiguration(e => {\n      if (e.hasChanged(58 /* matchBrackets */)) {\n        this._matchBrackets = this._editor.getOption(58 /* matchBrackets */);\n        this._decorations = this._editor.deltaDecorations(this._decorations, []);\n        this._lastBracketsData = [];\n        this._lastVersionId = 0;\n        this._updateBracketsSoon.schedule();\n      }\n    }));\n  }\n  static get(editor) {\n    return editor.getContribution(BracketMatchingController.ID);\n  }\n  jumpToBracket() {\n    if (!this._editor.hasModel()) {\n      return;\n    }\n    const model = this._editor.getModel();\n    const newSelections = this._editor.getSelections().map(selection => {\n      const position = selection.getStartPosition();\n      // find matching brackets if position is on a bracket\n      const brackets = model.matchBracket(position);\n      let newCursorPosition = null;\n      if (brackets) {\n        if (brackets[0].containsPosition(position)) {\n          newCursorPosition = brackets[1].getStartPosition();\n        } else if (brackets[1].containsPosition(position)) {\n          newCursorPosition = brackets[0].getStartPosition();\n        }\n      } else {\n        // find the enclosing brackets if the position isn't on a matching bracket\n        const enclosingBrackets = model.findEnclosingBrackets(position);\n        if (enclosingBrackets) {\n          newCursorPosition = enclosingBrackets[0].getStartPosition();\n        } else {\n          // no enclosing brackets, try the very first next bracket\n          const nextBracket = model.findNextBracket(position);\n          if (nextBracket && nextBracket.range) {\n            newCursorPosition = nextBracket.range.getStartPosition();\n          }\n        }\n      }\n      if (newCursorPosition) {\n        return new Selection(newCursorPosition.lineNumber, newCursorPosition.column, newCursorPosition.lineNumber, newCursorPosition.column);\n      }\n      return new Selection(position.lineNumber, position.column, position.lineNumber, position.column);\n    });\n    this._editor.setSelections(newSelections);\n    this._editor.revealRange(newSelections[0]);\n  }\n  selectToBracket(selectBrackets) {\n    if (!this._editor.hasModel()) {\n      return;\n    }\n    const model = this._editor.getModel();\n    const newSelections = [];\n    this._editor.getSelections().forEach(selection => {\n      const position = selection.getStartPosition();\n      let brackets = model.matchBracket(position);\n      if (!brackets) {\n        brackets = model.findEnclosingBrackets(position);\n        if (!brackets) {\n          const nextBracket = model.findNextBracket(position);\n          if (nextBracket && nextBracket.range) {\n            brackets = model.matchBracket(nextBracket.range.getStartPosition());\n          }\n        }\n      }\n      let selectFrom = null;\n      let selectTo = null;\n      if (brackets) {\n        brackets.sort(Range.compareRangesUsingStarts);\n        const [open, close] = brackets;\n        selectFrom = selectBrackets ? open.getStartPosition() : open.getEndPosition();\n        selectTo = selectBrackets ? close.getEndPosition() : close.getStartPosition();\n      }\n      if (selectFrom && selectTo) {\n        newSelections.push(new Selection(selectFrom.lineNumber, selectFrom.column, selectTo.lineNumber, selectTo.column));\n      }\n    });\n    if (newSelections.length > 0) {\n      this._editor.setSelections(newSelections);\n      this._editor.revealRange(newSelections[0]);\n    }\n  }\n  _updateBrackets() {\n    if (this._matchBrackets === 'never') {\n      return;\n    }\n    this._recomputeBrackets();\n    let newDecorations = [],\n      newDecorationsLen = 0;\n    for (const bracketData of this._lastBracketsData) {\n      let brackets = bracketData.brackets;\n      if (brackets) {\n        newDecorations[newDecorationsLen++] = {\n          range: brackets[0],\n          options: bracketData.options\n        };\n        newDecorations[newDecorationsLen++] = {\n          range: brackets[1],\n          options: bracketData.options\n        };\n      }\n    }\n    this._decorations = this._editor.deltaDecorations(this._decorations, newDecorations);\n  }\n  _recomputeBrackets() {\n    if (!this._editor.hasModel()) {\n      // no model => no brackets!\n      this._lastBracketsData = [];\n      this._lastVersionId = 0;\n      return;\n    }\n    const selections = this._editor.getSelections();\n    if (selections.length > 100) {\n      // no bracket matching for high numbers of selections\n      this._lastBracketsData = [];\n      this._lastVersionId = 0;\n      return;\n    }\n    const model = this._editor.getModel();\n    const versionId = model.getVersionId();\n    let previousData = [];\n    if (this._lastVersionId === versionId) {\n      // use the previous data only if the model is at the same version id\n      previousData = this._lastBracketsData;\n    }\n    let positions = [],\n      positionsLen = 0;\n    for (let i = 0, len = selections.length; i < len; i++) {\n      let selection = selections[i];\n      if (selection.isEmpty()) {\n        // will bracket match a cursor only if the selection is collapsed\n        positions[positionsLen++] = selection.getStartPosition();\n      }\n    }\n    // sort positions for `previousData` cache hits\n    if (positions.length > 1) {\n      positions.sort(Position.compare);\n    }\n    let newData = [],\n      newDataLen = 0;\n    let previousIndex = 0,\n      previousLen = previousData.length;\n    for (let i = 0, len = positions.length; i < len; i++) {\n      let position = positions[i];\n      while (previousIndex < previousLen && previousData[previousIndex].position.isBefore(position)) {\n        previousIndex++;\n      }\n      if (previousIndex < previousLen && previousData[previousIndex].position.equals(position)) {\n        newData[newDataLen++] = previousData[previousIndex];\n      } else {\n        let brackets = model.matchBracket(position);\n        let options = BracketMatchingController._DECORATION_OPTIONS_WITH_OVERVIEW_RULER;\n        if (!brackets && this._matchBrackets === 'always') {\n          brackets = model.findEnclosingBrackets(position, 20 /* give at most 20ms to compute */);\n          options = BracketMatchingController._DECORATION_OPTIONS_WITHOUT_OVERVIEW_RULER;\n        }\n        newData[newDataLen++] = new BracketsData(position, brackets, options);\n      }\n    }\n    this._lastBracketsData = newData;\n    this._lastVersionId = versionId;\n  }\n}\nBracketMatchingController.ID = 'editor.contrib.bracketMatchingController';\nBracketMatchingController._DECORATION_OPTIONS_WITH_OVERVIEW_RULER = ModelDecorationOptions.register({\n  stickiness: 1 /* NeverGrowsWhenTypingAtEdges */,\n  className: 'bracket-match',\n  overviewRuler: {\n    color: themeColorFromId(overviewRulerBracketMatchForeground),\n    position: OverviewRulerLane.Center\n  }\n});\nBracketMatchingController._DECORATION_OPTIONS_WITHOUT_OVERVIEW_RULER = ModelDecorationOptions.register({\n  stickiness: 1 /* NeverGrowsWhenTypingAtEdges */,\n  className: 'bracket-match'\n});\nregisterEditorContribution(BracketMatchingController.ID, BracketMatchingController);\nregisterEditorAction(SelectToBracketAction);\nregisterEditorAction(JumpToBracketAction);\nregisterThemingParticipant((theme, collector) => {\n  const bracketMatchBackground = theme.getColor(editorBracketMatchBackground);\n  if (bracketMatchBackground) {\n    collector.addRule(\".monaco-editor .bracket-match { background-color: \".concat(bracketMatchBackground, \"; }\"));\n  }\n  const bracketMatchBorder = theme.getColor(editorBracketMatchBorder);\n  if (bracketMatchBorder) {\n    collector.addRule(\".monaco-editor .bracket-match { border: 1px solid \".concat(bracketMatchBorder, \"; }\"));\n  }\n});\n// Go to menu\nMenuRegistry.appendMenuItem(MenuId.MenubarGoMenu, {\n  group: '5_infile_nav',\n  command: {\n    id: 'editor.action.jumpToBracket',\n    title: nls.localize({\n      key: 'miGoToBracket',\n      comment: ['&& denotes a mnemonic']\n    }, \"Go to &&Bracket\")\n  },\n  order: 2\n});","map":{"version":3,"names":["nls","RunOnceScheduler","Disposable","EditorAction","registerEditorAction","registerEditorContribution","Position","Range","Selection","EditorContextKeys","OverviewRulerLane","ModelDecorationOptions","editorBracketMatchBackground","editorBracketMatchBorder","registerColor","registerThemingParticipant","themeColorFromId","MenuRegistry","MenuId","overviewRulerBracketMatchForeground","dark","light","hc","localize","JumpToBracketAction","constructor","id","label","alias","precondition","undefined","kbOpts","kbExpr","editorTextFocus","primary","weight","run","accessor","editor","controller","BracketMatchingController","get","jumpToBracket","SelectToBracketAction","description","args","name","schema","type","properties","default","selectBrackets","selectToBracket","BracketsData","position","brackets","options","_editor","_lastBracketsData","_lastVersionId","_decorations","_updateBracketsSoon","_register","_updateBrackets","_matchBrackets","getOption","schedule","onDidChangeCursorPosition","e","onDidChangeModelContent","onDidChangeModel","onDidChangeModelLanguageConfiguration","onDidChangeConfiguration","hasChanged","deltaDecorations","getContribution","ID","hasModel","model","getModel","newSelections","getSelections","map","selection","getStartPosition","matchBracket","newCursorPosition","containsPosition","enclosingBrackets","findEnclosingBrackets","nextBracket","findNextBracket","range","lineNumber","column","setSelections","revealRange","forEach","selectFrom","selectTo","sort","compareRangesUsingStarts","open","close","getEndPosition","push","length","_recomputeBrackets","newDecorations","newDecorationsLen","bracketData","selections","versionId","getVersionId","previousData","positions","positionsLen","i","len","isEmpty","compare","newData","newDataLen","previousIndex","previousLen","isBefore","equals","_DECORATION_OPTIONS_WITH_OVERVIEW_RULER","_DECORATION_OPTIONS_WITHOUT_OVERVIEW_RULER","register","stickiness","className","overviewRuler","color","Center","theme","collector","bracketMatchBackground","getColor","addRule","concat","bracketMatchBorder","appendMenuItem","MenubarGoMenu","group","command","title","key","comment","order"],"sources":["C:/Users/Administrator/Desktop/sqllineage-master/sqllineagejs/node_modules/monaco-editor/esm/vs/editor/contrib/bracketMatching/bracketMatching.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport './bracketMatching.css';\r\nimport * as nls from '../../../nls.js';\r\nimport { RunOnceScheduler } from '../../../base/common/async.js';\r\nimport { Disposable } from '../../../base/common/lifecycle.js';\r\nimport { EditorAction, registerEditorAction, registerEditorContribution } from '../../browser/editorExtensions.js';\r\nimport { Position } from '../../common/core/position.js';\r\nimport { Range } from '../../common/core/range.js';\r\nimport { Selection } from '../../common/core/selection.js';\r\nimport { EditorContextKeys } from '../../common/editorContextKeys.js';\r\nimport { OverviewRulerLane } from '../../common/model.js';\r\nimport { ModelDecorationOptions } from '../../common/model/textModel.js';\r\nimport { editorBracketMatchBackground, editorBracketMatchBorder } from '../../common/view/editorColorRegistry.js';\r\nimport { registerColor } from '../../../platform/theme/common/colorRegistry.js';\r\nimport { registerThemingParticipant, themeColorFromId } from '../../../platform/theme/common/themeService.js';\r\nimport { MenuRegistry, MenuId } from '../../../platform/actions/common/actions.js';\r\nconst overviewRulerBracketMatchForeground = registerColor('editorOverviewRuler.bracketMatchForeground', { dark: '#A0A0A0', light: '#A0A0A0', hc: '#A0A0A0' }, nls.localize('overviewRulerBracketMatchForeground', 'Overview ruler marker color for matching brackets.'));\r\nclass JumpToBracketAction extends EditorAction {\r\n    constructor() {\r\n        super({\r\n            id: 'editor.action.jumpToBracket',\r\n            label: nls.localize('smartSelect.jumpBracket', \"Go to Bracket\"),\r\n            alias: 'Go to Bracket',\r\n            precondition: undefined,\r\n            kbOpts: {\r\n                kbExpr: EditorContextKeys.editorTextFocus,\r\n                primary: 2048 /* CtrlCmd */ | 1024 /* Shift */ | 88 /* US_BACKSLASH */,\r\n                weight: 100 /* EditorContrib */\r\n            }\r\n        });\r\n    }\r\n    run(accessor, editor) {\r\n        let controller = BracketMatchingController.get(editor);\r\n        if (!controller) {\r\n            return;\r\n        }\r\n        controller.jumpToBracket();\r\n    }\r\n}\r\nclass SelectToBracketAction extends EditorAction {\r\n    constructor() {\r\n        super({\r\n            id: 'editor.action.selectToBracket',\r\n            label: nls.localize('smartSelect.selectToBracket', \"Select to Bracket\"),\r\n            alias: 'Select to Bracket',\r\n            precondition: undefined,\r\n            description: {\r\n                description: `Select to Bracket`,\r\n                args: [{\r\n                        name: 'args',\r\n                        schema: {\r\n                            type: 'object',\r\n                            properties: {\r\n                                'selectBrackets': {\r\n                                    type: 'boolean',\r\n                                    default: true\r\n                                }\r\n                            },\r\n                        }\r\n                    }]\r\n            }\r\n        });\r\n    }\r\n    run(accessor, editor, args) {\r\n        const controller = BracketMatchingController.get(editor);\r\n        if (!controller) {\r\n            return;\r\n        }\r\n        let selectBrackets = true;\r\n        if (args && args.selectBrackets === false) {\r\n            selectBrackets = false;\r\n        }\r\n        controller.selectToBracket(selectBrackets);\r\n    }\r\n}\r\nclass BracketsData {\r\n    constructor(position, brackets, options) {\r\n        this.position = position;\r\n        this.brackets = brackets;\r\n        this.options = options;\r\n    }\r\n}\r\nexport class BracketMatchingController extends Disposable {\r\n    constructor(editor) {\r\n        super();\r\n        this._editor = editor;\r\n        this._lastBracketsData = [];\r\n        this._lastVersionId = 0;\r\n        this._decorations = [];\r\n        this._updateBracketsSoon = this._register(new RunOnceScheduler(() => this._updateBrackets(), 50));\r\n        this._matchBrackets = this._editor.getOption(58 /* matchBrackets */);\r\n        this._updateBracketsSoon.schedule();\r\n        this._register(editor.onDidChangeCursorPosition((e) => {\r\n            if (this._matchBrackets === 'never') {\r\n                // Early exit if nothing needs to be done!\r\n                // Leave some form of early exit check here if you wish to continue being a cursor position change listener ;)\r\n                return;\r\n            }\r\n            this._updateBracketsSoon.schedule();\r\n        }));\r\n        this._register(editor.onDidChangeModelContent((e) => {\r\n            this._updateBracketsSoon.schedule();\r\n        }));\r\n        this._register(editor.onDidChangeModel((e) => {\r\n            this._lastBracketsData = [];\r\n            this._decorations = [];\r\n            this._updateBracketsSoon.schedule();\r\n        }));\r\n        this._register(editor.onDidChangeModelLanguageConfiguration((e) => {\r\n            this._lastBracketsData = [];\r\n            this._updateBracketsSoon.schedule();\r\n        }));\r\n        this._register(editor.onDidChangeConfiguration((e) => {\r\n            if (e.hasChanged(58 /* matchBrackets */)) {\r\n                this._matchBrackets = this._editor.getOption(58 /* matchBrackets */);\r\n                this._decorations = this._editor.deltaDecorations(this._decorations, []);\r\n                this._lastBracketsData = [];\r\n                this._lastVersionId = 0;\r\n                this._updateBracketsSoon.schedule();\r\n            }\r\n        }));\r\n    }\r\n    static get(editor) {\r\n        return editor.getContribution(BracketMatchingController.ID);\r\n    }\r\n    jumpToBracket() {\r\n        if (!this._editor.hasModel()) {\r\n            return;\r\n        }\r\n        const model = this._editor.getModel();\r\n        const newSelections = this._editor.getSelections().map(selection => {\r\n            const position = selection.getStartPosition();\r\n            // find matching brackets if position is on a bracket\r\n            const brackets = model.matchBracket(position);\r\n            let newCursorPosition = null;\r\n            if (brackets) {\r\n                if (brackets[0].containsPosition(position)) {\r\n                    newCursorPosition = brackets[1].getStartPosition();\r\n                }\r\n                else if (brackets[1].containsPosition(position)) {\r\n                    newCursorPosition = brackets[0].getStartPosition();\r\n                }\r\n            }\r\n            else {\r\n                // find the enclosing brackets if the position isn't on a matching bracket\r\n                const enclosingBrackets = model.findEnclosingBrackets(position);\r\n                if (enclosingBrackets) {\r\n                    newCursorPosition = enclosingBrackets[0].getStartPosition();\r\n                }\r\n                else {\r\n                    // no enclosing brackets, try the very first next bracket\r\n                    const nextBracket = model.findNextBracket(position);\r\n                    if (nextBracket && nextBracket.range) {\r\n                        newCursorPosition = nextBracket.range.getStartPosition();\r\n                    }\r\n                }\r\n            }\r\n            if (newCursorPosition) {\r\n                return new Selection(newCursorPosition.lineNumber, newCursorPosition.column, newCursorPosition.lineNumber, newCursorPosition.column);\r\n            }\r\n            return new Selection(position.lineNumber, position.column, position.lineNumber, position.column);\r\n        });\r\n        this._editor.setSelections(newSelections);\r\n        this._editor.revealRange(newSelections[0]);\r\n    }\r\n    selectToBracket(selectBrackets) {\r\n        if (!this._editor.hasModel()) {\r\n            return;\r\n        }\r\n        const model = this._editor.getModel();\r\n        const newSelections = [];\r\n        this._editor.getSelections().forEach(selection => {\r\n            const position = selection.getStartPosition();\r\n            let brackets = model.matchBracket(position);\r\n            if (!brackets) {\r\n                brackets = model.findEnclosingBrackets(position);\r\n                if (!brackets) {\r\n                    const nextBracket = model.findNextBracket(position);\r\n                    if (nextBracket && nextBracket.range) {\r\n                        brackets = model.matchBracket(nextBracket.range.getStartPosition());\r\n                    }\r\n                }\r\n            }\r\n            let selectFrom = null;\r\n            let selectTo = null;\r\n            if (brackets) {\r\n                brackets.sort(Range.compareRangesUsingStarts);\r\n                const [open, close] = brackets;\r\n                selectFrom = selectBrackets ? open.getStartPosition() : open.getEndPosition();\r\n                selectTo = selectBrackets ? close.getEndPosition() : close.getStartPosition();\r\n            }\r\n            if (selectFrom && selectTo) {\r\n                newSelections.push(new Selection(selectFrom.lineNumber, selectFrom.column, selectTo.lineNumber, selectTo.column));\r\n            }\r\n        });\r\n        if (newSelections.length > 0) {\r\n            this._editor.setSelections(newSelections);\r\n            this._editor.revealRange(newSelections[0]);\r\n        }\r\n    }\r\n    _updateBrackets() {\r\n        if (this._matchBrackets === 'never') {\r\n            return;\r\n        }\r\n        this._recomputeBrackets();\r\n        let newDecorations = [], newDecorationsLen = 0;\r\n        for (const bracketData of this._lastBracketsData) {\r\n            let brackets = bracketData.brackets;\r\n            if (brackets) {\r\n                newDecorations[newDecorationsLen++] = { range: brackets[0], options: bracketData.options };\r\n                newDecorations[newDecorationsLen++] = { range: brackets[1], options: bracketData.options };\r\n            }\r\n        }\r\n        this._decorations = this._editor.deltaDecorations(this._decorations, newDecorations);\r\n    }\r\n    _recomputeBrackets() {\r\n        if (!this._editor.hasModel()) {\r\n            // no model => no brackets!\r\n            this._lastBracketsData = [];\r\n            this._lastVersionId = 0;\r\n            return;\r\n        }\r\n        const selections = this._editor.getSelections();\r\n        if (selections.length > 100) {\r\n            // no bracket matching for high numbers of selections\r\n            this._lastBracketsData = [];\r\n            this._lastVersionId = 0;\r\n            return;\r\n        }\r\n        const model = this._editor.getModel();\r\n        const versionId = model.getVersionId();\r\n        let previousData = [];\r\n        if (this._lastVersionId === versionId) {\r\n            // use the previous data only if the model is at the same version id\r\n            previousData = this._lastBracketsData;\r\n        }\r\n        let positions = [], positionsLen = 0;\r\n        for (let i = 0, len = selections.length; i < len; i++) {\r\n            let selection = selections[i];\r\n            if (selection.isEmpty()) {\r\n                // will bracket match a cursor only if the selection is collapsed\r\n                positions[positionsLen++] = selection.getStartPosition();\r\n            }\r\n        }\r\n        // sort positions for `previousData` cache hits\r\n        if (positions.length > 1) {\r\n            positions.sort(Position.compare);\r\n        }\r\n        let newData = [], newDataLen = 0;\r\n        let previousIndex = 0, previousLen = previousData.length;\r\n        for (let i = 0, len = positions.length; i < len; i++) {\r\n            let position = positions[i];\r\n            while (previousIndex < previousLen && previousData[previousIndex].position.isBefore(position)) {\r\n                previousIndex++;\r\n            }\r\n            if (previousIndex < previousLen && previousData[previousIndex].position.equals(position)) {\r\n                newData[newDataLen++] = previousData[previousIndex];\r\n            }\r\n            else {\r\n                let brackets = model.matchBracket(position);\r\n                let options = BracketMatchingController._DECORATION_OPTIONS_WITH_OVERVIEW_RULER;\r\n                if (!brackets && this._matchBrackets === 'always') {\r\n                    brackets = model.findEnclosingBrackets(position, 20 /* give at most 20ms to compute */);\r\n                    options = BracketMatchingController._DECORATION_OPTIONS_WITHOUT_OVERVIEW_RULER;\r\n                }\r\n                newData[newDataLen++] = new BracketsData(position, brackets, options);\r\n            }\r\n        }\r\n        this._lastBracketsData = newData;\r\n        this._lastVersionId = versionId;\r\n    }\r\n}\r\nBracketMatchingController.ID = 'editor.contrib.bracketMatchingController';\r\nBracketMatchingController._DECORATION_OPTIONS_WITH_OVERVIEW_RULER = ModelDecorationOptions.register({\r\n    stickiness: 1 /* NeverGrowsWhenTypingAtEdges */,\r\n    className: 'bracket-match',\r\n    overviewRuler: {\r\n        color: themeColorFromId(overviewRulerBracketMatchForeground),\r\n        position: OverviewRulerLane.Center\r\n    }\r\n});\r\nBracketMatchingController._DECORATION_OPTIONS_WITHOUT_OVERVIEW_RULER = ModelDecorationOptions.register({\r\n    stickiness: 1 /* NeverGrowsWhenTypingAtEdges */,\r\n    className: 'bracket-match'\r\n});\r\nregisterEditorContribution(BracketMatchingController.ID, BracketMatchingController);\r\nregisterEditorAction(SelectToBracketAction);\r\nregisterEditorAction(JumpToBracketAction);\r\nregisterThemingParticipant((theme, collector) => {\r\n    const bracketMatchBackground = theme.getColor(editorBracketMatchBackground);\r\n    if (bracketMatchBackground) {\r\n        collector.addRule(`.monaco-editor .bracket-match { background-color: ${bracketMatchBackground}; }`);\r\n    }\r\n    const bracketMatchBorder = theme.getColor(editorBracketMatchBorder);\r\n    if (bracketMatchBorder) {\r\n        collector.addRule(`.monaco-editor .bracket-match { border: 1px solid ${bracketMatchBorder}; }`);\r\n    }\r\n});\r\n// Go to menu\r\nMenuRegistry.appendMenuItem(MenuId.MenubarGoMenu, {\r\n    group: '5_infile_nav',\r\n    command: {\r\n        id: 'editor.action.jumpToBracket',\r\n        title: nls.localize({ key: 'miGoToBracket', comment: ['&& denotes a mnemonic'] }, \"Go to &&Bracket\")\r\n    },\r\n    order: 2\r\n});\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}