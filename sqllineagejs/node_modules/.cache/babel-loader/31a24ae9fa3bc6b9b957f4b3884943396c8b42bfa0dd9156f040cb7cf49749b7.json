{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport './indentGuides.css';\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\nimport { Position } from '../../../common/core/position.js';\nimport { editorActiveIndentGuides, editorIndentGuides } from '../../../common/view/editorColorRegistry.js';\nimport { registerThemingParticipant } from '../../../../platform/theme/common/themeService.js';\nexport class IndentGuidesOverlay extends DynamicViewOverlay {\n  constructor(context) {\n    super();\n    this._context = context;\n    this._primaryLineNumber = 0;\n    const options = this._context.configuration.options;\n    const wrappingInfo = options.get(125 /* wrappingInfo */);\n    const fontInfo = options.get(38 /* fontInfo */);\n    this._lineHeight = options.get(53 /* lineHeight */);\n    this._spaceWidth = fontInfo.spaceWidth;\n    this._enabled = options.get(78 /* renderIndentGuides */);\n    this._activeIndentEnabled = options.get(47 /* highlightActiveIndentGuide */);\n    this._maxIndentLeft = wrappingInfo.wrappingColumn === -1 ? -1 : wrappingInfo.wrappingColumn * fontInfo.typicalHalfwidthCharacterWidth;\n    this._renderResult = null;\n    this._context.addEventHandler(this);\n  }\n  dispose() {\n    this._context.removeEventHandler(this);\n    this._renderResult = null;\n    super.dispose();\n  }\n  // --- begin event handlers\n  onConfigurationChanged(e) {\n    const options = this._context.configuration.options;\n    const wrappingInfo = options.get(125 /* wrappingInfo */);\n    const fontInfo = options.get(38 /* fontInfo */);\n    this._lineHeight = options.get(53 /* lineHeight */);\n    this._spaceWidth = fontInfo.spaceWidth;\n    this._enabled = options.get(78 /* renderIndentGuides */);\n    this._activeIndentEnabled = options.get(47 /* highlightActiveIndentGuide */);\n    this._maxIndentLeft = wrappingInfo.wrappingColumn === -1 ? -1 : wrappingInfo.wrappingColumn * fontInfo.typicalHalfwidthCharacterWidth;\n    return true;\n  }\n  onCursorStateChanged(e) {\n    const selection = e.selections[0];\n    const newPrimaryLineNumber = selection.isEmpty() ? selection.positionLineNumber : 0;\n    if (this._primaryLineNumber !== newPrimaryLineNumber) {\n      this._primaryLineNumber = newPrimaryLineNumber;\n      return true;\n    }\n    return false;\n  }\n  onDecorationsChanged(e) {\n    // true for inline decorations\n    return true;\n  }\n  onFlushed(e) {\n    return true;\n  }\n  onLinesChanged(e) {\n    return true;\n  }\n  onLinesDeleted(e) {\n    return true;\n  }\n  onLinesInserted(e) {\n    return true;\n  }\n  onScrollChanged(e) {\n    return e.scrollTopChanged; // || e.scrollWidthChanged;\n  }\n\n  onZonesChanged(e) {\n    return true;\n  }\n  onLanguageConfigurationChanged(e) {\n    return true;\n  }\n  // --- end event handlers\n  prepareRender(ctx) {\n    if (!this._enabled) {\n      this._renderResult = null;\n      return;\n    }\n    const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n    const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n    const {\n      indentSize\n    } = this._context.model.getTextModelOptions();\n    const indentWidth = indentSize * this._spaceWidth;\n    const scrollWidth = ctx.scrollWidth;\n    const lineHeight = this._lineHeight;\n    const indents = this._context.model.getLinesIndentGuides(visibleStartLineNumber, visibleEndLineNumber);\n    let activeIndentStartLineNumber = 0;\n    let activeIndentEndLineNumber = 0;\n    let activeIndentLevel = 0;\n    if (this._activeIndentEnabled && this._primaryLineNumber) {\n      const activeIndentInfo = this._context.model.getActiveIndentGuide(this._primaryLineNumber, visibleStartLineNumber, visibleEndLineNumber);\n      activeIndentStartLineNumber = activeIndentInfo.startLineNumber;\n      activeIndentEndLineNumber = activeIndentInfo.endLineNumber;\n      activeIndentLevel = activeIndentInfo.indent;\n    }\n    const output = [];\n    for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n      const containsActiveIndentGuide = activeIndentStartLineNumber <= lineNumber && lineNumber <= activeIndentEndLineNumber;\n      const lineIndex = lineNumber - visibleStartLineNumber;\n      const indent = indents[lineIndex];\n      let result = '';\n      if (indent >= 1) {\n        const leftMostVisiblePosition = ctx.visibleRangeForPosition(new Position(lineNumber, 1));\n        let left = leftMostVisiblePosition ? leftMostVisiblePosition.left : 0;\n        for (let i = 1; i <= indent; i++) {\n          const className = containsActiveIndentGuide && i === activeIndentLevel ? 'cigra' : 'cigr';\n          result += \"<div class=\\\"\".concat(className, \"\\\" style=\\\"left:\").concat(left, \"px;height:\").concat(lineHeight, \"px;width:\").concat(indentWidth, \"px\\\"></div>\");\n          left += indentWidth;\n          if (left > scrollWidth || this._maxIndentLeft > 0 && left > this._maxIndentLeft) {\n            break;\n          }\n        }\n      }\n      output[lineIndex] = result;\n    }\n    this._renderResult = output;\n  }\n  render(startLineNumber, lineNumber) {\n    if (!this._renderResult) {\n      return '';\n    }\n    const lineIndex = lineNumber - startLineNumber;\n    if (lineIndex < 0 || lineIndex >= this._renderResult.length) {\n      return '';\n    }\n    return this._renderResult[lineIndex];\n  }\n}\nregisterThemingParticipant((theme, collector) => {\n  const editorIndentGuidesColor = theme.getColor(editorIndentGuides);\n  if (editorIndentGuidesColor) {\n    collector.addRule(\".monaco-editor .lines-content .cigr { box-shadow: 1px 0 0 0 \".concat(editorIndentGuidesColor, \" inset; }\"));\n  }\n  const editorActiveIndentGuidesColor = theme.getColor(editorActiveIndentGuides) || editorIndentGuidesColor;\n  if (editorActiveIndentGuidesColor) {\n    collector.addRule(\".monaco-editor .lines-content .cigra { box-shadow: 1px 0 0 0 \".concat(editorActiveIndentGuidesColor, \" inset; }\"));\n  }\n});","map":{"version":3,"names":["DynamicViewOverlay","Position","editorActiveIndentGuides","editorIndentGuides","registerThemingParticipant","IndentGuidesOverlay","constructor","context","_context","_primaryLineNumber","options","configuration","wrappingInfo","get","fontInfo","_lineHeight","_spaceWidth","spaceWidth","_enabled","_activeIndentEnabled","_maxIndentLeft","wrappingColumn","typicalHalfwidthCharacterWidth","_renderResult","addEventHandler","dispose","removeEventHandler","onConfigurationChanged","e","onCursorStateChanged","selection","selections","newPrimaryLineNumber","isEmpty","positionLineNumber","onDecorationsChanged","onFlushed","onLinesChanged","onLinesDeleted","onLinesInserted","onScrollChanged","scrollTopChanged","onZonesChanged","onLanguageConfigurationChanged","prepareRender","ctx","visibleStartLineNumber","visibleRange","startLineNumber","visibleEndLineNumber","endLineNumber","indentSize","model","getTextModelOptions","indentWidth","scrollWidth","lineHeight","indents","getLinesIndentGuides","activeIndentStartLineNumber","activeIndentEndLineNumber","activeIndentLevel","activeIndentInfo","getActiveIndentGuide","indent","output","lineNumber","containsActiveIndentGuide","lineIndex","result","leftMostVisiblePosition","visibleRangeForPosition","left","i","className","concat","render","length","theme","collector","editorIndentGuidesColor","getColor","addRule","editorActiveIndentGuidesColor"],"sources":["C:/Users/Administrator/Desktop/sqllineage-master/sqllineagejs/node_modules/monaco-editor/esm/vs/editor/browser/viewParts/indentGuides/indentGuides.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport './indentGuides.css';\r\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\r\nimport { Position } from '../../../common/core/position.js';\r\nimport { editorActiveIndentGuides, editorIndentGuides } from '../../../common/view/editorColorRegistry.js';\r\nimport { registerThemingParticipant } from '../../../../platform/theme/common/themeService.js';\r\nexport class IndentGuidesOverlay extends DynamicViewOverlay {\r\n    constructor(context) {\r\n        super();\r\n        this._context = context;\r\n        this._primaryLineNumber = 0;\r\n        const options = this._context.configuration.options;\r\n        const wrappingInfo = options.get(125 /* wrappingInfo */);\r\n        const fontInfo = options.get(38 /* fontInfo */);\r\n        this._lineHeight = options.get(53 /* lineHeight */);\r\n        this._spaceWidth = fontInfo.spaceWidth;\r\n        this._enabled = options.get(78 /* renderIndentGuides */);\r\n        this._activeIndentEnabled = options.get(47 /* highlightActiveIndentGuide */);\r\n        this._maxIndentLeft = wrappingInfo.wrappingColumn === -1 ? -1 : (wrappingInfo.wrappingColumn * fontInfo.typicalHalfwidthCharacterWidth);\r\n        this._renderResult = null;\r\n        this._context.addEventHandler(this);\r\n    }\r\n    dispose() {\r\n        this._context.removeEventHandler(this);\r\n        this._renderResult = null;\r\n        super.dispose();\r\n    }\r\n    // --- begin event handlers\r\n    onConfigurationChanged(e) {\r\n        const options = this._context.configuration.options;\r\n        const wrappingInfo = options.get(125 /* wrappingInfo */);\r\n        const fontInfo = options.get(38 /* fontInfo */);\r\n        this._lineHeight = options.get(53 /* lineHeight */);\r\n        this._spaceWidth = fontInfo.spaceWidth;\r\n        this._enabled = options.get(78 /* renderIndentGuides */);\r\n        this._activeIndentEnabled = options.get(47 /* highlightActiveIndentGuide */);\r\n        this._maxIndentLeft = wrappingInfo.wrappingColumn === -1 ? -1 : (wrappingInfo.wrappingColumn * fontInfo.typicalHalfwidthCharacterWidth);\r\n        return true;\r\n    }\r\n    onCursorStateChanged(e) {\r\n        const selection = e.selections[0];\r\n        const newPrimaryLineNumber = selection.isEmpty() ? selection.positionLineNumber : 0;\r\n        if (this._primaryLineNumber !== newPrimaryLineNumber) {\r\n            this._primaryLineNumber = newPrimaryLineNumber;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    onDecorationsChanged(e) {\r\n        // true for inline decorations\r\n        return true;\r\n    }\r\n    onFlushed(e) {\r\n        return true;\r\n    }\r\n    onLinesChanged(e) {\r\n        return true;\r\n    }\r\n    onLinesDeleted(e) {\r\n        return true;\r\n    }\r\n    onLinesInserted(e) {\r\n        return true;\r\n    }\r\n    onScrollChanged(e) {\r\n        return e.scrollTopChanged; // || e.scrollWidthChanged;\r\n    }\r\n    onZonesChanged(e) {\r\n        return true;\r\n    }\r\n    onLanguageConfigurationChanged(e) {\r\n        return true;\r\n    }\r\n    // --- end event handlers\r\n    prepareRender(ctx) {\r\n        if (!this._enabled) {\r\n            this._renderResult = null;\r\n            return;\r\n        }\r\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\r\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\r\n        const { indentSize } = this._context.model.getTextModelOptions();\r\n        const indentWidth = indentSize * this._spaceWidth;\r\n        const scrollWidth = ctx.scrollWidth;\r\n        const lineHeight = this._lineHeight;\r\n        const indents = this._context.model.getLinesIndentGuides(visibleStartLineNumber, visibleEndLineNumber);\r\n        let activeIndentStartLineNumber = 0;\r\n        let activeIndentEndLineNumber = 0;\r\n        let activeIndentLevel = 0;\r\n        if (this._activeIndentEnabled && this._primaryLineNumber) {\r\n            const activeIndentInfo = this._context.model.getActiveIndentGuide(this._primaryLineNumber, visibleStartLineNumber, visibleEndLineNumber);\r\n            activeIndentStartLineNumber = activeIndentInfo.startLineNumber;\r\n            activeIndentEndLineNumber = activeIndentInfo.endLineNumber;\r\n            activeIndentLevel = activeIndentInfo.indent;\r\n        }\r\n        const output = [];\r\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\r\n            const containsActiveIndentGuide = (activeIndentStartLineNumber <= lineNumber && lineNumber <= activeIndentEndLineNumber);\r\n            const lineIndex = lineNumber - visibleStartLineNumber;\r\n            const indent = indents[lineIndex];\r\n            let result = '';\r\n            if (indent >= 1) {\r\n                const leftMostVisiblePosition = ctx.visibleRangeForPosition(new Position(lineNumber, 1));\r\n                let left = leftMostVisiblePosition ? leftMostVisiblePosition.left : 0;\r\n                for (let i = 1; i <= indent; i++) {\r\n                    const className = (containsActiveIndentGuide && i === activeIndentLevel ? 'cigra' : 'cigr');\r\n                    result += `<div class=\"${className}\" style=\"left:${left}px;height:${lineHeight}px;width:${indentWidth}px\"></div>`;\r\n                    left += indentWidth;\r\n                    if (left > scrollWidth || (this._maxIndentLeft > 0 && left > this._maxIndentLeft)) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            output[lineIndex] = result;\r\n        }\r\n        this._renderResult = output;\r\n    }\r\n    render(startLineNumber, lineNumber) {\r\n        if (!this._renderResult) {\r\n            return '';\r\n        }\r\n        const lineIndex = lineNumber - startLineNumber;\r\n        if (lineIndex < 0 || lineIndex >= this._renderResult.length) {\r\n            return '';\r\n        }\r\n        return this._renderResult[lineIndex];\r\n    }\r\n}\r\nregisterThemingParticipant((theme, collector) => {\r\n    const editorIndentGuidesColor = theme.getColor(editorIndentGuides);\r\n    if (editorIndentGuidesColor) {\r\n        collector.addRule(`.monaco-editor .lines-content .cigr { box-shadow: 1px 0 0 0 ${editorIndentGuidesColor} inset; }`);\r\n    }\r\n    const editorActiveIndentGuidesColor = theme.getColor(editorActiveIndentGuides) || editorIndentGuidesColor;\r\n    if (editorActiveIndentGuidesColor) {\r\n        collector.addRule(`.monaco-editor .lines-content .cigra { box-shadow: 1px 0 0 0 ${editorActiveIndentGuidesColor} inset; }`);\r\n    }\r\n});\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}