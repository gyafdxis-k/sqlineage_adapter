{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nvar _a;\nimport { globals } from '../common/platform.js';\nimport { logOnceWebWorkerWarning } from '../common/worker/simpleWorker.js';\nconst ttPolicy = (_a = window.trustedTypes) === null || _a === void 0 ? void 0 : _a.createPolicy('defaultWorkerFactory', {\n  createScriptURL: value => value\n});\nfunction getWorker(workerId, label) {\n  // Option for hosts to overwrite the worker script (used in the standalone editor)\n  if (globals.MonacoEnvironment) {\n    if (typeof globals.MonacoEnvironment.getWorker === 'function') {\n      return globals.MonacoEnvironment.getWorker(workerId, label);\n    }\n    if (typeof globals.MonacoEnvironment.getWorkerUrl === 'function') {\n      const wokerUrl = globals.MonacoEnvironment.getWorkerUrl(workerId, label);\n      return new Worker(ttPolicy ? ttPolicy.createScriptURL(wokerUrl) : wokerUrl, {\n        name: label\n      });\n    }\n  }\n  // ESM-comment-begin\n  // \tif (typeof require === 'function') {\n  // \t\t// check if the JS lives on a different origin\n  // \t\tconst workerMain = require.toUrl('./' + workerId); // explicitly using require.toUrl(), see https://github.com/microsoft/vscode/issues/107440#issuecomment-698982321\n  // \t\tconst workerUrl = getWorkerBootstrapUrl(workerMain, label);\n  // \t\treturn new Worker(ttPolicy ? ttPolicy.createScriptURL(workerUrl) as unknown as string : workerUrl, { name: label });\n  // \t}\n  // ESM-comment-end\n  throw new Error(\"You must define a function MonacoEnvironment.getWorkerUrl or MonacoEnvironment.getWorker\");\n}\n// ESM-comment-begin\n// export function getWorkerBootstrapUrl(scriptPath: string, label: string, forceDataUri: boolean = false): string {\n// \tif (forceDataUri || /^((http:)|(https:)|(file:))/.test(scriptPath)) {\n// \t\tconst currentUrl = String(window.location);\n// \t\tconst currentOrigin = currentUrl.substr(0, currentUrl.length - window.location.hash.length - window.location.search.length - window.location.pathname.length);\n// \t\tif (forceDataUri || scriptPath.substring(0, currentOrigin.length) !== currentOrigin) {\n// \t\t\t// this is the cross-origin case\n// \t\t\t// i.e. the webpage is running at a different origin than where the scripts are loaded from\n// \t\t\tconst myPath = 'vs/base/worker/defaultWorkerFactory.js';\n// \t\t\tconst workerBaseUrl = require.toUrl(myPath).slice(0, -myPath.length); // explicitly using require.toUrl(), see https://github.com/microsoft/vscode/issues/107440#issuecomment-698982321\n// \t\t\tconst js = `/*${label}*/self.MonacoEnvironment={baseUrl: '${workerBaseUrl}'};importScripts('${scriptPath}');/*${label}*/`;\n// \t\t\tif (forceDataUri) {\n// \t\t\t\tconst url = `data:text/javascript;charset=utf-8,${encodeURIComponent(js)}`;\n// \t\t\t\treturn url;\n// \t\t\t}\n// \t\t\tconst blob = new Blob([js], { type: 'application/javascript' });\n// \t\t\treturn URL.createObjectURL(blob);\n// \t\t}\n// \t}\n// \treturn scriptPath + '#' + label;\n// }\n// ESM-comment-end\nfunction isPromiseLike(obj) {\n  if (typeof obj.then === 'function') {\n    return true;\n  }\n  return false;\n}\n/**\r\n * A worker that uses HTML5 web workers so that is has\r\n * its own global scope and its own thread.\r\n */\nclass WebWorker {\n  constructor(moduleId, id, label, onMessageCallback, onErrorCallback) {\n    this.id = id;\n    const workerOrPromise = getWorker('workerMain.js', label);\n    if (isPromiseLike(workerOrPromise)) {\n      this.worker = workerOrPromise;\n    } else {\n      this.worker = Promise.resolve(workerOrPromise);\n    }\n    this.postMessage(moduleId, []);\n    this.worker.then(w => {\n      w.onmessage = function (ev) {\n        onMessageCallback(ev.data);\n      };\n      w.onmessageerror = onErrorCallback;\n      if (typeof w.addEventListener === 'function') {\n        w.addEventListener('error', onErrorCallback);\n      }\n    });\n  }\n  getId() {\n    return this.id;\n  }\n  postMessage(message, transfer) {\n    if (this.worker) {\n      this.worker.then(w => w.postMessage(message, transfer));\n    }\n  }\n  dispose() {\n    if (this.worker) {\n      this.worker.then(w => w.terminate());\n    }\n    this.worker = null;\n  }\n}\nexport class DefaultWorkerFactory {\n  constructor(label) {\n    this._label = label;\n    this._webWorkerFailedBeforeError = false;\n  }\n  create(moduleId, onMessageCallback, onErrorCallback) {\n    let workerId = ++DefaultWorkerFactory.LAST_WORKER_ID;\n    if (this._webWorkerFailedBeforeError) {\n      throw this._webWorkerFailedBeforeError;\n    }\n    return new WebWorker(moduleId, workerId, this._label || 'anonymous' + workerId, onMessageCallback, err => {\n      logOnceWebWorkerWarning(err);\n      this._webWorkerFailedBeforeError = err;\n      onErrorCallback(err);\n    });\n  }\n}\nDefaultWorkerFactory.LAST_WORKER_ID = 0;","map":{"version":3,"names":["_a","globals","logOnceWebWorkerWarning","ttPolicy","window","trustedTypes","createPolicy","createScriptURL","value","getWorker","workerId","label","MonacoEnvironment","getWorkerUrl","wokerUrl","Worker","name","Error","isPromiseLike","obj","then","WebWorker","constructor","moduleId","id","onMessageCallback","onErrorCallback","workerOrPromise","worker","Promise","resolve","postMessage","w","onmessage","ev","data","onmessageerror","addEventListener","getId","message","transfer","dispose","terminate","DefaultWorkerFactory","_label","_webWorkerFailedBeforeError","create","LAST_WORKER_ID","err"],"sources":["C:/Users/Administrator/Desktop/sqllineage-master/sqllineagejs/node_modules/monaco-editor/esm/vs/base/worker/defaultWorkerFactory.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nvar _a;\r\nimport { globals } from '../common/platform.js';\r\nimport { logOnceWebWorkerWarning } from '../common/worker/simpleWorker.js';\r\nconst ttPolicy = (_a = window.trustedTypes) === null || _a === void 0 ? void 0 : _a.createPolicy('defaultWorkerFactory', { createScriptURL: value => value });\r\nfunction getWorker(workerId, label) {\r\n    // Option for hosts to overwrite the worker script (used in the standalone editor)\r\n    if (globals.MonacoEnvironment) {\r\n        if (typeof globals.MonacoEnvironment.getWorker === 'function') {\r\n            return globals.MonacoEnvironment.getWorker(workerId, label);\r\n        }\r\n        if (typeof globals.MonacoEnvironment.getWorkerUrl === 'function') {\r\n            const wokerUrl = globals.MonacoEnvironment.getWorkerUrl(workerId, label);\r\n            return new Worker(ttPolicy ? ttPolicy.createScriptURL(wokerUrl) : wokerUrl, { name: label });\r\n        }\r\n    }\r\n    // ESM-comment-begin\r\n    // \tif (typeof require === 'function') {\r\n    // \t\t// check if the JS lives on a different origin\r\n    // \t\tconst workerMain = require.toUrl('./' + workerId); // explicitly using require.toUrl(), see https://github.com/microsoft/vscode/issues/107440#issuecomment-698982321\r\n    // \t\tconst workerUrl = getWorkerBootstrapUrl(workerMain, label);\r\n    // \t\treturn new Worker(ttPolicy ? ttPolicy.createScriptURL(workerUrl) as unknown as string : workerUrl, { name: label });\r\n    // \t}\r\n    // ESM-comment-end\r\n    throw new Error(`You must define a function MonacoEnvironment.getWorkerUrl or MonacoEnvironment.getWorker`);\r\n}\r\n// ESM-comment-begin\r\n// export function getWorkerBootstrapUrl(scriptPath: string, label: string, forceDataUri: boolean = false): string {\r\n// \tif (forceDataUri || /^((http:)|(https:)|(file:))/.test(scriptPath)) {\r\n// \t\tconst currentUrl = String(window.location);\r\n// \t\tconst currentOrigin = currentUrl.substr(0, currentUrl.length - window.location.hash.length - window.location.search.length - window.location.pathname.length);\r\n// \t\tif (forceDataUri || scriptPath.substring(0, currentOrigin.length) !== currentOrigin) {\r\n// \t\t\t// this is the cross-origin case\r\n// \t\t\t// i.e. the webpage is running at a different origin than where the scripts are loaded from\r\n// \t\t\tconst myPath = 'vs/base/worker/defaultWorkerFactory.js';\r\n// \t\t\tconst workerBaseUrl = require.toUrl(myPath).slice(0, -myPath.length); // explicitly using require.toUrl(), see https://github.com/microsoft/vscode/issues/107440#issuecomment-698982321\r\n// \t\t\tconst js = `/*${label}*/self.MonacoEnvironment={baseUrl: '${workerBaseUrl}'};importScripts('${scriptPath}');/*${label}*/`;\r\n// \t\t\tif (forceDataUri) {\r\n// \t\t\t\tconst url = `data:text/javascript;charset=utf-8,${encodeURIComponent(js)}`;\r\n// \t\t\t\treturn url;\r\n// \t\t\t}\r\n// \t\t\tconst blob = new Blob([js], { type: 'application/javascript' });\r\n// \t\t\treturn URL.createObjectURL(blob);\r\n// \t\t}\r\n// \t}\r\n// \treturn scriptPath + '#' + label;\r\n// }\r\n// ESM-comment-end\r\nfunction isPromiseLike(obj) {\r\n    if (typeof obj.then === 'function') {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n/**\r\n * A worker that uses HTML5 web workers so that is has\r\n * its own global scope and its own thread.\r\n */\r\nclass WebWorker {\r\n    constructor(moduleId, id, label, onMessageCallback, onErrorCallback) {\r\n        this.id = id;\r\n        const workerOrPromise = getWorker('workerMain.js', label);\r\n        if (isPromiseLike(workerOrPromise)) {\r\n            this.worker = workerOrPromise;\r\n        }\r\n        else {\r\n            this.worker = Promise.resolve(workerOrPromise);\r\n        }\r\n        this.postMessage(moduleId, []);\r\n        this.worker.then((w) => {\r\n            w.onmessage = function (ev) {\r\n                onMessageCallback(ev.data);\r\n            };\r\n            w.onmessageerror = onErrorCallback;\r\n            if (typeof w.addEventListener === 'function') {\r\n                w.addEventListener('error', onErrorCallback);\r\n            }\r\n        });\r\n    }\r\n    getId() {\r\n        return this.id;\r\n    }\r\n    postMessage(message, transfer) {\r\n        if (this.worker) {\r\n            this.worker.then(w => w.postMessage(message, transfer));\r\n        }\r\n    }\r\n    dispose() {\r\n        if (this.worker) {\r\n            this.worker.then(w => w.terminate());\r\n        }\r\n        this.worker = null;\r\n    }\r\n}\r\nexport class DefaultWorkerFactory {\r\n    constructor(label) {\r\n        this._label = label;\r\n        this._webWorkerFailedBeforeError = false;\r\n    }\r\n    create(moduleId, onMessageCallback, onErrorCallback) {\r\n        let workerId = (++DefaultWorkerFactory.LAST_WORKER_ID);\r\n        if (this._webWorkerFailedBeforeError) {\r\n            throw this._webWorkerFailedBeforeError;\r\n        }\r\n        return new WebWorker(moduleId, workerId, this._label || 'anonymous' + workerId, onMessageCallback, (err) => {\r\n            logOnceWebWorkerWarning(err);\r\n            this._webWorkerFailedBeforeError = err;\r\n            onErrorCallback(err);\r\n        });\r\n    }\r\n}\r\nDefaultWorkerFactory.LAST_WORKER_ID = 0;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}