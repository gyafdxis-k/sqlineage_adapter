{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { Color } from '../../../base/common/color.js';\nimport { Range } from '../../common/core/range.js';\nimport { Token, TokenizationResult, TokenizationResult2 } from '../../common/core/token.js';\nimport * as modes from '../../common/modes.js';\nimport { LanguageConfigurationRegistry } from '../../common/modes/languageConfigurationRegistry.js';\nimport { ModesRegistry } from '../../common/modes/modesRegistry.js';\nimport * as standaloneEnums from '../../common/standalone/standaloneEnums.js';\nimport { StaticServices } from './standaloneServices.js';\nimport { compile } from '../common/monarch/monarchCompile.js';\nimport { createTokenizationSupport } from '../common/monarch/monarchLexer.js';\n/**\r\n * Register information about a new language.\r\n */\nexport function register(language) {\n  ModesRegistry.registerLanguage(language);\n}\n/**\r\n * Get the information of all the registered languages.\r\n */\nexport function getLanguages() {\n  let result = [];\n  result = result.concat(ModesRegistry.getLanguages());\n  return result;\n}\nexport function getEncodedLanguageId(languageId) {\n  let lid = StaticServices.modeService.get().getLanguageIdentifier(languageId);\n  return lid ? lid.id : 0;\n}\n/**\r\n * An event emitted when a language is first time needed (e.g. a model has it set).\r\n * @event\r\n */\nexport function onLanguage(languageId, callback) {\n  let disposable = StaticServices.modeService.get().onDidCreateMode(mode => {\n    if (mode.getId() === languageId) {\n      // stop listening\n      disposable.dispose();\n      // invoke actual listener\n      callback();\n    }\n  });\n  return disposable;\n}\n/**\r\n * Set the editing configuration for a language.\r\n */\nexport function setLanguageConfiguration(languageId, configuration) {\n  let languageIdentifier = StaticServices.modeService.get().getLanguageIdentifier(languageId);\n  if (!languageIdentifier) {\n    throw new Error(\"Cannot set configuration for unknown language \".concat(languageId));\n  }\n  return LanguageConfigurationRegistry.register(languageIdentifier, configuration);\n}\n/**\r\n * @internal\r\n */\nexport class EncodedTokenizationSupport2Adapter {\n  constructor(languageIdentifier, actual) {\n    this._languageIdentifier = languageIdentifier;\n    this._actual = actual;\n  }\n  getInitialState() {\n    return this._actual.getInitialState();\n  }\n  tokenize(line, hasEOL, state, offsetDelta) {\n    if (typeof this._actual.tokenize === 'function') {\n      return TokenizationSupport2Adapter.adaptTokenize(this._languageIdentifier.language, this._actual, line, state, offsetDelta);\n    }\n    throw new Error('Not supported!');\n  }\n  tokenize2(line, hasEOL, state) {\n    let result = this._actual.tokenizeEncoded(line, state);\n    return new TokenizationResult2(result.tokens, result.endState);\n  }\n}\n/**\r\n * @internal\r\n */\nexport class TokenizationSupport2Adapter {\n  constructor(standaloneThemeService, languageIdentifier, actual) {\n    this._standaloneThemeService = standaloneThemeService;\n    this._languageIdentifier = languageIdentifier;\n    this._actual = actual;\n  }\n  getInitialState() {\n    return this._actual.getInitialState();\n  }\n  static _toClassicTokens(tokens, language, offsetDelta) {\n    let result = [];\n    let previousStartIndex = 0;\n    for (let i = 0, len = tokens.length; i < len; i++) {\n      const t = tokens[i];\n      let startIndex = t.startIndex;\n      // Prevent issues stemming from a buggy external tokenizer.\n      if (i === 0) {\n        // Force first token to start at first index!\n        startIndex = 0;\n      } else if (startIndex < previousStartIndex) {\n        // Force tokens to be after one another!\n        startIndex = previousStartIndex;\n      }\n      result[i] = new Token(startIndex + offsetDelta, t.scopes, language);\n      previousStartIndex = startIndex;\n    }\n    return result;\n  }\n  static adaptTokenize(language, actual, line, state, offsetDelta) {\n    let actualResult = actual.tokenize(line, state);\n    let tokens = TokenizationSupport2Adapter._toClassicTokens(actualResult.tokens, language, offsetDelta);\n    let endState;\n    // try to save an object if possible\n    if (actualResult.endState.equals(state)) {\n      endState = state;\n    } else {\n      endState = actualResult.endState;\n    }\n    return new TokenizationResult(tokens, endState);\n  }\n  tokenize(line, hasEOL, state, offsetDelta) {\n    return TokenizationSupport2Adapter.adaptTokenize(this._languageIdentifier.language, this._actual, line, state, offsetDelta);\n  }\n  _toBinaryTokens(tokens, offsetDelta) {\n    const languageId = this._languageIdentifier.id;\n    const tokenTheme = this._standaloneThemeService.getColorTheme().tokenTheme;\n    let result = [],\n      resultLen = 0;\n    let previousStartIndex = 0;\n    for (let i = 0, len = tokens.length; i < len; i++) {\n      const t = tokens[i];\n      const metadata = tokenTheme.match(languageId, t.scopes);\n      if (resultLen > 0 && result[resultLen - 1] === metadata) {\n        // same metadata\n        continue;\n      }\n      let startIndex = t.startIndex;\n      // Prevent issues stemming from a buggy external tokenizer.\n      if (i === 0) {\n        // Force first token to start at first index!\n        startIndex = 0;\n      } else if (startIndex < previousStartIndex) {\n        // Force tokens to be after one another!\n        startIndex = previousStartIndex;\n      }\n      result[resultLen++] = startIndex + offsetDelta;\n      result[resultLen++] = metadata;\n      previousStartIndex = startIndex;\n    }\n    let actualResult = new Uint32Array(resultLen);\n    for (let i = 0; i < resultLen; i++) {\n      actualResult[i] = result[i];\n    }\n    return actualResult;\n  }\n  tokenize2(line, hasEOL, state, offsetDelta) {\n    let actualResult = this._actual.tokenize(line, state);\n    let tokens = this._toBinaryTokens(actualResult.tokens, offsetDelta);\n    let endState;\n    // try to save an object if possible\n    if (actualResult.endState.equals(state)) {\n      endState = state;\n    } else {\n      endState = actualResult.endState;\n    }\n    return new TokenizationResult2(tokens, endState);\n  }\n}\nfunction isEncodedTokensProvider(provider) {\n  return 'tokenizeEncoded' in provider;\n}\nfunction isThenable(obj) {\n  return obj && typeof obj.then === 'function';\n}\n/**\r\n * Change the color map that is used for token colors.\r\n * Supported formats (hex): #RRGGBB, $RRGGBBAA, #RGB, #RGBA\r\n */\nexport function setColorMap(colorMap) {\n  if (colorMap) {\n    const result = [null];\n    for (let i = 1, len = colorMap.length; i < len; i++) {\n      result[i] = Color.fromHex(colorMap[i]);\n    }\n    StaticServices.standaloneThemeService.get().setColorMapOverride(result);\n  } else {\n    StaticServices.standaloneThemeService.get().setColorMapOverride(null);\n  }\n}\n/**\r\n * Set the tokens provider for a language (manual implementation).\r\n */\nexport function setTokensProvider(languageId, provider) {\n  let languageIdentifier = StaticServices.modeService.get().getLanguageIdentifier(languageId);\n  if (!languageIdentifier) {\n    throw new Error(\"Cannot set tokens provider for unknown language \".concat(languageId));\n  }\n  const create = provider => {\n    if (isEncodedTokensProvider(provider)) {\n      return new EncodedTokenizationSupport2Adapter(languageIdentifier, provider);\n    } else {\n      return new TokenizationSupport2Adapter(StaticServices.standaloneThemeService.get(), languageIdentifier, provider);\n    }\n  };\n  if (isThenable(provider)) {\n    return modes.TokenizationRegistry.registerPromise(languageId, provider.then(provider => create(provider)));\n  }\n  return modes.TokenizationRegistry.register(languageId, create(provider));\n}\n/**\r\n * Set the tokens provider for a language (monarch implementation).\r\n */\nexport function setMonarchTokensProvider(languageId, languageDef) {\n  const create = languageDef => {\n    return createTokenizationSupport(StaticServices.modeService.get(), StaticServices.standaloneThemeService.get(), languageId, compile(languageId, languageDef));\n  };\n  if (isThenable(languageDef)) {\n    return modes.TokenizationRegistry.registerPromise(languageId, languageDef.then(languageDef => create(languageDef)));\n  }\n  return modes.TokenizationRegistry.register(languageId, create(languageDef));\n}\n/**\r\n * Register a reference provider (used by e.g. reference search).\r\n */\nexport function registerReferenceProvider(languageId, provider) {\n  return modes.ReferenceProviderRegistry.register(languageId, provider);\n}\n/**\r\n * Register a rename provider (used by e.g. rename symbol).\r\n */\nexport function registerRenameProvider(languageId, provider) {\n  return modes.RenameProviderRegistry.register(languageId, provider);\n}\n/**\r\n * Register a signature help provider (used by e.g. parameter hints).\r\n */\nexport function registerSignatureHelpProvider(languageId, provider) {\n  return modes.SignatureHelpProviderRegistry.register(languageId, provider);\n}\n/**\r\n * Register a hover provider (used by e.g. editor hover).\r\n */\nexport function registerHoverProvider(languageId, provider) {\n  return modes.HoverProviderRegistry.register(languageId, {\n    provideHover: (model, position, token) => {\n      let word = model.getWordAtPosition(position);\n      return Promise.resolve(provider.provideHover(model, position, token)).then(value => {\n        if (!value) {\n          return undefined;\n        }\n        if (!value.range && word) {\n          value.range = new Range(position.lineNumber, word.startColumn, position.lineNumber, word.endColumn);\n        }\n        if (!value.range) {\n          value.range = new Range(position.lineNumber, position.column, position.lineNumber, position.column);\n        }\n        return value;\n      });\n    }\n  });\n}\n/**\r\n * Register a document symbol provider (used by e.g. outline).\r\n */\nexport function registerDocumentSymbolProvider(languageId, provider) {\n  return modes.DocumentSymbolProviderRegistry.register(languageId, provider);\n}\n/**\r\n * Register a document highlight provider (used by e.g. highlight occurrences).\r\n */\nexport function registerDocumentHighlightProvider(languageId, provider) {\n  return modes.DocumentHighlightProviderRegistry.register(languageId, provider);\n}\n/**\r\n * Register an linked editing range provider.\r\n */\nexport function registerLinkedEditingRangeProvider(languageId, provider) {\n  return modes.LinkedEditingRangeProviderRegistry.register(languageId, provider);\n}\n/**\r\n * Register a definition provider (used by e.g. go to definition).\r\n */\nexport function registerDefinitionProvider(languageId, provider) {\n  return modes.DefinitionProviderRegistry.register(languageId, provider);\n}\n/**\r\n * Register a implementation provider (used by e.g. go to implementation).\r\n */\nexport function registerImplementationProvider(languageId, provider) {\n  return modes.ImplementationProviderRegistry.register(languageId, provider);\n}\n/**\r\n * Register a type definition provider (used by e.g. go to type definition).\r\n */\nexport function registerTypeDefinitionProvider(languageId, provider) {\n  return modes.TypeDefinitionProviderRegistry.register(languageId, provider);\n}\n/**\r\n * Register a code lens provider (used by e.g. inline code lenses).\r\n */\nexport function registerCodeLensProvider(languageId, provider) {\n  return modes.CodeLensProviderRegistry.register(languageId, provider);\n}\n/**\r\n * Register a code action provider (used by e.g. quick fix).\r\n */\nexport function registerCodeActionProvider(languageId, provider) {\n  return modes.CodeActionProviderRegistry.register(languageId, {\n    provideCodeActions: (model, range, context, token) => {\n      let markers = StaticServices.markerService.get().read({\n        resource: model.uri\n      }).filter(m => {\n        return Range.areIntersectingOrTouching(m, range);\n      });\n      return provider.provideCodeActions(model, range, {\n        markers,\n        only: context.only\n      }, token);\n    }\n  });\n}\n/**\r\n * Register a formatter that can handle only entire models.\r\n */\nexport function registerDocumentFormattingEditProvider(languageId, provider) {\n  return modes.DocumentFormattingEditProviderRegistry.register(languageId, provider);\n}\n/**\r\n * Register a formatter that can handle a range inside a model.\r\n */\nexport function registerDocumentRangeFormattingEditProvider(languageId, provider) {\n  return modes.DocumentRangeFormattingEditProviderRegistry.register(languageId, provider);\n}\n/**\r\n * Register a formatter than can do formatting as the user types.\r\n */\nexport function registerOnTypeFormattingEditProvider(languageId, provider) {\n  return modes.OnTypeFormattingEditProviderRegistry.register(languageId, provider);\n}\n/**\r\n * Register a link provider that can find links in text.\r\n */\nexport function registerLinkProvider(languageId, provider) {\n  return modes.LinkProviderRegistry.register(languageId, provider);\n}\n/**\r\n * Register a completion item provider (use by e.g. suggestions).\r\n */\nexport function registerCompletionItemProvider(languageId, provider) {\n  return modes.CompletionProviderRegistry.register(languageId, provider);\n}\n/**\r\n * Register a document color provider (used by Color Picker, Color Decorator).\r\n */\nexport function registerColorProvider(languageId, provider) {\n  return modes.ColorProviderRegistry.register(languageId, provider);\n}\n/**\r\n * Register a folding range provider\r\n */\nexport function registerFoldingRangeProvider(languageId, provider) {\n  return modes.FoldingRangeProviderRegistry.register(languageId, provider);\n}\n/**\r\n * Register a declaration provider\r\n */\nexport function registerDeclarationProvider(languageId, provider) {\n  return modes.DeclarationProviderRegistry.register(languageId, provider);\n}\n/**\r\n * Register a selection range provider\r\n */\nexport function registerSelectionRangeProvider(languageId, provider) {\n  return modes.SelectionRangeRegistry.register(languageId, provider);\n}\n/**\r\n * Register a document semantic tokens provider\r\n */\nexport function registerDocumentSemanticTokensProvider(languageId, provider) {\n  return modes.DocumentSemanticTokensProviderRegistry.register(languageId, provider);\n}\n/**\r\n * Register a document range semantic tokens provider\r\n */\nexport function registerDocumentRangeSemanticTokensProvider(languageId, provider) {\n  return modes.DocumentRangeSemanticTokensProviderRegistry.register(languageId, provider);\n}\n/**\r\n * @internal\r\n */\nexport function createMonacoLanguagesAPI() {\n  return {\n    register: register,\n    getLanguages: getLanguages,\n    onLanguage: onLanguage,\n    getEncodedLanguageId: getEncodedLanguageId,\n    // provider methods\n    setLanguageConfiguration: setLanguageConfiguration,\n    setColorMap: setColorMap,\n    setTokensProvider: setTokensProvider,\n    setMonarchTokensProvider: setMonarchTokensProvider,\n    registerReferenceProvider: registerReferenceProvider,\n    registerRenameProvider: registerRenameProvider,\n    registerCompletionItemProvider: registerCompletionItemProvider,\n    registerSignatureHelpProvider: registerSignatureHelpProvider,\n    registerHoverProvider: registerHoverProvider,\n    registerDocumentSymbolProvider: registerDocumentSymbolProvider,\n    registerDocumentHighlightProvider: registerDocumentHighlightProvider,\n    registerLinkedEditingRangeProvider: registerLinkedEditingRangeProvider,\n    registerDefinitionProvider: registerDefinitionProvider,\n    registerImplementationProvider: registerImplementationProvider,\n    registerTypeDefinitionProvider: registerTypeDefinitionProvider,\n    registerCodeLensProvider: registerCodeLensProvider,\n    registerCodeActionProvider: registerCodeActionProvider,\n    registerDocumentFormattingEditProvider: registerDocumentFormattingEditProvider,\n    registerDocumentRangeFormattingEditProvider: registerDocumentRangeFormattingEditProvider,\n    registerOnTypeFormattingEditProvider: registerOnTypeFormattingEditProvider,\n    registerLinkProvider: registerLinkProvider,\n    registerColorProvider: registerColorProvider,\n    registerFoldingRangeProvider: registerFoldingRangeProvider,\n    registerDeclarationProvider: registerDeclarationProvider,\n    registerSelectionRangeProvider: registerSelectionRangeProvider,\n    registerDocumentSemanticTokensProvider: registerDocumentSemanticTokensProvider,\n    registerDocumentRangeSemanticTokensProvider: registerDocumentRangeSemanticTokensProvider,\n    // enums\n    DocumentHighlightKind: standaloneEnums.DocumentHighlightKind,\n    CompletionItemKind: standaloneEnums.CompletionItemKind,\n    CompletionItemTag: standaloneEnums.CompletionItemTag,\n    CompletionItemInsertTextRule: standaloneEnums.CompletionItemInsertTextRule,\n    SymbolKind: standaloneEnums.SymbolKind,\n    SymbolTag: standaloneEnums.SymbolTag,\n    IndentAction: standaloneEnums.IndentAction,\n    CompletionTriggerKind: standaloneEnums.CompletionTriggerKind,\n    SignatureHelpTriggerKind: standaloneEnums.SignatureHelpTriggerKind,\n    // classes\n    FoldingRangeKind: modes.FoldingRangeKind\n  };\n}","map":{"version":3,"names":["Color","Range","Token","TokenizationResult","TokenizationResult2","modes","LanguageConfigurationRegistry","ModesRegistry","standaloneEnums","StaticServices","compile","createTokenizationSupport","register","language","registerLanguage","getLanguages","result","concat","getEncodedLanguageId","languageId","lid","modeService","get","getLanguageIdentifier","id","onLanguage","callback","disposable","onDidCreateMode","mode","getId","dispose","setLanguageConfiguration","configuration","languageIdentifier","Error","EncodedTokenizationSupport2Adapter","constructor","actual","_languageIdentifier","_actual","getInitialState","tokenize","line","hasEOL","state","offsetDelta","TokenizationSupport2Adapter","adaptTokenize","tokenize2","tokenizeEncoded","tokens","endState","standaloneThemeService","_standaloneThemeService","_toClassicTokens","previousStartIndex","i","len","length","t","startIndex","scopes","actualResult","equals","_toBinaryTokens","tokenTheme","getColorTheme","resultLen","metadata","match","Uint32Array","isEncodedTokensProvider","provider","isThenable","obj","then","setColorMap","colorMap","fromHex","setColorMapOverride","setTokensProvider","create","TokenizationRegistry","registerPromise","setMonarchTokensProvider","languageDef","registerReferenceProvider","ReferenceProviderRegistry","registerRenameProvider","RenameProviderRegistry","registerSignatureHelpProvider","SignatureHelpProviderRegistry","registerHoverProvider","HoverProviderRegistry","provideHover","model","position","token","word","getWordAtPosition","Promise","resolve","value","undefined","range","lineNumber","startColumn","endColumn","column","registerDocumentSymbolProvider","DocumentSymbolProviderRegistry","registerDocumentHighlightProvider","DocumentHighlightProviderRegistry","registerLinkedEditingRangeProvider","LinkedEditingRangeProviderRegistry","registerDefinitionProvider","DefinitionProviderRegistry","registerImplementationProvider","ImplementationProviderRegistry","registerTypeDefinitionProvider","TypeDefinitionProviderRegistry","registerCodeLensProvider","CodeLensProviderRegistry","registerCodeActionProvider","CodeActionProviderRegistry","provideCodeActions","context","markers","markerService","read","resource","uri","filter","m","areIntersectingOrTouching","only","registerDocumentFormattingEditProvider","DocumentFormattingEditProviderRegistry","registerDocumentRangeFormattingEditProvider","DocumentRangeFormattingEditProviderRegistry","registerOnTypeFormattingEditProvider","OnTypeFormattingEditProviderRegistry","registerLinkProvider","LinkProviderRegistry","registerCompletionItemProvider","CompletionProviderRegistry","registerColorProvider","ColorProviderRegistry","registerFoldingRangeProvider","FoldingRangeProviderRegistry","registerDeclarationProvider","DeclarationProviderRegistry","registerSelectionRangeProvider","SelectionRangeRegistry","registerDocumentSemanticTokensProvider","DocumentSemanticTokensProviderRegistry","registerDocumentRangeSemanticTokensProvider","DocumentRangeSemanticTokensProviderRegistry","createMonacoLanguagesAPI","DocumentHighlightKind","CompletionItemKind","CompletionItemTag","CompletionItemInsertTextRule","SymbolKind","SymbolTag","IndentAction","CompletionTriggerKind","SignatureHelpTriggerKind","FoldingRangeKind"],"sources":["C:/Users/Administrator/Desktop/sqllineage-master/sqllineagejs/node_modules/monaco-editor/esm/vs/editor/standalone/browser/standaloneLanguages.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { Color } from '../../../base/common/color.js';\r\nimport { Range } from '../../common/core/range.js';\r\nimport { Token, TokenizationResult, TokenizationResult2 } from '../../common/core/token.js';\r\nimport * as modes from '../../common/modes.js';\r\nimport { LanguageConfigurationRegistry } from '../../common/modes/languageConfigurationRegistry.js';\r\nimport { ModesRegistry } from '../../common/modes/modesRegistry.js';\r\nimport * as standaloneEnums from '../../common/standalone/standaloneEnums.js';\r\nimport { StaticServices } from './standaloneServices.js';\r\nimport { compile } from '../common/monarch/monarchCompile.js';\r\nimport { createTokenizationSupport } from '../common/monarch/monarchLexer.js';\r\n/**\r\n * Register information about a new language.\r\n */\r\nexport function register(language) {\r\n    ModesRegistry.registerLanguage(language);\r\n}\r\n/**\r\n * Get the information of all the registered languages.\r\n */\r\nexport function getLanguages() {\r\n    let result = [];\r\n    result = result.concat(ModesRegistry.getLanguages());\r\n    return result;\r\n}\r\nexport function getEncodedLanguageId(languageId) {\r\n    let lid = StaticServices.modeService.get().getLanguageIdentifier(languageId);\r\n    return lid ? lid.id : 0;\r\n}\r\n/**\r\n * An event emitted when a language is first time needed (e.g. a model has it set).\r\n * @event\r\n */\r\nexport function onLanguage(languageId, callback) {\r\n    let disposable = StaticServices.modeService.get().onDidCreateMode((mode) => {\r\n        if (mode.getId() === languageId) {\r\n            // stop listening\r\n            disposable.dispose();\r\n            // invoke actual listener\r\n            callback();\r\n        }\r\n    });\r\n    return disposable;\r\n}\r\n/**\r\n * Set the editing configuration for a language.\r\n */\r\nexport function setLanguageConfiguration(languageId, configuration) {\r\n    let languageIdentifier = StaticServices.modeService.get().getLanguageIdentifier(languageId);\r\n    if (!languageIdentifier) {\r\n        throw new Error(`Cannot set configuration for unknown language ${languageId}`);\r\n    }\r\n    return LanguageConfigurationRegistry.register(languageIdentifier, configuration);\r\n}\r\n/**\r\n * @internal\r\n */\r\nexport class EncodedTokenizationSupport2Adapter {\r\n    constructor(languageIdentifier, actual) {\r\n        this._languageIdentifier = languageIdentifier;\r\n        this._actual = actual;\r\n    }\r\n    getInitialState() {\r\n        return this._actual.getInitialState();\r\n    }\r\n    tokenize(line, hasEOL, state, offsetDelta) {\r\n        if (typeof this._actual.tokenize === 'function') {\r\n            return TokenizationSupport2Adapter.adaptTokenize(this._languageIdentifier.language, this._actual, line, state, offsetDelta);\r\n        }\r\n        throw new Error('Not supported!');\r\n    }\r\n    tokenize2(line, hasEOL, state) {\r\n        let result = this._actual.tokenizeEncoded(line, state);\r\n        return new TokenizationResult2(result.tokens, result.endState);\r\n    }\r\n}\r\n/**\r\n * @internal\r\n */\r\nexport class TokenizationSupport2Adapter {\r\n    constructor(standaloneThemeService, languageIdentifier, actual) {\r\n        this._standaloneThemeService = standaloneThemeService;\r\n        this._languageIdentifier = languageIdentifier;\r\n        this._actual = actual;\r\n    }\r\n    getInitialState() {\r\n        return this._actual.getInitialState();\r\n    }\r\n    static _toClassicTokens(tokens, language, offsetDelta) {\r\n        let result = [];\r\n        let previousStartIndex = 0;\r\n        for (let i = 0, len = tokens.length; i < len; i++) {\r\n            const t = tokens[i];\r\n            let startIndex = t.startIndex;\r\n            // Prevent issues stemming from a buggy external tokenizer.\r\n            if (i === 0) {\r\n                // Force first token to start at first index!\r\n                startIndex = 0;\r\n            }\r\n            else if (startIndex < previousStartIndex) {\r\n                // Force tokens to be after one another!\r\n                startIndex = previousStartIndex;\r\n            }\r\n            result[i] = new Token(startIndex + offsetDelta, t.scopes, language);\r\n            previousStartIndex = startIndex;\r\n        }\r\n        return result;\r\n    }\r\n    static adaptTokenize(language, actual, line, state, offsetDelta) {\r\n        let actualResult = actual.tokenize(line, state);\r\n        let tokens = TokenizationSupport2Adapter._toClassicTokens(actualResult.tokens, language, offsetDelta);\r\n        let endState;\r\n        // try to save an object if possible\r\n        if (actualResult.endState.equals(state)) {\r\n            endState = state;\r\n        }\r\n        else {\r\n            endState = actualResult.endState;\r\n        }\r\n        return new TokenizationResult(tokens, endState);\r\n    }\r\n    tokenize(line, hasEOL, state, offsetDelta) {\r\n        return TokenizationSupport2Adapter.adaptTokenize(this._languageIdentifier.language, this._actual, line, state, offsetDelta);\r\n    }\r\n    _toBinaryTokens(tokens, offsetDelta) {\r\n        const languageId = this._languageIdentifier.id;\r\n        const tokenTheme = this._standaloneThemeService.getColorTheme().tokenTheme;\r\n        let result = [], resultLen = 0;\r\n        let previousStartIndex = 0;\r\n        for (let i = 0, len = tokens.length; i < len; i++) {\r\n            const t = tokens[i];\r\n            const metadata = tokenTheme.match(languageId, t.scopes);\r\n            if (resultLen > 0 && result[resultLen - 1] === metadata) {\r\n                // same metadata\r\n                continue;\r\n            }\r\n            let startIndex = t.startIndex;\r\n            // Prevent issues stemming from a buggy external tokenizer.\r\n            if (i === 0) {\r\n                // Force first token to start at first index!\r\n                startIndex = 0;\r\n            }\r\n            else if (startIndex < previousStartIndex) {\r\n                // Force tokens to be after one another!\r\n                startIndex = previousStartIndex;\r\n            }\r\n            result[resultLen++] = startIndex + offsetDelta;\r\n            result[resultLen++] = metadata;\r\n            previousStartIndex = startIndex;\r\n        }\r\n        let actualResult = new Uint32Array(resultLen);\r\n        for (let i = 0; i < resultLen; i++) {\r\n            actualResult[i] = result[i];\r\n        }\r\n        return actualResult;\r\n    }\r\n    tokenize2(line, hasEOL, state, offsetDelta) {\r\n        let actualResult = this._actual.tokenize(line, state);\r\n        let tokens = this._toBinaryTokens(actualResult.tokens, offsetDelta);\r\n        let endState;\r\n        // try to save an object if possible\r\n        if (actualResult.endState.equals(state)) {\r\n            endState = state;\r\n        }\r\n        else {\r\n            endState = actualResult.endState;\r\n        }\r\n        return new TokenizationResult2(tokens, endState);\r\n    }\r\n}\r\nfunction isEncodedTokensProvider(provider) {\r\n    return 'tokenizeEncoded' in provider;\r\n}\r\nfunction isThenable(obj) {\r\n    return obj && typeof obj.then === 'function';\r\n}\r\n/**\r\n * Change the color map that is used for token colors.\r\n * Supported formats (hex): #RRGGBB, $RRGGBBAA, #RGB, #RGBA\r\n */\r\nexport function setColorMap(colorMap) {\r\n    if (colorMap) {\r\n        const result = [null];\r\n        for (let i = 1, len = colorMap.length; i < len; i++) {\r\n            result[i] = Color.fromHex(colorMap[i]);\r\n        }\r\n        StaticServices.standaloneThemeService.get().setColorMapOverride(result);\r\n    }\r\n    else {\r\n        StaticServices.standaloneThemeService.get().setColorMapOverride(null);\r\n    }\r\n}\r\n/**\r\n * Set the tokens provider for a language (manual implementation).\r\n */\r\nexport function setTokensProvider(languageId, provider) {\r\n    let languageIdentifier = StaticServices.modeService.get().getLanguageIdentifier(languageId);\r\n    if (!languageIdentifier) {\r\n        throw new Error(`Cannot set tokens provider for unknown language ${languageId}`);\r\n    }\r\n    const create = (provider) => {\r\n        if (isEncodedTokensProvider(provider)) {\r\n            return new EncodedTokenizationSupport2Adapter(languageIdentifier, provider);\r\n        }\r\n        else {\r\n            return new TokenizationSupport2Adapter(StaticServices.standaloneThemeService.get(), languageIdentifier, provider);\r\n        }\r\n    };\r\n    if (isThenable(provider)) {\r\n        return modes.TokenizationRegistry.registerPromise(languageId, provider.then(provider => create(provider)));\r\n    }\r\n    return modes.TokenizationRegistry.register(languageId, create(provider));\r\n}\r\n/**\r\n * Set the tokens provider for a language (monarch implementation).\r\n */\r\nexport function setMonarchTokensProvider(languageId, languageDef) {\r\n    const create = (languageDef) => {\r\n        return createTokenizationSupport(StaticServices.modeService.get(), StaticServices.standaloneThemeService.get(), languageId, compile(languageId, languageDef));\r\n    };\r\n    if (isThenable(languageDef)) {\r\n        return modes.TokenizationRegistry.registerPromise(languageId, languageDef.then(languageDef => create(languageDef)));\r\n    }\r\n    return modes.TokenizationRegistry.register(languageId, create(languageDef));\r\n}\r\n/**\r\n * Register a reference provider (used by e.g. reference search).\r\n */\r\nexport function registerReferenceProvider(languageId, provider) {\r\n    return modes.ReferenceProviderRegistry.register(languageId, provider);\r\n}\r\n/**\r\n * Register a rename provider (used by e.g. rename symbol).\r\n */\r\nexport function registerRenameProvider(languageId, provider) {\r\n    return modes.RenameProviderRegistry.register(languageId, provider);\r\n}\r\n/**\r\n * Register a signature help provider (used by e.g. parameter hints).\r\n */\r\nexport function registerSignatureHelpProvider(languageId, provider) {\r\n    return modes.SignatureHelpProviderRegistry.register(languageId, provider);\r\n}\r\n/**\r\n * Register a hover provider (used by e.g. editor hover).\r\n */\r\nexport function registerHoverProvider(languageId, provider) {\r\n    return modes.HoverProviderRegistry.register(languageId, {\r\n        provideHover: (model, position, token) => {\r\n            let word = model.getWordAtPosition(position);\r\n            return Promise.resolve(provider.provideHover(model, position, token)).then((value) => {\r\n                if (!value) {\r\n                    return undefined;\r\n                }\r\n                if (!value.range && word) {\r\n                    value.range = new Range(position.lineNumber, word.startColumn, position.lineNumber, word.endColumn);\r\n                }\r\n                if (!value.range) {\r\n                    value.range = new Range(position.lineNumber, position.column, position.lineNumber, position.column);\r\n                }\r\n                return value;\r\n            });\r\n        }\r\n    });\r\n}\r\n/**\r\n * Register a document symbol provider (used by e.g. outline).\r\n */\r\nexport function registerDocumentSymbolProvider(languageId, provider) {\r\n    return modes.DocumentSymbolProviderRegistry.register(languageId, provider);\r\n}\r\n/**\r\n * Register a document highlight provider (used by e.g. highlight occurrences).\r\n */\r\nexport function registerDocumentHighlightProvider(languageId, provider) {\r\n    return modes.DocumentHighlightProviderRegistry.register(languageId, provider);\r\n}\r\n/**\r\n * Register an linked editing range provider.\r\n */\r\nexport function registerLinkedEditingRangeProvider(languageId, provider) {\r\n    return modes.LinkedEditingRangeProviderRegistry.register(languageId, provider);\r\n}\r\n/**\r\n * Register a definition provider (used by e.g. go to definition).\r\n */\r\nexport function registerDefinitionProvider(languageId, provider) {\r\n    return modes.DefinitionProviderRegistry.register(languageId, provider);\r\n}\r\n/**\r\n * Register a implementation provider (used by e.g. go to implementation).\r\n */\r\nexport function registerImplementationProvider(languageId, provider) {\r\n    return modes.ImplementationProviderRegistry.register(languageId, provider);\r\n}\r\n/**\r\n * Register a type definition provider (used by e.g. go to type definition).\r\n */\r\nexport function registerTypeDefinitionProvider(languageId, provider) {\r\n    return modes.TypeDefinitionProviderRegistry.register(languageId, provider);\r\n}\r\n/**\r\n * Register a code lens provider (used by e.g. inline code lenses).\r\n */\r\nexport function registerCodeLensProvider(languageId, provider) {\r\n    return modes.CodeLensProviderRegistry.register(languageId, provider);\r\n}\r\n/**\r\n * Register a code action provider (used by e.g. quick fix).\r\n */\r\nexport function registerCodeActionProvider(languageId, provider) {\r\n    return modes.CodeActionProviderRegistry.register(languageId, {\r\n        provideCodeActions: (model, range, context, token) => {\r\n            let markers = StaticServices.markerService.get().read({ resource: model.uri }).filter(m => {\r\n                return Range.areIntersectingOrTouching(m, range);\r\n            });\r\n            return provider.provideCodeActions(model, range, { markers, only: context.only }, token);\r\n        }\r\n    });\r\n}\r\n/**\r\n * Register a formatter that can handle only entire models.\r\n */\r\nexport function registerDocumentFormattingEditProvider(languageId, provider) {\r\n    return modes.DocumentFormattingEditProviderRegistry.register(languageId, provider);\r\n}\r\n/**\r\n * Register a formatter that can handle a range inside a model.\r\n */\r\nexport function registerDocumentRangeFormattingEditProvider(languageId, provider) {\r\n    return modes.DocumentRangeFormattingEditProviderRegistry.register(languageId, provider);\r\n}\r\n/**\r\n * Register a formatter than can do formatting as the user types.\r\n */\r\nexport function registerOnTypeFormattingEditProvider(languageId, provider) {\r\n    return modes.OnTypeFormattingEditProviderRegistry.register(languageId, provider);\r\n}\r\n/**\r\n * Register a link provider that can find links in text.\r\n */\r\nexport function registerLinkProvider(languageId, provider) {\r\n    return modes.LinkProviderRegistry.register(languageId, provider);\r\n}\r\n/**\r\n * Register a completion item provider (use by e.g. suggestions).\r\n */\r\nexport function registerCompletionItemProvider(languageId, provider) {\r\n    return modes.CompletionProviderRegistry.register(languageId, provider);\r\n}\r\n/**\r\n * Register a document color provider (used by Color Picker, Color Decorator).\r\n */\r\nexport function registerColorProvider(languageId, provider) {\r\n    return modes.ColorProviderRegistry.register(languageId, provider);\r\n}\r\n/**\r\n * Register a folding range provider\r\n */\r\nexport function registerFoldingRangeProvider(languageId, provider) {\r\n    return modes.FoldingRangeProviderRegistry.register(languageId, provider);\r\n}\r\n/**\r\n * Register a declaration provider\r\n */\r\nexport function registerDeclarationProvider(languageId, provider) {\r\n    return modes.DeclarationProviderRegistry.register(languageId, provider);\r\n}\r\n/**\r\n * Register a selection range provider\r\n */\r\nexport function registerSelectionRangeProvider(languageId, provider) {\r\n    return modes.SelectionRangeRegistry.register(languageId, provider);\r\n}\r\n/**\r\n * Register a document semantic tokens provider\r\n */\r\nexport function registerDocumentSemanticTokensProvider(languageId, provider) {\r\n    return modes.DocumentSemanticTokensProviderRegistry.register(languageId, provider);\r\n}\r\n/**\r\n * Register a document range semantic tokens provider\r\n */\r\nexport function registerDocumentRangeSemanticTokensProvider(languageId, provider) {\r\n    return modes.DocumentRangeSemanticTokensProviderRegistry.register(languageId, provider);\r\n}\r\n/**\r\n * @internal\r\n */\r\nexport function createMonacoLanguagesAPI() {\r\n    return {\r\n        register: register,\r\n        getLanguages: getLanguages,\r\n        onLanguage: onLanguage,\r\n        getEncodedLanguageId: getEncodedLanguageId,\r\n        // provider methods\r\n        setLanguageConfiguration: setLanguageConfiguration,\r\n        setColorMap: setColorMap,\r\n        setTokensProvider: setTokensProvider,\r\n        setMonarchTokensProvider: setMonarchTokensProvider,\r\n        registerReferenceProvider: registerReferenceProvider,\r\n        registerRenameProvider: registerRenameProvider,\r\n        registerCompletionItemProvider: registerCompletionItemProvider,\r\n        registerSignatureHelpProvider: registerSignatureHelpProvider,\r\n        registerHoverProvider: registerHoverProvider,\r\n        registerDocumentSymbolProvider: registerDocumentSymbolProvider,\r\n        registerDocumentHighlightProvider: registerDocumentHighlightProvider,\r\n        registerLinkedEditingRangeProvider: registerLinkedEditingRangeProvider,\r\n        registerDefinitionProvider: registerDefinitionProvider,\r\n        registerImplementationProvider: registerImplementationProvider,\r\n        registerTypeDefinitionProvider: registerTypeDefinitionProvider,\r\n        registerCodeLensProvider: registerCodeLensProvider,\r\n        registerCodeActionProvider: registerCodeActionProvider,\r\n        registerDocumentFormattingEditProvider: registerDocumentFormattingEditProvider,\r\n        registerDocumentRangeFormattingEditProvider: registerDocumentRangeFormattingEditProvider,\r\n        registerOnTypeFormattingEditProvider: registerOnTypeFormattingEditProvider,\r\n        registerLinkProvider: registerLinkProvider,\r\n        registerColorProvider: registerColorProvider,\r\n        registerFoldingRangeProvider: registerFoldingRangeProvider,\r\n        registerDeclarationProvider: registerDeclarationProvider,\r\n        registerSelectionRangeProvider: registerSelectionRangeProvider,\r\n        registerDocumentSemanticTokensProvider: registerDocumentSemanticTokensProvider,\r\n        registerDocumentRangeSemanticTokensProvider: registerDocumentRangeSemanticTokensProvider,\r\n        // enums\r\n        DocumentHighlightKind: standaloneEnums.DocumentHighlightKind,\r\n        CompletionItemKind: standaloneEnums.CompletionItemKind,\r\n        CompletionItemTag: standaloneEnums.CompletionItemTag,\r\n        CompletionItemInsertTextRule: standaloneEnums.CompletionItemInsertTextRule,\r\n        SymbolKind: standaloneEnums.SymbolKind,\r\n        SymbolTag: standaloneEnums.SymbolTag,\r\n        IndentAction: standaloneEnums.IndentAction,\r\n        CompletionTriggerKind: standaloneEnums.CompletionTriggerKind,\r\n        SignatureHelpTriggerKind: standaloneEnums.SignatureHelpTriggerKind,\r\n        // classes\r\n        FoldingRangeKind: modes.FoldingRangeKind,\r\n    };\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}