{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { FrankensteinMode } from '../modes/abstractMode.js';\nimport { NULL_LANGUAGE_IDENTIFIER } from '../modes/nullMode.js';\nimport { LanguagesRegistry } from './languagesRegistry.js';\nimport { firstOrDefault } from '../../../base/common/arrays.js';\nclass LanguageSelection extends Disposable {\n  constructor(onLanguagesMaybeChanged, selector) {\n    super();\n    this._onDidChange = this._register(new Emitter());\n    this.onDidChange = this._onDidChange.event;\n    this._selector = selector;\n    this.languageIdentifier = this._selector();\n    this._register(onLanguagesMaybeChanged(() => this._evaluate()));\n  }\n  _evaluate() {\n    let languageIdentifier = this._selector();\n    if (languageIdentifier.id === this.languageIdentifier.id) {\n      // no change\n      return;\n    }\n    this.languageIdentifier = languageIdentifier;\n    this._onDidChange.fire(this.languageIdentifier);\n  }\n}\nexport class ModeServiceImpl extends Disposable {\n  constructor() {\n    let warnOnOverwrite = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    super();\n    this._onDidCreateMode = this._register(new Emitter());\n    this.onDidCreateMode = this._onDidCreateMode.event;\n    this._onLanguagesMaybeChanged = this._register(new Emitter());\n    this.onLanguagesMaybeChanged = this._onLanguagesMaybeChanged.event;\n    this._instantiatedModes = {};\n    this._registry = this._register(new LanguagesRegistry(true, warnOnOverwrite));\n    this._register(this._registry.onDidChange(() => this._onLanguagesMaybeChanged.fire()));\n  }\n  isRegisteredMode(mimetypeOrModeId) {\n    return this._registry.isRegisteredMode(mimetypeOrModeId);\n  }\n  getModeIdForLanguageName(alias) {\n    return this._registry.getModeIdForLanguageNameLowercase(alias);\n  }\n  getModeIdByFilepathOrFirstLine(resource, firstLine) {\n    const modeIds = this._registry.getModeIdsFromFilepathOrFirstLine(resource, firstLine);\n    return firstOrDefault(modeIds, null);\n  }\n  getModeId(commaSeparatedMimetypesOrCommaSeparatedIds) {\n    const modeIds = this._registry.extractModeIds(commaSeparatedMimetypesOrCommaSeparatedIds);\n    return firstOrDefault(modeIds, null);\n  }\n  getLanguageIdentifier(modeId) {\n    return this._registry.getLanguageIdentifier(modeId);\n  }\n  // --- instantiation\n  create(commaSeparatedMimetypesOrCommaSeparatedIds) {\n    return new LanguageSelection(this.onLanguagesMaybeChanged, () => {\n      const modeId = this.getModeId(commaSeparatedMimetypesOrCommaSeparatedIds);\n      return this._createModeAndGetLanguageIdentifier(modeId);\n    });\n  }\n  createByFilepathOrFirstLine(resource, firstLine) {\n    return new LanguageSelection(this.onLanguagesMaybeChanged, () => {\n      const modeId = this.getModeIdByFilepathOrFirstLine(resource, firstLine);\n      return this._createModeAndGetLanguageIdentifier(modeId);\n    });\n  }\n  _createModeAndGetLanguageIdentifier(modeId) {\n    // Fall back to plain text if no mode was found\n    const languageIdentifier = this.getLanguageIdentifier(modeId || 'plaintext') || NULL_LANGUAGE_IDENTIFIER;\n    this._getOrCreateMode(languageIdentifier.language);\n    return languageIdentifier;\n  }\n  triggerMode(commaSeparatedMimetypesOrCommaSeparatedIds) {\n    const modeId = this.getModeId(commaSeparatedMimetypesOrCommaSeparatedIds);\n    // Fall back to plain text if no mode was found\n    this._getOrCreateMode(modeId || 'plaintext');\n  }\n  _getOrCreateMode(modeId) {\n    if (!this._instantiatedModes.hasOwnProperty(modeId)) {\n      let languageIdentifier = this.getLanguageIdentifier(modeId) || NULL_LANGUAGE_IDENTIFIER;\n      this._instantiatedModes[modeId] = new FrankensteinMode(languageIdentifier);\n      this._onDidCreateMode.fire(this._instantiatedModes[modeId]);\n    }\n    return this._instantiatedModes[modeId];\n  }\n}","map":{"version":3,"names":["Emitter","Disposable","FrankensteinMode","NULL_LANGUAGE_IDENTIFIER","LanguagesRegistry","firstOrDefault","LanguageSelection","constructor","onLanguagesMaybeChanged","selector","_onDidChange","_register","onDidChange","event","_selector","languageIdentifier","_evaluate","id","fire","ModeServiceImpl","warnOnOverwrite","arguments","length","undefined","_onDidCreateMode","onDidCreateMode","_onLanguagesMaybeChanged","_instantiatedModes","_registry","isRegisteredMode","mimetypeOrModeId","getModeIdForLanguageName","alias","getModeIdForLanguageNameLowercase","getModeIdByFilepathOrFirstLine","resource","firstLine","modeIds","getModeIdsFromFilepathOrFirstLine","getModeId","commaSeparatedMimetypesOrCommaSeparatedIds","extractModeIds","getLanguageIdentifier","modeId","create","_createModeAndGetLanguageIdentifier","createByFilepathOrFirstLine","_getOrCreateMode","language","triggerMode","hasOwnProperty"],"sources":["C:/Users/Administrator/Desktop/sqllineage-master/sqllineagejs/node_modules/monaco-editor/esm/vs/editor/common/services/modeServiceImpl.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { Emitter } from '../../../base/common/event.js';\r\nimport { Disposable } from '../../../base/common/lifecycle.js';\r\nimport { FrankensteinMode } from '../modes/abstractMode.js';\r\nimport { NULL_LANGUAGE_IDENTIFIER } from '../modes/nullMode.js';\r\nimport { LanguagesRegistry } from './languagesRegistry.js';\r\nimport { firstOrDefault } from '../../../base/common/arrays.js';\r\nclass LanguageSelection extends Disposable {\r\n    constructor(onLanguagesMaybeChanged, selector) {\r\n        super();\r\n        this._onDidChange = this._register(new Emitter());\r\n        this.onDidChange = this._onDidChange.event;\r\n        this._selector = selector;\r\n        this.languageIdentifier = this._selector();\r\n        this._register(onLanguagesMaybeChanged(() => this._evaluate()));\r\n    }\r\n    _evaluate() {\r\n        let languageIdentifier = this._selector();\r\n        if (languageIdentifier.id === this.languageIdentifier.id) {\r\n            // no change\r\n            return;\r\n        }\r\n        this.languageIdentifier = languageIdentifier;\r\n        this._onDidChange.fire(this.languageIdentifier);\r\n    }\r\n}\r\nexport class ModeServiceImpl extends Disposable {\r\n    constructor(warnOnOverwrite = false) {\r\n        super();\r\n        this._onDidCreateMode = this._register(new Emitter());\r\n        this.onDidCreateMode = this._onDidCreateMode.event;\r\n        this._onLanguagesMaybeChanged = this._register(new Emitter());\r\n        this.onLanguagesMaybeChanged = this._onLanguagesMaybeChanged.event;\r\n        this._instantiatedModes = {};\r\n        this._registry = this._register(new LanguagesRegistry(true, warnOnOverwrite));\r\n        this._register(this._registry.onDidChange(() => this._onLanguagesMaybeChanged.fire()));\r\n    }\r\n    isRegisteredMode(mimetypeOrModeId) {\r\n        return this._registry.isRegisteredMode(mimetypeOrModeId);\r\n    }\r\n    getModeIdForLanguageName(alias) {\r\n        return this._registry.getModeIdForLanguageNameLowercase(alias);\r\n    }\r\n    getModeIdByFilepathOrFirstLine(resource, firstLine) {\r\n        const modeIds = this._registry.getModeIdsFromFilepathOrFirstLine(resource, firstLine);\r\n        return firstOrDefault(modeIds, null);\r\n    }\r\n    getModeId(commaSeparatedMimetypesOrCommaSeparatedIds) {\r\n        const modeIds = this._registry.extractModeIds(commaSeparatedMimetypesOrCommaSeparatedIds);\r\n        return firstOrDefault(modeIds, null);\r\n    }\r\n    getLanguageIdentifier(modeId) {\r\n        return this._registry.getLanguageIdentifier(modeId);\r\n    }\r\n    // --- instantiation\r\n    create(commaSeparatedMimetypesOrCommaSeparatedIds) {\r\n        return new LanguageSelection(this.onLanguagesMaybeChanged, () => {\r\n            const modeId = this.getModeId(commaSeparatedMimetypesOrCommaSeparatedIds);\r\n            return this._createModeAndGetLanguageIdentifier(modeId);\r\n        });\r\n    }\r\n    createByFilepathOrFirstLine(resource, firstLine) {\r\n        return new LanguageSelection(this.onLanguagesMaybeChanged, () => {\r\n            const modeId = this.getModeIdByFilepathOrFirstLine(resource, firstLine);\r\n            return this._createModeAndGetLanguageIdentifier(modeId);\r\n        });\r\n    }\r\n    _createModeAndGetLanguageIdentifier(modeId) {\r\n        // Fall back to plain text if no mode was found\r\n        const languageIdentifier = this.getLanguageIdentifier(modeId || 'plaintext') || NULL_LANGUAGE_IDENTIFIER;\r\n        this._getOrCreateMode(languageIdentifier.language);\r\n        return languageIdentifier;\r\n    }\r\n    triggerMode(commaSeparatedMimetypesOrCommaSeparatedIds) {\r\n        const modeId = this.getModeId(commaSeparatedMimetypesOrCommaSeparatedIds);\r\n        // Fall back to plain text if no mode was found\r\n        this._getOrCreateMode(modeId || 'plaintext');\r\n    }\r\n    _getOrCreateMode(modeId) {\r\n        if (!this._instantiatedModes.hasOwnProperty(modeId)) {\r\n            let languageIdentifier = this.getLanguageIdentifier(modeId) || NULL_LANGUAGE_IDENTIFIER;\r\n            this._instantiatedModes[modeId] = new FrankensteinMode(languageIdentifier);\r\n            this._onDidCreateMode.fire(this._instantiatedModes[modeId]);\r\n        }\r\n        return this._instantiatedModes[modeId];\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}