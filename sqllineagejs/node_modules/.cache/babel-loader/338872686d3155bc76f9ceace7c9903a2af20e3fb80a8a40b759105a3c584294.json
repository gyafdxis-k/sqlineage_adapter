{"ast":null,"code":"/**\r\n * **!Do not construct directly!**\r\n *\r\n * **!Only static methods because it gets serialized!**\r\n *\r\n * This represents the \"canonical\" version for an extension identifier. Extension ids\r\n * have to be case-insensitive (due to the marketplace), but we must ensure case\r\n * preservation because the extension API is already public at this time.\r\n *\r\n * For example, given an extension with the publisher `\"Hello\"` and the name `\"World\"`,\r\n * its canonical extension identifier is `\"Hello.World\"`. This extension could be\r\n * referenced in some other extension's dependencies using the string `\"hello.world\"`.\r\n *\r\n * To make matters more complicated, an extension can optionally have an UUID. When two\r\n * extensions have the same UUID, they are considered equal even if their identifier is different.\r\n */\nexport class ExtensionIdentifier {\n  constructor(value) {\n    this.value = value;\n    this._lower = value.toLowerCase();\n  }\n  /**\r\n   * Gives the value by which to index (for equality).\r\n   */\n  static toKey(id) {\n    if (typeof id === 'string') {\n      return id.toLowerCase();\n    }\n    return id._lower;\n  }\n}","map":{"version":3,"names":["ExtensionIdentifier","constructor","value","_lower","toLowerCase","toKey","id"],"sources":["C:/Users/Administrator/Desktop/sqllineage-master/sqllineagejs/node_modules/monaco-editor/esm/vs/platform/extensions/common/extensions.js"],"sourcesContent":["/**\r\n * **!Do not construct directly!**\r\n *\r\n * **!Only static methods because it gets serialized!**\r\n *\r\n * This represents the \"canonical\" version for an extension identifier. Extension ids\r\n * have to be case-insensitive (due to the marketplace), but we must ensure case\r\n * preservation because the extension API is already public at this time.\r\n *\r\n * For example, given an extension with the publisher `\"Hello\"` and the name `\"World\"`,\r\n * its canonical extension identifier is `\"Hello.World\"`. This extension could be\r\n * referenced in some other extension's dependencies using the string `\"hello.world\"`.\r\n *\r\n * To make matters more complicated, an extension can optionally have an UUID. When two\r\n * extensions have the same UUID, they are considered equal even if their identifier is different.\r\n */\r\nexport class ExtensionIdentifier {\r\n    constructor(value) {\r\n        this.value = value;\r\n        this._lower = value.toLowerCase();\r\n    }\r\n    /**\r\n     * Gives the value by which to index (for equality).\r\n     */\r\n    static toKey(id) {\r\n        if (typeof id === 'string') {\r\n            return id.toLowerCase();\r\n        }\r\n        return id._lower;\r\n    }\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,mBAAmB,CAAC;EAC7BC,WAAWA,CAACC,KAAK,EAAE;IACf,IAAI,CAACA,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACC,MAAM,GAAGD,KAAK,CAACE,WAAW,CAAC,CAAC;EACrC;EACA;AACJ;AACA;EACI,OAAOC,KAAKA,CAACC,EAAE,EAAE;IACb,IAAI,OAAOA,EAAE,KAAK,QAAQ,EAAE;MACxB,OAAOA,EAAE,CAACF,WAAW,CAAC,CAAC;IAC3B;IACA,OAAOE,EAAE,CAACH,MAAM;EACpB;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}