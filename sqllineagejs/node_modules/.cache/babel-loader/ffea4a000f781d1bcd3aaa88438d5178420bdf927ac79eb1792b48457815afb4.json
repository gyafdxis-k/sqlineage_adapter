{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport './textAreaHandler.css';\nimport * as nls from '../../../nls.js';\nimport * as browser from '../../../base/browser/browser.js';\nimport { createFastDomNode } from '../../../base/browser/fastDomNode.js';\nimport * as platform from '../../../base/common/platform.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { Configuration } from '../config/configuration.js';\nimport { CopyOptions, TextAreaInput } from './textAreaInput.js';\nimport { PagedScreenReaderStrategy, TextAreaState } from './textAreaState.js';\nimport { PartFingerprints, ViewPart } from '../view/viewPart.js';\nimport { LineNumbersOverlay } from '../viewParts/lineNumbers/lineNumbers.js';\nimport { Margin } from '../viewParts/margin/margin.js';\nimport { EditorOptions } from '../../common/config/editorOptions.js';\nimport { getMapForWordSeparators } from '../../common/controller/wordCharacterClassifier.js';\nimport { Position } from '../../common/core/position.js';\nimport { Range } from '../../common/core/range.js';\nimport { Selection } from '../../common/core/selection.js';\nimport { MOUSE_CURSOR_TEXT_CSS_CLASS_NAME } from '../../../base/browser/ui/mouseCursor/mouseCursor.js';\nclass VisibleTextAreaData {\n  constructor(top, left, width) {\n    this.top = top;\n    this.left = left;\n    this.width = width;\n  }\n  setWidth(width) {\n    return new VisibleTextAreaData(this.top, this.left, width);\n  }\n}\nconst canUseZeroSizeTextarea = browser.isFirefox;\nexport class TextAreaHandler extends ViewPart {\n  constructor(context, viewController, viewHelper) {\n    super(context);\n    // --- end view API\n    this._primaryCursorPosition = new Position(1, 1);\n    this._primaryCursorVisibleRange = null;\n    this._viewController = viewController;\n    this._viewHelper = viewHelper;\n    this._scrollLeft = 0;\n    this._scrollTop = 0;\n    const options = this._context.configuration.options;\n    const layoutInfo = options.get(124 /* layoutInfo */);\n    this._setAccessibilityOptions(options);\n    this._contentLeft = layoutInfo.contentLeft;\n    this._contentWidth = layoutInfo.contentWidth;\n    this._contentHeight = layoutInfo.height;\n    this._fontInfo = options.get(38 /* fontInfo */);\n    this._lineHeight = options.get(53 /* lineHeight */);\n    this._emptySelectionClipboard = options.get(28 /* emptySelectionClipboard */);\n    this._copyWithSyntaxHighlighting = options.get(18 /* copyWithSyntaxHighlighting */);\n    this._visibleTextArea = null;\n    this._selections = [new Selection(1, 1, 1, 1)];\n    this._modelSelections = [new Selection(1, 1, 1, 1)];\n    this._lastRenderPosition = null;\n    // Text Area (The focus will always be in the textarea when the cursor is blinking)\n    this.textArea = createFastDomNode(document.createElement('textarea'));\n    PartFingerprints.write(this.textArea, 6 /* TextArea */);\n    this.textArea.setClassName(\"inputarea \".concat(MOUSE_CURSOR_TEXT_CSS_CLASS_NAME));\n    this.textArea.setAttribute('wrap', 'off');\n    this.textArea.setAttribute('autocorrect', 'off');\n    this.textArea.setAttribute('autocapitalize', 'off');\n    this.textArea.setAttribute('autocomplete', 'off');\n    this.textArea.setAttribute('spellcheck', 'false');\n    this.textArea.setAttribute('aria-label', this._getAriaLabel(options));\n    this.textArea.setAttribute('tabindex', String(options.get(107 /* tabIndex */)));\n    this.textArea.setAttribute('role', 'textbox');\n    this.textArea.setAttribute('aria-roledescription', nls.localize('editor', \"editor\"));\n    this.textArea.setAttribute('aria-multiline', 'true');\n    this.textArea.setAttribute('aria-haspopup', 'false');\n    this.textArea.setAttribute('aria-autocomplete', 'both');\n    if (platform.isWeb && options.get(75 /* readOnly */)) {\n      this.textArea.setAttribute('readonly', 'true');\n    }\n    this.textAreaCover = createFastDomNode(document.createElement('div'));\n    this.textAreaCover.setPosition('absolute');\n    const simpleModel = {\n      getLineCount: () => {\n        return this._context.model.getLineCount();\n      },\n      getLineMaxColumn: lineNumber => {\n        return this._context.model.getLineMaxColumn(lineNumber);\n      },\n      getValueInRange: (range, eol) => {\n        return this._context.model.getValueInRange(range, eol);\n      }\n    };\n    const textAreaInputHost = {\n      getDataToCopy: generateHTML => {\n        const rawTextToCopy = this._context.model.getPlainTextToCopy(this._modelSelections, this._emptySelectionClipboard, platform.isWindows);\n        const newLineCharacter = this._context.model.getEOL();\n        const isFromEmptySelection = this._emptySelectionClipboard && this._modelSelections.length === 1 && this._modelSelections[0].isEmpty();\n        const multicursorText = Array.isArray(rawTextToCopy) ? rawTextToCopy : null;\n        const text = Array.isArray(rawTextToCopy) ? rawTextToCopy.join(newLineCharacter) : rawTextToCopy;\n        let html = undefined;\n        let mode = null;\n        if (generateHTML) {\n          if (CopyOptions.forceCopyWithSyntaxHighlighting || this._copyWithSyntaxHighlighting && text.length < 65536) {\n            const richText = this._context.model.getRichTextToCopy(this._modelSelections, this._emptySelectionClipboard);\n            if (richText) {\n              html = richText.html;\n              mode = richText.mode;\n            }\n          }\n        }\n        return {\n          isFromEmptySelection,\n          multicursorText,\n          text,\n          html,\n          mode\n        };\n      },\n      getScreenReaderContent: currentState => {\n        if (this._accessibilitySupport === 1 /* Disabled */) {\n          // We know for a fact that a screen reader is not attached\n          // On OSX, we write the character before the cursor to allow for \"long-press\" composition\n          // Also on OSX, we write the word before the cursor to allow for the Accessibility Keyboard to give good hints\n          if (platform.isMacintosh) {\n            const selection = this._selections[0];\n            if (selection.isEmpty()) {\n              const position = selection.getStartPosition();\n              let textBefore = this._getWordBeforePosition(position);\n              if (textBefore.length === 0) {\n                textBefore = this._getCharacterBeforePosition(position);\n              }\n              if (textBefore.length > 0) {\n                return new TextAreaState(textBefore, textBefore.length, textBefore.length, position, position);\n              }\n            }\n          }\n          return TextAreaState.EMPTY;\n        }\n        return PagedScreenReaderStrategy.fromEditorSelection(currentState, simpleModel, this._selections[0], this._accessibilityPageSize, this._accessibilitySupport === 0 /* Unknown */);\n      },\n\n      deduceModelPosition: (viewAnchorPosition, deltaOffset, lineFeedCnt) => {\n        return this._context.model.deduceModelPositionRelativeToViewPosition(viewAnchorPosition, deltaOffset, lineFeedCnt);\n      }\n    };\n    this._textAreaInput = this._register(new TextAreaInput(textAreaInputHost, this.textArea));\n    this._register(this._textAreaInput.onKeyDown(e => {\n      this._viewController.emitKeyDown(e);\n    }));\n    this._register(this._textAreaInput.onKeyUp(e => {\n      this._viewController.emitKeyUp(e);\n    }));\n    this._register(this._textAreaInput.onPaste(e => {\n      let pasteOnNewLine = false;\n      let multicursorText = null;\n      let mode = null;\n      if (e.metadata) {\n        pasteOnNewLine = this._emptySelectionClipboard && !!e.metadata.isFromEmptySelection;\n        multicursorText = typeof e.metadata.multicursorText !== 'undefined' ? e.metadata.multicursorText : null;\n        mode = e.metadata.mode;\n      }\n      this._viewController.paste(e.text, pasteOnNewLine, multicursorText, mode);\n    }));\n    this._register(this._textAreaInput.onCut(() => {\n      this._viewController.cut();\n    }));\n    this._register(this._textAreaInput.onType(e => {\n      if (e.replaceCharCnt) {\n        this._viewController.replacePreviousChar(e.text, e.replaceCharCnt);\n      } else {\n        this._viewController.type(e.text);\n      }\n    }));\n    this._register(this._textAreaInput.onSelectionChangeRequest(modelSelection => {\n      this._viewController.setSelection(modelSelection);\n    }));\n    this._register(this._textAreaInput.onCompositionStart(e => {\n      const lineNumber = this._selections[0].startLineNumber;\n      const column = this._selections[0].startColumn - (e.moveOneCharacterLeft ? 1 : 0);\n      this._context.model.revealRange('keyboard', true, new Range(lineNumber, column, lineNumber, column), 0 /* Simple */, 1 /* Immediate */);\n      // Find range pixel position\n      const visibleRange = this._viewHelper.visibleRangeForPositionRelativeToEditor(lineNumber, column);\n      if (visibleRange) {\n        this._visibleTextArea = new VisibleTextAreaData(this._context.viewLayout.getVerticalOffsetForLineNumber(lineNumber), visibleRange.left, canUseZeroSizeTextarea ? 0 : 1);\n        this._render();\n      }\n      // Show the textarea\n      this.textArea.setClassName(\"inputarea \".concat(MOUSE_CURSOR_TEXT_CSS_CLASS_NAME, \" ime-input\"));\n      this._viewController.compositionStart();\n      this._context.model.onCompositionStart();\n    }));\n    this._register(this._textAreaInput.onCompositionUpdate(e => {\n      // adjust width by its size\n      this._visibleTextArea = this._visibleTextArea.setWidth(measureText(e.data, this._fontInfo));\n      this._render();\n    }));\n    this._register(this._textAreaInput.onCompositionEnd(() => {\n      this._visibleTextArea = null;\n      this._render();\n      this.textArea.setClassName(\"inputarea \".concat(MOUSE_CURSOR_TEXT_CSS_CLASS_NAME));\n      this._viewController.compositionEnd();\n      this._context.model.onCompositionEnd();\n    }));\n    this._register(this._textAreaInput.onFocus(() => {\n      this._context.model.setHasFocus(true);\n    }));\n    this._register(this._textAreaInput.onBlur(() => {\n      this._context.model.setHasFocus(false);\n    }));\n  }\n  dispose() {\n    super.dispose();\n  }\n  _getWordBeforePosition(position) {\n    const lineContent = this._context.model.getLineContent(position.lineNumber);\n    const wordSeparators = getMapForWordSeparators(this._context.configuration.options.get(110 /* wordSeparators */));\n    let column = position.column;\n    let distance = 0;\n    while (column > 1) {\n      const charCode = lineContent.charCodeAt(column - 2);\n      const charClass = wordSeparators.get(charCode);\n      if (charClass !== 0 /* Regular */ || distance > 50) {\n        return lineContent.substring(column - 1, position.column - 1);\n      }\n      distance++;\n      column--;\n    }\n    return lineContent.substring(0, position.column - 1);\n  }\n  _getCharacterBeforePosition(position) {\n    if (position.column > 1) {\n      const lineContent = this._context.model.getLineContent(position.lineNumber);\n      const charBefore = lineContent.charAt(position.column - 2);\n      if (!strings.isHighSurrogate(charBefore.charCodeAt(0))) {\n        return charBefore;\n      }\n    }\n    return '';\n  }\n  _getAriaLabel(options) {\n    const accessibilitySupport = options.get(2 /* accessibilitySupport */);\n    if (accessibilitySupport === 1 /* Disabled */) {\n      return nls.localize('accessibilityOffAriaLabel', \"The editor is not accessible at this time. Press {0} for options.\", platform.isLinux ? 'Shift+Alt+F1' : 'Alt+F1');\n    }\n    return options.get(4 /* ariaLabel */);\n  }\n\n  _setAccessibilityOptions(options) {\n    this._accessibilitySupport = options.get(2 /* accessibilitySupport */);\n    const accessibilityPageSize = options.get(3 /* accessibilityPageSize */);\n    if (this._accessibilitySupport === 2 /* Enabled */ && accessibilityPageSize === EditorOptions.accessibilityPageSize.defaultValue) {\n      // If a screen reader is attached and the default value is not set we shuold automatically increase the page size to 100 for a better experience\n      // If we put more than 100 lines the nvda can not handle this https://github.com/microsoft/vscode/issues/89717\n      this._accessibilityPageSize = 100;\n    } else {\n      this._accessibilityPageSize = accessibilityPageSize;\n    }\n  }\n  // --- begin event handlers\n  onConfigurationChanged(e) {\n    const options = this._context.configuration.options;\n    const layoutInfo = options.get(124 /* layoutInfo */);\n    this._setAccessibilityOptions(options);\n    this._contentLeft = layoutInfo.contentLeft;\n    this._contentWidth = layoutInfo.contentWidth;\n    this._contentHeight = layoutInfo.height;\n    this._fontInfo = options.get(38 /* fontInfo */);\n    this._lineHeight = options.get(53 /* lineHeight */);\n    this._emptySelectionClipboard = options.get(28 /* emptySelectionClipboard */);\n    this._copyWithSyntaxHighlighting = options.get(18 /* copyWithSyntaxHighlighting */);\n    this.textArea.setAttribute('aria-label', this._getAriaLabel(options));\n    this.textArea.setAttribute('tabindex', String(options.get(107 /* tabIndex */)));\n    if (platform.isWeb && e.hasChanged(75 /* readOnly */)) {\n      if (options.get(75 /* readOnly */)) {\n        this.textArea.setAttribute('readonly', 'true');\n      } else {\n        this.textArea.removeAttribute('readonly');\n      }\n    }\n    if (e.hasChanged(2 /* accessibilitySupport */)) {\n      this._textAreaInput.writeScreenReaderContent('strategy changed');\n    }\n    return true;\n  }\n  onCursorStateChanged(e) {\n    this._selections = e.selections.slice(0);\n    this._modelSelections = e.modelSelections.slice(0);\n    this._textAreaInput.writeScreenReaderContent('selection changed');\n    return true;\n  }\n  onDecorationsChanged(e) {\n    // true for inline decorations that can end up relayouting text\n    return true;\n  }\n  onFlushed(e) {\n    return true;\n  }\n  onLinesChanged(e) {\n    return true;\n  }\n  onLinesDeleted(e) {\n    return true;\n  }\n  onLinesInserted(e) {\n    return true;\n  }\n  onScrollChanged(e) {\n    this._scrollLeft = e.scrollLeft;\n    this._scrollTop = e.scrollTop;\n    return true;\n  }\n  onZonesChanged(e) {\n    return true;\n  }\n  // --- end event handlers\n  // --- begin view API\n  isFocused() {\n    return this._textAreaInput.isFocused();\n  }\n  focusTextArea() {\n    this._textAreaInput.focusTextArea();\n  }\n  getLastRenderData() {\n    return this._lastRenderPosition;\n  }\n  setAriaOptions(options) {\n    if (options.activeDescendant) {\n      this.textArea.setAttribute('aria-haspopup', 'true');\n      this.textArea.setAttribute('aria-autocomplete', 'list');\n      this.textArea.setAttribute('aria-activedescendant', options.activeDescendant);\n    } else {\n      this.textArea.setAttribute('aria-haspopup', 'false');\n      this.textArea.setAttribute('aria-autocomplete', 'both');\n      this.textArea.removeAttribute('aria-activedescendant');\n    }\n    if (options.role) {\n      this.textArea.setAttribute('role', options.role);\n    }\n  }\n  prepareRender(ctx) {\n    this._primaryCursorPosition = new Position(this._selections[0].positionLineNumber, this._selections[0].positionColumn);\n    this._primaryCursorVisibleRange = ctx.visibleRangeForPosition(this._primaryCursorPosition);\n  }\n  render(ctx) {\n    this._textAreaInput.writeScreenReaderContent('render');\n    this._render();\n  }\n  _render() {\n    if (this._visibleTextArea) {\n      // The text area is visible for composition reasons\n      this._renderInsideEditor(null, this._visibleTextArea.top - this._scrollTop, this._contentLeft + this._visibleTextArea.left - this._scrollLeft, this._visibleTextArea.width, this._lineHeight);\n      return;\n    }\n    if (!this._primaryCursorVisibleRange) {\n      // The primary cursor is outside the viewport => place textarea to the top left\n      this._renderAtTopLeft();\n      return;\n    }\n    const left = this._contentLeft + this._primaryCursorVisibleRange.left - this._scrollLeft;\n    if (left < this._contentLeft || left > this._contentLeft + this._contentWidth) {\n      // cursor is outside the viewport\n      this._renderAtTopLeft();\n      return;\n    }\n    const top = this._context.viewLayout.getVerticalOffsetForLineNumber(this._selections[0].positionLineNumber) - this._scrollTop;\n    if (top < 0 || top > this._contentHeight) {\n      // cursor is outside the viewport\n      this._renderAtTopLeft();\n      return;\n    }\n    // The primary cursor is in the viewport (at least vertically) => place textarea on the cursor\n    if (platform.isMacintosh) {\n      // For the popup emoji input, we will make the text area as high as the line height\n      // We will also make the fontSize and lineHeight the correct dimensions to help with the placement of these pickers\n      this._renderInsideEditor(this._primaryCursorPosition, top, left, canUseZeroSizeTextarea ? 0 : 1, this._lineHeight);\n      return;\n    }\n    this._renderInsideEditor(this._primaryCursorPosition, top, left, canUseZeroSizeTextarea ? 0 : 1, canUseZeroSizeTextarea ? 0 : 1);\n  }\n  _renderInsideEditor(renderedPosition, top, left, width, height) {\n    this._lastRenderPosition = renderedPosition;\n    const ta = this.textArea;\n    const tac = this.textAreaCover;\n    Configuration.applyFontInfo(ta, this._fontInfo);\n    ta.setTop(top);\n    ta.setLeft(left);\n    ta.setWidth(width);\n    ta.setHeight(height);\n    tac.setTop(0);\n    tac.setLeft(0);\n    tac.setWidth(0);\n    tac.setHeight(0);\n  }\n  _renderAtTopLeft() {\n    this._lastRenderPosition = null;\n    const ta = this.textArea;\n    const tac = this.textAreaCover;\n    Configuration.applyFontInfo(ta, this._fontInfo);\n    ta.setTop(0);\n    ta.setLeft(0);\n    tac.setTop(0);\n    tac.setLeft(0);\n    if (canUseZeroSizeTextarea) {\n      ta.setWidth(0);\n      ta.setHeight(0);\n      tac.setWidth(0);\n      tac.setHeight(0);\n      return;\n    }\n    // (in WebKit the textarea is 1px by 1px because it cannot handle input to a 0x0 textarea)\n    // specifically, when doing Korean IME, setting the textarea to 0x0 breaks IME badly.\n    ta.setWidth(1);\n    ta.setHeight(1);\n    tac.setWidth(1);\n    tac.setHeight(1);\n    const options = this._context.configuration.options;\n    if (options.get(44 /* glyphMargin */)) {\n      tac.setClassName('monaco-editor-background textAreaCover ' + Margin.OUTER_CLASS_NAME);\n    } else {\n      if (options.get(54 /* lineNumbers */).renderType !== 0 /* Off */) {\n        tac.setClassName('monaco-editor-background textAreaCover ' + LineNumbersOverlay.CLASS_NAME);\n      } else {\n        tac.setClassName('monaco-editor-background textAreaCover');\n      }\n    }\n  }\n}\nfunction measureText(text, fontInfo) {\n  // adjust width by its size\n  const canvasElem = document.createElement('canvas');\n  const context = canvasElem.getContext('2d');\n  context.font = createFontString(fontInfo);\n  const metrics = context.measureText(text);\n  if (browser.isFirefox) {\n    return metrics.width + 2; // +2 for Japanese...\n  } else {\n    return metrics.width;\n  }\n}\nfunction createFontString(bareFontInfo) {\n  return doCreateFontString('normal', bareFontInfo.fontWeight, bareFontInfo.fontSize, bareFontInfo.lineHeight, bareFontInfo.fontFamily);\n}\nfunction doCreateFontString(fontStyle, fontWeight, fontSize, lineHeight, fontFamily) {\n  // The full font syntax is:\n  // style | variant | weight | stretch | size/line-height | fontFamily\n  // (https://developer.mozilla.org/en-US/docs/Web/CSS/font)\n  // But it appears Edge and IE11 cannot properly parse `stretch`.\n  return \"\".concat(fontStyle, \" normal \").concat(fontWeight, \" \").concat(fontSize, \"px / \").concat(lineHeight, \"px \").concat(fontFamily);\n}","map":{"version":3,"names":["nls","browser","createFastDomNode","platform","strings","Configuration","CopyOptions","TextAreaInput","PagedScreenReaderStrategy","TextAreaState","PartFingerprints","ViewPart","LineNumbersOverlay","Margin","EditorOptions","getMapForWordSeparators","Position","Range","Selection","MOUSE_CURSOR_TEXT_CSS_CLASS_NAME","VisibleTextAreaData","constructor","top","left","width","setWidth","canUseZeroSizeTextarea","isFirefox","TextAreaHandler","context","viewController","viewHelper","_primaryCursorPosition","_primaryCursorVisibleRange","_viewController","_viewHelper","_scrollLeft","_scrollTop","options","_context","configuration","layoutInfo","get","_setAccessibilityOptions","_contentLeft","contentLeft","_contentWidth","contentWidth","_contentHeight","height","_fontInfo","_lineHeight","_emptySelectionClipboard","_copyWithSyntaxHighlighting","_visibleTextArea","_selections","_modelSelections","_lastRenderPosition","textArea","document","createElement","write","setClassName","concat","setAttribute","_getAriaLabel","String","localize","isWeb","textAreaCover","setPosition","simpleModel","getLineCount","model","getLineMaxColumn","lineNumber","getValueInRange","range","eol","textAreaInputHost","getDataToCopy","generateHTML","rawTextToCopy","getPlainTextToCopy","isWindows","newLineCharacter","getEOL","isFromEmptySelection","length","isEmpty","multicursorText","Array","isArray","text","join","html","undefined","mode","forceCopyWithSyntaxHighlighting","richText","getRichTextToCopy","getScreenReaderContent","currentState","_accessibilitySupport","isMacintosh","selection","position","getStartPosition","textBefore","_getWordBeforePosition","_getCharacterBeforePosition","EMPTY","fromEditorSelection","_accessibilityPageSize","deduceModelPosition","viewAnchorPosition","deltaOffset","lineFeedCnt","deduceModelPositionRelativeToViewPosition","_textAreaInput","_register","onKeyDown","e","emitKeyDown","onKeyUp","emitKeyUp","onPaste","pasteOnNewLine","metadata","paste","onCut","cut","onType","replaceCharCnt","replacePreviousChar","type","onSelectionChangeRequest","modelSelection","setSelection","onCompositionStart","startLineNumber","column","startColumn","moveOneCharacterLeft","revealRange","visibleRange","visibleRangeForPositionRelativeToEditor","viewLayout","getVerticalOffsetForLineNumber","_render","compositionStart","onCompositionUpdate","measureText","data","onCompositionEnd","compositionEnd","onFocus","setHasFocus","onBlur","dispose","lineContent","getLineContent","wordSeparators","distance","charCode","charCodeAt","charClass","substring","charBefore","charAt","isHighSurrogate","accessibilitySupport","isLinux","accessibilityPageSize","defaultValue","onConfigurationChanged","hasChanged","removeAttribute","writeScreenReaderContent","onCursorStateChanged","selections","slice","modelSelections","onDecorationsChanged","onFlushed","onLinesChanged","onLinesDeleted","onLinesInserted","onScrollChanged","scrollLeft","scrollTop","onZonesChanged","isFocused","focusTextArea","getLastRenderData","setAriaOptions","activeDescendant","role","prepareRender","ctx","positionLineNumber","positionColumn","visibleRangeForPosition","render","_renderInsideEditor","_renderAtTopLeft","renderedPosition","ta","tac","applyFontInfo","setTop","setLeft","setHeight","OUTER_CLASS_NAME","renderType","CLASS_NAME","fontInfo","canvasElem","getContext","font","createFontString","metrics","bareFontInfo","doCreateFontString","fontWeight","fontSize","lineHeight","fontFamily","fontStyle"],"sources":["C:/Users/Administrator/Desktop/sqllineage-master/sqllineagejs/node_modules/monaco-editor/esm/vs/editor/browser/controller/textAreaHandler.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport './textAreaHandler.css';\r\nimport * as nls from '../../../nls.js';\r\nimport * as browser from '../../../base/browser/browser.js';\r\nimport { createFastDomNode } from '../../../base/browser/fastDomNode.js';\r\nimport * as platform from '../../../base/common/platform.js';\r\nimport * as strings from '../../../base/common/strings.js';\r\nimport { Configuration } from '../config/configuration.js';\r\nimport { CopyOptions, TextAreaInput } from './textAreaInput.js';\r\nimport { PagedScreenReaderStrategy, TextAreaState } from './textAreaState.js';\r\nimport { PartFingerprints, ViewPart } from '../view/viewPart.js';\r\nimport { LineNumbersOverlay } from '../viewParts/lineNumbers/lineNumbers.js';\r\nimport { Margin } from '../viewParts/margin/margin.js';\r\nimport { EditorOptions } from '../../common/config/editorOptions.js';\r\nimport { getMapForWordSeparators } from '../../common/controller/wordCharacterClassifier.js';\r\nimport { Position } from '../../common/core/position.js';\r\nimport { Range } from '../../common/core/range.js';\r\nimport { Selection } from '../../common/core/selection.js';\r\nimport { MOUSE_CURSOR_TEXT_CSS_CLASS_NAME } from '../../../base/browser/ui/mouseCursor/mouseCursor.js';\r\nclass VisibleTextAreaData {\r\n    constructor(top, left, width) {\r\n        this.top = top;\r\n        this.left = left;\r\n        this.width = width;\r\n    }\r\n    setWidth(width) {\r\n        return new VisibleTextAreaData(this.top, this.left, width);\r\n    }\r\n}\r\nconst canUseZeroSizeTextarea = (browser.isFirefox);\r\nexport class TextAreaHandler extends ViewPart {\r\n    constructor(context, viewController, viewHelper) {\r\n        super(context);\r\n        // --- end view API\r\n        this._primaryCursorPosition = new Position(1, 1);\r\n        this._primaryCursorVisibleRange = null;\r\n        this._viewController = viewController;\r\n        this._viewHelper = viewHelper;\r\n        this._scrollLeft = 0;\r\n        this._scrollTop = 0;\r\n        const options = this._context.configuration.options;\r\n        const layoutInfo = options.get(124 /* layoutInfo */);\r\n        this._setAccessibilityOptions(options);\r\n        this._contentLeft = layoutInfo.contentLeft;\r\n        this._contentWidth = layoutInfo.contentWidth;\r\n        this._contentHeight = layoutInfo.height;\r\n        this._fontInfo = options.get(38 /* fontInfo */);\r\n        this._lineHeight = options.get(53 /* lineHeight */);\r\n        this._emptySelectionClipboard = options.get(28 /* emptySelectionClipboard */);\r\n        this._copyWithSyntaxHighlighting = options.get(18 /* copyWithSyntaxHighlighting */);\r\n        this._visibleTextArea = null;\r\n        this._selections = [new Selection(1, 1, 1, 1)];\r\n        this._modelSelections = [new Selection(1, 1, 1, 1)];\r\n        this._lastRenderPosition = null;\r\n        // Text Area (The focus will always be in the textarea when the cursor is blinking)\r\n        this.textArea = createFastDomNode(document.createElement('textarea'));\r\n        PartFingerprints.write(this.textArea, 6 /* TextArea */);\r\n        this.textArea.setClassName(`inputarea ${MOUSE_CURSOR_TEXT_CSS_CLASS_NAME}`);\r\n        this.textArea.setAttribute('wrap', 'off');\r\n        this.textArea.setAttribute('autocorrect', 'off');\r\n        this.textArea.setAttribute('autocapitalize', 'off');\r\n        this.textArea.setAttribute('autocomplete', 'off');\r\n        this.textArea.setAttribute('spellcheck', 'false');\r\n        this.textArea.setAttribute('aria-label', this._getAriaLabel(options));\r\n        this.textArea.setAttribute('tabindex', String(options.get(107 /* tabIndex */)));\r\n        this.textArea.setAttribute('role', 'textbox');\r\n        this.textArea.setAttribute('aria-roledescription', nls.localize('editor', \"editor\"));\r\n        this.textArea.setAttribute('aria-multiline', 'true');\r\n        this.textArea.setAttribute('aria-haspopup', 'false');\r\n        this.textArea.setAttribute('aria-autocomplete', 'both');\r\n        if (platform.isWeb && options.get(75 /* readOnly */)) {\r\n            this.textArea.setAttribute('readonly', 'true');\r\n        }\r\n        this.textAreaCover = createFastDomNode(document.createElement('div'));\r\n        this.textAreaCover.setPosition('absolute');\r\n        const simpleModel = {\r\n            getLineCount: () => {\r\n                return this._context.model.getLineCount();\r\n            },\r\n            getLineMaxColumn: (lineNumber) => {\r\n                return this._context.model.getLineMaxColumn(lineNumber);\r\n            },\r\n            getValueInRange: (range, eol) => {\r\n                return this._context.model.getValueInRange(range, eol);\r\n            }\r\n        };\r\n        const textAreaInputHost = {\r\n            getDataToCopy: (generateHTML) => {\r\n                const rawTextToCopy = this._context.model.getPlainTextToCopy(this._modelSelections, this._emptySelectionClipboard, platform.isWindows);\r\n                const newLineCharacter = this._context.model.getEOL();\r\n                const isFromEmptySelection = (this._emptySelectionClipboard && this._modelSelections.length === 1 && this._modelSelections[0].isEmpty());\r\n                const multicursorText = (Array.isArray(rawTextToCopy) ? rawTextToCopy : null);\r\n                const text = (Array.isArray(rawTextToCopy) ? rawTextToCopy.join(newLineCharacter) : rawTextToCopy);\r\n                let html = undefined;\r\n                let mode = null;\r\n                if (generateHTML) {\r\n                    if (CopyOptions.forceCopyWithSyntaxHighlighting || (this._copyWithSyntaxHighlighting && text.length < 65536)) {\r\n                        const richText = this._context.model.getRichTextToCopy(this._modelSelections, this._emptySelectionClipboard);\r\n                        if (richText) {\r\n                            html = richText.html;\r\n                            mode = richText.mode;\r\n                        }\r\n                    }\r\n                }\r\n                return {\r\n                    isFromEmptySelection,\r\n                    multicursorText,\r\n                    text,\r\n                    html,\r\n                    mode\r\n                };\r\n            },\r\n            getScreenReaderContent: (currentState) => {\r\n                if (this._accessibilitySupport === 1 /* Disabled */) {\r\n                    // We know for a fact that a screen reader is not attached\r\n                    // On OSX, we write the character before the cursor to allow for \"long-press\" composition\r\n                    // Also on OSX, we write the word before the cursor to allow for the Accessibility Keyboard to give good hints\r\n                    if (platform.isMacintosh) {\r\n                        const selection = this._selections[0];\r\n                        if (selection.isEmpty()) {\r\n                            const position = selection.getStartPosition();\r\n                            let textBefore = this._getWordBeforePosition(position);\r\n                            if (textBefore.length === 0) {\r\n                                textBefore = this._getCharacterBeforePosition(position);\r\n                            }\r\n                            if (textBefore.length > 0) {\r\n                                return new TextAreaState(textBefore, textBefore.length, textBefore.length, position, position);\r\n                            }\r\n                        }\r\n                    }\r\n                    return TextAreaState.EMPTY;\r\n                }\r\n                return PagedScreenReaderStrategy.fromEditorSelection(currentState, simpleModel, this._selections[0], this._accessibilityPageSize, this._accessibilitySupport === 0 /* Unknown */);\r\n            },\r\n            deduceModelPosition: (viewAnchorPosition, deltaOffset, lineFeedCnt) => {\r\n                return this._context.model.deduceModelPositionRelativeToViewPosition(viewAnchorPosition, deltaOffset, lineFeedCnt);\r\n            }\r\n        };\r\n        this._textAreaInput = this._register(new TextAreaInput(textAreaInputHost, this.textArea));\r\n        this._register(this._textAreaInput.onKeyDown((e) => {\r\n            this._viewController.emitKeyDown(e);\r\n        }));\r\n        this._register(this._textAreaInput.onKeyUp((e) => {\r\n            this._viewController.emitKeyUp(e);\r\n        }));\r\n        this._register(this._textAreaInput.onPaste((e) => {\r\n            let pasteOnNewLine = false;\r\n            let multicursorText = null;\r\n            let mode = null;\r\n            if (e.metadata) {\r\n                pasteOnNewLine = (this._emptySelectionClipboard && !!e.metadata.isFromEmptySelection);\r\n                multicursorText = (typeof e.metadata.multicursorText !== 'undefined' ? e.metadata.multicursorText : null);\r\n                mode = e.metadata.mode;\r\n            }\r\n            this._viewController.paste(e.text, pasteOnNewLine, multicursorText, mode);\r\n        }));\r\n        this._register(this._textAreaInput.onCut(() => {\r\n            this._viewController.cut();\r\n        }));\r\n        this._register(this._textAreaInput.onType((e) => {\r\n            if (e.replaceCharCnt) {\r\n                this._viewController.replacePreviousChar(e.text, e.replaceCharCnt);\r\n            }\r\n            else {\r\n                this._viewController.type(e.text);\r\n            }\r\n        }));\r\n        this._register(this._textAreaInput.onSelectionChangeRequest((modelSelection) => {\r\n            this._viewController.setSelection(modelSelection);\r\n        }));\r\n        this._register(this._textAreaInput.onCompositionStart((e) => {\r\n            const lineNumber = this._selections[0].startLineNumber;\r\n            const column = this._selections[0].startColumn - (e.moveOneCharacterLeft ? 1 : 0);\r\n            this._context.model.revealRange('keyboard', true, new Range(lineNumber, column, lineNumber, column), 0 /* Simple */, 1 /* Immediate */);\r\n            // Find range pixel position\r\n            const visibleRange = this._viewHelper.visibleRangeForPositionRelativeToEditor(lineNumber, column);\r\n            if (visibleRange) {\r\n                this._visibleTextArea = new VisibleTextAreaData(this._context.viewLayout.getVerticalOffsetForLineNumber(lineNumber), visibleRange.left, canUseZeroSizeTextarea ? 0 : 1);\r\n                this._render();\r\n            }\r\n            // Show the textarea\r\n            this.textArea.setClassName(`inputarea ${MOUSE_CURSOR_TEXT_CSS_CLASS_NAME} ime-input`);\r\n            this._viewController.compositionStart();\r\n            this._context.model.onCompositionStart();\r\n        }));\r\n        this._register(this._textAreaInput.onCompositionUpdate((e) => {\r\n            // adjust width by its size\r\n            this._visibleTextArea = this._visibleTextArea.setWidth(measureText(e.data, this._fontInfo));\r\n            this._render();\r\n        }));\r\n        this._register(this._textAreaInput.onCompositionEnd(() => {\r\n            this._visibleTextArea = null;\r\n            this._render();\r\n            this.textArea.setClassName(`inputarea ${MOUSE_CURSOR_TEXT_CSS_CLASS_NAME}`);\r\n            this._viewController.compositionEnd();\r\n            this._context.model.onCompositionEnd();\r\n        }));\r\n        this._register(this._textAreaInput.onFocus(() => {\r\n            this._context.model.setHasFocus(true);\r\n        }));\r\n        this._register(this._textAreaInput.onBlur(() => {\r\n            this._context.model.setHasFocus(false);\r\n        }));\r\n    }\r\n    dispose() {\r\n        super.dispose();\r\n    }\r\n    _getWordBeforePosition(position) {\r\n        const lineContent = this._context.model.getLineContent(position.lineNumber);\r\n        const wordSeparators = getMapForWordSeparators(this._context.configuration.options.get(110 /* wordSeparators */));\r\n        let column = position.column;\r\n        let distance = 0;\r\n        while (column > 1) {\r\n            const charCode = lineContent.charCodeAt(column - 2);\r\n            const charClass = wordSeparators.get(charCode);\r\n            if (charClass !== 0 /* Regular */ || distance > 50) {\r\n                return lineContent.substring(column - 1, position.column - 1);\r\n            }\r\n            distance++;\r\n            column--;\r\n        }\r\n        return lineContent.substring(0, position.column - 1);\r\n    }\r\n    _getCharacterBeforePosition(position) {\r\n        if (position.column > 1) {\r\n            const lineContent = this._context.model.getLineContent(position.lineNumber);\r\n            const charBefore = lineContent.charAt(position.column - 2);\r\n            if (!strings.isHighSurrogate(charBefore.charCodeAt(0))) {\r\n                return charBefore;\r\n            }\r\n        }\r\n        return '';\r\n    }\r\n    _getAriaLabel(options) {\r\n        const accessibilitySupport = options.get(2 /* accessibilitySupport */);\r\n        if (accessibilitySupport === 1 /* Disabled */) {\r\n            return nls.localize('accessibilityOffAriaLabel', \"The editor is not accessible at this time. Press {0} for options.\", platform.isLinux ? 'Shift+Alt+F1' : 'Alt+F1');\r\n        }\r\n        return options.get(4 /* ariaLabel */);\r\n    }\r\n    _setAccessibilityOptions(options) {\r\n        this._accessibilitySupport = options.get(2 /* accessibilitySupport */);\r\n        const accessibilityPageSize = options.get(3 /* accessibilityPageSize */);\r\n        if (this._accessibilitySupport === 2 /* Enabled */ && accessibilityPageSize === EditorOptions.accessibilityPageSize.defaultValue) {\r\n            // If a screen reader is attached and the default value is not set we shuold automatically increase the page size to 100 for a better experience\r\n            // If we put more than 100 lines the nvda can not handle this https://github.com/microsoft/vscode/issues/89717\r\n            this._accessibilityPageSize = 100;\r\n        }\r\n        else {\r\n            this._accessibilityPageSize = accessibilityPageSize;\r\n        }\r\n    }\r\n    // --- begin event handlers\r\n    onConfigurationChanged(e) {\r\n        const options = this._context.configuration.options;\r\n        const layoutInfo = options.get(124 /* layoutInfo */);\r\n        this._setAccessibilityOptions(options);\r\n        this._contentLeft = layoutInfo.contentLeft;\r\n        this._contentWidth = layoutInfo.contentWidth;\r\n        this._contentHeight = layoutInfo.height;\r\n        this._fontInfo = options.get(38 /* fontInfo */);\r\n        this._lineHeight = options.get(53 /* lineHeight */);\r\n        this._emptySelectionClipboard = options.get(28 /* emptySelectionClipboard */);\r\n        this._copyWithSyntaxHighlighting = options.get(18 /* copyWithSyntaxHighlighting */);\r\n        this.textArea.setAttribute('aria-label', this._getAriaLabel(options));\r\n        this.textArea.setAttribute('tabindex', String(options.get(107 /* tabIndex */)));\r\n        if (platform.isWeb && e.hasChanged(75 /* readOnly */)) {\r\n            if (options.get(75 /* readOnly */)) {\r\n                this.textArea.setAttribute('readonly', 'true');\r\n            }\r\n            else {\r\n                this.textArea.removeAttribute('readonly');\r\n            }\r\n        }\r\n        if (e.hasChanged(2 /* accessibilitySupport */)) {\r\n            this._textAreaInput.writeScreenReaderContent('strategy changed');\r\n        }\r\n        return true;\r\n    }\r\n    onCursorStateChanged(e) {\r\n        this._selections = e.selections.slice(0);\r\n        this._modelSelections = e.modelSelections.slice(0);\r\n        this._textAreaInput.writeScreenReaderContent('selection changed');\r\n        return true;\r\n    }\r\n    onDecorationsChanged(e) {\r\n        // true for inline decorations that can end up relayouting text\r\n        return true;\r\n    }\r\n    onFlushed(e) {\r\n        return true;\r\n    }\r\n    onLinesChanged(e) {\r\n        return true;\r\n    }\r\n    onLinesDeleted(e) {\r\n        return true;\r\n    }\r\n    onLinesInserted(e) {\r\n        return true;\r\n    }\r\n    onScrollChanged(e) {\r\n        this._scrollLeft = e.scrollLeft;\r\n        this._scrollTop = e.scrollTop;\r\n        return true;\r\n    }\r\n    onZonesChanged(e) {\r\n        return true;\r\n    }\r\n    // --- end event handlers\r\n    // --- begin view API\r\n    isFocused() {\r\n        return this._textAreaInput.isFocused();\r\n    }\r\n    focusTextArea() {\r\n        this._textAreaInput.focusTextArea();\r\n    }\r\n    getLastRenderData() {\r\n        return this._lastRenderPosition;\r\n    }\r\n    setAriaOptions(options) {\r\n        if (options.activeDescendant) {\r\n            this.textArea.setAttribute('aria-haspopup', 'true');\r\n            this.textArea.setAttribute('aria-autocomplete', 'list');\r\n            this.textArea.setAttribute('aria-activedescendant', options.activeDescendant);\r\n        }\r\n        else {\r\n            this.textArea.setAttribute('aria-haspopup', 'false');\r\n            this.textArea.setAttribute('aria-autocomplete', 'both');\r\n            this.textArea.removeAttribute('aria-activedescendant');\r\n        }\r\n        if (options.role) {\r\n            this.textArea.setAttribute('role', options.role);\r\n        }\r\n    }\r\n    prepareRender(ctx) {\r\n        this._primaryCursorPosition = new Position(this._selections[0].positionLineNumber, this._selections[0].positionColumn);\r\n        this._primaryCursorVisibleRange = ctx.visibleRangeForPosition(this._primaryCursorPosition);\r\n    }\r\n    render(ctx) {\r\n        this._textAreaInput.writeScreenReaderContent('render');\r\n        this._render();\r\n    }\r\n    _render() {\r\n        if (this._visibleTextArea) {\r\n            // The text area is visible for composition reasons\r\n            this._renderInsideEditor(null, this._visibleTextArea.top - this._scrollTop, this._contentLeft + this._visibleTextArea.left - this._scrollLeft, this._visibleTextArea.width, this._lineHeight);\r\n            return;\r\n        }\r\n        if (!this._primaryCursorVisibleRange) {\r\n            // The primary cursor is outside the viewport => place textarea to the top left\r\n            this._renderAtTopLeft();\r\n            return;\r\n        }\r\n        const left = this._contentLeft + this._primaryCursorVisibleRange.left - this._scrollLeft;\r\n        if (left < this._contentLeft || left > this._contentLeft + this._contentWidth) {\r\n            // cursor is outside the viewport\r\n            this._renderAtTopLeft();\r\n            return;\r\n        }\r\n        const top = this._context.viewLayout.getVerticalOffsetForLineNumber(this._selections[0].positionLineNumber) - this._scrollTop;\r\n        if (top < 0 || top > this._contentHeight) {\r\n            // cursor is outside the viewport\r\n            this._renderAtTopLeft();\r\n            return;\r\n        }\r\n        // The primary cursor is in the viewport (at least vertically) => place textarea on the cursor\r\n        if (platform.isMacintosh) {\r\n            // For the popup emoji input, we will make the text area as high as the line height\r\n            // We will also make the fontSize and lineHeight the correct dimensions to help with the placement of these pickers\r\n            this._renderInsideEditor(this._primaryCursorPosition, top, left, canUseZeroSizeTextarea ? 0 : 1, this._lineHeight);\r\n            return;\r\n        }\r\n        this._renderInsideEditor(this._primaryCursorPosition, top, left, canUseZeroSizeTextarea ? 0 : 1, canUseZeroSizeTextarea ? 0 : 1);\r\n    }\r\n    _renderInsideEditor(renderedPosition, top, left, width, height) {\r\n        this._lastRenderPosition = renderedPosition;\r\n        const ta = this.textArea;\r\n        const tac = this.textAreaCover;\r\n        Configuration.applyFontInfo(ta, this._fontInfo);\r\n        ta.setTop(top);\r\n        ta.setLeft(left);\r\n        ta.setWidth(width);\r\n        ta.setHeight(height);\r\n        tac.setTop(0);\r\n        tac.setLeft(0);\r\n        tac.setWidth(0);\r\n        tac.setHeight(0);\r\n    }\r\n    _renderAtTopLeft() {\r\n        this._lastRenderPosition = null;\r\n        const ta = this.textArea;\r\n        const tac = this.textAreaCover;\r\n        Configuration.applyFontInfo(ta, this._fontInfo);\r\n        ta.setTop(0);\r\n        ta.setLeft(0);\r\n        tac.setTop(0);\r\n        tac.setLeft(0);\r\n        if (canUseZeroSizeTextarea) {\r\n            ta.setWidth(0);\r\n            ta.setHeight(0);\r\n            tac.setWidth(0);\r\n            tac.setHeight(0);\r\n            return;\r\n        }\r\n        // (in WebKit the textarea is 1px by 1px because it cannot handle input to a 0x0 textarea)\r\n        // specifically, when doing Korean IME, setting the textarea to 0x0 breaks IME badly.\r\n        ta.setWidth(1);\r\n        ta.setHeight(1);\r\n        tac.setWidth(1);\r\n        tac.setHeight(1);\r\n        const options = this._context.configuration.options;\r\n        if (options.get(44 /* glyphMargin */)) {\r\n            tac.setClassName('monaco-editor-background textAreaCover ' + Margin.OUTER_CLASS_NAME);\r\n        }\r\n        else {\r\n            if (options.get(54 /* lineNumbers */).renderType !== 0 /* Off */) {\r\n                tac.setClassName('monaco-editor-background textAreaCover ' + LineNumbersOverlay.CLASS_NAME);\r\n            }\r\n            else {\r\n                tac.setClassName('monaco-editor-background textAreaCover');\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction measureText(text, fontInfo) {\r\n    // adjust width by its size\r\n    const canvasElem = document.createElement('canvas');\r\n    const context = canvasElem.getContext('2d');\r\n    context.font = createFontString(fontInfo);\r\n    const metrics = context.measureText(text);\r\n    if (browser.isFirefox) {\r\n        return metrics.width + 2; // +2 for Japanese...\r\n    }\r\n    else {\r\n        return metrics.width;\r\n    }\r\n}\r\nfunction createFontString(bareFontInfo) {\r\n    return doCreateFontString('normal', bareFontInfo.fontWeight, bareFontInfo.fontSize, bareFontInfo.lineHeight, bareFontInfo.fontFamily);\r\n}\r\nfunction doCreateFontString(fontStyle, fontWeight, fontSize, lineHeight, fontFamily) {\r\n    // The full font syntax is:\r\n    // style | variant | weight | stretch | size/line-height | fontFamily\r\n    // (https://developer.mozilla.org/en-US/docs/Web/CSS/font)\r\n    // But it appears Edge and IE11 cannot properly parse `stretch`.\r\n    return `${fontStyle} normal ${fontWeight} ${fontSize}px / ${lineHeight}px ${fontFamily}`;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}