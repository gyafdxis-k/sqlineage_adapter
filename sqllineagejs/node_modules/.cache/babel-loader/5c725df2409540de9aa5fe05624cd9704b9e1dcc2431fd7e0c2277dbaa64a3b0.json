{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { CursorColumns } from './cursorCommon.js';\nexport class AtomicTabMoveOperations {\n  /**\r\n   * Get the visible column at the position. If we get to a non-whitespace character first\r\n   * or past the end of string then return -1.\r\n   *\r\n   * **Note** `position` and the return value are 0-based.\r\n   */\n  static whitespaceVisibleColumn(lineContent, position, tabSize) {\n    const lineLength = lineContent.length;\n    let visibleColumn = 0;\n    let prevTabStopPosition = -1;\n    let prevTabStopVisibleColumn = -1;\n    for (let i = 0; i < lineLength; i++) {\n      if (i === position) {\n        return [prevTabStopPosition, prevTabStopVisibleColumn, visibleColumn];\n      }\n      if (visibleColumn % tabSize === 0) {\n        prevTabStopPosition = i;\n        prevTabStopVisibleColumn = visibleColumn;\n      }\n      const chCode = lineContent.charCodeAt(i);\n      switch (chCode) {\n        case 32 /* Space */:\n          visibleColumn += 1;\n          break;\n        case 9 /* Tab */:\n          // Skip to the next multiple of tabSize.\n          visibleColumn = CursorColumns.nextRenderTabStop(visibleColumn, tabSize);\n          break;\n        default:\n          return [-1, -1, -1];\n      }\n    }\n    if (position === lineLength) {\n      return [prevTabStopPosition, prevTabStopVisibleColumn, visibleColumn];\n    }\n    return [-1, -1, -1];\n  }\n  /**\r\n   * Return the position that should result from a move left, right or to the\r\n   * nearest tab, if atomic tabs are enabled. Left and right are used for the\r\n   * arrow key movements, nearest is used for mouse selection. It returns\r\n   * -1 if atomic tabs are not relevant and you should fall back to normal\r\n   * behaviour.\r\n   *\r\n   * **Note**: `position` and the return value are 0-based.\r\n   */\n  static atomicPosition(lineContent, position, tabSize, direction) {\n    const lineLength = lineContent.length;\n    // Get the 0-based visible column corresponding to the position, or return\n    // -1 if it is not in the initial whitespace.\n    const [prevTabStopPosition, prevTabStopVisibleColumn, visibleColumn] = AtomicTabMoveOperations.whitespaceVisibleColumn(lineContent, position, tabSize);\n    if (visibleColumn === -1) {\n      return -1;\n    }\n    // Is the output left or right of the current position. The case for nearest\n    // where it is the same as the current position is handled in the switch.\n    let left;\n    switch (direction) {\n      case 0 /* Left */:\n        left = true;\n        break;\n      case 1 /* Right */:\n        left = false;\n        break;\n      case 2 /* Nearest */:\n        // The code below assumes the output position is either left or right\n        // of the input position. If it is the same, return immediately.\n        if (visibleColumn % tabSize === 0) {\n          return position;\n        }\n        // Go to the nearest indentation.\n        left = visibleColumn % tabSize <= tabSize / 2;\n        break;\n    }\n    // If going left, we can just use the info about the last tab stop position and\n    // last tab stop visible column that we computed in the first walk over the whitespace.\n    if (left) {\n      if (prevTabStopPosition === -1) {\n        return -1;\n      }\n      // If the direction is left, we need to keep scanning right to ensure\n      // that targetVisibleColumn + tabSize is before non-whitespace.\n      // This is so that when we press left at the end of a partial\n      // indentation it only goes one character. For example '      foo' with\n      // tabSize 4, should jump from position 6 to position 5, not 4.\n      let currentVisibleColumn = prevTabStopVisibleColumn;\n      for (let i = prevTabStopPosition; i < lineLength; ++i) {\n        if (currentVisibleColumn === prevTabStopVisibleColumn + tabSize) {\n          // It is a full indentation.\n          return prevTabStopPosition;\n        }\n        const chCode = lineContent.charCodeAt(i);\n        switch (chCode) {\n          case 32 /* Space */:\n            currentVisibleColumn += 1;\n            break;\n          case 9 /* Tab */:\n            currentVisibleColumn = CursorColumns.nextRenderTabStop(currentVisibleColumn, tabSize);\n            break;\n          default:\n            return -1;\n        }\n      }\n      if (currentVisibleColumn === prevTabStopVisibleColumn + tabSize) {\n        return prevTabStopPosition;\n      }\n      // It must have been a partial indentation.\n      return -1;\n    }\n    // We are going right.\n    const targetVisibleColumn = CursorColumns.nextRenderTabStop(visibleColumn, tabSize);\n    // We can just continue from where whitespaceVisibleColumn got to.\n    let currentVisibleColumn = visibleColumn;\n    for (let i = position; i < lineLength; i++) {\n      if (currentVisibleColumn === targetVisibleColumn) {\n        return i;\n      }\n      const chCode = lineContent.charCodeAt(i);\n      switch (chCode) {\n        case 32 /* Space */:\n          currentVisibleColumn += 1;\n          break;\n        case 9 /* Tab */:\n          currentVisibleColumn = CursorColumns.nextRenderTabStop(currentVisibleColumn, tabSize);\n          break;\n        default:\n          return -1;\n      }\n    }\n    // This condition handles when the target column is at the end of the line.\n    if (currentVisibleColumn === targetVisibleColumn) {\n      return lineLength;\n    }\n    return -1;\n  }\n}","map":{"version":3,"names":["CursorColumns","AtomicTabMoveOperations","whitespaceVisibleColumn","lineContent","position","tabSize","lineLength","length","visibleColumn","prevTabStopPosition","prevTabStopVisibleColumn","i","chCode","charCodeAt","nextRenderTabStop","atomicPosition","direction","left","currentVisibleColumn","targetVisibleColumn"],"sources":["C:/Users/Administrator/Desktop/sqllineage-master/sqllineagejs/node_modules/monaco-editor/esm/vs/editor/common/controller/cursorAtomicMoveOperations.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { CursorColumns } from './cursorCommon.js';\r\nexport class AtomicTabMoveOperations {\r\n    /**\r\n     * Get the visible column at the position. If we get to a non-whitespace character first\r\n     * or past the end of string then return -1.\r\n     *\r\n     * **Note** `position` and the return value are 0-based.\r\n     */\r\n    static whitespaceVisibleColumn(lineContent, position, tabSize) {\r\n        const lineLength = lineContent.length;\r\n        let visibleColumn = 0;\r\n        let prevTabStopPosition = -1;\r\n        let prevTabStopVisibleColumn = -1;\r\n        for (let i = 0; i < lineLength; i++) {\r\n            if (i === position) {\r\n                return [prevTabStopPosition, prevTabStopVisibleColumn, visibleColumn];\r\n            }\r\n            if (visibleColumn % tabSize === 0) {\r\n                prevTabStopPosition = i;\r\n                prevTabStopVisibleColumn = visibleColumn;\r\n            }\r\n            const chCode = lineContent.charCodeAt(i);\r\n            switch (chCode) {\r\n                case 32 /* Space */:\r\n                    visibleColumn += 1;\r\n                    break;\r\n                case 9 /* Tab */:\r\n                    // Skip to the next multiple of tabSize.\r\n                    visibleColumn = CursorColumns.nextRenderTabStop(visibleColumn, tabSize);\r\n                    break;\r\n                default:\r\n                    return [-1, -1, -1];\r\n            }\r\n        }\r\n        if (position === lineLength) {\r\n            return [prevTabStopPosition, prevTabStopVisibleColumn, visibleColumn];\r\n        }\r\n        return [-1, -1, -1];\r\n    }\r\n    /**\r\n     * Return the position that should result from a move left, right or to the\r\n     * nearest tab, if atomic tabs are enabled. Left and right are used for the\r\n     * arrow key movements, nearest is used for mouse selection. It returns\r\n     * -1 if atomic tabs are not relevant and you should fall back to normal\r\n     * behaviour.\r\n     *\r\n     * **Note**: `position` and the return value are 0-based.\r\n     */\r\n    static atomicPosition(lineContent, position, tabSize, direction) {\r\n        const lineLength = lineContent.length;\r\n        // Get the 0-based visible column corresponding to the position, or return\r\n        // -1 if it is not in the initial whitespace.\r\n        const [prevTabStopPosition, prevTabStopVisibleColumn, visibleColumn] = AtomicTabMoveOperations.whitespaceVisibleColumn(lineContent, position, tabSize);\r\n        if (visibleColumn === -1) {\r\n            return -1;\r\n        }\r\n        // Is the output left or right of the current position. The case for nearest\r\n        // where it is the same as the current position is handled in the switch.\r\n        let left;\r\n        switch (direction) {\r\n            case 0 /* Left */:\r\n                left = true;\r\n                break;\r\n            case 1 /* Right */:\r\n                left = false;\r\n                break;\r\n            case 2 /* Nearest */:\r\n                // The code below assumes the output position is either left or right\r\n                // of the input position. If it is the same, return immediately.\r\n                if (visibleColumn % tabSize === 0) {\r\n                    return position;\r\n                }\r\n                // Go to the nearest indentation.\r\n                left = visibleColumn % tabSize <= (tabSize / 2);\r\n                break;\r\n        }\r\n        // If going left, we can just use the info about the last tab stop position and\r\n        // last tab stop visible column that we computed in the first walk over the whitespace.\r\n        if (left) {\r\n            if (prevTabStopPosition === -1) {\r\n                return -1;\r\n            }\r\n            // If the direction is left, we need to keep scanning right to ensure\r\n            // that targetVisibleColumn + tabSize is before non-whitespace.\r\n            // This is so that when we press left at the end of a partial\r\n            // indentation it only goes one character. For example '      foo' with\r\n            // tabSize 4, should jump from position 6 to position 5, not 4.\r\n            let currentVisibleColumn = prevTabStopVisibleColumn;\r\n            for (let i = prevTabStopPosition; i < lineLength; ++i) {\r\n                if (currentVisibleColumn === prevTabStopVisibleColumn + tabSize) {\r\n                    // It is a full indentation.\r\n                    return prevTabStopPosition;\r\n                }\r\n                const chCode = lineContent.charCodeAt(i);\r\n                switch (chCode) {\r\n                    case 32 /* Space */:\r\n                        currentVisibleColumn += 1;\r\n                        break;\r\n                    case 9 /* Tab */:\r\n                        currentVisibleColumn = CursorColumns.nextRenderTabStop(currentVisibleColumn, tabSize);\r\n                        break;\r\n                    default:\r\n                        return -1;\r\n                }\r\n            }\r\n            if (currentVisibleColumn === prevTabStopVisibleColumn + tabSize) {\r\n                return prevTabStopPosition;\r\n            }\r\n            // It must have been a partial indentation.\r\n            return -1;\r\n        }\r\n        // We are going right.\r\n        const targetVisibleColumn = CursorColumns.nextRenderTabStop(visibleColumn, tabSize);\r\n        // We can just continue from where whitespaceVisibleColumn got to.\r\n        let currentVisibleColumn = visibleColumn;\r\n        for (let i = position; i < lineLength; i++) {\r\n            if (currentVisibleColumn === targetVisibleColumn) {\r\n                return i;\r\n            }\r\n            const chCode = lineContent.charCodeAt(i);\r\n            switch (chCode) {\r\n                case 32 /* Space */:\r\n                    currentVisibleColumn += 1;\r\n                    break;\r\n                case 9 /* Tab */:\r\n                    currentVisibleColumn = CursorColumns.nextRenderTabStop(currentVisibleColumn, tabSize);\r\n                    break;\r\n                default:\r\n                    return -1;\r\n            }\r\n        }\r\n        // This condition handles when the target column is at the end of the line.\r\n        if (currentVisibleColumn === targetVisibleColumn) {\r\n            return lineLength;\r\n        }\r\n        return -1;\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}