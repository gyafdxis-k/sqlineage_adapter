{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../nls.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { LanguageIdentifier } from '../modes.js';\nimport { LanguageConfigurationRegistry } from './languageConfigurationRegistry.js';\nimport { Registry } from '../../../platform/registry/common/platform.js';\n// Define extension point ids\nexport const Extensions = {\n  ModesRegistry: 'editor.modesRegistry'\n};\nexport class EditorModesRegistry {\n  constructor() {\n    this._onDidChangeLanguages = new Emitter();\n    this.onDidChangeLanguages = this._onDidChangeLanguages.event;\n    this._languages = [];\n    this._dynamicLanguages = [];\n  }\n  // --- languages\n  registerLanguage(def) {\n    this._languages.push(def);\n    this._onDidChangeLanguages.fire(undefined);\n    return {\n      dispose: () => {\n        for (let i = 0, len = this._languages.length; i < len; i++) {\n          if (this._languages[i] === def) {\n            this._languages.splice(i, 1);\n            return;\n          }\n        }\n      }\n    };\n  }\n  getLanguages() {\n    return [].concat(this._languages).concat(this._dynamicLanguages);\n  }\n}\nexport const ModesRegistry = new EditorModesRegistry();\nRegistry.add(Extensions.ModesRegistry, ModesRegistry);\nexport const PLAINTEXT_MODE_ID = 'plaintext';\nexport const PLAINTEXT_LANGUAGE_IDENTIFIER = new LanguageIdentifier(PLAINTEXT_MODE_ID, 1 /* PlainText */);\nModesRegistry.registerLanguage({\n  id: PLAINTEXT_MODE_ID,\n  extensions: ['.txt'],\n  aliases: [nls.localize('plainText.alias', \"Plain Text\"), 'text'],\n  mimetypes: ['text/plain']\n});\nLanguageConfigurationRegistry.register(PLAINTEXT_LANGUAGE_IDENTIFIER, {\n  brackets: [['(', ')'], ['[', ']'], ['{', '}']],\n  surroundingPairs: [{\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '<',\n    close: '>'\n  }, {\n    open: '\\\"',\n    close: '\\\"'\n  }, {\n    open: '\\'',\n    close: '\\''\n  }, {\n    open: '`',\n    close: '`'\n  }],\n  folding: {\n    offSide: true\n  }\n});","map":{"version":3,"names":["nls","Emitter","LanguageIdentifier","LanguageConfigurationRegistry","Registry","Extensions","ModesRegistry","EditorModesRegistry","constructor","_onDidChangeLanguages","onDidChangeLanguages","event","_languages","_dynamicLanguages","registerLanguage","def","push","fire","undefined","dispose","i","len","length","splice","getLanguages","concat","add","PLAINTEXT_MODE_ID","PLAINTEXT_LANGUAGE_IDENTIFIER","id","extensions","aliases","localize","mimetypes","register","brackets","surroundingPairs","open","close","folding","offSide"],"sources":["C:/Users/Administrator/Desktop/sqllineage-master/sqllineagejs/node_modules/monaco-editor/esm/vs/editor/common/modes/modesRegistry.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport * as nls from '../../../nls.js';\r\nimport { Emitter } from '../../../base/common/event.js';\r\nimport { LanguageIdentifier } from '../modes.js';\r\nimport { LanguageConfigurationRegistry } from './languageConfigurationRegistry.js';\r\nimport { Registry } from '../../../platform/registry/common/platform.js';\r\n// Define extension point ids\r\nexport const Extensions = {\r\n    ModesRegistry: 'editor.modesRegistry'\r\n};\r\nexport class EditorModesRegistry {\r\n    constructor() {\r\n        this._onDidChangeLanguages = new Emitter();\r\n        this.onDidChangeLanguages = this._onDidChangeLanguages.event;\r\n        this._languages = [];\r\n        this._dynamicLanguages = [];\r\n    }\r\n    // --- languages\r\n    registerLanguage(def) {\r\n        this._languages.push(def);\r\n        this._onDidChangeLanguages.fire(undefined);\r\n        return {\r\n            dispose: () => {\r\n                for (let i = 0, len = this._languages.length; i < len; i++) {\r\n                    if (this._languages[i] === def) {\r\n                        this._languages.splice(i, 1);\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n        };\r\n    }\r\n    getLanguages() {\r\n        return [].concat(this._languages).concat(this._dynamicLanguages);\r\n    }\r\n}\r\nexport const ModesRegistry = new EditorModesRegistry();\r\nRegistry.add(Extensions.ModesRegistry, ModesRegistry);\r\nexport const PLAINTEXT_MODE_ID = 'plaintext';\r\nexport const PLAINTEXT_LANGUAGE_IDENTIFIER = new LanguageIdentifier(PLAINTEXT_MODE_ID, 1 /* PlainText */);\r\nModesRegistry.registerLanguage({\r\n    id: PLAINTEXT_MODE_ID,\r\n    extensions: ['.txt'],\r\n    aliases: [nls.localize('plainText.alias', \"Plain Text\"), 'text'],\r\n    mimetypes: ['text/plain']\r\n});\r\nLanguageConfigurationRegistry.register(PLAINTEXT_LANGUAGE_IDENTIFIER, {\r\n    brackets: [\r\n        ['(', ')'],\r\n        ['[', ']'],\r\n        ['{', '}'],\r\n    ],\r\n    surroundingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: '<', close: '>' },\r\n        { open: '\\\"', close: '\\\"' },\r\n        { open: '\\'', close: '\\'' },\r\n        { open: '`', close: '`' },\r\n    ],\r\n    folding: {\r\n        offSide: true\r\n    }\r\n});\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}