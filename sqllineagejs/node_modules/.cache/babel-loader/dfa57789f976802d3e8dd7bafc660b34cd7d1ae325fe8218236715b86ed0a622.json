{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { Iterable } from '../../../common/iterator.js';\nimport { Event } from '../../../common/event.js';\nimport { TreeError, WeakMapper } from './tree.js';\nimport { ObjectTreeModel } from './objectTreeModel.js';\nfunction noCompress(element) {\n  const elements = [element.element];\n  const incompressible = element.incompressible || false;\n  return {\n    element: {\n      elements,\n      incompressible\n    },\n    children: Iterable.map(Iterable.from(element.children), noCompress),\n    collapsible: element.collapsible,\n    collapsed: element.collapsed\n  };\n}\n// Exported only for test reasons, do not use directly\nexport function compress(element) {\n  const elements = [element.element];\n  const incompressible = element.incompressible || false;\n  let childrenIterator;\n  let children;\n  while (true) {\n    [children, childrenIterator] = Iterable.consume(Iterable.from(element.children), 2);\n    if (children.length !== 1) {\n      break;\n    }\n    if (children[0].incompressible) {\n      break;\n    }\n    element = children[0];\n    elements.push(element.element);\n  }\n  return {\n    element: {\n      elements,\n      incompressible\n    },\n    children: Iterable.map(Iterable.concat(children, childrenIterator), compress),\n    collapsible: element.collapsible,\n    collapsed: element.collapsed\n  };\n}\nfunction _decompress(element) {\n  let index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  let children;\n  if (index < element.element.elements.length - 1) {\n    children = [_decompress(element, index + 1)];\n  } else {\n    children = Iterable.map(Iterable.from(element.children), el => _decompress(el, 0));\n  }\n  if (index === 0 && element.element.incompressible) {\n    return {\n      element: element.element.elements[index],\n      children,\n      incompressible: true,\n      collapsible: element.collapsible,\n      collapsed: element.collapsed\n    };\n  }\n  return {\n    element: element.element.elements[index],\n    children,\n    collapsible: element.collapsible,\n    collapsed: element.collapsed\n  };\n}\n// Exported only for test reasons, do not use directly\nexport function decompress(element) {\n  return _decompress(element, 0);\n}\nfunction splice(treeElement, element, children) {\n  if (treeElement.element === element) {\n    return Object.assign(Object.assign({}, treeElement), {\n      children\n    });\n  }\n  return Object.assign(Object.assign({}, treeElement), {\n    children: Iterable.map(Iterable.from(treeElement.children), e => splice(e, element, children))\n  });\n}\nconst wrapIdentityProvider = base => ({\n  getId(node) {\n    return node.elements.map(e => base.getId(e).toString()).join('\\0');\n  }\n});\n// Exported only for test reasons, do not use directly\nexport class CompressedObjectTreeModel {\n  constructor(user, list) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    this.user = user;\n    this.rootRef = null;\n    this.nodes = new Map();\n    this.model = new ObjectTreeModel(user, list, options);\n    this.enabled = typeof options.compressionEnabled === 'undefined' ? true : options.compressionEnabled;\n    this.identityProvider = options.identityProvider;\n  }\n  get onDidSplice() {\n    return this.model.onDidSplice;\n  }\n  get onDidChangeCollapseState() {\n    return this.model.onDidChangeCollapseState;\n  }\n  get onDidChangeRenderNodeCount() {\n    return this.model.onDidChangeRenderNodeCount;\n  }\n  setChildren(element) {\n    let children = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Iterable.empty();\n    let options = arguments.length > 2 ? arguments[2] : undefined;\n    // Diffs must be deem, since the compression can affect nested elements.\n    // @see https://github.com/microsoft/vscode/pull/114237#issuecomment-759425034\n    const diffIdentityProvider = options.diffIdentityProvider && wrapIdentityProvider(options.diffIdentityProvider);\n    if (element === null) {\n      const compressedChildren = Iterable.map(children, this.enabled ? compress : noCompress);\n      this._setChildren(null, compressedChildren, {\n        diffIdentityProvider,\n        diffDepth: Infinity\n      });\n      return;\n    }\n    const compressedNode = this.nodes.get(element);\n    if (!compressedNode) {\n      throw new Error('Unknown compressed tree node');\n    }\n    const node = this.model.getNode(compressedNode);\n    const compressedParentNode = this.model.getParentNodeLocation(compressedNode);\n    const parent = this.model.getNode(compressedParentNode);\n    const decompressedElement = decompress(node);\n    const splicedElement = splice(decompressedElement, element, children);\n    const recompressedElement = (this.enabled ? compress : noCompress)(splicedElement);\n    const parentChildren = parent.children.map(child => child === node ? recompressedElement : child);\n    this._setChildren(parent.element, parentChildren, {\n      diffIdentityProvider,\n      diffDepth: node.depth - parent.depth\n    });\n  }\n  setCompressionEnabled(enabled) {\n    if (enabled === this.enabled) {\n      return;\n    }\n    this.enabled = enabled;\n    const root = this.model.getNode();\n    const rootChildren = root.children;\n    const decompressedRootChildren = Iterable.map(rootChildren, decompress);\n    const recompressedRootChildren = Iterable.map(decompressedRootChildren, enabled ? compress : noCompress);\n    // it should be safe to always use deep diff mode here if an identity\n    // provider is available, since we know the raw nodes are unchanged.\n    this._setChildren(null, recompressedRootChildren, {\n      diffIdentityProvider: this.identityProvider,\n      diffDepth: Infinity\n    });\n  }\n  _setChildren(node, children, options) {\n    const insertedElements = new Set();\n    const onDidCreateNode = node => {\n      for (const element of node.element.elements) {\n        insertedElements.add(element);\n        this.nodes.set(element, node.element);\n      }\n    };\n    const onDidDeleteNode = node => {\n      for (const element of node.element.elements) {\n        if (!insertedElements.has(element)) {\n          this.nodes.delete(element);\n        }\n      }\n    };\n    this.model.setChildren(node, children, Object.assign(Object.assign({}, options), {\n      onDidCreateNode,\n      onDidDeleteNode\n    }));\n  }\n  has(element) {\n    return this.nodes.has(element);\n  }\n  getListIndex(location) {\n    const node = this.getCompressedNode(location);\n    return this.model.getListIndex(node);\n  }\n  getListRenderCount(location) {\n    const node = this.getCompressedNode(location);\n    return this.model.getListRenderCount(node);\n  }\n  getNode(location) {\n    if (typeof location === 'undefined') {\n      return this.model.getNode();\n    }\n    const node = this.getCompressedNode(location);\n    return this.model.getNode(node);\n  }\n  // TODO: review this\n  getNodeLocation(node) {\n    const compressedNode = this.model.getNodeLocation(node);\n    if (compressedNode === null) {\n      return null;\n    }\n    return compressedNode.elements[compressedNode.elements.length - 1];\n  }\n  // TODO: review this\n  getParentNodeLocation(location) {\n    const compressedNode = this.getCompressedNode(location);\n    const parentNode = this.model.getParentNodeLocation(compressedNode);\n    if (parentNode === null) {\n      return null;\n    }\n    return parentNode.elements[parentNode.elements.length - 1];\n  }\n  isCollapsible(location) {\n    const compressedNode = this.getCompressedNode(location);\n    return this.model.isCollapsible(compressedNode);\n  }\n  setCollapsible(location, collapsible) {\n    const compressedNode = this.getCompressedNode(location);\n    return this.model.setCollapsible(compressedNode, collapsible);\n  }\n  isCollapsed(location) {\n    const compressedNode = this.getCompressedNode(location);\n    return this.model.isCollapsed(compressedNode);\n  }\n  setCollapsed(location, collapsed, recursive) {\n    const compressedNode = this.getCompressedNode(location);\n    return this.model.setCollapsed(compressedNode, collapsed, recursive);\n  }\n  expandTo(location) {\n    const compressedNode = this.getCompressedNode(location);\n    this.model.expandTo(compressedNode);\n  }\n  rerender(location) {\n    const compressedNode = this.getCompressedNode(location);\n    this.model.rerender(compressedNode);\n  }\n  refilter() {\n    this.model.refilter();\n  }\n  getCompressedNode(element) {\n    if (element === null) {\n      return null;\n    }\n    const node = this.nodes.get(element);\n    if (!node) {\n      throw new TreeError(this.user, \"Tree element not found: \".concat(element));\n    }\n    return node;\n  }\n}\nexport const DefaultElementMapper = elements => elements[elements.length - 1];\nclass CompressedTreeNodeWrapper {\n  constructor(unwrapper, node) {\n    this.unwrapper = unwrapper;\n    this.node = node;\n  }\n  get element() {\n    return this.node.element === null ? null : this.unwrapper(this.node.element);\n  }\n  get children() {\n    return this.node.children.map(node => new CompressedTreeNodeWrapper(this.unwrapper, node));\n  }\n  get depth() {\n    return this.node.depth;\n  }\n  get visibleChildrenCount() {\n    return this.node.visibleChildrenCount;\n  }\n  get visibleChildIndex() {\n    return this.node.visibleChildIndex;\n  }\n  get collapsible() {\n    return this.node.collapsible;\n  }\n  get collapsed() {\n    return this.node.collapsed;\n  }\n  get visible() {\n    return this.node.visible;\n  }\n  get filterData() {\n    return this.node.filterData;\n  }\n}\nfunction mapList(nodeMapper, list) {\n  return {\n    splice(start, deleteCount, toInsert) {\n      list.splice(start, deleteCount, toInsert.map(node => nodeMapper.map(node)));\n    },\n    updateElementHeight(index, height) {\n      list.updateElementHeight(index, height);\n    }\n  };\n}\nfunction mapOptions(compressedNodeUnwrapper, options) {\n  return Object.assign(Object.assign({}, options), {\n    identityProvider: options.identityProvider && {\n      getId(node) {\n        return options.identityProvider.getId(compressedNodeUnwrapper(node));\n      }\n    },\n    sorter: options.sorter && {\n      compare(node, otherNode) {\n        return options.sorter.compare(node.elements[0], otherNode.elements[0]);\n      }\n    },\n    filter: options.filter && {\n      filter(node, parentVisibility) {\n        return options.filter.filter(compressedNodeUnwrapper(node), parentVisibility);\n      }\n    }\n  });\n}\nexport class CompressibleObjectTreeModel {\n  constructor(user, list) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    this.rootRef = null;\n    this.elementMapper = options.elementMapper || DefaultElementMapper;\n    const compressedNodeUnwrapper = node => this.elementMapper(node.elements);\n    this.nodeMapper = new WeakMapper(node => new CompressedTreeNodeWrapper(compressedNodeUnwrapper, node));\n    this.model = new CompressedObjectTreeModel(user, mapList(this.nodeMapper, list), mapOptions(compressedNodeUnwrapper, options));\n  }\n  get onDidSplice() {\n    return Event.map(this.model.onDidSplice, _ref => {\n      let {\n        insertedNodes,\n        deletedNodes\n      } = _ref;\n      return {\n        insertedNodes: insertedNodes.map(node => this.nodeMapper.map(node)),\n        deletedNodes: deletedNodes.map(node => this.nodeMapper.map(node))\n      };\n    });\n  }\n  get onDidChangeCollapseState() {\n    return Event.map(this.model.onDidChangeCollapseState, _ref2 => {\n      let {\n        node,\n        deep\n      } = _ref2;\n      return {\n        node: this.nodeMapper.map(node),\n        deep\n      };\n    });\n  }\n  get onDidChangeRenderNodeCount() {\n    return Event.map(this.model.onDidChangeRenderNodeCount, node => this.nodeMapper.map(node));\n  }\n  setChildren(element) {\n    let children = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Iterable.empty();\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    this.model.setChildren(element, children, options);\n  }\n  setCompressionEnabled(enabled) {\n    this.model.setCompressionEnabled(enabled);\n  }\n  has(location) {\n    return this.model.has(location);\n  }\n  getListIndex(location) {\n    return this.model.getListIndex(location);\n  }\n  getListRenderCount(location) {\n    return this.model.getListRenderCount(location);\n  }\n  getNode(location) {\n    return this.nodeMapper.map(this.model.getNode(location));\n  }\n  getNodeLocation(node) {\n    return node.element;\n  }\n  getParentNodeLocation(location) {\n    return this.model.getParentNodeLocation(location);\n  }\n  isCollapsible(location) {\n    return this.model.isCollapsible(location);\n  }\n  setCollapsible(location, collapsed) {\n    return this.model.setCollapsible(location, collapsed);\n  }\n  isCollapsed(location) {\n    return this.model.isCollapsed(location);\n  }\n  setCollapsed(location, collapsed, recursive) {\n    return this.model.setCollapsed(location, collapsed, recursive);\n  }\n  expandTo(location) {\n    return this.model.expandTo(location);\n  }\n  rerender(location) {\n    return this.model.rerender(location);\n  }\n  refilter() {\n    return this.model.refilter();\n  }\n  getCompressedTreeNode() {\n    let location = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    return this.model.getNode(location);\n  }\n}","map":{"version":3,"names":["Iterable","Event","TreeError","WeakMapper","ObjectTreeModel","noCompress","element","elements","incompressible","children","map","from","collapsible","collapsed","compress","childrenIterator","consume","length","push","concat","_decompress","index","arguments","undefined","el","decompress","splice","treeElement","Object","assign","e","wrapIdentityProvider","base","getId","node","toString","join","CompressedObjectTreeModel","constructor","user","list","options","rootRef","nodes","Map","model","enabled","compressionEnabled","identityProvider","onDidSplice","onDidChangeCollapseState","onDidChangeRenderNodeCount","setChildren","empty","diffIdentityProvider","compressedChildren","_setChildren","diffDepth","Infinity","compressedNode","get","Error","getNode","compressedParentNode","getParentNodeLocation","parent","decompressedElement","splicedElement","recompressedElement","parentChildren","child","depth","setCompressionEnabled","root","rootChildren","decompressedRootChildren","recompressedRootChildren","insertedElements","Set","onDidCreateNode","add","set","onDidDeleteNode","has","delete","getListIndex","location","getCompressedNode","getListRenderCount","getNodeLocation","parentNode","isCollapsible","setCollapsible","isCollapsed","setCollapsed","recursive","expandTo","rerender","refilter","DefaultElementMapper","CompressedTreeNodeWrapper","unwrapper","visibleChildrenCount","visibleChildIndex","visible","filterData","mapList","nodeMapper","start","deleteCount","toInsert","updateElementHeight","height","mapOptions","compressedNodeUnwrapper","sorter","compare","otherNode","filter","parentVisibility","CompressibleObjectTreeModel","elementMapper","_ref","insertedNodes","deletedNodes","_ref2","deep","getCompressedTreeNode"],"sources":["C:/Users/Administrator/Desktop/sqllineage-master/sqllineagejs/node_modules/monaco-editor/esm/vs/base/browser/ui/tree/compressedObjectTreeModel.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { Iterable } from '../../../common/iterator.js';\r\nimport { Event } from '../../../common/event.js';\r\nimport { TreeError, WeakMapper } from './tree.js';\r\nimport { ObjectTreeModel } from './objectTreeModel.js';\r\nfunction noCompress(element) {\r\n    const elements = [element.element];\r\n    const incompressible = element.incompressible || false;\r\n    return {\r\n        element: { elements, incompressible },\r\n        children: Iterable.map(Iterable.from(element.children), noCompress),\r\n        collapsible: element.collapsible,\r\n        collapsed: element.collapsed\r\n    };\r\n}\r\n// Exported only for test reasons, do not use directly\r\nexport function compress(element) {\r\n    const elements = [element.element];\r\n    const incompressible = element.incompressible || false;\r\n    let childrenIterator;\r\n    let children;\r\n    while (true) {\r\n        [children, childrenIterator] = Iterable.consume(Iterable.from(element.children), 2);\r\n        if (children.length !== 1) {\r\n            break;\r\n        }\r\n        if (children[0].incompressible) {\r\n            break;\r\n        }\r\n        element = children[0];\r\n        elements.push(element.element);\r\n    }\r\n    return {\r\n        element: { elements, incompressible },\r\n        children: Iterable.map(Iterable.concat(children, childrenIterator), compress),\r\n        collapsible: element.collapsible,\r\n        collapsed: element.collapsed\r\n    };\r\n}\r\nfunction _decompress(element, index = 0) {\r\n    let children;\r\n    if (index < element.element.elements.length - 1) {\r\n        children = [_decompress(element, index + 1)];\r\n    }\r\n    else {\r\n        children = Iterable.map(Iterable.from(element.children), el => _decompress(el, 0));\r\n    }\r\n    if (index === 0 && element.element.incompressible) {\r\n        return {\r\n            element: element.element.elements[index],\r\n            children,\r\n            incompressible: true,\r\n            collapsible: element.collapsible,\r\n            collapsed: element.collapsed\r\n        };\r\n    }\r\n    return {\r\n        element: element.element.elements[index],\r\n        children,\r\n        collapsible: element.collapsible,\r\n        collapsed: element.collapsed\r\n    };\r\n}\r\n// Exported only for test reasons, do not use directly\r\nexport function decompress(element) {\r\n    return _decompress(element, 0);\r\n}\r\nfunction splice(treeElement, element, children) {\r\n    if (treeElement.element === element) {\r\n        return Object.assign(Object.assign({}, treeElement), { children });\r\n    }\r\n    return Object.assign(Object.assign({}, treeElement), { children: Iterable.map(Iterable.from(treeElement.children), e => splice(e, element, children)) });\r\n}\r\nconst wrapIdentityProvider = (base) => ({\r\n    getId(node) {\r\n        return node.elements.map(e => base.getId(e).toString()).join('\\0');\r\n    }\r\n});\r\n// Exported only for test reasons, do not use directly\r\nexport class CompressedObjectTreeModel {\r\n    constructor(user, list, options = {}) {\r\n        this.user = user;\r\n        this.rootRef = null;\r\n        this.nodes = new Map();\r\n        this.model = new ObjectTreeModel(user, list, options);\r\n        this.enabled = typeof options.compressionEnabled === 'undefined' ? true : options.compressionEnabled;\r\n        this.identityProvider = options.identityProvider;\r\n    }\r\n    get onDidSplice() { return this.model.onDidSplice; }\r\n    get onDidChangeCollapseState() { return this.model.onDidChangeCollapseState; }\r\n    get onDidChangeRenderNodeCount() { return this.model.onDidChangeRenderNodeCount; }\r\n    setChildren(element, children = Iterable.empty(), options) {\r\n        // Diffs must be deem, since the compression can affect nested elements.\r\n        // @see https://github.com/microsoft/vscode/pull/114237#issuecomment-759425034\r\n        const diffIdentityProvider = options.diffIdentityProvider && wrapIdentityProvider(options.diffIdentityProvider);\r\n        if (element === null) {\r\n            const compressedChildren = Iterable.map(children, this.enabled ? compress : noCompress);\r\n            this._setChildren(null, compressedChildren, { diffIdentityProvider, diffDepth: Infinity });\r\n            return;\r\n        }\r\n        const compressedNode = this.nodes.get(element);\r\n        if (!compressedNode) {\r\n            throw new Error('Unknown compressed tree node');\r\n        }\r\n        const node = this.model.getNode(compressedNode);\r\n        const compressedParentNode = this.model.getParentNodeLocation(compressedNode);\r\n        const parent = this.model.getNode(compressedParentNode);\r\n        const decompressedElement = decompress(node);\r\n        const splicedElement = splice(decompressedElement, element, children);\r\n        const recompressedElement = (this.enabled ? compress : noCompress)(splicedElement);\r\n        const parentChildren = parent.children\r\n            .map(child => child === node ? recompressedElement : child);\r\n        this._setChildren(parent.element, parentChildren, {\r\n            diffIdentityProvider,\r\n            diffDepth: node.depth - parent.depth,\r\n        });\r\n    }\r\n    setCompressionEnabled(enabled) {\r\n        if (enabled === this.enabled) {\r\n            return;\r\n        }\r\n        this.enabled = enabled;\r\n        const root = this.model.getNode();\r\n        const rootChildren = root.children;\r\n        const decompressedRootChildren = Iterable.map(rootChildren, decompress);\r\n        const recompressedRootChildren = Iterable.map(decompressedRootChildren, enabled ? compress : noCompress);\r\n        // it should be safe to always use deep diff mode here if an identity\r\n        // provider is available, since we know the raw nodes are unchanged.\r\n        this._setChildren(null, recompressedRootChildren, {\r\n            diffIdentityProvider: this.identityProvider,\r\n            diffDepth: Infinity,\r\n        });\r\n    }\r\n    _setChildren(node, children, options) {\r\n        const insertedElements = new Set();\r\n        const onDidCreateNode = (node) => {\r\n            for (const element of node.element.elements) {\r\n                insertedElements.add(element);\r\n                this.nodes.set(element, node.element);\r\n            }\r\n        };\r\n        const onDidDeleteNode = (node) => {\r\n            for (const element of node.element.elements) {\r\n                if (!insertedElements.has(element)) {\r\n                    this.nodes.delete(element);\r\n                }\r\n            }\r\n        };\r\n        this.model.setChildren(node, children, Object.assign(Object.assign({}, options), { onDidCreateNode, onDidDeleteNode }));\r\n    }\r\n    has(element) {\r\n        return this.nodes.has(element);\r\n    }\r\n    getListIndex(location) {\r\n        const node = this.getCompressedNode(location);\r\n        return this.model.getListIndex(node);\r\n    }\r\n    getListRenderCount(location) {\r\n        const node = this.getCompressedNode(location);\r\n        return this.model.getListRenderCount(node);\r\n    }\r\n    getNode(location) {\r\n        if (typeof location === 'undefined') {\r\n            return this.model.getNode();\r\n        }\r\n        const node = this.getCompressedNode(location);\r\n        return this.model.getNode(node);\r\n    }\r\n    // TODO: review this\r\n    getNodeLocation(node) {\r\n        const compressedNode = this.model.getNodeLocation(node);\r\n        if (compressedNode === null) {\r\n            return null;\r\n        }\r\n        return compressedNode.elements[compressedNode.elements.length - 1];\r\n    }\r\n    // TODO: review this\r\n    getParentNodeLocation(location) {\r\n        const compressedNode = this.getCompressedNode(location);\r\n        const parentNode = this.model.getParentNodeLocation(compressedNode);\r\n        if (parentNode === null) {\r\n            return null;\r\n        }\r\n        return parentNode.elements[parentNode.elements.length - 1];\r\n    }\r\n    isCollapsible(location) {\r\n        const compressedNode = this.getCompressedNode(location);\r\n        return this.model.isCollapsible(compressedNode);\r\n    }\r\n    setCollapsible(location, collapsible) {\r\n        const compressedNode = this.getCompressedNode(location);\r\n        return this.model.setCollapsible(compressedNode, collapsible);\r\n    }\r\n    isCollapsed(location) {\r\n        const compressedNode = this.getCompressedNode(location);\r\n        return this.model.isCollapsed(compressedNode);\r\n    }\r\n    setCollapsed(location, collapsed, recursive) {\r\n        const compressedNode = this.getCompressedNode(location);\r\n        return this.model.setCollapsed(compressedNode, collapsed, recursive);\r\n    }\r\n    expandTo(location) {\r\n        const compressedNode = this.getCompressedNode(location);\r\n        this.model.expandTo(compressedNode);\r\n    }\r\n    rerender(location) {\r\n        const compressedNode = this.getCompressedNode(location);\r\n        this.model.rerender(compressedNode);\r\n    }\r\n    refilter() {\r\n        this.model.refilter();\r\n    }\r\n    getCompressedNode(element) {\r\n        if (element === null) {\r\n            return null;\r\n        }\r\n        const node = this.nodes.get(element);\r\n        if (!node) {\r\n            throw new TreeError(this.user, `Tree element not found: ${element}`);\r\n        }\r\n        return node;\r\n    }\r\n}\r\nexport const DefaultElementMapper = elements => elements[elements.length - 1];\r\nclass CompressedTreeNodeWrapper {\r\n    constructor(unwrapper, node) {\r\n        this.unwrapper = unwrapper;\r\n        this.node = node;\r\n    }\r\n    get element() { return this.node.element === null ? null : this.unwrapper(this.node.element); }\r\n    get children() { return this.node.children.map(node => new CompressedTreeNodeWrapper(this.unwrapper, node)); }\r\n    get depth() { return this.node.depth; }\r\n    get visibleChildrenCount() { return this.node.visibleChildrenCount; }\r\n    get visibleChildIndex() { return this.node.visibleChildIndex; }\r\n    get collapsible() { return this.node.collapsible; }\r\n    get collapsed() { return this.node.collapsed; }\r\n    get visible() { return this.node.visible; }\r\n    get filterData() { return this.node.filterData; }\r\n}\r\nfunction mapList(nodeMapper, list) {\r\n    return {\r\n        splice(start, deleteCount, toInsert) {\r\n            list.splice(start, deleteCount, toInsert.map(node => nodeMapper.map(node)));\r\n        },\r\n        updateElementHeight(index, height) {\r\n            list.updateElementHeight(index, height);\r\n        }\r\n    };\r\n}\r\nfunction mapOptions(compressedNodeUnwrapper, options) {\r\n    return Object.assign(Object.assign({}, options), { identityProvider: options.identityProvider && {\r\n            getId(node) {\r\n                return options.identityProvider.getId(compressedNodeUnwrapper(node));\r\n            }\r\n        }, sorter: options.sorter && {\r\n            compare(node, otherNode) {\r\n                return options.sorter.compare(node.elements[0], otherNode.elements[0]);\r\n            }\r\n        }, filter: options.filter && {\r\n            filter(node, parentVisibility) {\r\n                return options.filter.filter(compressedNodeUnwrapper(node), parentVisibility);\r\n            }\r\n        } });\r\n}\r\nexport class CompressibleObjectTreeModel {\r\n    constructor(user, list, options = {}) {\r\n        this.rootRef = null;\r\n        this.elementMapper = options.elementMapper || DefaultElementMapper;\r\n        const compressedNodeUnwrapper = node => this.elementMapper(node.elements);\r\n        this.nodeMapper = new WeakMapper(node => new CompressedTreeNodeWrapper(compressedNodeUnwrapper, node));\r\n        this.model = new CompressedObjectTreeModel(user, mapList(this.nodeMapper, list), mapOptions(compressedNodeUnwrapper, options));\r\n    }\r\n    get onDidSplice() {\r\n        return Event.map(this.model.onDidSplice, ({ insertedNodes, deletedNodes }) => ({\r\n            insertedNodes: insertedNodes.map(node => this.nodeMapper.map(node)),\r\n            deletedNodes: deletedNodes.map(node => this.nodeMapper.map(node)),\r\n        }));\r\n    }\r\n    get onDidChangeCollapseState() {\r\n        return Event.map(this.model.onDidChangeCollapseState, ({ node, deep }) => ({\r\n            node: this.nodeMapper.map(node),\r\n            deep\r\n        }));\r\n    }\r\n    get onDidChangeRenderNodeCount() {\r\n        return Event.map(this.model.onDidChangeRenderNodeCount, node => this.nodeMapper.map(node));\r\n    }\r\n    setChildren(element, children = Iterable.empty(), options = {}) {\r\n        this.model.setChildren(element, children, options);\r\n    }\r\n    setCompressionEnabled(enabled) {\r\n        this.model.setCompressionEnabled(enabled);\r\n    }\r\n    has(location) {\r\n        return this.model.has(location);\r\n    }\r\n    getListIndex(location) {\r\n        return this.model.getListIndex(location);\r\n    }\r\n    getListRenderCount(location) {\r\n        return this.model.getListRenderCount(location);\r\n    }\r\n    getNode(location) {\r\n        return this.nodeMapper.map(this.model.getNode(location));\r\n    }\r\n    getNodeLocation(node) {\r\n        return node.element;\r\n    }\r\n    getParentNodeLocation(location) {\r\n        return this.model.getParentNodeLocation(location);\r\n    }\r\n    isCollapsible(location) {\r\n        return this.model.isCollapsible(location);\r\n    }\r\n    setCollapsible(location, collapsed) {\r\n        return this.model.setCollapsible(location, collapsed);\r\n    }\r\n    isCollapsed(location) {\r\n        return this.model.isCollapsed(location);\r\n    }\r\n    setCollapsed(location, collapsed, recursive) {\r\n        return this.model.setCollapsed(location, collapsed, recursive);\r\n    }\r\n    expandTo(location) {\r\n        return this.model.expandTo(location);\r\n    }\r\n    rerender(location) {\r\n        return this.model.rerender(location);\r\n    }\r\n    refilter() {\r\n        return this.model.refilter();\r\n    }\r\n    getCompressedTreeNode(location = null) {\r\n        return this.model.getNode(location);\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}