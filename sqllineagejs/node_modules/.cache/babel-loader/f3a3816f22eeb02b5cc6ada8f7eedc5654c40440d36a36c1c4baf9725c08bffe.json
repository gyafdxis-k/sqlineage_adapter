{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport './progressbar.css';\nimport { Disposable } from '../../../common/lifecycle.js';\nimport { Color } from '../../../common/color.js';\nimport { mixin } from '../../../common/objects.js';\nimport { show } from '../../dom.js';\nimport { RunOnceScheduler } from '../../../common/async.js';\nconst CSS_DONE = 'done';\nconst CSS_ACTIVE = 'active';\nconst CSS_INFINITE = 'infinite';\nconst CSS_DISCRETE = 'discrete';\nconst defaultOpts = {\n  progressBarBackground: Color.fromHex('#0E70C0')\n};\n/**\r\n * A progress bar with support for infinite or discrete progress.\r\n */\nexport class ProgressBar extends Disposable {\n  constructor(container, options) {\n    super();\n    this.options = options || Object.create(null);\n    mixin(this.options, defaultOpts, false);\n    this.workedVal = 0;\n    this.progressBarBackground = this.options.progressBarBackground;\n    this._register(this.showDelayedScheduler = new RunOnceScheduler(() => show(this.element), 0));\n    this.create(container);\n  }\n  create(container) {\n    this.element = document.createElement('div');\n    this.element.classList.add('monaco-progress-container');\n    this.element.setAttribute('role', 'progressbar');\n    this.element.setAttribute('aria-valuemin', '0');\n    container.appendChild(this.element);\n    this.bit = document.createElement('div');\n    this.bit.classList.add('progress-bit');\n    this.element.appendChild(this.bit);\n    this.applyStyles();\n  }\n  off() {\n    this.bit.style.width = 'inherit';\n    this.bit.style.opacity = '1';\n    this.element.classList.remove(CSS_ACTIVE, CSS_INFINITE, CSS_DISCRETE);\n    this.workedVal = 0;\n    this.totalWork = undefined;\n  }\n  /**\r\n   * Stops the progressbar from showing any progress instantly without fading out.\r\n   */\n  stop() {\n    return this.doDone(false);\n  }\n  doDone(delayed) {\n    this.element.classList.add(CSS_DONE);\n    // let it grow to 100% width and hide afterwards\n    if (!this.element.classList.contains(CSS_INFINITE)) {\n      this.bit.style.width = 'inherit';\n      if (delayed) {\n        setTimeout(() => this.off(), 200);\n      } else {\n        this.off();\n      }\n    }\n    // let it fade out and hide afterwards\n    else {\n      this.bit.style.opacity = '0';\n      if (delayed) {\n        setTimeout(() => this.off(), 200);\n      } else {\n        this.off();\n      }\n    }\n    return this;\n  }\n  /**\r\n   * Use this mode to indicate progress that has no total number of work units.\r\n   */\n  infinite() {\n    this.bit.style.width = '2%';\n    this.bit.style.opacity = '1';\n    this.element.classList.remove(CSS_DISCRETE, CSS_DONE);\n    this.element.classList.add(CSS_ACTIVE, CSS_INFINITE);\n    return this;\n  }\n  getContainer() {\n    return this.element;\n  }\n  style(styles) {\n    this.progressBarBackground = styles.progressBarBackground;\n    this.applyStyles();\n  }\n  applyStyles() {\n    if (this.bit) {\n      const background = this.progressBarBackground ? this.progressBarBackground.toString() : '';\n      this.bit.style.backgroundColor = background;\n    }\n  }\n}","map":{"version":3,"names":["Disposable","Color","mixin","show","RunOnceScheduler","CSS_DONE","CSS_ACTIVE","CSS_INFINITE","CSS_DISCRETE","defaultOpts","progressBarBackground","fromHex","ProgressBar","constructor","container","options","Object","create","workedVal","_register","showDelayedScheduler","element","document","createElement","classList","add","setAttribute","appendChild","bit","applyStyles","off","style","width","opacity","remove","totalWork","undefined","stop","doDone","delayed","contains","setTimeout","infinite","getContainer","styles","background","toString","backgroundColor"],"sources":["C:/Users/Administrator/Desktop/sqllineage-master/sqllineagejs/node_modules/monaco-editor/esm/vs/base/browser/ui/progressbar/progressbar.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport './progressbar.css';\r\nimport { Disposable } from '../../../common/lifecycle.js';\r\nimport { Color } from '../../../common/color.js';\r\nimport { mixin } from '../../../common/objects.js';\r\nimport { show } from '../../dom.js';\r\nimport { RunOnceScheduler } from '../../../common/async.js';\r\nconst CSS_DONE = 'done';\r\nconst CSS_ACTIVE = 'active';\r\nconst CSS_INFINITE = 'infinite';\r\nconst CSS_DISCRETE = 'discrete';\r\nconst defaultOpts = {\r\n    progressBarBackground: Color.fromHex('#0E70C0')\r\n};\r\n/**\r\n * A progress bar with support for infinite or discrete progress.\r\n */\r\nexport class ProgressBar extends Disposable {\r\n    constructor(container, options) {\r\n        super();\r\n        this.options = options || Object.create(null);\r\n        mixin(this.options, defaultOpts, false);\r\n        this.workedVal = 0;\r\n        this.progressBarBackground = this.options.progressBarBackground;\r\n        this._register(this.showDelayedScheduler = new RunOnceScheduler(() => show(this.element), 0));\r\n        this.create(container);\r\n    }\r\n    create(container) {\r\n        this.element = document.createElement('div');\r\n        this.element.classList.add('monaco-progress-container');\r\n        this.element.setAttribute('role', 'progressbar');\r\n        this.element.setAttribute('aria-valuemin', '0');\r\n        container.appendChild(this.element);\r\n        this.bit = document.createElement('div');\r\n        this.bit.classList.add('progress-bit');\r\n        this.element.appendChild(this.bit);\r\n        this.applyStyles();\r\n    }\r\n    off() {\r\n        this.bit.style.width = 'inherit';\r\n        this.bit.style.opacity = '1';\r\n        this.element.classList.remove(CSS_ACTIVE, CSS_INFINITE, CSS_DISCRETE);\r\n        this.workedVal = 0;\r\n        this.totalWork = undefined;\r\n    }\r\n    /**\r\n     * Stops the progressbar from showing any progress instantly without fading out.\r\n     */\r\n    stop() {\r\n        return this.doDone(false);\r\n    }\r\n    doDone(delayed) {\r\n        this.element.classList.add(CSS_DONE);\r\n        // let it grow to 100% width and hide afterwards\r\n        if (!this.element.classList.contains(CSS_INFINITE)) {\r\n            this.bit.style.width = 'inherit';\r\n            if (delayed) {\r\n                setTimeout(() => this.off(), 200);\r\n            }\r\n            else {\r\n                this.off();\r\n            }\r\n        }\r\n        // let it fade out and hide afterwards\r\n        else {\r\n            this.bit.style.opacity = '0';\r\n            if (delayed) {\r\n                setTimeout(() => this.off(), 200);\r\n            }\r\n            else {\r\n                this.off();\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Use this mode to indicate progress that has no total number of work units.\r\n     */\r\n    infinite() {\r\n        this.bit.style.width = '2%';\r\n        this.bit.style.opacity = '1';\r\n        this.element.classList.remove(CSS_DISCRETE, CSS_DONE);\r\n        this.element.classList.add(CSS_ACTIVE, CSS_INFINITE);\r\n        return this;\r\n    }\r\n    getContainer() {\r\n        return this.element;\r\n    }\r\n    style(styles) {\r\n        this.progressBarBackground = styles.progressBarBackground;\r\n        this.applyStyles();\r\n    }\r\n    applyStyles() {\r\n        if (this.bit) {\r\n            const background = this.progressBarBackground ? this.progressBarBackground.toString() : '';\r\n            this.bit.style.backgroundColor = background;\r\n        }\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}