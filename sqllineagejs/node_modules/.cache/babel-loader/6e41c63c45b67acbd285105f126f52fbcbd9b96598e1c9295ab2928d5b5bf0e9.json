{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { $ } from '../../../base/browser/dom.js';\nimport { isEmptyMarkdownString } from '../../../base/common/htmlContent.js';\nimport { DisposableStore } from '../../../base/common/lifecycle.js';\nimport { HoverOperation } from './hoverOperation.js';\nimport { GlyphHoverWidget } from './hoverWidgets.js';\nimport { MarkdownRenderer } from '../../browser/core/markdownRenderer.js';\nimport { NullOpenerService } from '../../../platform/opener/common/opener.js';\nimport { asArray } from '../../../base/common/arrays.js';\nclass MarginComputer {\n  constructor(editor) {\n    this._editor = editor;\n    this._lineNumber = -1;\n    this._result = [];\n  }\n  setLineNumber(lineNumber) {\n    this._lineNumber = lineNumber;\n    this._result = [];\n  }\n  clearResult() {\n    this._result = [];\n  }\n  computeSync() {\n    const toHoverMessage = contents => {\n      return {\n        value: contents\n      };\n    };\n    const lineDecorations = this._editor.getLineDecorations(this._lineNumber);\n    const result = [];\n    if (!lineDecorations) {\n      return result;\n    }\n    for (const d of lineDecorations) {\n      if (!d.options.glyphMarginClassName) {\n        continue;\n      }\n      const hoverMessage = d.options.glyphMarginHoverMessage;\n      if (!hoverMessage || isEmptyMarkdownString(hoverMessage)) {\n        continue;\n      }\n      result.push(...asArray(hoverMessage).map(toHoverMessage));\n    }\n    return result;\n  }\n  onResult(result, isFromSynchronousComputation) {\n    this._result = this._result.concat(result);\n  }\n  getResult() {\n    return this._result;\n  }\n  getResultWithLoadingMessage() {\n    return this.getResult();\n  }\n}\nexport class ModesGlyphHoverWidget extends GlyphHoverWidget {\n  constructor(editor, modeService) {\n    let openerService = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : NullOpenerService;\n    super(ModesGlyphHoverWidget.ID, editor);\n    this._renderDisposeables = this._register(new DisposableStore());\n    this._messages = [];\n    this._lastLineNumber = -1;\n    this._markdownRenderer = this._register(new MarkdownRenderer({\n      editor: this._editor\n    }, modeService, openerService));\n    this._computer = new MarginComputer(this._editor);\n    this._hoverOperation = new HoverOperation(this._computer, result => this._withResult(result), undefined, result => this._withResult(result), 300);\n  }\n  dispose() {\n    this._hoverOperation.cancel();\n    super.dispose();\n  }\n  onModelDecorationsChanged() {\n    if (this.isVisible) {\n      // The decorations have changed and the hover is visible,\n      // we need to recompute the displayed text\n      this._hoverOperation.cancel();\n      this._computer.clearResult();\n      this._hoverOperation.start(0 /* Delayed */);\n    }\n  }\n\n  startShowingAt(lineNumber) {\n    if (this._lastLineNumber === lineNumber) {\n      // We have to show the widget at the exact same line number as before, so no work is needed\n      return;\n    }\n    this._hoverOperation.cancel();\n    this.hide();\n    this._lastLineNumber = lineNumber;\n    this._computer.setLineNumber(lineNumber);\n    this._hoverOperation.start(0 /* Delayed */);\n  }\n\n  hide() {\n    this._lastLineNumber = -1;\n    this._hoverOperation.cancel();\n    super.hide();\n  }\n  _withResult(result) {\n    this._messages = result;\n    if (this._messages.length > 0) {\n      this._renderMessages(this._lastLineNumber, this._messages);\n    } else {\n      this.hide();\n    }\n  }\n  _renderMessages(lineNumber, messages) {\n    this._renderDisposeables.clear();\n    const fragment = document.createDocumentFragment();\n    for (const msg of messages) {\n      const renderedContents = this._markdownRenderer.render(msg.value);\n      this._renderDisposeables.add(renderedContents);\n      fragment.appendChild($('div.hover-row', undefined, renderedContents.element));\n    }\n    this.updateContents(fragment);\n    this.showAt(lineNumber);\n  }\n}\nModesGlyphHoverWidget.ID = 'editor.contrib.modesGlyphHoverWidget';","map":{"version":3,"names":["$","isEmptyMarkdownString","DisposableStore","HoverOperation","GlyphHoverWidget","MarkdownRenderer","NullOpenerService","asArray","MarginComputer","constructor","editor","_editor","_lineNumber","_result","setLineNumber","lineNumber","clearResult","computeSync","toHoverMessage","contents","value","lineDecorations","getLineDecorations","result","d","options","glyphMarginClassName","hoverMessage","glyphMarginHoverMessage","push","map","onResult","isFromSynchronousComputation","concat","getResult","getResultWithLoadingMessage","ModesGlyphHoverWidget","modeService","openerService","arguments","length","undefined","ID","_renderDisposeables","_register","_messages","_lastLineNumber","_markdownRenderer","_computer","_hoverOperation","_withResult","dispose","cancel","onModelDecorationsChanged","isVisible","start","startShowingAt","hide","_renderMessages","messages","clear","fragment","document","createDocumentFragment","msg","renderedContents","render","add","appendChild","element","updateContents","showAt"],"sources":["C:/Users/Administrator/Desktop/sqllineage-master/sqllineagejs/node_modules/monaco-editor/esm/vs/editor/contrib/hover/modesGlyphHover.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { $ } from '../../../base/browser/dom.js';\r\nimport { isEmptyMarkdownString } from '../../../base/common/htmlContent.js';\r\nimport { DisposableStore } from '../../../base/common/lifecycle.js';\r\nimport { HoverOperation } from './hoverOperation.js';\r\nimport { GlyphHoverWidget } from './hoverWidgets.js';\r\nimport { MarkdownRenderer } from '../../browser/core/markdownRenderer.js';\r\nimport { NullOpenerService } from '../../../platform/opener/common/opener.js';\r\nimport { asArray } from '../../../base/common/arrays.js';\r\nclass MarginComputer {\r\n    constructor(editor) {\r\n        this._editor = editor;\r\n        this._lineNumber = -1;\r\n        this._result = [];\r\n    }\r\n    setLineNumber(lineNumber) {\r\n        this._lineNumber = lineNumber;\r\n        this._result = [];\r\n    }\r\n    clearResult() {\r\n        this._result = [];\r\n    }\r\n    computeSync() {\r\n        const toHoverMessage = (contents) => {\r\n            return {\r\n                value: contents\r\n            };\r\n        };\r\n        const lineDecorations = this._editor.getLineDecorations(this._lineNumber);\r\n        const result = [];\r\n        if (!lineDecorations) {\r\n            return result;\r\n        }\r\n        for (const d of lineDecorations) {\r\n            if (!d.options.glyphMarginClassName) {\r\n                continue;\r\n            }\r\n            const hoverMessage = d.options.glyphMarginHoverMessage;\r\n            if (!hoverMessage || isEmptyMarkdownString(hoverMessage)) {\r\n                continue;\r\n            }\r\n            result.push(...asArray(hoverMessage).map(toHoverMessage));\r\n        }\r\n        return result;\r\n    }\r\n    onResult(result, isFromSynchronousComputation) {\r\n        this._result = this._result.concat(result);\r\n    }\r\n    getResult() {\r\n        return this._result;\r\n    }\r\n    getResultWithLoadingMessage() {\r\n        return this.getResult();\r\n    }\r\n}\r\nexport class ModesGlyphHoverWidget extends GlyphHoverWidget {\r\n    constructor(editor, modeService, openerService = NullOpenerService) {\r\n        super(ModesGlyphHoverWidget.ID, editor);\r\n        this._renderDisposeables = this._register(new DisposableStore());\r\n        this._messages = [];\r\n        this._lastLineNumber = -1;\r\n        this._markdownRenderer = this._register(new MarkdownRenderer({ editor: this._editor }, modeService, openerService));\r\n        this._computer = new MarginComputer(this._editor);\r\n        this._hoverOperation = new HoverOperation(this._computer, (result) => this._withResult(result), undefined, (result) => this._withResult(result), 300);\r\n    }\r\n    dispose() {\r\n        this._hoverOperation.cancel();\r\n        super.dispose();\r\n    }\r\n    onModelDecorationsChanged() {\r\n        if (this.isVisible) {\r\n            // The decorations have changed and the hover is visible,\r\n            // we need to recompute the displayed text\r\n            this._hoverOperation.cancel();\r\n            this._computer.clearResult();\r\n            this._hoverOperation.start(0 /* Delayed */);\r\n        }\r\n    }\r\n    startShowingAt(lineNumber) {\r\n        if (this._lastLineNumber === lineNumber) {\r\n            // We have to show the widget at the exact same line number as before, so no work is needed\r\n            return;\r\n        }\r\n        this._hoverOperation.cancel();\r\n        this.hide();\r\n        this._lastLineNumber = lineNumber;\r\n        this._computer.setLineNumber(lineNumber);\r\n        this._hoverOperation.start(0 /* Delayed */);\r\n    }\r\n    hide() {\r\n        this._lastLineNumber = -1;\r\n        this._hoverOperation.cancel();\r\n        super.hide();\r\n    }\r\n    _withResult(result) {\r\n        this._messages = result;\r\n        if (this._messages.length > 0) {\r\n            this._renderMessages(this._lastLineNumber, this._messages);\r\n        }\r\n        else {\r\n            this.hide();\r\n        }\r\n    }\r\n    _renderMessages(lineNumber, messages) {\r\n        this._renderDisposeables.clear();\r\n        const fragment = document.createDocumentFragment();\r\n        for (const msg of messages) {\r\n            const renderedContents = this._markdownRenderer.render(msg.value);\r\n            this._renderDisposeables.add(renderedContents);\r\n            fragment.appendChild($('div.hover-row', undefined, renderedContents.element));\r\n        }\r\n        this.updateContents(fragment);\r\n        this.showAt(lineNumber);\r\n    }\r\n}\r\nModesGlyphHoverWidget.ID = 'editor.contrib.modesGlyphHoverWidget';\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}