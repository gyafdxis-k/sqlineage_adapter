{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nexport class Lazy {\n  constructor(executor) {\n    this.executor = executor;\n    this._didRun = false;\n  }\n  /**\r\n   * Get the wrapped value.\r\n   *\r\n   * This will force evaluation of the lazy value if it has not been resolved yet. Lazy values are only\r\n   * resolved once. `getValue` will re-throw exceptions that are hit while resolving the value\r\n   */\n  getValue() {\n    if (!this._didRun) {\n      try {\n        this._value = this.executor();\n      } catch (err) {\n        this._error = err;\n      } finally {\n        this._didRun = true;\n      }\n    }\n    if (this._error) {\n      throw this._error;\n    }\n    return this._value;\n  }\n  /**\r\n   * Get the wrapped value without forcing evaluation.\r\n   */\n  get rawValue() {\n    return this._value;\n  }\n}","map":{"version":3,"names":["Lazy","constructor","executor","_didRun","getValue","_value","err","_error","rawValue"],"sources":["C:/Users/Administrator/Desktop/sqllineage-master/sqllineagejs/node_modules/monaco-editor/esm/vs/base/common/lazy.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nexport class Lazy {\r\n    constructor(executor) {\r\n        this.executor = executor;\r\n        this._didRun = false;\r\n    }\r\n    /**\r\n     * Get the wrapped value.\r\n     *\r\n     * This will force evaluation of the lazy value if it has not been resolved yet. Lazy values are only\r\n     * resolved once. `getValue` will re-throw exceptions that are hit while resolving the value\r\n     */\r\n    getValue() {\r\n        if (!this._didRun) {\r\n            try {\r\n                this._value = this.executor();\r\n            }\r\n            catch (err) {\r\n                this._error = err;\r\n            }\r\n            finally {\r\n                this._didRun = true;\r\n            }\r\n        }\r\n        if (this._error) {\r\n            throw this._error;\r\n        }\r\n        return this._value;\r\n    }\r\n    /**\r\n     * Get the wrapped value without forcing evaluation.\r\n     */\r\n    get rawValue() { return this._value; }\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,OAAO,MAAMA,IAAI,CAAC;EACdC,WAAWA,CAACC,QAAQ,EAAE;IAClB,IAAI,CAACA,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,OAAO,GAAG,KAAK;EACxB;EACA;AACJ;AACA;AACA;AACA;AACA;EACIC,QAAQA,CAAA,EAAG;IACP,IAAI,CAAC,IAAI,CAACD,OAAO,EAAE;MACf,IAAI;QACA,IAAI,CAACE,MAAM,GAAG,IAAI,CAACH,QAAQ,CAAC,CAAC;MACjC,CAAC,CACD,OAAOI,GAAG,EAAE;QACR,IAAI,CAACC,MAAM,GAAGD,GAAG;MACrB,CAAC,SACO;QACJ,IAAI,CAACH,OAAO,GAAG,IAAI;MACvB;IACJ;IACA,IAAI,IAAI,CAACI,MAAM,EAAE;MACb,MAAM,IAAI,CAACA,MAAM;IACrB;IACA,OAAO,IAAI,CAACF,MAAM;EACtB;EACA;AACJ;AACA;EACI,IAAIG,QAAQA,CAAA,EAAG;IAAE,OAAO,IAAI,CAACH,MAAM;EAAE;AACzC"},"metadata":{},"sourceType":"module","externalDependencies":[]}