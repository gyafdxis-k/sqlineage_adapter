{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nexport function createScopedLineTokens(context, offset) {\n  let tokenCount = context.getCount();\n  let tokenIndex = context.findTokenIndexAtOffset(offset);\n  let desiredLanguageId = context.getLanguageId(tokenIndex);\n  let lastTokenIndex = tokenIndex;\n  while (lastTokenIndex + 1 < tokenCount && context.getLanguageId(lastTokenIndex + 1) === desiredLanguageId) {\n    lastTokenIndex++;\n  }\n  let firstTokenIndex = tokenIndex;\n  while (firstTokenIndex > 0 && context.getLanguageId(firstTokenIndex - 1) === desiredLanguageId) {\n    firstTokenIndex--;\n  }\n  return new ScopedLineTokens(context, desiredLanguageId, firstTokenIndex, lastTokenIndex + 1, context.getStartOffset(firstTokenIndex), context.getEndOffset(lastTokenIndex));\n}\nexport class ScopedLineTokens {\n  constructor(actual, languageId, firstTokenIndex, lastTokenIndex, firstCharOffset, lastCharOffset) {\n    this._actual = actual;\n    this.languageId = languageId;\n    this._firstTokenIndex = firstTokenIndex;\n    this._lastTokenIndex = lastTokenIndex;\n    this.firstCharOffset = firstCharOffset;\n    this._lastCharOffset = lastCharOffset;\n  }\n  getLineContent() {\n    const actualLineContent = this._actual.getLineContent();\n    return actualLineContent.substring(this.firstCharOffset, this._lastCharOffset);\n  }\n  getActualLineContentBefore(offset) {\n    const actualLineContent = this._actual.getLineContent();\n    return actualLineContent.substring(0, this.firstCharOffset + offset);\n  }\n  getTokenCount() {\n    return this._lastTokenIndex - this._firstTokenIndex;\n  }\n  findTokenIndexAtOffset(offset) {\n    return this._actual.findTokenIndexAtOffset(offset + this.firstCharOffset) - this._firstTokenIndex;\n  }\n  getStandardTokenType(tokenIndex) {\n    return this._actual.getStandardTokenType(tokenIndex + this._firstTokenIndex);\n  }\n}\nexport function ignoreBracketsInToken(standardTokenType) {\n  return (standardTokenType & 7 /* value */) !== 0;\n}","map":{"version":3,"names":["createScopedLineTokens","context","offset","tokenCount","getCount","tokenIndex","findTokenIndexAtOffset","desiredLanguageId","getLanguageId","lastTokenIndex","firstTokenIndex","ScopedLineTokens","getStartOffset","getEndOffset","constructor","actual","languageId","firstCharOffset","lastCharOffset","_actual","_firstTokenIndex","_lastTokenIndex","_lastCharOffset","getLineContent","actualLineContent","substring","getActualLineContentBefore","getTokenCount","getStandardTokenType","ignoreBracketsInToken","standardTokenType"],"sources":["C:/Users/Administrator/Desktop/sqllineage-master/sqllineagejs/node_modules/monaco-editor/esm/vs/editor/common/modes/supports.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nexport function createScopedLineTokens(context, offset) {\r\n    let tokenCount = context.getCount();\r\n    let tokenIndex = context.findTokenIndexAtOffset(offset);\r\n    let desiredLanguageId = context.getLanguageId(tokenIndex);\r\n    let lastTokenIndex = tokenIndex;\r\n    while (lastTokenIndex + 1 < tokenCount && context.getLanguageId(lastTokenIndex + 1) === desiredLanguageId) {\r\n        lastTokenIndex++;\r\n    }\r\n    let firstTokenIndex = tokenIndex;\r\n    while (firstTokenIndex > 0 && context.getLanguageId(firstTokenIndex - 1) === desiredLanguageId) {\r\n        firstTokenIndex--;\r\n    }\r\n    return new ScopedLineTokens(context, desiredLanguageId, firstTokenIndex, lastTokenIndex + 1, context.getStartOffset(firstTokenIndex), context.getEndOffset(lastTokenIndex));\r\n}\r\nexport class ScopedLineTokens {\r\n    constructor(actual, languageId, firstTokenIndex, lastTokenIndex, firstCharOffset, lastCharOffset) {\r\n        this._actual = actual;\r\n        this.languageId = languageId;\r\n        this._firstTokenIndex = firstTokenIndex;\r\n        this._lastTokenIndex = lastTokenIndex;\r\n        this.firstCharOffset = firstCharOffset;\r\n        this._lastCharOffset = lastCharOffset;\r\n    }\r\n    getLineContent() {\r\n        const actualLineContent = this._actual.getLineContent();\r\n        return actualLineContent.substring(this.firstCharOffset, this._lastCharOffset);\r\n    }\r\n    getActualLineContentBefore(offset) {\r\n        const actualLineContent = this._actual.getLineContent();\r\n        return actualLineContent.substring(0, this.firstCharOffset + offset);\r\n    }\r\n    getTokenCount() {\r\n        return this._lastTokenIndex - this._firstTokenIndex;\r\n    }\r\n    findTokenIndexAtOffset(offset) {\r\n        return this._actual.findTokenIndexAtOffset(offset + this.firstCharOffset) - this._firstTokenIndex;\r\n    }\r\n    getStandardTokenType(tokenIndex) {\r\n        return this._actual.getStandardTokenType(tokenIndex + this._firstTokenIndex);\r\n    }\r\n}\r\nexport function ignoreBracketsInToken(standardTokenType) {\r\n    return (standardTokenType & 7 /* value */) !== 0;\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,OAAO,SAASA,sBAAsBA,CAACC,OAAO,EAAEC,MAAM,EAAE;EACpD,IAAIC,UAAU,GAAGF,OAAO,CAACG,QAAQ,CAAC,CAAC;EACnC,IAAIC,UAAU,GAAGJ,OAAO,CAACK,sBAAsB,CAACJ,MAAM,CAAC;EACvD,IAAIK,iBAAiB,GAAGN,OAAO,CAACO,aAAa,CAACH,UAAU,CAAC;EACzD,IAAII,cAAc,GAAGJ,UAAU;EAC/B,OAAOI,cAAc,GAAG,CAAC,GAAGN,UAAU,IAAIF,OAAO,CAACO,aAAa,CAACC,cAAc,GAAG,CAAC,CAAC,KAAKF,iBAAiB,EAAE;IACvGE,cAAc,EAAE;EACpB;EACA,IAAIC,eAAe,GAAGL,UAAU;EAChC,OAAOK,eAAe,GAAG,CAAC,IAAIT,OAAO,CAACO,aAAa,CAACE,eAAe,GAAG,CAAC,CAAC,KAAKH,iBAAiB,EAAE;IAC5FG,eAAe,EAAE;EACrB;EACA,OAAO,IAAIC,gBAAgB,CAACV,OAAO,EAAEM,iBAAiB,EAAEG,eAAe,EAAED,cAAc,GAAG,CAAC,EAAER,OAAO,CAACW,cAAc,CAACF,eAAe,CAAC,EAAET,OAAO,CAACY,YAAY,CAACJ,cAAc,CAAC,CAAC;AAC/K;AACA,OAAO,MAAME,gBAAgB,CAAC;EAC1BG,WAAWA,CAACC,MAAM,EAAEC,UAAU,EAAEN,eAAe,EAAED,cAAc,EAAEQ,eAAe,EAAEC,cAAc,EAAE;IAC9F,IAAI,CAACC,OAAO,GAAGJ,MAAM;IACrB,IAAI,CAACC,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACI,gBAAgB,GAAGV,eAAe;IACvC,IAAI,CAACW,eAAe,GAAGZ,cAAc;IACrC,IAAI,CAACQ,eAAe,GAAGA,eAAe;IACtC,IAAI,CAACK,eAAe,GAAGJ,cAAc;EACzC;EACAK,cAAcA,CAAA,EAAG;IACb,MAAMC,iBAAiB,GAAG,IAAI,CAACL,OAAO,CAACI,cAAc,CAAC,CAAC;IACvD,OAAOC,iBAAiB,CAACC,SAAS,CAAC,IAAI,CAACR,eAAe,EAAE,IAAI,CAACK,eAAe,CAAC;EAClF;EACAI,0BAA0BA,CAACxB,MAAM,EAAE;IAC/B,MAAMsB,iBAAiB,GAAG,IAAI,CAACL,OAAO,CAACI,cAAc,CAAC,CAAC;IACvD,OAAOC,iBAAiB,CAACC,SAAS,CAAC,CAAC,EAAE,IAAI,CAACR,eAAe,GAAGf,MAAM,CAAC;EACxE;EACAyB,aAAaA,CAAA,EAAG;IACZ,OAAO,IAAI,CAACN,eAAe,GAAG,IAAI,CAACD,gBAAgB;EACvD;EACAd,sBAAsBA,CAACJ,MAAM,EAAE;IAC3B,OAAO,IAAI,CAACiB,OAAO,CAACb,sBAAsB,CAACJ,MAAM,GAAG,IAAI,CAACe,eAAe,CAAC,GAAG,IAAI,CAACG,gBAAgB;EACrG;EACAQ,oBAAoBA,CAACvB,UAAU,EAAE;IAC7B,OAAO,IAAI,CAACc,OAAO,CAACS,oBAAoB,CAACvB,UAAU,GAAG,IAAI,CAACe,gBAAgB,CAAC;EAChF;AACJ;AACA,OAAO,SAASS,qBAAqBA,CAACC,iBAAiB,EAAE;EACrD,OAAO,CAACA,iBAAiB,GAAG,CAAC,CAAC,iBAAiB,CAAC;AACpD"},"metadata":{},"sourceType":"module","externalDependencies":[]}