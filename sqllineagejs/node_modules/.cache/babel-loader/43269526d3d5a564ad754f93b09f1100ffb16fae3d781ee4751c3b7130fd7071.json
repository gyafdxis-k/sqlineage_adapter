{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../nls.js';\nimport { EditorAction, registerEditorAction } from '../../browser/editorExtensions.js';\nimport { EditorContextKeys } from '../../common/editorContextKeys.js';\nimport { MoveCaretCommand } from './moveCaretCommand.js';\nclass MoveCaretAction extends EditorAction {\n  constructor(left, opts) {\n    super(opts);\n    this.left = left;\n  }\n  run(accessor, editor) {\n    if (!editor.hasModel()) {\n      return;\n    }\n    let commands = [];\n    let selections = editor.getSelections();\n    for (const selection of selections) {\n      commands.push(new MoveCaretCommand(selection, this.left));\n    }\n    editor.pushUndoStop();\n    editor.executeCommands(this.id, commands);\n    editor.pushUndoStop();\n  }\n}\nclass MoveCaretLeftAction extends MoveCaretAction {\n  constructor() {\n    super(true, {\n      id: 'editor.action.moveCarretLeftAction',\n      label: nls.localize('caret.moveLeft', \"Move Selected Text Left\"),\n      alias: 'Move Selected Text Left',\n      precondition: EditorContextKeys.writable\n    });\n  }\n}\nclass MoveCaretRightAction extends MoveCaretAction {\n  constructor() {\n    super(false, {\n      id: 'editor.action.moveCarretRightAction',\n      label: nls.localize('caret.moveRight', \"Move Selected Text Right\"),\n      alias: 'Move Selected Text Right',\n      precondition: EditorContextKeys.writable\n    });\n  }\n}\nregisterEditorAction(MoveCaretLeftAction);\nregisterEditorAction(MoveCaretRightAction);","map":{"version":3,"names":["nls","EditorAction","registerEditorAction","EditorContextKeys","MoveCaretCommand","MoveCaretAction","constructor","left","opts","run","accessor","editor","hasModel","commands","selections","getSelections","selection","push","pushUndoStop","executeCommands","id","MoveCaretLeftAction","label","localize","alias","precondition","writable","MoveCaretRightAction"],"sources":["C:/Users/Administrator/Desktop/sqllineage-master/sqllineagejs/node_modules/monaco-editor/esm/vs/editor/contrib/caretOperations/caretOperations.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport * as nls from '../../../nls.js';\r\nimport { EditorAction, registerEditorAction } from '../../browser/editorExtensions.js';\r\nimport { EditorContextKeys } from '../../common/editorContextKeys.js';\r\nimport { MoveCaretCommand } from './moveCaretCommand.js';\r\nclass MoveCaretAction extends EditorAction {\r\n    constructor(left, opts) {\r\n        super(opts);\r\n        this.left = left;\r\n    }\r\n    run(accessor, editor) {\r\n        if (!editor.hasModel()) {\r\n            return;\r\n        }\r\n        let commands = [];\r\n        let selections = editor.getSelections();\r\n        for (const selection of selections) {\r\n            commands.push(new MoveCaretCommand(selection, this.left));\r\n        }\r\n        editor.pushUndoStop();\r\n        editor.executeCommands(this.id, commands);\r\n        editor.pushUndoStop();\r\n    }\r\n}\r\nclass MoveCaretLeftAction extends MoveCaretAction {\r\n    constructor() {\r\n        super(true, {\r\n            id: 'editor.action.moveCarretLeftAction',\r\n            label: nls.localize('caret.moveLeft', \"Move Selected Text Left\"),\r\n            alias: 'Move Selected Text Left',\r\n            precondition: EditorContextKeys.writable\r\n        });\r\n    }\r\n}\r\nclass MoveCaretRightAction extends MoveCaretAction {\r\n    constructor() {\r\n        super(false, {\r\n            id: 'editor.action.moveCarretRightAction',\r\n            label: nls.localize('caret.moveRight', \"Move Selected Text Right\"),\r\n            alias: 'Move Selected Text Right',\r\n            precondition: EditorContextKeys.writable\r\n        });\r\n    }\r\n}\r\nregisterEditorAction(MoveCaretLeftAction);\r\nregisterEditorAction(MoveCaretRightAction);\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,OAAO,KAAKA,GAAG,MAAM,iBAAiB;AACtC,SAASC,YAAY,EAAEC,oBAAoB,QAAQ,mCAAmC;AACtF,SAASC,iBAAiB,QAAQ,mCAAmC;AACrE,SAASC,gBAAgB,QAAQ,uBAAuB;AACxD,MAAMC,eAAe,SAASJ,YAAY,CAAC;EACvCK,WAAWA,CAACC,IAAI,EAAEC,IAAI,EAAE;IACpB,KAAK,CAACA,IAAI,CAAC;IACX,IAAI,CAACD,IAAI,GAAGA,IAAI;EACpB;EACAE,GAAGA,CAACC,QAAQ,EAAEC,MAAM,EAAE;IAClB,IAAI,CAACA,MAAM,CAACC,QAAQ,CAAC,CAAC,EAAE;MACpB;IACJ;IACA,IAAIC,QAAQ,GAAG,EAAE;IACjB,IAAIC,UAAU,GAAGH,MAAM,CAACI,aAAa,CAAC,CAAC;IACvC,KAAK,MAAMC,SAAS,IAAIF,UAAU,EAAE;MAChCD,QAAQ,CAACI,IAAI,CAAC,IAAIb,gBAAgB,CAACY,SAAS,EAAE,IAAI,CAACT,IAAI,CAAC,CAAC;IAC7D;IACAI,MAAM,CAACO,YAAY,CAAC,CAAC;IACrBP,MAAM,CAACQ,eAAe,CAAC,IAAI,CAACC,EAAE,EAAEP,QAAQ,CAAC;IACzCF,MAAM,CAACO,YAAY,CAAC,CAAC;EACzB;AACJ;AACA,MAAMG,mBAAmB,SAAShB,eAAe,CAAC;EAC9CC,WAAWA,CAAA,EAAG;IACV,KAAK,CAAC,IAAI,EAAE;MACRc,EAAE,EAAE,oCAAoC;MACxCE,KAAK,EAAEtB,GAAG,CAACuB,QAAQ,CAAC,gBAAgB,EAAE,yBAAyB,CAAC;MAChEC,KAAK,EAAE,yBAAyB;MAChCC,YAAY,EAAEtB,iBAAiB,CAACuB;IACpC,CAAC,CAAC;EACN;AACJ;AACA,MAAMC,oBAAoB,SAAStB,eAAe,CAAC;EAC/CC,WAAWA,CAAA,EAAG;IACV,KAAK,CAAC,KAAK,EAAE;MACTc,EAAE,EAAE,qCAAqC;MACzCE,KAAK,EAAEtB,GAAG,CAACuB,QAAQ,CAAC,iBAAiB,EAAE,0BAA0B,CAAC;MAClEC,KAAK,EAAE,0BAA0B;MACjCC,YAAY,EAAEtB,iBAAiB,CAACuB;IACpC,CAAC,CAAC;EACN;AACJ;AACAxB,oBAAoB,CAACmB,mBAAmB,CAAC;AACzCnB,oBAAoB,CAACyB,oBAAoB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}