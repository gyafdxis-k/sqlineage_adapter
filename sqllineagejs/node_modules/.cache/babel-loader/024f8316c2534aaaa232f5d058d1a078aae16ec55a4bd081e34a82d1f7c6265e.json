{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../nls.js';\nimport { isFirefox } from '../../../base/browser/browser.js';\nimport * as types from '../../../base/common/types.js';\nimport { Command, EditorCommand, registerEditorCommand, UndoCommand, RedoCommand, SelectAllCommand } from '../editorExtensions.js';\nimport { ICodeEditorService } from '../services/codeEditorService.js';\nimport { ColumnSelection } from '../../common/controller/cursorColumnSelection.js';\nimport { CursorState } from '../../common/controller/cursorCommon.js';\nimport { DeleteOperations } from '../../common/controller/cursorDeleteOperations.js';\nimport { CursorMove as CursorMove_, CursorMoveCommands } from '../../common/controller/cursorMoveCommands.js';\nimport { TypeOperations } from '../../common/controller/cursorTypeOperations.js';\nimport { Position } from '../../common/core/position.js';\nimport { Range } from '../../common/core/range.js';\nimport { EditorContextKeys } from '../../common/editorContextKeys.js';\nimport { ContextKeyExpr } from '../../../platform/contextkey/common/contextkey.js';\nimport { KeybindingsRegistry } from '../../../platform/keybinding/common/keybindingsRegistry.js';\nconst CORE_WEIGHT = 0 /* EditorCore */;\nexport class CoreEditorCommand extends EditorCommand {\n  runEditorCommand(accessor, editor, args) {\n    const viewModel = editor._getViewModel();\n    if (!viewModel) {\n      // the editor has no view => has no cursors\n      return;\n    }\n    this.runCoreEditorCommand(viewModel, args || {});\n  }\n}\nexport var EditorScroll_;\n(function (EditorScroll_) {\n  const isEditorScrollArgs = function (arg) {\n    if (!types.isObject(arg)) {\n      return false;\n    }\n    const scrollArg = arg;\n    if (!types.isString(scrollArg.to)) {\n      return false;\n    }\n    if (!types.isUndefined(scrollArg.by) && !types.isString(scrollArg.by)) {\n      return false;\n    }\n    if (!types.isUndefined(scrollArg.value) && !types.isNumber(scrollArg.value)) {\n      return false;\n    }\n    if (!types.isUndefined(scrollArg.revealCursor) && !types.isBoolean(scrollArg.revealCursor)) {\n      return false;\n    }\n    return true;\n  };\n  EditorScroll_.description = {\n    description: 'Scroll editor in the given direction',\n    args: [{\n      name: 'Editor scroll argument object',\n      description: \"Property-value pairs that can be passed through this argument:\\n\\t\\t\\t\\t\\t* 'to': A mandatory direction value.\\n\\t\\t\\t\\t\\t\\t```\\n\\t\\t\\t\\t\\t\\t'up', 'down'\\n\\t\\t\\t\\t\\t\\t```\\n\\t\\t\\t\\t\\t* 'by': Unit to move. Default is computed based on 'to' value.\\n\\t\\t\\t\\t\\t\\t```\\n\\t\\t\\t\\t\\t\\t'line', 'wrappedLine', 'page', 'halfPage'\\n\\t\\t\\t\\t\\t\\t```\\n\\t\\t\\t\\t\\t* 'value': Number of units to move. Default is '1'.\\n\\t\\t\\t\\t\\t* 'revealCursor': If 'true' reveals the cursor if it is outside view port.\\n\\t\\t\\t\\t\",\n      constraint: isEditorScrollArgs,\n      schema: {\n        'type': 'object',\n        'required': ['to'],\n        'properties': {\n          'to': {\n            'type': 'string',\n            'enum': ['up', 'down']\n          },\n          'by': {\n            'type': 'string',\n            'enum': ['line', 'wrappedLine', 'page', 'halfPage']\n          },\n          'value': {\n            'type': 'number',\n            'default': 1\n          },\n          'revealCursor': {\n            'type': 'boolean'\n          }\n        }\n      }\n    }]\n  };\n  /**\r\n   * Directions in the view for editor scroll command.\r\n   */\n  EditorScroll_.RawDirection = {\n    Up: 'up',\n    Down: 'down'\n  };\n  /**\r\n   * Units for editor scroll 'by' argument\r\n   */\n  EditorScroll_.RawUnit = {\n    Line: 'line',\n    WrappedLine: 'wrappedLine',\n    Page: 'page',\n    HalfPage: 'halfPage'\n  };\n  function parse(args) {\n    let direction;\n    switch (args.to) {\n      case EditorScroll_.RawDirection.Up:\n        direction = 1 /* Up */;\n        break;\n      case EditorScroll_.RawDirection.Down:\n        direction = 2 /* Down */;\n        break;\n      default:\n        // Illegal arguments\n        return null;\n    }\n    let unit;\n    switch (args.by) {\n      case EditorScroll_.RawUnit.Line:\n        unit = 1 /* Line */;\n        break;\n      case EditorScroll_.RawUnit.WrappedLine:\n        unit = 2 /* WrappedLine */;\n        break;\n      case EditorScroll_.RawUnit.Page:\n        unit = 3 /* Page */;\n        break;\n      case EditorScroll_.RawUnit.HalfPage:\n        unit = 4 /* HalfPage */;\n        break;\n      default:\n        unit = 2 /* WrappedLine */;\n    }\n\n    const value = Math.floor(args.value || 1);\n    const revealCursor = !!args.revealCursor;\n    return {\n      direction: direction,\n      unit: unit,\n      value: value,\n      revealCursor: revealCursor,\n      select: !!args.select\n    };\n  }\n  EditorScroll_.parse = parse;\n})(EditorScroll_ || (EditorScroll_ = {}));\nexport var RevealLine_;\n(function (RevealLine_) {\n  const isRevealLineArgs = function (arg) {\n    if (!types.isObject(arg)) {\n      return false;\n    }\n    const reveaLineArg = arg;\n    if (!types.isNumber(reveaLineArg.lineNumber) && !types.isString(reveaLineArg.lineNumber)) {\n      return false;\n    }\n    if (!types.isUndefined(reveaLineArg.at) && !types.isString(reveaLineArg.at)) {\n      return false;\n    }\n    return true;\n  };\n  RevealLine_.description = {\n    description: 'Reveal the given line at the given logical position',\n    args: [{\n      name: 'Reveal line argument object',\n      description: \"Property-value pairs that can be passed through this argument:\\n\\t\\t\\t\\t\\t* 'lineNumber': A mandatory line number value.\\n\\t\\t\\t\\t\\t* 'at': Logical position at which line has to be revealed .\\n\\t\\t\\t\\t\\t\\t```\\n\\t\\t\\t\\t\\t\\t'top', 'center', 'bottom'\\n\\t\\t\\t\\t\\t\\t```\\n\\t\\t\\t\\t\",\n      constraint: isRevealLineArgs,\n      schema: {\n        'type': 'object',\n        'required': ['lineNumber'],\n        'properties': {\n          'lineNumber': {\n            'type': ['number', 'string']\n          },\n          'at': {\n            'type': 'string',\n            'enum': ['top', 'center', 'bottom']\n          }\n        }\n      }\n    }]\n  };\n  /**\r\n   * Values for reveal line 'at' argument\r\n   */\n  RevealLine_.RawAtArgument = {\n    Top: 'top',\n    Center: 'center',\n    Bottom: 'bottom'\n  };\n})(RevealLine_ || (RevealLine_ = {}));\nclass EditorOrNativeTextInputCommand {\n  constructor(target) {\n    // 1. handle case when focus is in editor.\n    target.addImplementation(10000, (accessor, args) => {\n      // Only if editor text focus (i.e. not if editor has widget focus).\n      const focusedEditor = accessor.get(ICodeEditorService).getFocusedCodeEditor();\n      if (focusedEditor && focusedEditor.hasTextFocus()) {\n        return this._runEditorCommand(accessor, focusedEditor, args);\n      }\n      return false;\n    });\n    // 2. handle case when focus is in some other `input` / `textarea`.\n    target.addImplementation(1000, (accessor, args) => {\n      // Only if focused on an element that allows for entering text\n      const activeElement = document.activeElement;\n      if (activeElement && ['input', 'textarea'].indexOf(activeElement.tagName.toLowerCase()) >= 0) {\n        this.runDOMCommand();\n        return true;\n      }\n      return false;\n    });\n    // 3. (default) handle case when focus is somewhere else.\n    target.addImplementation(0, (accessor, args) => {\n      // Redirecting to active editor\n      const activeEditor = accessor.get(ICodeEditorService).getActiveCodeEditor();\n      if (activeEditor) {\n        activeEditor.focus();\n        return this._runEditorCommand(accessor, activeEditor, args);\n      }\n      return false;\n    });\n  }\n  _runEditorCommand(accessor, editor, args) {\n    const result = this.runEditorCommand(accessor, editor, args);\n    if (result) {\n      return result;\n    }\n    return true;\n  }\n}\nexport var CoreNavigationCommands;\n(function (CoreNavigationCommands) {\n  class BaseMoveToCommand extends CoreEditorCommand {\n    constructor(opts) {\n      super(opts);\n      this._inSelectionMode = opts.inSelectionMode;\n    }\n    runCoreEditorCommand(viewModel, args) {\n      viewModel.model.pushStackElement();\n      viewModel.setCursorStates(args.source, 3 /* Explicit */, [CursorMoveCommands.moveTo(viewModel, viewModel.getPrimaryCursorState(), this._inSelectionMode, args.position, args.viewPosition)]);\n      viewModel.revealPrimaryCursor(args.source, true);\n    }\n  }\n  CoreNavigationCommands.MoveTo = registerEditorCommand(new BaseMoveToCommand({\n    id: '_moveTo',\n    inSelectionMode: false,\n    precondition: undefined\n  }));\n  CoreNavigationCommands.MoveToSelect = registerEditorCommand(new BaseMoveToCommand({\n    id: '_moveToSelect',\n    inSelectionMode: true,\n    precondition: undefined\n  }));\n  class ColumnSelectCommand extends CoreEditorCommand {\n    runCoreEditorCommand(viewModel, args) {\n      viewModel.model.pushStackElement();\n      const result = this._getColumnSelectResult(viewModel, viewModel.getPrimaryCursorState(), viewModel.getCursorColumnSelectData(), args);\n      viewModel.setCursorStates(args.source, 3 /* Explicit */, result.viewStates.map(viewState => CursorState.fromViewState(viewState)));\n      viewModel.setCursorColumnSelectData({\n        isReal: true,\n        fromViewLineNumber: result.fromLineNumber,\n        fromViewVisualColumn: result.fromVisualColumn,\n        toViewLineNumber: result.toLineNumber,\n        toViewVisualColumn: result.toVisualColumn\n      });\n      if (result.reversed) {\n        viewModel.revealTopMostCursor(args.source);\n      } else {\n        viewModel.revealBottomMostCursor(args.source);\n      }\n    }\n  }\n  CoreNavigationCommands.ColumnSelect = registerEditorCommand(new class extends ColumnSelectCommand {\n    constructor() {\n      super({\n        id: 'columnSelect',\n        precondition: undefined\n      });\n    }\n    _getColumnSelectResult(viewModel, primary, prevColumnSelectData, args) {\n      // validate `args`\n      const validatedPosition = viewModel.model.validatePosition(args.position);\n      const validatedViewPosition = viewModel.coordinatesConverter.validateViewPosition(new Position(args.viewPosition.lineNumber, args.viewPosition.column), validatedPosition);\n      let fromViewLineNumber = args.doColumnSelect ? prevColumnSelectData.fromViewLineNumber : validatedViewPosition.lineNumber;\n      let fromViewVisualColumn = args.doColumnSelect ? prevColumnSelectData.fromViewVisualColumn : args.mouseColumn - 1;\n      return ColumnSelection.columnSelect(viewModel.cursorConfig, viewModel, fromViewLineNumber, fromViewVisualColumn, validatedViewPosition.lineNumber, args.mouseColumn - 1);\n    }\n  }());\n  CoreNavigationCommands.CursorColumnSelectLeft = registerEditorCommand(new class extends ColumnSelectCommand {\n    constructor() {\n      super({\n        id: 'cursorColumnSelectLeft',\n        precondition: undefined,\n        kbOpts: {\n          weight: CORE_WEIGHT,\n          kbExpr: EditorContextKeys.textInputFocus,\n          primary: 2048 /* CtrlCmd */ | 1024 /* Shift */ | 512 /* Alt */ | 15 /* LeftArrow */,\n          linux: {\n            primary: 0\n          }\n        }\n      });\n    }\n    _getColumnSelectResult(viewModel, primary, prevColumnSelectData, args) {\n      return ColumnSelection.columnSelectLeft(viewModel.cursorConfig, viewModel, prevColumnSelectData);\n    }\n  }());\n  CoreNavigationCommands.CursorColumnSelectRight = registerEditorCommand(new class extends ColumnSelectCommand {\n    constructor() {\n      super({\n        id: 'cursorColumnSelectRight',\n        precondition: undefined,\n        kbOpts: {\n          weight: CORE_WEIGHT,\n          kbExpr: EditorContextKeys.textInputFocus,\n          primary: 2048 /* CtrlCmd */ | 1024 /* Shift */ | 512 /* Alt */ | 17 /* RightArrow */,\n          linux: {\n            primary: 0\n          }\n        }\n      });\n    }\n    _getColumnSelectResult(viewModel, primary, prevColumnSelectData, args) {\n      return ColumnSelection.columnSelectRight(viewModel.cursorConfig, viewModel, prevColumnSelectData);\n    }\n  }());\n  class ColumnSelectUpCommand extends ColumnSelectCommand {\n    constructor(opts) {\n      super(opts);\n      this._isPaged = opts.isPaged;\n    }\n    _getColumnSelectResult(viewModel, primary, prevColumnSelectData, args) {\n      return ColumnSelection.columnSelectUp(viewModel.cursorConfig, viewModel, prevColumnSelectData, this._isPaged);\n    }\n  }\n  CoreNavigationCommands.CursorColumnSelectUp = registerEditorCommand(new ColumnSelectUpCommand({\n    isPaged: false,\n    id: 'cursorColumnSelectUp',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 2048 /* CtrlCmd */ | 1024 /* Shift */ | 512 /* Alt */ | 16 /* UpArrow */,\n      linux: {\n        primary: 0\n      }\n    }\n  }));\n  CoreNavigationCommands.CursorColumnSelectPageUp = registerEditorCommand(new ColumnSelectUpCommand({\n    isPaged: true,\n    id: 'cursorColumnSelectPageUp',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 2048 /* CtrlCmd */ | 1024 /* Shift */ | 512 /* Alt */ | 11 /* PageUp */,\n      linux: {\n        primary: 0\n      }\n    }\n  }));\n  class ColumnSelectDownCommand extends ColumnSelectCommand {\n    constructor(opts) {\n      super(opts);\n      this._isPaged = opts.isPaged;\n    }\n    _getColumnSelectResult(viewModel, primary, prevColumnSelectData, args) {\n      return ColumnSelection.columnSelectDown(viewModel.cursorConfig, viewModel, prevColumnSelectData, this._isPaged);\n    }\n  }\n  CoreNavigationCommands.CursorColumnSelectDown = registerEditorCommand(new ColumnSelectDownCommand({\n    isPaged: false,\n    id: 'cursorColumnSelectDown',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 2048 /* CtrlCmd */ | 1024 /* Shift */ | 512 /* Alt */ | 18 /* DownArrow */,\n      linux: {\n        primary: 0\n      }\n    }\n  }));\n  CoreNavigationCommands.CursorColumnSelectPageDown = registerEditorCommand(new ColumnSelectDownCommand({\n    isPaged: true,\n    id: 'cursorColumnSelectPageDown',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 2048 /* CtrlCmd */ | 1024 /* Shift */ | 512 /* Alt */ | 12 /* PageDown */,\n      linux: {\n        primary: 0\n      }\n    }\n  }));\n  class CursorMoveImpl extends CoreEditorCommand {\n    constructor() {\n      super({\n        id: 'cursorMove',\n        precondition: undefined,\n        description: CursorMove_.description\n      });\n    }\n    runCoreEditorCommand(viewModel, args) {\n      const parsed = CursorMove_.parse(args);\n      if (!parsed) {\n        // illegal arguments\n        return;\n      }\n      this._runCursorMove(viewModel, args.source, parsed);\n    }\n    _runCursorMove(viewModel, source, args) {\n      viewModel.model.pushStackElement();\n      viewModel.setCursorStates(source, 3 /* Explicit */, CursorMoveImpl._move(viewModel, viewModel.getCursorStates(), args));\n      viewModel.revealPrimaryCursor(source, true);\n    }\n    static _move(viewModel, cursors, args) {\n      const inSelectionMode = args.select;\n      const value = args.value;\n      switch (args.direction) {\n        case 0 /* Left */:\n        case 1 /* Right */:\n        case 2 /* Up */:\n        case 3 /* Down */:\n        case 4 /* WrappedLineStart */:\n        case 5 /* WrappedLineFirstNonWhitespaceCharacter */:\n        case 6 /* WrappedLineColumnCenter */:\n        case 7 /* WrappedLineEnd */:\n        case 8 /* WrappedLineLastNonWhitespaceCharacter */:\n          return CursorMoveCommands.simpleMove(viewModel, cursors, args.direction, inSelectionMode, value, args.unit);\n        case 9 /* ViewPortTop */:\n        case 11 /* ViewPortBottom */:\n        case 10 /* ViewPortCenter */:\n        case 12 /* ViewPortIfOutside */:\n          return CursorMoveCommands.viewportMove(viewModel, cursors, args.direction, inSelectionMode, value);\n        default:\n          return null;\n      }\n    }\n  }\n  CoreNavigationCommands.CursorMoveImpl = CursorMoveImpl;\n  CoreNavigationCommands.CursorMove = registerEditorCommand(new CursorMoveImpl());\n  class CursorMoveBasedCommand extends CoreEditorCommand {\n    constructor(opts) {\n      super(opts);\n      this._staticArgs = opts.args;\n    }\n    runCoreEditorCommand(viewModel, dynamicArgs) {\n      let args = this._staticArgs;\n      if (this._staticArgs.value === -1 /* PAGE_SIZE_MARKER */) {\n        // -1 is a marker for page size\n        args = {\n          direction: this._staticArgs.direction,\n          unit: this._staticArgs.unit,\n          select: this._staticArgs.select,\n          value: viewModel.cursorConfig.pageSize\n        };\n      }\n      viewModel.model.pushStackElement();\n      viewModel.setCursorStates(dynamicArgs.source, 3 /* Explicit */, CursorMoveCommands.simpleMove(viewModel, viewModel.getCursorStates(), args.direction, args.select, args.value, args.unit));\n      viewModel.revealPrimaryCursor(dynamicArgs.source, true);\n    }\n  }\n  CoreNavigationCommands.CursorLeft = registerEditorCommand(new CursorMoveBasedCommand({\n    args: {\n      direction: 0 /* Left */,\n      unit: 0 /* None */,\n      select: false,\n      value: 1\n    },\n    id: 'cursorLeft',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 15 /* LeftArrow */,\n      mac: {\n        primary: 15 /* LeftArrow */,\n        secondary: [256 /* WinCtrl */ | 32 /* KEY_B */]\n      }\n    }\n  }));\n\n  CoreNavigationCommands.CursorLeftSelect = registerEditorCommand(new CursorMoveBasedCommand({\n    args: {\n      direction: 0 /* Left */,\n      unit: 0 /* None */,\n      select: true,\n      value: 1\n    },\n    id: 'cursorLeftSelect',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 1024 /* Shift */ | 15 /* LeftArrow */\n    }\n  }));\n\n  CoreNavigationCommands.CursorRight = registerEditorCommand(new CursorMoveBasedCommand({\n    args: {\n      direction: 1 /* Right */,\n      unit: 0 /* None */,\n      select: false,\n      value: 1\n    },\n    id: 'cursorRight',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 17 /* RightArrow */,\n      mac: {\n        primary: 17 /* RightArrow */,\n        secondary: [256 /* WinCtrl */ | 36 /* KEY_F */]\n      }\n    }\n  }));\n\n  CoreNavigationCommands.CursorRightSelect = registerEditorCommand(new CursorMoveBasedCommand({\n    args: {\n      direction: 1 /* Right */,\n      unit: 0 /* None */,\n      select: true,\n      value: 1\n    },\n    id: 'cursorRightSelect',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 1024 /* Shift */ | 17 /* RightArrow */\n    }\n  }));\n\n  CoreNavigationCommands.CursorUp = registerEditorCommand(new CursorMoveBasedCommand({\n    args: {\n      direction: 2 /* Up */,\n      unit: 2 /* WrappedLine */,\n      select: false,\n      value: 1\n    },\n    id: 'cursorUp',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 16 /* UpArrow */,\n      mac: {\n        primary: 16 /* UpArrow */,\n        secondary: [256 /* WinCtrl */ | 46 /* KEY_P */]\n      }\n    }\n  }));\n\n  CoreNavigationCommands.CursorUpSelect = registerEditorCommand(new CursorMoveBasedCommand({\n    args: {\n      direction: 2 /* Up */,\n      unit: 2 /* WrappedLine */,\n      select: true,\n      value: 1\n    },\n    id: 'cursorUpSelect',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 1024 /* Shift */ | 16 /* UpArrow */,\n      secondary: [2048 /* CtrlCmd */ | 1024 /* Shift */ | 16 /* UpArrow */],\n      mac: {\n        primary: 1024 /* Shift */ | 16 /* UpArrow */\n      },\n      linux: {\n        primary: 1024 /* Shift */ | 16 /* UpArrow */\n      }\n    }\n  }));\n\n  CoreNavigationCommands.CursorPageUp = registerEditorCommand(new CursorMoveBasedCommand({\n    args: {\n      direction: 2 /* Up */,\n      unit: 2 /* WrappedLine */,\n      select: false,\n      value: -1 /* PAGE_SIZE_MARKER */\n    },\n\n    id: 'cursorPageUp',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 11 /* PageUp */\n    }\n  }));\n\n  CoreNavigationCommands.CursorPageUpSelect = registerEditorCommand(new CursorMoveBasedCommand({\n    args: {\n      direction: 2 /* Up */,\n      unit: 2 /* WrappedLine */,\n      select: true,\n      value: -1 /* PAGE_SIZE_MARKER */\n    },\n\n    id: 'cursorPageUpSelect',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 1024 /* Shift */ | 11 /* PageUp */\n    }\n  }));\n\n  CoreNavigationCommands.CursorDown = registerEditorCommand(new CursorMoveBasedCommand({\n    args: {\n      direction: 3 /* Down */,\n      unit: 2 /* WrappedLine */,\n      select: false,\n      value: 1\n    },\n    id: 'cursorDown',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 18 /* DownArrow */,\n      mac: {\n        primary: 18 /* DownArrow */,\n        secondary: [256 /* WinCtrl */ | 44 /* KEY_N */]\n      }\n    }\n  }));\n\n  CoreNavigationCommands.CursorDownSelect = registerEditorCommand(new CursorMoveBasedCommand({\n    args: {\n      direction: 3 /* Down */,\n      unit: 2 /* WrappedLine */,\n      select: true,\n      value: 1\n    },\n    id: 'cursorDownSelect',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 1024 /* Shift */ | 18 /* DownArrow */,\n      secondary: [2048 /* CtrlCmd */ | 1024 /* Shift */ | 18 /* DownArrow */],\n      mac: {\n        primary: 1024 /* Shift */ | 18 /* DownArrow */\n      },\n      linux: {\n        primary: 1024 /* Shift */ | 18 /* DownArrow */\n      }\n    }\n  }));\n\n  CoreNavigationCommands.CursorPageDown = registerEditorCommand(new CursorMoveBasedCommand({\n    args: {\n      direction: 3 /* Down */,\n      unit: 2 /* WrappedLine */,\n      select: false,\n      value: -1 /* PAGE_SIZE_MARKER */\n    },\n\n    id: 'cursorPageDown',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 12 /* PageDown */\n    }\n  }));\n\n  CoreNavigationCommands.CursorPageDownSelect = registerEditorCommand(new CursorMoveBasedCommand({\n    args: {\n      direction: 3 /* Down */,\n      unit: 2 /* WrappedLine */,\n      select: true,\n      value: -1 /* PAGE_SIZE_MARKER */\n    },\n\n    id: 'cursorPageDownSelect',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 1024 /* Shift */ | 12 /* PageDown */\n    }\n  }));\n\n  CoreNavigationCommands.CreateCursor = registerEditorCommand(new class extends CoreEditorCommand {\n    constructor() {\n      super({\n        id: 'createCursor',\n        precondition: undefined\n      });\n    }\n    runCoreEditorCommand(viewModel, args) {\n      let newState;\n      if (args.wholeLine) {\n        newState = CursorMoveCommands.line(viewModel, viewModel.getPrimaryCursorState(), false, args.position, args.viewPosition);\n      } else {\n        newState = CursorMoveCommands.moveTo(viewModel, viewModel.getPrimaryCursorState(), false, args.position, args.viewPosition);\n      }\n      const states = viewModel.getCursorStates();\n      // Check if we should remove a cursor (sort of like a toggle)\n      if (states.length > 1) {\n        const newModelPosition = newState.modelState ? newState.modelState.position : null;\n        const newViewPosition = newState.viewState ? newState.viewState.position : null;\n        for (let i = 0, len = states.length; i < len; i++) {\n          const state = states[i];\n          if (newModelPosition && !state.modelState.selection.containsPosition(newModelPosition)) {\n            continue;\n          }\n          if (newViewPosition && !state.viewState.selection.containsPosition(newViewPosition)) {\n            continue;\n          }\n          // => Remove the cursor\n          states.splice(i, 1);\n          viewModel.model.pushStackElement();\n          viewModel.setCursorStates(args.source, 3 /* Explicit */, states);\n          return;\n        }\n      }\n      // => Add the new cursor\n      states.push(newState);\n      viewModel.model.pushStackElement();\n      viewModel.setCursorStates(args.source, 3 /* Explicit */, states);\n    }\n  }());\n  CoreNavigationCommands.LastCursorMoveToSelect = registerEditorCommand(new class extends CoreEditorCommand {\n    constructor() {\n      super({\n        id: '_lastCursorMoveToSelect',\n        precondition: undefined\n      });\n    }\n    runCoreEditorCommand(viewModel, args) {\n      const lastAddedCursorIndex = viewModel.getLastAddedCursorIndex();\n      const states = viewModel.getCursorStates();\n      const newStates = states.slice(0);\n      newStates[lastAddedCursorIndex] = CursorMoveCommands.moveTo(viewModel, states[lastAddedCursorIndex], true, args.position, args.viewPosition);\n      viewModel.model.pushStackElement();\n      viewModel.setCursorStates(args.source, 3 /* Explicit */, newStates);\n    }\n  }());\n  class HomeCommand extends CoreEditorCommand {\n    constructor(opts) {\n      super(opts);\n      this._inSelectionMode = opts.inSelectionMode;\n    }\n    runCoreEditorCommand(viewModel, args) {\n      viewModel.model.pushStackElement();\n      viewModel.setCursorStates(args.source, 3 /* Explicit */, CursorMoveCommands.moveToBeginningOfLine(viewModel, viewModel.getCursorStates(), this._inSelectionMode));\n      viewModel.revealPrimaryCursor(args.source, true);\n    }\n  }\n  CoreNavigationCommands.CursorHome = registerEditorCommand(new HomeCommand({\n    inSelectionMode: false,\n    id: 'cursorHome',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 14 /* Home */,\n      mac: {\n        primary: 14 /* Home */,\n        secondary: [2048 /* CtrlCmd */ | 15 /* LeftArrow */]\n      }\n    }\n  }));\n\n  CoreNavigationCommands.CursorHomeSelect = registerEditorCommand(new HomeCommand({\n    inSelectionMode: true,\n    id: 'cursorHomeSelect',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 1024 /* Shift */ | 14 /* Home */,\n      mac: {\n        primary: 1024 /* Shift */ | 14 /* Home */,\n        secondary: [2048 /* CtrlCmd */ | 1024 /* Shift */ | 15 /* LeftArrow */]\n      }\n    }\n  }));\n\n  class LineStartCommand extends CoreEditorCommand {\n    constructor(opts) {\n      super(opts);\n      this._inSelectionMode = opts.inSelectionMode;\n    }\n    runCoreEditorCommand(viewModel, args) {\n      viewModel.model.pushStackElement();\n      viewModel.setCursorStates(args.source, 3 /* Explicit */, this._exec(viewModel.getCursorStates()));\n      viewModel.revealPrimaryCursor(args.source, true);\n    }\n    _exec(cursors) {\n      const result = [];\n      for (let i = 0, len = cursors.length; i < len; i++) {\n        const cursor = cursors[i];\n        const lineNumber = cursor.modelState.position.lineNumber;\n        result[i] = CursorState.fromModelState(cursor.modelState.move(this._inSelectionMode, lineNumber, 1, 0));\n      }\n      return result;\n    }\n  }\n  CoreNavigationCommands.CursorLineStart = registerEditorCommand(new LineStartCommand({\n    inSelectionMode: false,\n    id: 'cursorLineStart',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 0,\n      mac: {\n        primary: 256 /* WinCtrl */ | 31 /* KEY_A */\n      }\n    }\n  }));\n\n  CoreNavigationCommands.CursorLineStartSelect = registerEditorCommand(new LineStartCommand({\n    inSelectionMode: true,\n    id: 'cursorLineStartSelect',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 0,\n      mac: {\n        primary: 256 /* WinCtrl */ | 1024 /* Shift */ | 31 /* KEY_A */\n      }\n    }\n  }));\n\n  class EndCommand extends CoreEditorCommand {\n    constructor(opts) {\n      super(opts);\n      this._inSelectionMode = opts.inSelectionMode;\n    }\n    runCoreEditorCommand(viewModel, args) {\n      viewModel.model.pushStackElement();\n      viewModel.setCursorStates(args.source, 3 /* Explicit */, CursorMoveCommands.moveToEndOfLine(viewModel, viewModel.getCursorStates(), this._inSelectionMode, args.sticky || false));\n      viewModel.revealPrimaryCursor(args.source, true);\n    }\n  }\n  CoreNavigationCommands.CursorEnd = registerEditorCommand(new EndCommand({\n    inSelectionMode: false,\n    id: 'cursorEnd',\n    precondition: undefined,\n    kbOpts: {\n      args: {\n        sticky: false\n      },\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 13 /* End */,\n      mac: {\n        primary: 13 /* End */,\n        secondary: [2048 /* CtrlCmd */ | 17 /* RightArrow */]\n      }\n    },\n\n    description: {\n      description: \"Go to End\",\n      args: [{\n        name: 'args',\n        schema: {\n          type: 'object',\n          properties: {\n            'sticky': {\n              description: nls.localize('stickydesc', \"Stick to the end even when going to longer lines\"),\n              type: 'boolean',\n              default: false\n            }\n          }\n        }\n      }]\n    }\n  }));\n  CoreNavigationCommands.CursorEndSelect = registerEditorCommand(new EndCommand({\n    inSelectionMode: true,\n    id: 'cursorEndSelect',\n    precondition: undefined,\n    kbOpts: {\n      args: {\n        sticky: false\n      },\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 1024 /* Shift */ | 13 /* End */,\n      mac: {\n        primary: 1024 /* Shift */ | 13 /* End */,\n        secondary: [2048 /* CtrlCmd */ | 1024 /* Shift */ | 17 /* RightArrow */]\n      }\n    },\n\n    description: {\n      description: \"Select to End\",\n      args: [{\n        name: 'args',\n        schema: {\n          type: 'object',\n          properties: {\n            'sticky': {\n              description: nls.localize('stickydesc', \"Stick to the end even when going to longer lines\"),\n              type: 'boolean',\n              default: false\n            }\n          }\n        }\n      }]\n    }\n  }));\n  class LineEndCommand extends CoreEditorCommand {\n    constructor(opts) {\n      super(opts);\n      this._inSelectionMode = opts.inSelectionMode;\n    }\n    runCoreEditorCommand(viewModel, args) {\n      viewModel.model.pushStackElement();\n      viewModel.setCursorStates(args.source, 3 /* Explicit */, this._exec(viewModel, viewModel.getCursorStates()));\n      viewModel.revealPrimaryCursor(args.source, true);\n    }\n    _exec(viewModel, cursors) {\n      const result = [];\n      for (let i = 0, len = cursors.length; i < len; i++) {\n        const cursor = cursors[i];\n        const lineNumber = cursor.modelState.position.lineNumber;\n        const maxColumn = viewModel.model.getLineMaxColumn(lineNumber);\n        result[i] = CursorState.fromModelState(cursor.modelState.move(this._inSelectionMode, lineNumber, maxColumn, 0));\n      }\n      return result;\n    }\n  }\n  CoreNavigationCommands.CursorLineEnd = registerEditorCommand(new LineEndCommand({\n    inSelectionMode: false,\n    id: 'cursorLineEnd',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 0,\n      mac: {\n        primary: 256 /* WinCtrl */ | 35 /* KEY_E */\n      }\n    }\n  }));\n\n  CoreNavigationCommands.CursorLineEndSelect = registerEditorCommand(new LineEndCommand({\n    inSelectionMode: true,\n    id: 'cursorLineEndSelect',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 0,\n      mac: {\n        primary: 256 /* WinCtrl */ | 1024 /* Shift */ | 35 /* KEY_E */\n      }\n    }\n  }));\n\n  class TopCommand extends CoreEditorCommand {\n    constructor(opts) {\n      super(opts);\n      this._inSelectionMode = opts.inSelectionMode;\n    }\n    runCoreEditorCommand(viewModel, args) {\n      viewModel.model.pushStackElement();\n      viewModel.setCursorStates(args.source, 3 /* Explicit */, CursorMoveCommands.moveToBeginningOfBuffer(viewModel, viewModel.getCursorStates(), this._inSelectionMode));\n      viewModel.revealPrimaryCursor(args.source, true);\n    }\n  }\n  CoreNavigationCommands.CursorTop = registerEditorCommand(new TopCommand({\n    inSelectionMode: false,\n    id: 'cursorTop',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 2048 /* CtrlCmd */ | 14 /* Home */,\n      mac: {\n        primary: 2048 /* CtrlCmd */ | 16 /* UpArrow */\n      }\n    }\n  }));\n\n  CoreNavigationCommands.CursorTopSelect = registerEditorCommand(new TopCommand({\n    inSelectionMode: true,\n    id: 'cursorTopSelect',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 2048 /* CtrlCmd */ | 1024 /* Shift */ | 14 /* Home */,\n      mac: {\n        primary: 2048 /* CtrlCmd */ | 1024 /* Shift */ | 16 /* UpArrow */\n      }\n    }\n  }));\n\n  class BottomCommand extends CoreEditorCommand {\n    constructor(opts) {\n      super(opts);\n      this._inSelectionMode = opts.inSelectionMode;\n    }\n    runCoreEditorCommand(viewModel, args) {\n      viewModel.model.pushStackElement();\n      viewModel.setCursorStates(args.source, 3 /* Explicit */, CursorMoveCommands.moveToEndOfBuffer(viewModel, viewModel.getCursorStates(), this._inSelectionMode));\n      viewModel.revealPrimaryCursor(args.source, true);\n    }\n  }\n  CoreNavigationCommands.CursorBottom = registerEditorCommand(new BottomCommand({\n    inSelectionMode: false,\n    id: 'cursorBottom',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 2048 /* CtrlCmd */ | 13 /* End */,\n      mac: {\n        primary: 2048 /* CtrlCmd */ | 18 /* DownArrow */\n      }\n    }\n  }));\n\n  CoreNavigationCommands.CursorBottomSelect = registerEditorCommand(new BottomCommand({\n    inSelectionMode: true,\n    id: 'cursorBottomSelect',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 2048 /* CtrlCmd */ | 1024 /* Shift */ | 13 /* End */,\n      mac: {\n        primary: 2048 /* CtrlCmd */ | 1024 /* Shift */ | 18 /* DownArrow */\n      }\n    }\n  }));\n\n  class EditorScrollImpl extends CoreEditorCommand {\n    constructor() {\n      super({\n        id: 'editorScroll',\n        precondition: undefined,\n        description: EditorScroll_.description\n      });\n    }\n    runCoreEditorCommand(viewModel, args) {\n      const parsed = EditorScroll_.parse(args);\n      if (!parsed) {\n        // illegal arguments\n        return;\n      }\n      this._runEditorScroll(viewModel, args.source, parsed);\n    }\n    _runEditorScroll(viewModel, source, args) {\n      const desiredScrollTop = this._computeDesiredScrollTop(viewModel, args);\n      if (args.revealCursor) {\n        // must ensure cursor is in new visible range\n        const desiredVisibleViewRange = viewModel.getCompletelyVisibleViewRangeAtScrollTop(desiredScrollTop);\n        viewModel.setCursorStates(source, 3 /* Explicit */, [CursorMoveCommands.findPositionInViewportIfOutside(viewModel, viewModel.getPrimaryCursorState(), desiredVisibleViewRange, args.select)]);\n      }\n      viewModel.setScrollTop(desiredScrollTop, 0 /* Smooth */);\n    }\n\n    _computeDesiredScrollTop(viewModel, args) {\n      if (args.unit === 1 /* Line */) {\n        // scrolling by model lines\n        const visibleViewRange = viewModel.getCompletelyVisibleViewRange();\n        const visibleModelRange = viewModel.coordinatesConverter.convertViewRangeToModelRange(visibleViewRange);\n        let desiredTopModelLineNumber;\n        if (args.direction === 1 /* Up */) {\n          // must go x model lines up\n          desiredTopModelLineNumber = Math.max(1, visibleModelRange.startLineNumber - args.value);\n        } else {\n          // must go x model lines down\n          desiredTopModelLineNumber = Math.min(viewModel.model.getLineCount(), visibleModelRange.startLineNumber + args.value);\n        }\n        const viewPosition = viewModel.coordinatesConverter.convertModelPositionToViewPosition(new Position(desiredTopModelLineNumber, 1));\n        return viewModel.getVerticalOffsetForLineNumber(viewPosition.lineNumber);\n      }\n      let noOfLines;\n      if (args.unit === 3 /* Page */) {\n        noOfLines = viewModel.cursorConfig.pageSize * args.value;\n      } else if (args.unit === 4 /* HalfPage */) {\n        noOfLines = Math.round(viewModel.cursorConfig.pageSize / 2) * args.value;\n      } else {\n        noOfLines = args.value;\n      }\n      const deltaLines = (args.direction === 1 /* Up */ ? -1 : 1) * noOfLines;\n      return viewModel.getScrollTop() + deltaLines * viewModel.cursorConfig.lineHeight;\n    }\n  }\n  CoreNavigationCommands.EditorScrollImpl = EditorScrollImpl;\n  CoreNavigationCommands.EditorScroll = registerEditorCommand(new EditorScrollImpl());\n  CoreNavigationCommands.ScrollLineUp = registerEditorCommand(new class extends CoreEditorCommand {\n    constructor() {\n      super({\n        id: 'scrollLineUp',\n        precondition: undefined,\n        kbOpts: {\n          weight: CORE_WEIGHT,\n          kbExpr: EditorContextKeys.textInputFocus,\n          primary: 2048 /* CtrlCmd */ | 16 /* UpArrow */,\n          mac: {\n            primary: 256 /* WinCtrl */ | 11 /* PageUp */\n          }\n        }\n      });\n    }\n\n    runCoreEditorCommand(viewModel, args) {\n      CoreNavigationCommands.EditorScroll._runEditorScroll(viewModel, args.source, {\n        direction: 1 /* Up */,\n        unit: 2 /* WrappedLine */,\n        value: 1,\n        revealCursor: false,\n        select: false\n      });\n    }\n  }());\n  CoreNavigationCommands.ScrollPageUp = registerEditorCommand(new class extends CoreEditorCommand {\n    constructor() {\n      super({\n        id: 'scrollPageUp',\n        precondition: undefined,\n        kbOpts: {\n          weight: CORE_WEIGHT,\n          kbExpr: EditorContextKeys.textInputFocus,\n          primary: 2048 /* CtrlCmd */ | 11 /* PageUp */,\n          win: {\n            primary: 512 /* Alt */ | 11 /* PageUp */\n          },\n          linux: {\n            primary: 512 /* Alt */ | 11 /* PageUp */\n          }\n        }\n      });\n    }\n\n    runCoreEditorCommand(viewModel, args) {\n      CoreNavigationCommands.EditorScroll._runEditorScroll(viewModel, args.source, {\n        direction: 1 /* Up */,\n        unit: 3 /* Page */,\n        value: 1,\n        revealCursor: false,\n        select: false\n      });\n    }\n  }());\n  CoreNavigationCommands.ScrollLineDown = registerEditorCommand(new class extends CoreEditorCommand {\n    constructor() {\n      super({\n        id: 'scrollLineDown',\n        precondition: undefined,\n        kbOpts: {\n          weight: CORE_WEIGHT,\n          kbExpr: EditorContextKeys.textInputFocus,\n          primary: 2048 /* CtrlCmd */ | 18 /* DownArrow */,\n          mac: {\n            primary: 256 /* WinCtrl */ | 12 /* PageDown */\n          }\n        }\n      });\n    }\n\n    runCoreEditorCommand(viewModel, args) {\n      CoreNavigationCommands.EditorScroll._runEditorScroll(viewModel, args.source, {\n        direction: 2 /* Down */,\n        unit: 2 /* WrappedLine */,\n        value: 1,\n        revealCursor: false,\n        select: false\n      });\n    }\n  }());\n  CoreNavigationCommands.ScrollPageDown = registerEditorCommand(new class extends CoreEditorCommand {\n    constructor() {\n      super({\n        id: 'scrollPageDown',\n        precondition: undefined,\n        kbOpts: {\n          weight: CORE_WEIGHT,\n          kbExpr: EditorContextKeys.textInputFocus,\n          primary: 2048 /* CtrlCmd */ | 12 /* PageDown */,\n          win: {\n            primary: 512 /* Alt */ | 12 /* PageDown */\n          },\n          linux: {\n            primary: 512 /* Alt */ | 12 /* PageDown */\n          }\n        }\n      });\n    }\n\n    runCoreEditorCommand(viewModel, args) {\n      CoreNavigationCommands.EditorScroll._runEditorScroll(viewModel, args.source, {\n        direction: 2 /* Down */,\n        unit: 3 /* Page */,\n        value: 1,\n        revealCursor: false,\n        select: false\n      });\n    }\n  }());\n  class WordCommand extends CoreEditorCommand {\n    constructor(opts) {\n      super(opts);\n      this._inSelectionMode = opts.inSelectionMode;\n    }\n    runCoreEditorCommand(viewModel, args) {\n      viewModel.model.pushStackElement();\n      viewModel.setCursorStates(args.source, 3 /* Explicit */, [CursorMoveCommands.word(viewModel, viewModel.getPrimaryCursorState(), this._inSelectionMode, args.position)]);\n      viewModel.revealPrimaryCursor(args.source, true);\n    }\n  }\n  CoreNavigationCommands.WordSelect = registerEditorCommand(new WordCommand({\n    inSelectionMode: false,\n    id: '_wordSelect',\n    precondition: undefined\n  }));\n  CoreNavigationCommands.WordSelectDrag = registerEditorCommand(new WordCommand({\n    inSelectionMode: true,\n    id: '_wordSelectDrag',\n    precondition: undefined\n  }));\n  CoreNavigationCommands.LastCursorWordSelect = registerEditorCommand(new class extends CoreEditorCommand {\n    constructor() {\n      super({\n        id: 'lastCursorWordSelect',\n        precondition: undefined\n      });\n    }\n    runCoreEditorCommand(viewModel, args) {\n      const lastAddedCursorIndex = viewModel.getLastAddedCursorIndex();\n      const states = viewModel.getCursorStates();\n      const newStates = states.slice(0);\n      const lastAddedState = states[lastAddedCursorIndex];\n      newStates[lastAddedCursorIndex] = CursorMoveCommands.word(viewModel, lastAddedState, lastAddedState.modelState.hasSelection(), args.position);\n      viewModel.model.pushStackElement();\n      viewModel.setCursorStates(args.source, 3 /* Explicit */, newStates);\n    }\n  }());\n  class LineCommand extends CoreEditorCommand {\n    constructor(opts) {\n      super(opts);\n      this._inSelectionMode = opts.inSelectionMode;\n    }\n    runCoreEditorCommand(viewModel, args) {\n      viewModel.model.pushStackElement();\n      viewModel.setCursorStates(args.source, 3 /* Explicit */, [CursorMoveCommands.line(viewModel, viewModel.getPrimaryCursorState(), this._inSelectionMode, args.position, args.viewPosition)]);\n      viewModel.revealPrimaryCursor(args.source, false);\n    }\n  }\n  CoreNavigationCommands.LineSelect = registerEditorCommand(new LineCommand({\n    inSelectionMode: false,\n    id: '_lineSelect',\n    precondition: undefined\n  }));\n  CoreNavigationCommands.LineSelectDrag = registerEditorCommand(new LineCommand({\n    inSelectionMode: true,\n    id: '_lineSelectDrag',\n    precondition: undefined\n  }));\n  class LastCursorLineCommand extends CoreEditorCommand {\n    constructor(opts) {\n      super(opts);\n      this._inSelectionMode = opts.inSelectionMode;\n    }\n    runCoreEditorCommand(viewModel, args) {\n      const lastAddedCursorIndex = viewModel.getLastAddedCursorIndex();\n      const states = viewModel.getCursorStates();\n      const newStates = states.slice(0);\n      newStates[lastAddedCursorIndex] = CursorMoveCommands.line(viewModel, states[lastAddedCursorIndex], this._inSelectionMode, args.position, args.viewPosition);\n      viewModel.model.pushStackElement();\n      viewModel.setCursorStates(args.source, 3 /* Explicit */, newStates);\n    }\n  }\n  CoreNavigationCommands.LastCursorLineSelect = registerEditorCommand(new LastCursorLineCommand({\n    inSelectionMode: false,\n    id: 'lastCursorLineSelect',\n    precondition: undefined\n  }));\n  CoreNavigationCommands.LastCursorLineSelectDrag = registerEditorCommand(new LastCursorLineCommand({\n    inSelectionMode: true,\n    id: 'lastCursorLineSelectDrag',\n    precondition: undefined\n  }));\n  CoreNavigationCommands.ExpandLineSelection = registerEditorCommand(new class extends CoreEditorCommand {\n    constructor() {\n      super({\n        id: 'expandLineSelection',\n        precondition: undefined,\n        kbOpts: {\n          weight: CORE_WEIGHT,\n          kbExpr: EditorContextKeys.textInputFocus,\n          primary: 2048 /* CtrlCmd */ | 42 /* KEY_L */\n        }\n      });\n    }\n\n    runCoreEditorCommand(viewModel, args) {\n      viewModel.model.pushStackElement();\n      viewModel.setCursorStates(args.source, 3 /* Explicit */, CursorMoveCommands.expandLineSelection(viewModel, viewModel.getCursorStates()));\n      viewModel.revealPrimaryCursor(args.source, true);\n    }\n  }());\n  CoreNavigationCommands.CancelSelection = registerEditorCommand(new class extends CoreEditorCommand {\n    constructor() {\n      super({\n        id: 'cancelSelection',\n        precondition: EditorContextKeys.hasNonEmptySelection,\n        kbOpts: {\n          weight: CORE_WEIGHT,\n          kbExpr: EditorContextKeys.textInputFocus,\n          primary: 9 /* Escape */,\n          secondary: [1024 /* Shift */ | 9 /* Escape */]\n        }\n      });\n    }\n\n    runCoreEditorCommand(viewModel, args) {\n      viewModel.model.pushStackElement();\n      viewModel.setCursorStates(args.source, 3 /* Explicit */, [CursorMoveCommands.cancelSelection(viewModel, viewModel.getPrimaryCursorState())]);\n      viewModel.revealPrimaryCursor(args.source, true);\n    }\n  }());\n  CoreNavigationCommands.RemoveSecondaryCursors = registerEditorCommand(new class extends CoreEditorCommand {\n    constructor() {\n      super({\n        id: 'removeSecondaryCursors',\n        precondition: EditorContextKeys.hasMultipleSelections,\n        kbOpts: {\n          weight: CORE_WEIGHT + 1,\n          kbExpr: EditorContextKeys.textInputFocus,\n          primary: 9 /* Escape */,\n          secondary: [1024 /* Shift */ | 9 /* Escape */]\n        }\n      });\n    }\n\n    runCoreEditorCommand(viewModel, args) {\n      viewModel.model.pushStackElement();\n      viewModel.setCursorStates(args.source, 3 /* Explicit */, [viewModel.getPrimaryCursorState()]);\n      viewModel.revealPrimaryCursor(args.source, true);\n    }\n  }());\n  CoreNavigationCommands.RevealLine = registerEditorCommand(new class extends CoreEditorCommand {\n    constructor() {\n      super({\n        id: 'revealLine',\n        precondition: undefined,\n        description: RevealLine_.description\n      });\n    }\n    runCoreEditorCommand(viewModel, args) {\n      const revealLineArg = args;\n      const lineNumberArg = revealLineArg.lineNumber || 0;\n      let lineNumber = typeof lineNumberArg === 'number' ? lineNumberArg + 1 : parseInt(lineNumberArg) + 1;\n      if (lineNumber < 1) {\n        lineNumber = 1;\n      }\n      const lineCount = viewModel.model.getLineCount();\n      if (lineNumber > lineCount) {\n        lineNumber = lineCount;\n      }\n      const range = new Range(lineNumber, 1, lineNumber, viewModel.model.getLineMaxColumn(lineNumber));\n      let revealAt = 0 /* Simple */;\n      if (revealLineArg.at) {\n        switch (revealLineArg.at) {\n          case RevealLine_.RawAtArgument.Top:\n            revealAt = 3 /* Top */;\n            break;\n          case RevealLine_.RawAtArgument.Center:\n            revealAt = 1 /* Center */;\n            break;\n          case RevealLine_.RawAtArgument.Bottom:\n            revealAt = 4 /* Bottom */;\n            break;\n          default:\n            break;\n        }\n      }\n      const viewRange = viewModel.coordinatesConverter.convertModelRangeToViewRange(range);\n      viewModel.revealRange(args.source, false, viewRange, revealAt, 0 /* Smooth */);\n    }\n  }());\n\n  CoreNavigationCommands.SelectAll = new class extends EditorOrNativeTextInputCommand {\n    constructor() {\n      super(SelectAllCommand);\n    }\n    runDOMCommand() {\n      if (isFirefox) {\n        document.activeElement.focus();\n        document.activeElement.select();\n      }\n      document.execCommand('selectAll');\n    }\n    runEditorCommand(accessor, editor, args) {\n      const viewModel = editor._getViewModel();\n      if (!viewModel) {\n        // the editor has no view => has no cursors\n        return;\n      }\n      this.runCoreEditorCommand(viewModel, args);\n    }\n    runCoreEditorCommand(viewModel, args) {\n      viewModel.model.pushStackElement();\n      viewModel.setCursorStates('keyboard', 3 /* Explicit */, [CursorMoveCommands.selectAll(viewModel, viewModel.getPrimaryCursorState())]);\n    }\n  }();\n  CoreNavigationCommands.SetSelection = registerEditorCommand(new class extends CoreEditorCommand {\n    constructor() {\n      super({\n        id: 'setSelection',\n        precondition: undefined\n      });\n    }\n    runCoreEditorCommand(viewModel, args) {\n      viewModel.model.pushStackElement();\n      viewModel.setCursorStates(args.source, 3 /* Explicit */, [CursorState.fromModelSelection(args.selection)]);\n    }\n  }());\n})(CoreNavigationCommands || (CoreNavigationCommands = {}));\nconst columnSelectionCondition = ContextKeyExpr.and(EditorContextKeys.textInputFocus, EditorContextKeys.columnSelection);\nfunction registerColumnSelection(id, keybinding) {\n  KeybindingsRegistry.registerKeybindingRule({\n    id: id,\n    primary: keybinding,\n    when: columnSelectionCondition,\n    weight: CORE_WEIGHT + 1\n  });\n}\nregisterColumnSelection(CoreNavigationCommands.CursorColumnSelectLeft.id, 1024 /* Shift */ | 15 /* LeftArrow */);\nregisterColumnSelection(CoreNavigationCommands.CursorColumnSelectRight.id, 1024 /* Shift */ | 17 /* RightArrow */);\nregisterColumnSelection(CoreNavigationCommands.CursorColumnSelectUp.id, 1024 /* Shift */ | 16 /* UpArrow */);\nregisterColumnSelection(CoreNavigationCommands.CursorColumnSelectPageUp.id, 1024 /* Shift */ | 11 /* PageUp */);\nregisterColumnSelection(CoreNavigationCommands.CursorColumnSelectDown.id, 1024 /* Shift */ | 18 /* DownArrow */);\nregisterColumnSelection(CoreNavigationCommands.CursorColumnSelectPageDown.id, 1024 /* Shift */ | 12 /* PageDown */);\nfunction registerCommand(command) {\n  command.register();\n  return command;\n}\nexport var CoreEditingCommands;\n(function (CoreEditingCommands) {\n  class CoreEditingCommand extends EditorCommand {\n    runEditorCommand(accessor, editor, args) {\n      const viewModel = editor._getViewModel();\n      if (!viewModel) {\n        // the editor has no view => has no cursors\n        return;\n      }\n      this.runCoreEditingCommand(editor, viewModel, args || {});\n    }\n  }\n  CoreEditingCommands.CoreEditingCommand = CoreEditingCommand;\n  CoreEditingCommands.LineBreakInsert = registerEditorCommand(new class extends CoreEditingCommand {\n    constructor() {\n      super({\n        id: 'lineBreakInsert',\n        precondition: EditorContextKeys.writable,\n        kbOpts: {\n          weight: CORE_WEIGHT,\n          kbExpr: EditorContextKeys.textInputFocus,\n          primary: 0,\n          mac: {\n            primary: 256 /* WinCtrl */ | 45 /* KEY_O */\n          }\n        }\n      });\n    }\n\n    runCoreEditingCommand(editor, viewModel, args) {\n      editor.pushUndoStop();\n      editor.executeCommands(this.id, TypeOperations.lineBreakInsert(viewModel.cursorConfig, viewModel.model, viewModel.getCursorStates().map(s => s.modelState.selection)));\n    }\n  }());\n  CoreEditingCommands.Outdent = registerEditorCommand(new class extends CoreEditingCommand {\n    constructor() {\n      super({\n        id: 'outdent',\n        precondition: EditorContextKeys.writable,\n        kbOpts: {\n          weight: CORE_WEIGHT,\n          kbExpr: ContextKeyExpr.and(EditorContextKeys.editorTextFocus, EditorContextKeys.tabDoesNotMoveFocus),\n          primary: 1024 /* Shift */ | 2 /* Tab */\n        }\n      });\n    }\n\n    runCoreEditingCommand(editor, viewModel, args) {\n      editor.pushUndoStop();\n      editor.executeCommands(this.id, TypeOperations.outdent(viewModel.cursorConfig, viewModel.model, viewModel.getCursorStates().map(s => s.modelState.selection)));\n      editor.pushUndoStop();\n    }\n  }());\n  CoreEditingCommands.Tab = registerEditorCommand(new class extends CoreEditingCommand {\n    constructor() {\n      super({\n        id: 'tab',\n        precondition: EditorContextKeys.writable,\n        kbOpts: {\n          weight: CORE_WEIGHT,\n          kbExpr: ContextKeyExpr.and(EditorContextKeys.editorTextFocus, EditorContextKeys.tabDoesNotMoveFocus),\n          primary: 2 /* Tab */\n        }\n      });\n    }\n\n    runCoreEditingCommand(editor, viewModel, args) {\n      editor.pushUndoStop();\n      editor.executeCommands(this.id, TypeOperations.tab(viewModel.cursorConfig, viewModel.model, viewModel.getCursorStates().map(s => s.modelState.selection)));\n      editor.pushUndoStop();\n    }\n  }());\n  CoreEditingCommands.DeleteLeft = registerEditorCommand(new class extends CoreEditingCommand {\n    constructor() {\n      super({\n        id: 'deleteLeft',\n        precondition: undefined,\n        kbOpts: {\n          weight: CORE_WEIGHT,\n          kbExpr: EditorContextKeys.textInputFocus,\n          primary: 1 /* Backspace */,\n          secondary: [1024 /* Shift */ | 1 /* Backspace */],\n          mac: {\n            primary: 1 /* Backspace */,\n            secondary: [1024 /* Shift */ | 1 /* Backspace */, 256 /* WinCtrl */ | 38 /* KEY_H */, 256 /* WinCtrl */ | 1 /* Backspace */]\n          }\n        }\n      });\n    }\n\n    runCoreEditingCommand(editor, viewModel, args) {\n      const [shouldPushStackElementBefore, commands] = DeleteOperations.deleteLeft(viewModel.getPrevEditOperationType(), viewModel.cursorConfig, viewModel.model, viewModel.getCursorStates().map(s => s.modelState.selection));\n      if (shouldPushStackElementBefore) {\n        editor.pushUndoStop();\n      }\n      editor.executeCommands(this.id, commands);\n      viewModel.setPrevEditOperationType(2 /* DeletingLeft */);\n    }\n  }());\n\n  CoreEditingCommands.DeleteRight = registerEditorCommand(new class extends CoreEditingCommand {\n    constructor() {\n      super({\n        id: 'deleteRight',\n        precondition: undefined,\n        kbOpts: {\n          weight: CORE_WEIGHT,\n          kbExpr: EditorContextKeys.textInputFocus,\n          primary: 20 /* Delete */,\n          mac: {\n            primary: 20 /* Delete */,\n            secondary: [256 /* WinCtrl */ | 34 /* KEY_D */, 256 /* WinCtrl */ | 20 /* Delete */]\n          }\n        }\n      });\n    }\n\n    runCoreEditingCommand(editor, viewModel, args) {\n      const [shouldPushStackElementBefore, commands] = DeleteOperations.deleteRight(viewModel.getPrevEditOperationType(), viewModel.cursorConfig, viewModel.model, viewModel.getCursorStates().map(s => s.modelState.selection));\n      if (shouldPushStackElementBefore) {\n        editor.pushUndoStop();\n      }\n      editor.executeCommands(this.id, commands);\n      viewModel.setPrevEditOperationType(3 /* DeletingRight */);\n    }\n  }());\n\n  CoreEditingCommands.Undo = new class extends EditorOrNativeTextInputCommand {\n    constructor() {\n      super(UndoCommand);\n    }\n    runDOMCommand() {\n      document.execCommand('undo');\n    }\n    runEditorCommand(accessor, editor, args) {\n      if (!editor.hasModel() || editor.getOption(75 /* readOnly */) === true) {\n        return;\n      }\n      return editor.getModel().undo();\n    }\n  }();\n  CoreEditingCommands.Redo = new class extends EditorOrNativeTextInputCommand {\n    constructor() {\n      super(RedoCommand);\n    }\n    runDOMCommand() {\n      document.execCommand('redo');\n    }\n    runEditorCommand(accessor, editor, args) {\n      if (!editor.hasModel() || editor.getOption(75 /* readOnly */) === true) {\n        return;\n      }\n      return editor.getModel().redo();\n    }\n  }();\n})(CoreEditingCommands || (CoreEditingCommands = {}));\n/**\r\n * A command that will invoke a command on the focused editor.\r\n */\nclass EditorHandlerCommand extends Command {\n  constructor(id, handlerId, description) {\n    super({\n      id: id,\n      precondition: undefined,\n      description: description\n    });\n    this._handlerId = handlerId;\n  }\n  runCommand(accessor, args) {\n    const editor = accessor.get(ICodeEditorService).getFocusedCodeEditor();\n    if (!editor) {\n      return;\n    }\n    editor.trigger('keyboard', this._handlerId, args);\n  }\n}\nfunction registerOverwritableCommand(handlerId, description) {\n  registerCommand(new EditorHandlerCommand('default:' + handlerId, handlerId));\n  registerCommand(new EditorHandlerCommand(handlerId, handlerId, description));\n}\nregisterOverwritableCommand(\"type\" /* Type */, {\n  description: \"Type\",\n  args: [{\n    name: 'args',\n    schema: {\n      'type': 'object',\n      'required': ['text'],\n      'properties': {\n        'text': {\n          'type': 'string'\n        }\n      }\n    }\n  }]\n});\nregisterOverwritableCommand(\"replacePreviousChar\" /* ReplacePreviousChar */);\nregisterOverwritableCommand(\"compositionStart\" /* CompositionStart */);\nregisterOverwritableCommand(\"compositionEnd\" /* CompositionEnd */);\nregisterOverwritableCommand(\"paste\" /* Paste */);\nregisterOverwritableCommand(\"cut\" /* Cut */);","map":{"version":3,"names":["nls","isFirefox","types","Command","EditorCommand","registerEditorCommand","UndoCommand","RedoCommand","SelectAllCommand","ICodeEditorService","ColumnSelection","CursorState","DeleteOperations","CursorMove","CursorMove_","CursorMoveCommands","TypeOperations","Position","Range","EditorContextKeys","ContextKeyExpr","KeybindingsRegistry","CORE_WEIGHT","CoreEditorCommand","runEditorCommand","accessor","editor","args","viewModel","_getViewModel","runCoreEditorCommand","EditorScroll_","isEditorScrollArgs","arg","isObject","scrollArg","isString","to","isUndefined","by","value","isNumber","revealCursor","isBoolean","description","name","constraint","schema","RawDirection","Up","Down","RawUnit","Line","WrappedLine","Page","HalfPage","parse","direction","unit","Math","floor","select","RevealLine_","isRevealLineArgs","reveaLineArg","lineNumber","at","RawAtArgument","Top","Center","Bottom","EditorOrNativeTextInputCommand","constructor","target","addImplementation","focusedEditor","get","getFocusedCodeEditor","hasTextFocus","_runEditorCommand","activeElement","document","indexOf","tagName","toLowerCase","runDOMCommand","activeEditor","getActiveCodeEditor","focus","result","CoreNavigationCommands","BaseMoveToCommand","opts","_inSelectionMode","inSelectionMode","model","pushStackElement","setCursorStates","source","moveTo","getPrimaryCursorState","position","viewPosition","revealPrimaryCursor","MoveTo","id","precondition","undefined","MoveToSelect","ColumnSelectCommand","_getColumnSelectResult","getCursorColumnSelectData","viewStates","map","viewState","fromViewState","setCursorColumnSelectData","isReal","fromViewLineNumber","fromLineNumber","fromViewVisualColumn","fromVisualColumn","toViewLineNumber","toLineNumber","toViewVisualColumn","toVisualColumn","reversed","revealTopMostCursor","revealBottomMostCursor","ColumnSelect","primary","prevColumnSelectData","validatedPosition","validatePosition","validatedViewPosition","coordinatesConverter","validateViewPosition","column","doColumnSelect","mouseColumn","columnSelect","cursorConfig","CursorColumnSelectLeft","kbOpts","weight","kbExpr","textInputFocus","linux","columnSelectLeft","CursorColumnSelectRight","columnSelectRight","ColumnSelectUpCommand","_isPaged","isPaged","columnSelectUp","CursorColumnSelectUp","CursorColumnSelectPageUp","ColumnSelectDownCommand","columnSelectDown","CursorColumnSelectDown","CursorColumnSelectPageDown","CursorMoveImpl","parsed","_runCursorMove","_move","getCursorStates","cursors","simpleMove","viewportMove","CursorMoveBasedCommand","_staticArgs","dynamicArgs","pageSize","CursorLeft","mac","secondary","CursorLeftSelect","CursorRight","CursorRightSelect","CursorUp","CursorUpSelect","CursorPageUp","CursorPageUpSelect","CursorDown","CursorDownSelect","CursorPageDown","CursorPageDownSelect","CreateCursor","newState","wholeLine","line","states","length","newModelPosition","modelState","newViewPosition","i","len","state","selection","containsPosition","splice","push","LastCursorMoveToSelect","lastAddedCursorIndex","getLastAddedCursorIndex","newStates","slice","HomeCommand","moveToBeginningOfLine","CursorHome","CursorHomeSelect","LineStartCommand","_exec","cursor","fromModelState","move","CursorLineStart","CursorLineStartSelect","EndCommand","moveToEndOfLine","sticky","CursorEnd","type","properties","localize","default","CursorEndSelect","LineEndCommand","maxColumn","getLineMaxColumn","CursorLineEnd","CursorLineEndSelect","TopCommand","moveToBeginningOfBuffer","CursorTop","CursorTopSelect","BottomCommand","moveToEndOfBuffer","CursorBottom","CursorBottomSelect","EditorScrollImpl","_runEditorScroll","desiredScrollTop","_computeDesiredScrollTop","desiredVisibleViewRange","getCompletelyVisibleViewRangeAtScrollTop","findPositionInViewportIfOutside","setScrollTop","visibleViewRange","getCompletelyVisibleViewRange","visibleModelRange","convertViewRangeToModelRange","desiredTopModelLineNumber","max","startLineNumber","min","getLineCount","convertModelPositionToViewPosition","getVerticalOffsetForLineNumber","noOfLines","round","deltaLines","getScrollTop","lineHeight","EditorScroll","ScrollLineUp","ScrollPageUp","win","ScrollLineDown","ScrollPageDown","WordCommand","word","WordSelect","WordSelectDrag","LastCursorWordSelect","lastAddedState","hasSelection","LineCommand","LineSelect","LineSelectDrag","LastCursorLineCommand","LastCursorLineSelect","LastCursorLineSelectDrag","ExpandLineSelection","expandLineSelection","CancelSelection","hasNonEmptySelection","cancelSelection","RemoveSecondaryCursors","hasMultipleSelections","RevealLine","revealLineArg","lineNumberArg","parseInt","lineCount","range","revealAt","viewRange","convertModelRangeToViewRange","revealRange","SelectAll","execCommand","selectAll","SetSelection","fromModelSelection","columnSelectionCondition","and","columnSelection","registerColumnSelection","keybinding","registerKeybindingRule","when","registerCommand","command","register","CoreEditingCommands","CoreEditingCommand","runCoreEditingCommand","LineBreakInsert","writable","pushUndoStop","executeCommands","lineBreakInsert","s","Outdent","editorTextFocus","tabDoesNotMoveFocus","outdent","Tab","tab","DeleteLeft","shouldPushStackElementBefore","commands","deleteLeft","getPrevEditOperationType","setPrevEditOperationType","DeleteRight","deleteRight","Undo","hasModel","getOption","getModel","undo","Redo","redo","EditorHandlerCommand","handlerId","_handlerId","runCommand","trigger","registerOverwritableCommand"],"sources":["C:/Users/Administrator/Desktop/sqllineage-master/sqllineagejs/node_modules/monaco-editor/esm/vs/editor/browser/controller/coreCommands.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport * as nls from '../../../nls.js';\r\nimport { isFirefox } from '../../../base/browser/browser.js';\r\nimport * as types from '../../../base/common/types.js';\r\nimport { Command, EditorCommand, registerEditorCommand, UndoCommand, RedoCommand, SelectAllCommand } from '../editorExtensions.js';\r\nimport { ICodeEditorService } from '../services/codeEditorService.js';\r\nimport { ColumnSelection } from '../../common/controller/cursorColumnSelection.js';\r\nimport { CursorState } from '../../common/controller/cursorCommon.js';\r\nimport { DeleteOperations } from '../../common/controller/cursorDeleteOperations.js';\r\nimport { CursorMove as CursorMove_, CursorMoveCommands } from '../../common/controller/cursorMoveCommands.js';\r\nimport { TypeOperations } from '../../common/controller/cursorTypeOperations.js';\r\nimport { Position } from '../../common/core/position.js';\r\nimport { Range } from '../../common/core/range.js';\r\nimport { EditorContextKeys } from '../../common/editorContextKeys.js';\r\nimport { ContextKeyExpr } from '../../../platform/contextkey/common/contextkey.js';\r\nimport { KeybindingsRegistry } from '../../../platform/keybinding/common/keybindingsRegistry.js';\r\nconst CORE_WEIGHT = 0 /* EditorCore */;\r\nexport class CoreEditorCommand extends EditorCommand {\r\n    runEditorCommand(accessor, editor, args) {\r\n        const viewModel = editor._getViewModel();\r\n        if (!viewModel) {\r\n            // the editor has no view => has no cursors\r\n            return;\r\n        }\r\n        this.runCoreEditorCommand(viewModel, args || {});\r\n    }\r\n}\r\nexport var EditorScroll_;\r\n(function (EditorScroll_) {\r\n    const isEditorScrollArgs = function (arg) {\r\n        if (!types.isObject(arg)) {\r\n            return false;\r\n        }\r\n        const scrollArg = arg;\r\n        if (!types.isString(scrollArg.to)) {\r\n            return false;\r\n        }\r\n        if (!types.isUndefined(scrollArg.by) && !types.isString(scrollArg.by)) {\r\n            return false;\r\n        }\r\n        if (!types.isUndefined(scrollArg.value) && !types.isNumber(scrollArg.value)) {\r\n            return false;\r\n        }\r\n        if (!types.isUndefined(scrollArg.revealCursor) && !types.isBoolean(scrollArg.revealCursor)) {\r\n            return false;\r\n        }\r\n        return true;\r\n    };\r\n    EditorScroll_.description = {\r\n        description: 'Scroll editor in the given direction',\r\n        args: [\r\n            {\r\n                name: 'Editor scroll argument object',\r\n                description: `Property-value pairs that can be passed through this argument:\n\t\t\t\t\t* 'to': A mandatory direction value.\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t\t'up', 'down'\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t* 'by': Unit to move. Default is computed based on 'to' value.\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t\t'line', 'wrappedLine', 'page', 'halfPage'\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t* 'value': Number of units to move. Default is '1'.\n\t\t\t\t\t* 'revealCursor': If 'true' reveals the cursor if it is outside view port.\n\t\t\t\t`,\r\n                constraint: isEditorScrollArgs,\r\n                schema: {\r\n                    'type': 'object',\r\n                    'required': ['to'],\r\n                    'properties': {\r\n                        'to': {\r\n                            'type': 'string',\r\n                            'enum': ['up', 'down']\r\n                        },\r\n                        'by': {\r\n                            'type': 'string',\r\n                            'enum': ['line', 'wrappedLine', 'page', 'halfPage']\r\n                        },\r\n                        'value': {\r\n                            'type': 'number',\r\n                            'default': 1\r\n                        },\r\n                        'revealCursor': {\r\n                            'type': 'boolean',\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        ]\r\n    };\r\n    /**\r\n     * Directions in the view for editor scroll command.\r\n     */\r\n    EditorScroll_.RawDirection = {\r\n        Up: 'up',\r\n        Down: 'down',\r\n    };\r\n    /**\r\n     * Units for editor scroll 'by' argument\r\n     */\r\n    EditorScroll_.RawUnit = {\r\n        Line: 'line',\r\n        WrappedLine: 'wrappedLine',\r\n        Page: 'page',\r\n        HalfPage: 'halfPage'\r\n    };\r\n    function parse(args) {\r\n        let direction;\r\n        switch (args.to) {\r\n            case EditorScroll_.RawDirection.Up:\r\n                direction = 1 /* Up */;\r\n                break;\r\n            case EditorScroll_.RawDirection.Down:\r\n                direction = 2 /* Down */;\r\n                break;\r\n            default:\r\n                // Illegal arguments\r\n                return null;\r\n        }\r\n        let unit;\r\n        switch (args.by) {\r\n            case EditorScroll_.RawUnit.Line:\r\n                unit = 1 /* Line */;\r\n                break;\r\n            case EditorScroll_.RawUnit.WrappedLine:\r\n                unit = 2 /* WrappedLine */;\r\n                break;\r\n            case EditorScroll_.RawUnit.Page:\r\n                unit = 3 /* Page */;\r\n                break;\r\n            case EditorScroll_.RawUnit.HalfPage:\r\n                unit = 4 /* HalfPage */;\r\n                break;\r\n            default:\r\n                unit = 2 /* WrappedLine */;\r\n        }\r\n        const value = Math.floor(args.value || 1);\r\n        const revealCursor = !!args.revealCursor;\r\n        return {\r\n            direction: direction,\r\n            unit: unit,\r\n            value: value,\r\n            revealCursor: revealCursor,\r\n            select: (!!args.select)\r\n        };\r\n    }\r\n    EditorScroll_.parse = parse;\r\n})(EditorScroll_ || (EditorScroll_ = {}));\r\nexport var RevealLine_;\r\n(function (RevealLine_) {\r\n    const isRevealLineArgs = function (arg) {\r\n        if (!types.isObject(arg)) {\r\n            return false;\r\n        }\r\n        const reveaLineArg = arg;\r\n        if (!types.isNumber(reveaLineArg.lineNumber) && !types.isString(reveaLineArg.lineNumber)) {\r\n            return false;\r\n        }\r\n        if (!types.isUndefined(reveaLineArg.at) && !types.isString(reveaLineArg.at)) {\r\n            return false;\r\n        }\r\n        return true;\r\n    };\r\n    RevealLine_.description = {\r\n        description: 'Reveal the given line at the given logical position',\r\n        args: [\r\n            {\r\n                name: 'Reveal line argument object',\r\n                description: `Property-value pairs that can be passed through this argument:\n\t\t\t\t\t* 'lineNumber': A mandatory line number value.\n\t\t\t\t\t* 'at': Logical position at which line has to be revealed .\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t\t'top', 'center', 'bottom'\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t`,\r\n                constraint: isRevealLineArgs,\r\n                schema: {\r\n                    'type': 'object',\r\n                    'required': ['lineNumber'],\r\n                    'properties': {\r\n                        'lineNumber': {\r\n                            'type': ['number', 'string'],\r\n                        },\r\n                        'at': {\r\n                            'type': 'string',\r\n                            'enum': ['top', 'center', 'bottom']\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        ]\r\n    };\r\n    /**\r\n     * Values for reveal line 'at' argument\r\n     */\r\n    RevealLine_.RawAtArgument = {\r\n        Top: 'top',\r\n        Center: 'center',\r\n        Bottom: 'bottom'\r\n    };\r\n})(RevealLine_ || (RevealLine_ = {}));\r\nclass EditorOrNativeTextInputCommand {\r\n    constructor(target) {\r\n        // 1. handle case when focus is in editor.\r\n        target.addImplementation(10000, (accessor, args) => {\r\n            // Only if editor text focus (i.e. not if editor has widget focus).\r\n            const focusedEditor = accessor.get(ICodeEditorService).getFocusedCodeEditor();\r\n            if (focusedEditor && focusedEditor.hasTextFocus()) {\r\n                return this._runEditorCommand(accessor, focusedEditor, args);\r\n            }\r\n            return false;\r\n        });\r\n        // 2. handle case when focus is in some other `input` / `textarea`.\r\n        target.addImplementation(1000, (accessor, args) => {\r\n            // Only if focused on an element that allows for entering text\r\n            const activeElement = document.activeElement;\r\n            if (activeElement && ['input', 'textarea'].indexOf(activeElement.tagName.toLowerCase()) >= 0) {\r\n                this.runDOMCommand();\r\n                return true;\r\n            }\r\n            return false;\r\n        });\r\n        // 3. (default) handle case when focus is somewhere else.\r\n        target.addImplementation(0, (accessor, args) => {\r\n            // Redirecting to active editor\r\n            const activeEditor = accessor.get(ICodeEditorService).getActiveCodeEditor();\r\n            if (activeEditor) {\r\n                activeEditor.focus();\r\n                return this._runEditorCommand(accessor, activeEditor, args);\r\n            }\r\n            return false;\r\n        });\r\n    }\r\n    _runEditorCommand(accessor, editor, args) {\r\n        const result = this.runEditorCommand(accessor, editor, args);\r\n        if (result) {\r\n            return result;\r\n        }\r\n        return true;\r\n    }\r\n}\r\nexport var CoreNavigationCommands;\r\n(function (CoreNavigationCommands) {\r\n    class BaseMoveToCommand extends CoreEditorCommand {\r\n        constructor(opts) {\r\n            super(opts);\r\n            this._inSelectionMode = opts.inSelectionMode;\r\n        }\r\n        runCoreEditorCommand(viewModel, args) {\r\n            viewModel.model.pushStackElement();\r\n            viewModel.setCursorStates(args.source, 3 /* Explicit */, [\r\n                CursorMoveCommands.moveTo(viewModel, viewModel.getPrimaryCursorState(), this._inSelectionMode, args.position, args.viewPosition)\r\n            ]);\r\n            viewModel.revealPrimaryCursor(args.source, true);\r\n        }\r\n    }\r\n    CoreNavigationCommands.MoveTo = registerEditorCommand(new BaseMoveToCommand({\r\n        id: '_moveTo',\r\n        inSelectionMode: false,\r\n        precondition: undefined\r\n    }));\r\n    CoreNavigationCommands.MoveToSelect = registerEditorCommand(new BaseMoveToCommand({\r\n        id: '_moveToSelect',\r\n        inSelectionMode: true,\r\n        precondition: undefined\r\n    }));\r\n    class ColumnSelectCommand extends CoreEditorCommand {\r\n        runCoreEditorCommand(viewModel, args) {\r\n            viewModel.model.pushStackElement();\r\n            const result = this._getColumnSelectResult(viewModel, viewModel.getPrimaryCursorState(), viewModel.getCursorColumnSelectData(), args);\r\n            viewModel.setCursorStates(args.source, 3 /* Explicit */, result.viewStates.map((viewState) => CursorState.fromViewState(viewState)));\r\n            viewModel.setCursorColumnSelectData({\r\n                isReal: true,\r\n                fromViewLineNumber: result.fromLineNumber,\r\n                fromViewVisualColumn: result.fromVisualColumn,\r\n                toViewLineNumber: result.toLineNumber,\r\n                toViewVisualColumn: result.toVisualColumn\r\n            });\r\n            if (result.reversed) {\r\n                viewModel.revealTopMostCursor(args.source);\r\n            }\r\n            else {\r\n                viewModel.revealBottomMostCursor(args.source);\r\n            }\r\n        }\r\n    }\r\n    CoreNavigationCommands.ColumnSelect = registerEditorCommand(new class extends ColumnSelectCommand {\r\n        constructor() {\r\n            super({\r\n                id: 'columnSelect',\r\n                precondition: undefined\r\n            });\r\n        }\r\n        _getColumnSelectResult(viewModel, primary, prevColumnSelectData, args) {\r\n            // validate `args`\r\n            const validatedPosition = viewModel.model.validatePosition(args.position);\r\n            const validatedViewPosition = viewModel.coordinatesConverter.validateViewPosition(new Position(args.viewPosition.lineNumber, args.viewPosition.column), validatedPosition);\r\n            let fromViewLineNumber = args.doColumnSelect ? prevColumnSelectData.fromViewLineNumber : validatedViewPosition.lineNumber;\r\n            let fromViewVisualColumn = args.doColumnSelect ? prevColumnSelectData.fromViewVisualColumn : args.mouseColumn - 1;\r\n            return ColumnSelection.columnSelect(viewModel.cursorConfig, viewModel, fromViewLineNumber, fromViewVisualColumn, validatedViewPosition.lineNumber, args.mouseColumn - 1);\r\n        }\r\n    });\r\n    CoreNavigationCommands.CursorColumnSelectLeft = registerEditorCommand(new class extends ColumnSelectCommand {\r\n        constructor() {\r\n            super({\r\n                id: 'cursorColumnSelectLeft',\r\n                precondition: undefined,\r\n                kbOpts: {\r\n                    weight: CORE_WEIGHT,\r\n                    kbExpr: EditorContextKeys.textInputFocus,\r\n                    primary: 2048 /* CtrlCmd */ | 1024 /* Shift */ | 512 /* Alt */ | 15 /* LeftArrow */,\r\n                    linux: { primary: 0 }\r\n                }\r\n            });\r\n        }\r\n        _getColumnSelectResult(viewModel, primary, prevColumnSelectData, args) {\r\n            return ColumnSelection.columnSelectLeft(viewModel.cursorConfig, viewModel, prevColumnSelectData);\r\n        }\r\n    });\r\n    CoreNavigationCommands.CursorColumnSelectRight = registerEditorCommand(new class extends ColumnSelectCommand {\r\n        constructor() {\r\n            super({\r\n                id: 'cursorColumnSelectRight',\r\n                precondition: undefined,\r\n                kbOpts: {\r\n                    weight: CORE_WEIGHT,\r\n                    kbExpr: EditorContextKeys.textInputFocus,\r\n                    primary: 2048 /* CtrlCmd */ | 1024 /* Shift */ | 512 /* Alt */ | 17 /* RightArrow */,\r\n                    linux: { primary: 0 }\r\n                }\r\n            });\r\n        }\r\n        _getColumnSelectResult(viewModel, primary, prevColumnSelectData, args) {\r\n            return ColumnSelection.columnSelectRight(viewModel.cursorConfig, viewModel, prevColumnSelectData);\r\n        }\r\n    });\r\n    class ColumnSelectUpCommand extends ColumnSelectCommand {\r\n        constructor(opts) {\r\n            super(opts);\r\n            this._isPaged = opts.isPaged;\r\n        }\r\n        _getColumnSelectResult(viewModel, primary, prevColumnSelectData, args) {\r\n            return ColumnSelection.columnSelectUp(viewModel.cursorConfig, viewModel, prevColumnSelectData, this._isPaged);\r\n        }\r\n    }\r\n    CoreNavigationCommands.CursorColumnSelectUp = registerEditorCommand(new ColumnSelectUpCommand({\r\n        isPaged: false,\r\n        id: 'cursorColumnSelectUp',\r\n        precondition: undefined,\r\n        kbOpts: {\r\n            weight: CORE_WEIGHT,\r\n            kbExpr: EditorContextKeys.textInputFocus,\r\n            primary: 2048 /* CtrlCmd */ | 1024 /* Shift */ | 512 /* Alt */ | 16 /* UpArrow */,\r\n            linux: { primary: 0 }\r\n        }\r\n    }));\r\n    CoreNavigationCommands.CursorColumnSelectPageUp = registerEditorCommand(new ColumnSelectUpCommand({\r\n        isPaged: true,\r\n        id: 'cursorColumnSelectPageUp',\r\n        precondition: undefined,\r\n        kbOpts: {\r\n            weight: CORE_WEIGHT,\r\n            kbExpr: EditorContextKeys.textInputFocus,\r\n            primary: 2048 /* CtrlCmd */ | 1024 /* Shift */ | 512 /* Alt */ | 11 /* PageUp */,\r\n            linux: { primary: 0 }\r\n        }\r\n    }));\r\n    class ColumnSelectDownCommand extends ColumnSelectCommand {\r\n        constructor(opts) {\r\n            super(opts);\r\n            this._isPaged = opts.isPaged;\r\n        }\r\n        _getColumnSelectResult(viewModel, primary, prevColumnSelectData, args) {\r\n            return ColumnSelection.columnSelectDown(viewModel.cursorConfig, viewModel, prevColumnSelectData, this._isPaged);\r\n        }\r\n    }\r\n    CoreNavigationCommands.CursorColumnSelectDown = registerEditorCommand(new ColumnSelectDownCommand({\r\n        isPaged: false,\r\n        id: 'cursorColumnSelectDown',\r\n        precondition: undefined,\r\n        kbOpts: {\r\n            weight: CORE_WEIGHT,\r\n            kbExpr: EditorContextKeys.textInputFocus,\r\n            primary: 2048 /* CtrlCmd */ | 1024 /* Shift */ | 512 /* Alt */ | 18 /* DownArrow */,\r\n            linux: { primary: 0 }\r\n        }\r\n    }));\r\n    CoreNavigationCommands.CursorColumnSelectPageDown = registerEditorCommand(new ColumnSelectDownCommand({\r\n        isPaged: true,\r\n        id: 'cursorColumnSelectPageDown',\r\n        precondition: undefined,\r\n        kbOpts: {\r\n            weight: CORE_WEIGHT,\r\n            kbExpr: EditorContextKeys.textInputFocus,\r\n            primary: 2048 /* CtrlCmd */ | 1024 /* Shift */ | 512 /* Alt */ | 12 /* PageDown */,\r\n            linux: { primary: 0 }\r\n        }\r\n    }));\r\n    class CursorMoveImpl extends CoreEditorCommand {\r\n        constructor() {\r\n            super({\r\n                id: 'cursorMove',\r\n                precondition: undefined,\r\n                description: CursorMove_.description\r\n            });\r\n        }\r\n        runCoreEditorCommand(viewModel, args) {\r\n            const parsed = CursorMove_.parse(args);\r\n            if (!parsed) {\r\n                // illegal arguments\r\n                return;\r\n            }\r\n            this._runCursorMove(viewModel, args.source, parsed);\r\n        }\r\n        _runCursorMove(viewModel, source, args) {\r\n            viewModel.model.pushStackElement();\r\n            viewModel.setCursorStates(source, 3 /* Explicit */, CursorMoveImpl._move(viewModel, viewModel.getCursorStates(), args));\r\n            viewModel.revealPrimaryCursor(source, true);\r\n        }\r\n        static _move(viewModel, cursors, args) {\r\n            const inSelectionMode = args.select;\r\n            const value = args.value;\r\n            switch (args.direction) {\r\n                case 0 /* Left */:\r\n                case 1 /* Right */:\r\n                case 2 /* Up */:\r\n                case 3 /* Down */:\r\n                case 4 /* WrappedLineStart */:\r\n                case 5 /* WrappedLineFirstNonWhitespaceCharacter */:\r\n                case 6 /* WrappedLineColumnCenter */:\r\n                case 7 /* WrappedLineEnd */:\r\n                case 8 /* WrappedLineLastNonWhitespaceCharacter */:\r\n                    return CursorMoveCommands.simpleMove(viewModel, cursors, args.direction, inSelectionMode, value, args.unit);\r\n                case 9 /* ViewPortTop */:\r\n                case 11 /* ViewPortBottom */:\r\n                case 10 /* ViewPortCenter */:\r\n                case 12 /* ViewPortIfOutside */:\r\n                    return CursorMoveCommands.viewportMove(viewModel, cursors, args.direction, inSelectionMode, value);\r\n                default:\r\n                    return null;\r\n            }\r\n        }\r\n    }\r\n    CoreNavigationCommands.CursorMoveImpl = CursorMoveImpl;\r\n    CoreNavigationCommands.CursorMove = registerEditorCommand(new CursorMoveImpl());\r\n    class CursorMoveBasedCommand extends CoreEditorCommand {\r\n        constructor(opts) {\r\n            super(opts);\r\n            this._staticArgs = opts.args;\r\n        }\r\n        runCoreEditorCommand(viewModel, dynamicArgs) {\r\n            let args = this._staticArgs;\r\n            if (this._staticArgs.value === -1 /* PAGE_SIZE_MARKER */) {\r\n                // -1 is a marker for page size\r\n                args = {\r\n                    direction: this._staticArgs.direction,\r\n                    unit: this._staticArgs.unit,\r\n                    select: this._staticArgs.select,\r\n                    value: viewModel.cursorConfig.pageSize\r\n                };\r\n            }\r\n            viewModel.model.pushStackElement();\r\n            viewModel.setCursorStates(dynamicArgs.source, 3 /* Explicit */, CursorMoveCommands.simpleMove(viewModel, viewModel.getCursorStates(), args.direction, args.select, args.value, args.unit));\r\n            viewModel.revealPrimaryCursor(dynamicArgs.source, true);\r\n        }\r\n    }\r\n    CoreNavigationCommands.CursorLeft = registerEditorCommand(new CursorMoveBasedCommand({\r\n        args: {\r\n            direction: 0 /* Left */,\r\n            unit: 0 /* None */,\r\n            select: false,\r\n            value: 1\r\n        },\r\n        id: 'cursorLeft',\r\n        precondition: undefined,\r\n        kbOpts: {\r\n            weight: CORE_WEIGHT,\r\n            kbExpr: EditorContextKeys.textInputFocus,\r\n            primary: 15 /* LeftArrow */,\r\n            mac: { primary: 15 /* LeftArrow */, secondary: [256 /* WinCtrl */ | 32 /* KEY_B */] }\r\n        }\r\n    }));\r\n    CoreNavigationCommands.CursorLeftSelect = registerEditorCommand(new CursorMoveBasedCommand({\r\n        args: {\r\n            direction: 0 /* Left */,\r\n            unit: 0 /* None */,\r\n            select: true,\r\n            value: 1\r\n        },\r\n        id: 'cursorLeftSelect',\r\n        precondition: undefined,\r\n        kbOpts: {\r\n            weight: CORE_WEIGHT,\r\n            kbExpr: EditorContextKeys.textInputFocus,\r\n            primary: 1024 /* Shift */ | 15 /* LeftArrow */\r\n        }\r\n    }));\r\n    CoreNavigationCommands.CursorRight = registerEditorCommand(new CursorMoveBasedCommand({\r\n        args: {\r\n            direction: 1 /* Right */,\r\n            unit: 0 /* None */,\r\n            select: false,\r\n            value: 1\r\n        },\r\n        id: 'cursorRight',\r\n        precondition: undefined,\r\n        kbOpts: {\r\n            weight: CORE_WEIGHT,\r\n            kbExpr: EditorContextKeys.textInputFocus,\r\n            primary: 17 /* RightArrow */,\r\n            mac: { primary: 17 /* RightArrow */, secondary: [256 /* WinCtrl */ | 36 /* KEY_F */] }\r\n        }\r\n    }));\r\n    CoreNavigationCommands.CursorRightSelect = registerEditorCommand(new CursorMoveBasedCommand({\r\n        args: {\r\n            direction: 1 /* Right */,\r\n            unit: 0 /* None */,\r\n            select: true,\r\n            value: 1\r\n        },\r\n        id: 'cursorRightSelect',\r\n        precondition: undefined,\r\n        kbOpts: {\r\n            weight: CORE_WEIGHT,\r\n            kbExpr: EditorContextKeys.textInputFocus,\r\n            primary: 1024 /* Shift */ | 17 /* RightArrow */\r\n        }\r\n    }));\r\n    CoreNavigationCommands.CursorUp = registerEditorCommand(new CursorMoveBasedCommand({\r\n        args: {\r\n            direction: 2 /* Up */,\r\n            unit: 2 /* WrappedLine */,\r\n            select: false,\r\n            value: 1\r\n        },\r\n        id: 'cursorUp',\r\n        precondition: undefined,\r\n        kbOpts: {\r\n            weight: CORE_WEIGHT,\r\n            kbExpr: EditorContextKeys.textInputFocus,\r\n            primary: 16 /* UpArrow */,\r\n            mac: { primary: 16 /* UpArrow */, secondary: [256 /* WinCtrl */ | 46 /* KEY_P */] }\r\n        }\r\n    }));\r\n    CoreNavigationCommands.CursorUpSelect = registerEditorCommand(new CursorMoveBasedCommand({\r\n        args: {\r\n            direction: 2 /* Up */,\r\n            unit: 2 /* WrappedLine */,\r\n            select: true,\r\n            value: 1\r\n        },\r\n        id: 'cursorUpSelect',\r\n        precondition: undefined,\r\n        kbOpts: {\r\n            weight: CORE_WEIGHT,\r\n            kbExpr: EditorContextKeys.textInputFocus,\r\n            primary: 1024 /* Shift */ | 16 /* UpArrow */,\r\n            secondary: [2048 /* CtrlCmd */ | 1024 /* Shift */ | 16 /* UpArrow */],\r\n            mac: { primary: 1024 /* Shift */ | 16 /* UpArrow */ },\r\n            linux: { primary: 1024 /* Shift */ | 16 /* UpArrow */ }\r\n        }\r\n    }));\r\n    CoreNavigationCommands.CursorPageUp = registerEditorCommand(new CursorMoveBasedCommand({\r\n        args: {\r\n            direction: 2 /* Up */,\r\n            unit: 2 /* WrappedLine */,\r\n            select: false,\r\n            value: -1 /* PAGE_SIZE_MARKER */\r\n        },\r\n        id: 'cursorPageUp',\r\n        precondition: undefined,\r\n        kbOpts: {\r\n            weight: CORE_WEIGHT,\r\n            kbExpr: EditorContextKeys.textInputFocus,\r\n            primary: 11 /* PageUp */\r\n        }\r\n    }));\r\n    CoreNavigationCommands.CursorPageUpSelect = registerEditorCommand(new CursorMoveBasedCommand({\r\n        args: {\r\n            direction: 2 /* Up */,\r\n            unit: 2 /* WrappedLine */,\r\n            select: true,\r\n            value: -1 /* PAGE_SIZE_MARKER */\r\n        },\r\n        id: 'cursorPageUpSelect',\r\n        precondition: undefined,\r\n        kbOpts: {\r\n            weight: CORE_WEIGHT,\r\n            kbExpr: EditorContextKeys.textInputFocus,\r\n            primary: 1024 /* Shift */ | 11 /* PageUp */\r\n        }\r\n    }));\r\n    CoreNavigationCommands.CursorDown = registerEditorCommand(new CursorMoveBasedCommand({\r\n        args: {\r\n            direction: 3 /* Down */,\r\n            unit: 2 /* WrappedLine */,\r\n            select: false,\r\n            value: 1\r\n        },\r\n        id: 'cursorDown',\r\n        precondition: undefined,\r\n        kbOpts: {\r\n            weight: CORE_WEIGHT,\r\n            kbExpr: EditorContextKeys.textInputFocus,\r\n            primary: 18 /* DownArrow */,\r\n            mac: { primary: 18 /* DownArrow */, secondary: [256 /* WinCtrl */ | 44 /* KEY_N */] }\r\n        }\r\n    }));\r\n    CoreNavigationCommands.CursorDownSelect = registerEditorCommand(new CursorMoveBasedCommand({\r\n        args: {\r\n            direction: 3 /* Down */,\r\n            unit: 2 /* WrappedLine */,\r\n            select: true,\r\n            value: 1\r\n        },\r\n        id: 'cursorDownSelect',\r\n        precondition: undefined,\r\n        kbOpts: {\r\n            weight: CORE_WEIGHT,\r\n            kbExpr: EditorContextKeys.textInputFocus,\r\n            primary: 1024 /* Shift */ | 18 /* DownArrow */,\r\n            secondary: [2048 /* CtrlCmd */ | 1024 /* Shift */ | 18 /* DownArrow */],\r\n            mac: { primary: 1024 /* Shift */ | 18 /* DownArrow */ },\r\n            linux: { primary: 1024 /* Shift */ | 18 /* DownArrow */ }\r\n        }\r\n    }));\r\n    CoreNavigationCommands.CursorPageDown = registerEditorCommand(new CursorMoveBasedCommand({\r\n        args: {\r\n            direction: 3 /* Down */,\r\n            unit: 2 /* WrappedLine */,\r\n            select: false,\r\n            value: -1 /* PAGE_SIZE_MARKER */\r\n        },\r\n        id: 'cursorPageDown',\r\n        precondition: undefined,\r\n        kbOpts: {\r\n            weight: CORE_WEIGHT,\r\n            kbExpr: EditorContextKeys.textInputFocus,\r\n            primary: 12 /* PageDown */\r\n        }\r\n    }));\r\n    CoreNavigationCommands.CursorPageDownSelect = registerEditorCommand(new CursorMoveBasedCommand({\r\n        args: {\r\n            direction: 3 /* Down */,\r\n            unit: 2 /* WrappedLine */,\r\n            select: true,\r\n            value: -1 /* PAGE_SIZE_MARKER */\r\n        },\r\n        id: 'cursorPageDownSelect',\r\n        precondition: undefined,\r\n        kbOpts: {\r\n            weight: CORE_WEIGHT,\r\n            kbExpr: EditorContextKeys.textInputFocus,\r\n            primary: 1024 /* Shift */ | 12 /* PageDown */\r\n        }\r\n    }));\r\n    CoreNavigationCommands.CreateCursor = registerEditorCommand(new class extends CoreEditorCommand {\r\n        constructor() {\r\n            super({\r\n                id: 'createCursor',\r\n                precondition: undefined\r\n            });\r\n        }\r\n        runCoreEditorCommand(viewModel, args) {\r\n            let newState;\r\n            if (args.wholeLine) {\r\n                newState = CursorMoveCommands.line(viewModel, viewModel.getPrimaryCursorState(), false, args.position, args.viewPosition);\r\n            }\r\n            else {\r\n                newState = CursorMoveCommands.moveTo(viewModel, viewModel.getPrimaryCursorState(), false, args.position, args.viewPosition);\r\n            }\r\n            const states = viewModel.getCursorStates();\r\n            // Check if we should remove a cursor (sort of like a toggle)\r\n            if (states.length > 1) {\r\n                const newModelPosition = (newState.modelState ? newState.modelState.position : null);\r\n                const newViewPosition = (newState.viewState ? newState.viewState.position : null);\r\n                for (let i = 0, len = states.length; i < len; i++) {\r\n                    const state = states[i];\r\n                    if (newModelPosition && !state.modelState.selection.containsPosition(newModelPosition)) {\r\n                        continue;\r\n                    }\r\n                    if (newViewPosition && !state.viewState.selection.containsPosition(newViewPosition)) {\r\n                        continue;\r\n                    }\r\n                    // => Remove the cursor\r\n                    states.splice(i, 1);\r\n                    viewModel.model.pushStackElement();\r\n                    viewModel.setCursorStates(args.source, 3 /* Explicit */, states);\r\n                    return;\r\n                }\r\n            }\r\n            // => Add the new cursor\r\n            states.push(newState);\r\n            viewModel.model.pushStackElement();\r\n            viewModel.setCursorStates(args.source, 3 /* Explicit */, states);\r\n        }\r\n    });\r\n    CoreNavigationCommands.LastCursorMoveToSelect = registerEditorCommand(new class extends CoreEditorCommand {\r\n        constructor() {\r\n            super({\r\n                id: '_lastCursorMoveToSelect',\r\n                precondition: undefined\r\n            });\r\n        }\r\n        runCoreEditorCommand(viewModel, args) {\r\n            const lastAddedCursorIndex = viewModel.getLastAddedCursorIndex();\r\n            const states = viewModel.getCursorStates();\r\n            const newStates = states.slice(0);\r\n            newStates[lastAddedCursorIndex] = CursorMoveCommands.moveTo(viewModel, states[lastAddedCursorIndex], true, args.position, args.viewPosition);\r\n            viewModel.model.pushStackElement();\r\n            viewModel.setCursorStates(args.source, 3 /* Explicit */, newStates);\r\n        }\r\n    });\r\n    class HomeCommand extends CoreEditorCommand {\r\n        constructor(opts) {\r\n            super(opts);\r\n            this._inSelectionMode = opts.inSelectionMode;\r\n        }\r\n        runCoreEditorCommand(viewModel, args) {\r\n            viewModel.model.pushStackElement();\r\n            viewModel.setCursorStates(args.source, 3 /* Explicit */, CursorMoveCommands.moveToBeginningOfLine(viewModel, viewModel.getCursorStates(), this._inSelectionMode));\r\n            viewModel.revealPrimaryCursor(args.source, true);\r\n        }\r\n    }\r\n    CoreNavigationCommands.CursorHome = registerEditorCommand(new HomeCommand({\r\n        inSelectionMode: false,\r\n        id: 'cursorHome',\r\n        precondition: undefined,\r\n        kbOpts: {\r\n            weight: CORE_WEIGHT,\r\n            kbExpr: EditorContextKeys.textInputFocus,\r\n            primary: 14 /* Home */,\r\n            mac: { primary: 14 /* Home */, secondary: [2048 /* CtrlCmd */ | 15 /* LeftArrow */] }\r\n        }\r\n    }));\r\n    CoreNavigationCommands.CursorHomeSelect = registerEditorCommand(new HomeCommand({\r\n        inSelectionMode: true,\r\n        id: 'cursorHomeSelect',\r\n        precondition: undefined,\r\n        kbOpts: {\r\n            weight: CORE_WEIGHT,\r\n            kbExpr: EditorContextKeys.textInputFocus,\r\n            primary: 1024 /* Shift */ | 14 /* Home */,\r\n            mac: { primary: 1024 /* Shift */ | 14 /* Home */, secondary: [2048 /* CtrlCmd */ | 1024 /* Shift */ | 15 /* LeftArrow */] }\r\n        }\r\n    }));\r\n    class LineStartCommand extends CoreEditorCommand {\r\n        constructor(opts) {\r\n            super(opts);\r\n            this._inSelectionMode = opts.inSelectionMode;\r\n        }\r\n        runCoreEditorCommand(viewModel, args) {\r\n            viewModel.model.pushStackElement();\r\n            viewModel.setCursorStates(args.source, 3 /* Explicit */, this._exec(viewModel.getCursorStates()));\r\n            viewModel.revealPrimaryCursor(args.source, true);\r\n        }\r\n        _exec(cursors) {\r\n            const result = [];\r\n            for (let i = 0, len = cursors.length; i < len; i++) {\r\n                const cursor = cursors[i];\r\n                const lineNumber = cursor.modelState.position.lineNumber;\r\n                result[i] = CursorState.fromModelState(cursor.modelState.move(this._inSelectionMode, lineNumber, 1, 0));\r\n            }\r\n            return result;\r\n        }\r\n    }\r\n    CoreNavigationCommands.CursorLineStart = registerEditorCommand(new LineStartCommand({\r\n        inSelectionMode: false,\r\n        id: 'cursorLineStart',\r\n        precondition: undefined,\r\n        kbOpts: {\r\n            weight: CORE_WEIGHT,\r\n            kbExpr: EditorContextKeys.textInputFocus,\r\n            primary: 0,\r\n            mac: { primary: 256 /* WinCtrl */ | 31 /* KEY_A */ }\r\n        }\r\n    }));\r\n    CoreNavigationCommands.CursorLineStartSelect = registerEditorCommand(new LineStartCommand({\r\n        inSelectionMode: true,\r\n        id: 'cursorLineStartSelect',\r\n        precondition: undefined,\r\n        kbOpts: {\r\n            weight: CORE_WEIGHT,\r\n            kbExpr: EditorContextKeys.textInputFocus,\r\n            primary: 0,\r\n            mac: { primary: 256 /* WinCtrl */ | 1024 /* Shift */ | 31 /* KEY_A */ }\r\n        }\r\n    }));\r\n    class EndCommand extends CoreEditorCommand {\r\n        constructor(opts) {\r\n            super(opts);\r\n            this._inSelectionMode = opts.inSelectionMode;\r\n        }\r\n        runCoreEditorCommand(viewModel, args) {\r\n            viewModel.model.pushStackElement();\r\n            viewModel.setCursorStates(args.source, 3 /* Explicit */, CursorMoveCommands.moveToEndOfLine(viewModel, viewModel.getCursorStates(), this._inSelectionMode, args.sticky || false));\r\n            viewModel.revealPrimaryCursor(args.source, true);\r\n        }\r\n    }\r\n    CoreNavigationCommands.CursorEnd = registerEditorCommand(new EndCommand({\r\n        inSelectionMode: false,\r\n        id: 'cursorEnd',\r\n        precondition: undefined,\r\n        kbOpts: {\r\n            args: { sticky: false },\r\n            weight: CORE_WEIGHT,\r\n            kbExpr: EditorContextKeys.textInputFocus,\r\n            primary: 13 /* End */,\r\n            mac: { primary: 13 /* End */, secondary: [2048 /* CtrlCmd */ | 17 /* RightArrow */] }\r\n        },\r\n        description: {\r\n            description: `Go to End`,\r\n            args: [{\r\n                    name: 'args',\r\n                    schema: {\r\n                        type: 'object',\r\n                        properties: {\r\n                            'sticky': {\r\n                                description: nls.localize('stickydesc', \"Stick to the end even when going to longer lines\"),\r\n                                type: 'boolean',\r\n                                default: false\r\n                            }\r\n                        }\r\n                    }\r\n                }]\r\n        }\r\n    }));\r\n    CoreNavigationCommands.CursorEndSelect = registerEditorCommand(new EndCommand({\r\n        inSelectionMode: true,\r\n        id: 'cursorEndSelect',\r\n        precondition: undefined,\r\n        kbOpts: {\r\n            args: { sticky: false },\r\n            weight: CORE_WEIGHT,\r\n            kbExpr: EditorContextKeys.textInputFocus,\r\n            primary: 1024 /* Shift */ | 13 /* End */,\r\n            mac: { primary: 1024 /* Shift */ | 13 /* End */, secondary: [2048 /* CtrlCmd */ | 1024 /* Shift */ | 17 /* RightArrow */] }\r\n        },\r\n        description: {\r\n            description: `Select to End`,\r\n            args: [{\r\n                    name: 'args',\r\n                    schema: {\r\n                        type: 'object',\r\n                        properties: {\r\n                            'sticky': {\r\n                                description: nls.localize('stickydesc', \"Stick to the end even when going to longer lines\"),\r\n                                type: 'boolean',\r\n                                default: false\r\n                            }\r\n                        }\r\n                    }\r\n                }]\r\n        }\r\n    }));\r\n    class LineEndCommand extends CoreEditorCommand {\r\n        constructor(opts) {\r\n            super(opts);\r\n            this._inSelectionMode = opts.inSelectionMode;\r\n        }\r\n        runCoreEditorCommand(viewModel, args) {\r\n            viewModel.model.pushStackElement();\r\n            viewModel.setCursorStates(args.source, 3 /* Explicit */, this._exec(viewModel, viewModel.getCursorStates()));\r\n            viewModel.revealPrimaryCursor(args.source, true);\r\n        }\r\n        _exec(viewModel, cursors) {\r\n            const result = [];\r\n            for (let i = 0, len = cursors.length; i < len; i++) {\r\n                const cursor = cursors[i];\r\n                const lineNumber = cursor.modelState.position.lineNumber;\r\n                const maxColumn = viewModel.model.getLineMaxColumn(lineNumber);\r\n                result[i] = CursorState.fromModelState(cursor.modelState.move(this._inSelectionMode, lineNumber, maxColumn, 0));\r\n            }\r\n            return result;\r\n        }\r\n    }\r\n    CoreNavigationCommands.CursorLineEnd = registerEditorCommand(new LineEndCommand({\r\n        inSelectionMode: false,\r\n        id: 'cursorLineEnd',\r\n        precondition: undefined,\r\n        kbOpts: {\r\n            weight: CORE_WEIGHT,\r\n            kbExpr: EditorContextKeys.textInputFocus,\r\n            primary: 0,\r\n            mac: { primary: 256 /* WinCtrl */ | 35 /* KEY_E */ }\r\n        }\r\n    }));\r\n    CoreNavigationCommands.CursorLineEndSelect = registerEditorCommand(new LineEndCommand({\r\n        inSelectionMode: true,\r\n        id: 'cursorLineEndSelect',\r\n        precondition: undefined,\r\n        kbOpts: {\r\n            weight: CORE_WEIGHT,\r\n            kbExpr: EditorContextKeys.textInputFocus,\r\n            primary: 0,\r\n            mac: { primary: 256 /* WinCtrl */ | 1024 /* Shift */ | 35 /* KEY_E */ }\r\n        }\r\n    }));\r\n    class TopCommand extends CoreEditorCommand {\r\n        constructor(opts) {\r\n            super(opts);\r\n            this._inSelectionMode = opts.inSelectionMode;\r\n        }\r\n        runCoreEditorCommand(viewModel, args) {\r\n            viewModel.model.pushStackElement();\r\n            viewModel.setCursorStates(args.source, 3 /* Explicit */, CursorMoveCommands.moveToBeginningOfBuffer(viewModel, viewModel.getCursorStates(), this._inSelectionMode));\r\n            viewModel.revealPrimaryCursor(args.source, true);\r\n        }\r\n    }\r\n    CoreNavigationCommands.CursorTop = registerEditorCommand(new TopCommand({\r\n        inSelectionMode: false,\r\n        id: 'cursorTop',\r\n        precondition: undefined,\r\n        kbOpts: {\r\n            weight: CORE_WEIGHT,\r\n            kbExpr: EditorContextKeys.textInputFocus,\r\n            primary: 2048 /* CtrlCmd */ | 14 /* Home */,\r\n            mac: { primary: 2048 /* CtrlCmd */ | 16 /* UpArrow */ }\r\n        }\r\n    }));\r\n    CoreNavigationCommands.CursorTopSelect = registerEditorCommand(new TopCommand({\r\n        inSelectionMode: true,\r\n        id: 'cursorTopSelect',\r\n        precondition: undefined,\r\n        kbOpts: {\r\n            weight: CORE_WEIGHT,\r\n            kbExpr: EditorContextKeys.textInputFocus,\r\n            primary: 2048 /* CtrlCmd */ | 1024 /* Shift */ | 14 /* Home */,\r\n            mac: { primary: 2048 /* CtrlCmd */ | 1024 /* Shift */ | 16 /* UpArrow */ }\r\n        }\r\n    }));\r\n    class BottomCommand extends CoreEditorCommand {\r\n        constructor(opts) {\r\n            super(opts);\r\n            this._inSelectionMode = opts.inSelectionMode;\r\n        }\r\n        runCoreEditorCommand(viewModel, args) {\r\n            viewModel.model.pushStackElement();\r\n            viewModel.setCursorStates(args.source, 3 /* Explicit */, CursorMoveCommands.moveToEndOfBuffer(viewModel, viewModel.getCursorStates(), this._inSelectionMode));\r\n            viewModel.revealPrimaryCursor(args.source, true);\r\n        }\r\n    }\r\n    CoreNavigationCommands.CursorBottom = registerEditorCommand(new BottomCommand({\r\n        inSelectionMode: false,\r\n        id: 'cursorBottom',\r\n        precondition: undefined,\r\n        kbOpts: {\r\n            weight: CORE_WEIGHT,\r\n            kbExpr: EditorContextKeys.textInputFocus,\r\n            primary: 2048 /* CtrlCmd */ | 13 /* End */,\r\n            mac: { primary: 2048 /* CtrlCmd */ | 18 /* DownArrow */ }\r\n        }\r\n    }));\r\n    CoreNavigationCommands.CursorBottomSelect = registerEditorCommand(new BottomCommand({\r\n        inSelectionMode: true,\r\n        id: 'cursorBottomSelect',\r\n        precondition: undefined,\r\n        kbOpts: {\r\n            weight: CORE_WEIGHT,\r\n            kbExpr: EditorContextKeys.textInputFocus,\r\n            primary: 2048 /* CtrlCmd */ | 1024 /* Shift */ | 13 /* End */,\r\n            mac: { primary: 2048 /* CtrlCmd */ | 1024 /* Shift */ | 18 /* DownArrow */ }\r\n        }\r\n    }));\r\n    class EditorScrollImpl extends CoreEditorCommand {\r\n        constructor() {\r\n            super({\r\n                id: 'editorScroll',\r\n                precondition: undefined,\r\n                description: EditorScroll_.description\r\n            });\r\n        }\r\n        runCoreEditorCommand(viewModel, args) {\r\n            const parsed = EditorScroll_.parse(args);\r\n            if (!parsed) {\r\n                // illegal arguments\r\n                return;\r\n            }\r\n            this._runEditorScroll(viewModel, args.source, parsed);\r\n        }\r\n        _runEditorScroll(viewModel, source, args) {\r\n            const desiredScrollTop = this._computeDesiredScrollTop(viewModel, args);\r\n            if (args.revealCursor) {\r\n                // must ensure cursor is in new visible range\r\n                const desiredVisibleViewRange = viewModel.getCompletelyVisibleViewRangeAtScrollTop(desiredScrollTop);\r\n                viewModel.setCursorStates(source, 3 /* Explicit */, [\r\n                    CursorMoveCommands.findPositionInViewportIfOutside(viewModel, viewModel.getPrimaryCursorState(), desiredVisibleViewRange, args.select)\r\n                ]);\r\n            }\r\n            viewModel.setScrollTop(desiredScrollTop, 0 /* Smooth */);\r\n        }\r\n        _computeDesiredScrollTop(viewModel, args) {\r\n            if (args.unit === 1 /* Line */) {\r\n                // scrolling by model lines\r\n                const visibleViewRange = viewModel.getCompletelyVisibleViewRange();\r\n                const visibleModelRange = viewModel.coordinatesConverter.convertViewRangeToModelRange(visibleViewRange);\r\n                let desiredTopModelLineNumber;\r\n                if (args.direction === 1 /* Up */) {\r\n                    // must go x model lines up\r\n                    desiredTopModelLineNumber = Math.max(1, visibleModelRange.startLineNumber - args.value);\r\n                }\r\n                else {\r\n                    // must go x model lines down\r\n                    desiredTopModelLineNumber = Math.min(viewModel.model.getLineCount(), visibleModelRange.startLineNumber + args.value);\r\n                }\r\n                const viewPosition = viewModel.coordinatesConverter.convertModelPositionToViewPosition(new Position(desiredTopModelLineNumber, 1));\r\n                return viewModel.getVerticalOffsetForLineNumber(viewPosition.lineNumber);\r\n            }\r\n            let noOfLines;\r\n            if (args.unit === 3 /* Page */) {\r\n                noOfLines = viewModel.cursorConfig.pageSize * args.value;\r\n            }\r\n            else if (args.unit === 4 /* HalfPage */) {\r\n                noOfLines = Math.round(viewModel.cursorConfig.pageSize / 2) * args.value;\r\n            }\r\n            else {\r\n                noOfLines = args.value;\r\n            }\r\n            const deltaLines = (args.direction === 1 /* Up */ ? -1 : 1) * noOfLines;\r\n            return viewModel.getScrollTop() + deltaLines * viewModel.cursorConfig.lineHeight;\r\n        }\r\n    }\r\n    CoreNavigationCommands.EditorScrollImpl = EditorScrollImpl;\r\n    CoreNavigationCommands.EditorScroll = registerEditorCommand(new EditorScrollImpl());\r\n    CoreNavigationCommands.ScrollLineUp = registerEditorCommand(new class extends CoreEditorCommand {\r\n        constructor() {\r\n            super({\r\n                id: 'scrollLineUp',\r\n                precondition: undefined,\r\n                kbOpts: {\r\n                    weight: CORE_WEIGHT,\r\n                    kbExpr: EditorContextKeys.textInputFocus,\r\n                    primary: 2048 /* CtrlCmd */ | 16 /* UpArrow */,\r\n                    mac: { primary: 256 /* WinCtrl */ | 11 /* PageUp */ }\r\n                }\r\n            });\r\n        }\r\n        runCoreEditorCommand(viewModel, args) {\r\n            CoreNavigationCommands.EditorScroll._runEditorScroll(viewModel, args.source, {\r\n                direction: 1 /* Up */,\r\n                unit: 2 /* WrappedLine */,\r\n                value: 1,\r\n                revealCursor: false,\r\n                select: false\r\n            });\r\n        }\r\n    });\r\n    CoreNavigationCommands.ScrollPageUp = registerEditorCommand(new class extends CoreEditorCommand {\r\n        constructor() {\r\n            super({\r\n                id: 'scrollPageUp',\r\n                precondition: undefined,\r\n                kbOpts: {\r\n                    weight: CORE_WEIGHT,\r\n                    kbExpr: EditorContextKeys.textInputFocus,\r\n                    primary: 2048 /* CtrlCmd */ | 11 /* PageUp */,\r\n                    win: { primary: 512 /* Alt */ | 11 /* PageUp */ },\r\n                    linux: { primary: 512 /* Alt */ | 11 /* PageUp */ }\r\n                }\r\n            });\r\n        }\r\n        runCoreEditorCommand(viewModel, args) {\r\n            CoreNavigationCommands.EditorScroll._runEditorScroll(viewModel, args.source, {\r\n                direction: 1 /* Up */,\r\n                unit: 3 /* Page */,\r\n                value: 1,\r\n                revealCursor: false,\r\n                select: false\r\n            });\r\n        }\r\n    });\r\n    CoreNavigationCommands.ScrollLineDown = registerEditorCommand(new class extends CoreEditorCommand {\r\n        constructor() {\r\n            super({\r\n                id: 'scrollLineDown',\r\n                precondition: undefined,\r\n                kbOpts: {\r\n                    weight: CORE_WEIGHT,\r\n                    kbExpr: EditorContextKeys.textInputFocus,\r\n                    primary: 2048 /* CtrlCmd */ | 18 /* DownArrow */,\r\n                    mac: { primary: 256 /* WinCtrl */ | 12 /* PageDown */ }\r\n                }\r\n            });\r\n        }\r\n        runCoreEditorCommand(viewModel, args) {\r\n            CoreNavigationCommands.EditorScroll._runEditorScroll(viewModel, args.source, {\r\n                direction: 2 /* Down */,\r\n                unit: 2 /* WrappedLine */,\r\n                value: 1,\r\n                revealCursor: false,\r\n                select: false\r\n            });\r\n        }\r\n    });\r\n    CoreNavigationCommands.ScrollPageDown = registerEditorCommand(new class extends CoreEditorCommand {\r\n        constructor() {\r\n            super({\r\n                id: 'scrollPageDown',\r\n                precondition: undefined,\r\n                kbOpts: {\r\n                    weight: CORE_WEIGHT,\r\n                    kbExpr: EditorContextKeys.textInputFocus,\r\n                    primary: 2048 /* CtrlCmd */ | 12 /* PageDown */,\r\n                    win: { primary: 512 /* Alt */ | 12 /* PageDown */ },\r\n                    linux: { primary: 512 /* Alt */ | 12 /* PageDown */ }\r\n                }\r\n            });\r\n        }\r\n        runCoreEditorCommand(viewModel, args) {\r\n            CoreNavigationCommands.EditorScroll._runEditorScroll(viewModel, args.source, {\r\n                direction: 2 /* Down */,\r\n                unit: 3 /* Page */,\r\n                value: 1,\r\n                revealCursor: false,\r\n                select: false\r\n            });\r\n        }\r\n    });\r\n    class WordCommand extends CoreEditorCommand {\r\n        constructor(opts) {\r\n            super(opts);\r\n            this._inSelectionMode = opts.inSelectionMode;\r\n        }\r\n        runCoreEditorCommand(viewModel, args) {\r\n            viewModel.model.pushStackElement();\r\n            viewModel.setCursorStates(args.source, 3 /* Explicit */, [\r\n                CursorMoveCommands.word(viewModel, viewModel.getPrimaryCursorState(), this._inSelectionMode, args.position)\r\n            ]);\r\n            viewModel.revealPrimaryCursor(args.source, true);\r\n        }\r\n    }\r\n    CoreNavigationCommands.WordSelect = registerEditorCommand(new WordCommand({\r\n        inSelectionMode: false,\r\n        id: '_wordSelect',\r\n        precondition: undefined\r\n    }));\r\n    CoreNavigationCommands.WordSelectDrag = registerEditorCommand(new WordCommand({\r\n        inSelectionMode: true,\r\n        id: '_wordSelectDrag',\r\n        precondition: undefined\r\n    }));\r\n    CoreNavigationCommands.LastCursorWordSelect = registerEditorCommand(new class extends CoreEditorCommand {\r\n        constructor() {\r\n            super({\r\n                id: 'lastCursorWordSelect',\r\n                precondition: undefined\r\n            });\r\n        }\r\n        runCoreEditorCommand(viewModel, args) {\r\n            const lastAddedCursorIndex = viewModel.getLastAddedCursorIndex();\r\n            const states = viewModel.getCursorStates();\r\n            const newStates = states.slice(0);\r\n            const lastAddedState = states[lastAddedCursorIndex];\r\n            newStates[lastAddedCursorIndex] = CursorMoveCommands.word(viewModel, lastAddedState, lastAddedState.modelState.hasSelection(), args.position);\r\n            viewModel.model.pushStackElement();\r\n            viewModel.setCursorStates(args.source, 3 /* Explicit */, newStates);\r\n        }\r\n    });\r\n    class LineCommand extends CoreEditorCommand {\r\n        constructor(opts) {\r\n            super(opts);\r\n            this._inSelectionMode = opts.inSelectionMode;\r\n        }\r\n        runCoreEditorCommand(viewModel, args) {\r\n            viewModel.model.pushStackElement();\r\n            viewModel.setCursorStates(args.source, 3 /* Explicit */, [\r\n                CursorMoveCommands.line(viewModel, viewModel.getPrimaryCursorState(), this._inSelectionMode, args.position, args.viewPosition)\r\n            ]);\r\n            viewModel.revealPrimaryCursor(args.source, false);\r\n        }\r\n    }\r\n    CoreNavigationCommands.LineSelect = registerEditorCommand(new LineCommand({\r\n        inSelectionMode: false,\r\n        id: '_lineSelect',\r\n        precondition: undefined\r\n    }));\r\n    CoreNavigationCommands.LineSelectDrag = registerEditorCommand(new LineCommand({\r\n        inSelectionMode: true,\r\n        id: '_lineSelectDrag',\r\n        precondition: undefined\r\n    }));\r\n    class LastCursorLineCommand extends CoreEditorCommand {\r\n        constructor(opts) {\r\n            super(opts);\r\n            this._inSelectionMode = opts.inSelectionMode;\r\n        }\r\n        runCoreEditorCommand(viewModel, args) {\r\n            const lastAddedCursorIndex = viewModel.getLastAddedCursorIndex();\r\n            const states = viewModel.getCursorStates();\r\n            const newStates = states.slice(0);\r\n            newStates[lastAddedCursorIndex] = CursorMoveCommands.line(viewModel, states[lastAddedCursorIndex], this._inSelectionMode, args.position, args.viewPosition);\r\n            viewModel.model.pushStackElement();\r\n            viewModel.setCursorStates(args.source, 3 /* Explicit */, newStates);\r\n        }\r\n    }\r\n    CoreNavigationCommands.LastCursorLineSelect = registerEditorCommand(new LastCursorLineCommand({\r\n        inSelectionMode: false,\r\n        id: 'lastCursorLineSelect',\r\n        precondition: undefined\r\n    }));\r\n    CoreNavigationCommands.LastCursorLineSelectDrag = registerEditorCommand(new LastCursorLineCommand({\r\n        inSelectionMode: true,\r\n        id: 'lastCursorLineSelectDrag',\r\n        precondition: undefined\r\n    }));\r\n    CoreNavigationCommands.ExpandLineSelection = registerEditorCommand(new class extends CoreEditorCommand {\r\n        constructor() {\r\n            super({\r\n                id: 'expandLineSelection',\r\n                precondition: undefined,\r\n                kbOpts: {\r\n                    weight: CORE_WEIGHT,\r\n                    kbExpr: EditorContextKeys.textInputFocus,\r\n                    primary: 2048 /* CtrlCmd */ | 42 /* KEY_L */\r\n                }\r\n            });\r\n        }\r\n        runCoreEditorCommand(viewModel, args) {\r\n            viewModel.model.pushStackElement();\r\n            viewModel.setCursorStates(args.source, 3 /* Explicit */, CursorMoveCommands.expandLineSelection(viewModel, viewModel.getCursorStates()));\r\n            viewModel.revealPrimaryCursor(args.source, true);\r\n        }\r\n    });\r\n    CoreNavigationCommands.CancelSelection = registerEditorCommand(new class extends CoreEditorCommand {\r\n        constructor() {\r\n            super({\r\n                id: 'cancelSelection',\r\n                precondition: EditorContextKeys.hasNonEmptySelection,\r\n                kbOpts: {\r\n                    weight: CORE_WEIGHT,\r\n                    kbExpr: EditorContextKeys.textInputFocus,\r\n                    primary: 9 /* Escape */,\r\n                    secondary: [1024 /* Shift */ | 9 /* Escape */]\r\n                }\r\n            });\r\n        }\r\n        runCoreEditorCommand(viewModel, args) {\r\n            viewModel.model.pushStackElement();\r\n            viewModel.setCursorStates(args.source, 3 /* Explicit */, [\r\n                CursorMoveCommands.cancelSelection(viewModel, viewModel.getPrimaryCursorState())\r\n            ]);\r\n            viewModel.revealPrimaryCursor(args.source, true);\r\n        }\r\n    });\r\n    CoreNavigationCommands.RemoveSecondaryCursors = registerEditorCommand(new class extends CoreEditorCommand {\r\n        constructor() {\r\n            super({\r\n                id: 'removeSecondaryCursors',\r\n                precondition: EditorContextKeys.hasMultipleSelections,\r\n                kbOpts: {\r\n                    weight: CORE_WEIGHT + 1,\r\n                    kbExpr: EditorContextKeys.textInputFocus,\r\n                    primary: 9 /* Escape */,\r\n                    secondary: [1024 /* Shift */ | 9 /* Escape */]\r\n                }\r\n            });\r\n        }\r\n        runCoreEditorCommand(viewModel, args) {\r\n            viewModel.model.pushStackElement();\r\n            viewModel.setCursorStates(args.source, 3 /* Explicit */, [\r\n                viewModel.getPrimaryCursorState()\r\n            ]);\r\n            viewModel.revealPrimaryCursor(args.source, true);\r\n        }\r\n    });\r\n    CoreNavigationCommands.RevealLine = registerEditorCommand(new class extends CoreEditorCommand {\r\n        constructor() {\r\n            super({\r\n                id: 'revealLine',\r\n                precondition: undefined,\r\n                description: RevealLine_.description\r\n            });\r\n        }\r\n        runCoreEditorCommand(viewModel, args) {\r\n            const revealLineArg = args;\r\n            const lineNumberArg = revealLineArg.lineNumber || 0;\r\n            let lineNumber = typeof lineNumberArg === 'number' ? (lineNumberArg + 1) : (parseInt(lineNumberArg) + 1);\r\n            if (lineNumber < 1) {\r\n                lineNumber = 1;\r\n            }\r\n            const lineCount = viewModel.model.getLineCount();\r\n            if (lineNumber > lineCount) {\r\n                lineNumber = lineCount;\r\n            }\r\n            const range = new Range(lineNumber, 1, lineNumber, viewModel.model.getLineMaxColumn(lineNumber));\r\n            let revealAt = 0 /* Simple */;\r\n            if (revealLineArg.at) {\r\n                switch (revealLineArg.at) {\r\n                    case RevealLine_.RawAtArgument.Top:\r\n                        revealAt = 3 /* Top */;\r\n                        break;\r\n                    case RevealLine_.RawAtArgument.Center:\r\n                        revealAt = 1 /* Center */;\r\n                        break;\r\n                    case RevealLine_.RawAtArgument.Bottom:\r\n                        revealAt = 4 /* Bottom */;\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n            const viewRange = viewModel.coordinatesConverter.convertModelRangeToViewRange(range);\r\n            viewModel.revealRange(args.source, false, viewRange, revealAt, 0 /* Smooth */);\r\n        }\r\n    });\r\n    CoreNavigationCommands.SelectAll = new class extends EditorOrNativeTextInputCommand {\r\n        constructor() {\r\n            super(SelectAllCommand);\r\n        }\r\n        runDOMCommand() {\r\n            if (isFirefox) {\r\n                document.activeElement.focus();\r\n                document.activeElement.select();\r\n            }\r\n            document.execCommand('selectAll');\r\n        }\r\n        runEditorCommand(accessor, editor, args) {\r\n            const viewModel = editor._getViewModel();\r\n            if (!viewModel) {\r\n                // the editor has no view => has no cursors\r\n                return;\r\n            }\r\n            this.runCoreEditorCommand(viewModel, args);\r\n        }\r\n        runCoreEditorCommand(viewModel, args) {\r\n            viewModel.model.pushStackElement();\r\n            viewModel.setCursorStates('keyboard', 3 /* Explicit */, [\r\n                CursorMoveCommands.selectAll(viewModel, viewModel.getPrimaryCursorState())\r\n            ]);\r\n        }\r\n    }();\r\n    CoreNavigationCommands.SetSelection = registerEditorCommand(new class extends CoreEditorCommand {\r\n        constructor() {\r\n            super({\r\n                id: 'setSelection',\r\n                precondition: undefined\r\n            });\r\n        }\r\n        runCoreEditorCommand(viewModel, args) {\r\n            viewModel.model.pushStackElement();\r\n            viewModel.setCursorStates(args.source, 3 /* Explicit */, [\r\n                CursorState.fromModelSelection(args.selection)\r\n            ]);\r\n        }\r\n    });\r\n})(CoreNavigationCommands || (CoreNavigationCommands = {}));\r\nconst columnSelectionCondition = ContextKeyExpr.and(EditorContextKeys.textInputFocus, EditorContextKeys.columnSelection);\r\nfunction registerColumnSelection(id, keybinding) {\r\n    KeybindingsRegistry.registerKeybindingRule({\r\n        id: id,\r\n        primary: keybinding,\r\n        when: columnSelectionCondition,\r\n        weight: CORE_WEIGHT + 1\r\n    });\r\n}\r\nregisterColumnSelection(CoreNavigationCommands.CursorColumnSelectLeft.id, 1024 /* Shift */ | 15 /* LeftArrow */);\r\nregisterColumnSelection(CoreNavigationCommands.CursorColumnSelectRight.id, 1024 /* Shift */ | 17 /* RightArrow */);\r\nregisterColumnSelection(CoreNavigationCommands.CursorColumnSelectUp.id, 1024 /* Shift */ | 16 /* UpArrow */);\r\nregisterColumnSelection(CoreNavigationCommands.CursorColumnSelectPageUp.id, 1024 /* Shift */ | 11 /* PageUp */);\r\nregisterColumnSelection(CoreNavigationCommands.CursorColumnSelectDown.id, 1024 /* Shift */ | 18 /* DownArrow */);\r\nregisterColumnSelection(CoreNavigationCommands.CursorColumnSelectPageDown.id, 1024 /* Shift */ | 12 /* PageDown */);\r\nfunction registerCommand(command) {\r\n    command.register();\r\n    return command;\r\n}\r\nexport var CoreEditingCommands;\r\n(function (CoreEditingCommands) {\r\n    class CoreEditingCommand extends EditorCommand {\r\n        runEditorCommand(accessor, editor, args) {\r\n            const viewModel = editor._getViewModel();\r\n            if (!viewModel) {\r\n                // the editor has no view => has no cursors\r\n                return;\r\n            }\r\n            this.runCoreEditingCommand(editor, viewModel, args || {});\r\n        }\r\n    }\r\n    CoreEditingCommands.CoreEditingCommand = CoreEditingCommand;\r\n    CoreEditingCommands.LineBreakInsert = registerEditorCommand(new class extends CoreEditingCommand {\r\n        constructor() {\r\n            super({\r\n                id: 'lineBreakInsert',\r\n                precondition: EditorContextKeys.writable,\r\n                kbOpts: {\r\n                    weight: CORE_WEIGHT,\r\n                    kbExpr: EditorContextKeys.textInputFocus,\r\n                    primary: 0,\r\n                    mac: { primary: 256 /* WinCtrl */ | 45 /* KEY_O */ }\r\n                }\r\n            });\r\n        }\r\n        runCoreEditingCommand(editor, viewModel, args) {\r\n            editor.pushUndoStop();\r\n            editor.executeCommands(this.id, TypeOperations.lineBreakInsert(viewModel.cursorConfig, viewModel.model, viewModel.getCursorStates().map(s => s.modelState.selection)));\r\n        }\r\n    });\r\n    CoreEditingCommands.Outdent = registerEditorCommand(new class extends CoreEditingCommand {\r\n        constructor() {\r\n            super({\r\n                id: 'outdent',\r\n                precondition: EditorContextKeys.writable,\r\n                kbOpts: {\r\n                    weight: CORE_WEIGHT,\r\n                    kbExpr: ContextKeyExpr.and(EditorContextKeys.editorTextFocus, EditorContextKeys.tabDoesNotMoveFocus),\r\n                    primary: 1024 /* Shift */ | 2 /* Tab */\r\n                }\r\n            });\r\n        }\r\n        runCoreEditingCommand(editor, viewModel, args) {\r\n            editor.pushUndoStop();\r\n            editor.executeCommands(this.id, TypeOperations.outdent(viewModel.cursorConfig, viewModel.model, viewModel.getCursorStates().map(s => s.modelState.selection)));\r\n            editor.pushUndoStop();\r\n        }\r\n    });\r\n    CoreEditingCommands.Tab = registerEditorCommand(new class extends CoreEditingCommand {\r\n        constructor() {\r\n            super({\r\n                id: 'tab',\r\n                precondition: EditorContextKeys.writable,\r\n                kbOpts: {\r\n                    weight: CORE_WEIGHT,\r\n                    kbExpr: ContextKeyExpr.and(EditorContextKeys.editorTextFocus, EditorContextKeys.tabDoesNotMoveFocus),\r\n                    primary: 2 /* Tab */\r\n                }\r\n            });\r\n        }\r\n        runCoreEditingCommand(editor, viewModel, args) {\r\n            editor.pushUndoStop();\r\n            editor.executeCommands(this.id, TypeOperations.tab(viewModel.cursorConfig, viewModel.model, viewModel.getCursorStates().map(s => s.modelState.selection)));\r\n            editor.pushUndoStop();\r\n        }\r\n    });\r\n    CoreEditingCommands.DeleteLeft = registerEditorCommand(new class extends CoreEditingCommand {\r\n        constructor() {\r\n            super({\r\n                id: 'deleteLeft',\r\n                precondition: undefined,\r\n                kbOpts: {\r\n                    weight: CORE_WEIGHT,\r\n                    kbExpr: EditorContextKeys.textInputFocus,\r\n                    primary: 1 /* Backspace */,\r\n                    secondary: [1024 /* Shift */ | 1 /* Backspace */],\r\n                    mac: { primary: 1 /* Backspace */, secondary: [1024 /* Shift */ | 1 /* Backspace */, 256 /* WinCtrl */ | 38 /* KEY_H */, 256 /* WinCtrl */ | 1 /* Backspace */] }\r\n                }\r\n            });\r\n        }\r\n        runCoreEditingCommand(editor, viewModel, args) {\r\n            const [shouldPushStackElementBefore, commands] = DeleteOperations.deleteLeft(viewModel.getPrevEditOperationType(), viewModel.cursorConfig, viewModel.model, viewModel.getCursorStates().map(s => s.modelState.selection));\r\n            if (shouldPushStackElementBefore) {\r\n                editor.pushUndoStop();\r\n            }\r\n            editor.executeCommands(this.id, commands);\r\n            viewModel.setPrevEditOperationType(2 /* DeletingLeft */);\r\n        }\r\n    });\r\n    CoreEditingCommands.DeleteRight = registerEditorCommand(new class extends CoreEditingCommand {\r\n        constructor() {\r\n            super({\r\n                id: 'deleteRight',\r\n                precondition: undefined,\r\n                kbOpts: {\r\n                    weight: CORE_WEIGHT,\r\n                    kbExpr: EditorContextKeys.textInputFocus,\r\n                    primary: 20 /* Delete */,\r\n                    mac: { primary: 20 /* Delete */, secondary: [256 /* WinCtrl */ | 34 /* KEY_D */, 256 /* WinCtrl */ | 20 /* Delete */] }\r\n                }\r\n            });\r\n        }\r\n        runCoreEditingCommand(editor, viewModel, args) {\r\n            const [shouldPushStackElementBefore, commands] = DeleteOperations.deleteRight(viewModel.getPrevEditOperationType(), viewModel.cursorConfig, viewModel.model, viewModel.getCursorStates().map(s => s.modelState.selection));\r\n            if (shouldPushStackElementBefore) {\r\n                editor.pushUndoStop();\r\n            }\r\n            editor.executeCommands(this.id, commands);\r\n            viewModel.setPrevEditOperationType(3 /* DeletingRight */);\r\n        }\r\n    });\r\n    CoreEditingCommands.Undo = new class extends EditorOrNativeTextInputCommand {\r\n        constructor() {\r\n            super(UndoCommand);\r\n        }\r\n        runDOMCommand() {\r\n            document.execCommand('undo');\r\n        }\r\n        runEditorCommand(accessor, editor, args) {\r\n            if (!editor.hasModel() || editor.getOption(75 /* readOnly */) === true) {\r\n                return;\r\n            }\r\n            return editor.getModel().undo();\r\n        }\r\n    }();\r\n    CoreEditingCommands.Redo = new class extends EditorOrNativeTextInputCommand {\r\n        constructor() {\r\n            super(RedoCommand);\r\n        }\r\n        runDOMCommand() {\r\n            document.execCommand('redo');\r\n        }\r\n        runEditorCommand(accessor, editor, args) {\r\n            if (!editor.hasModel() || editor.getOption(75 /* readOnly */) === true) {\r\n                return;\r\n            }\r\n            return editor.getModel().redo();\r\n        }\r\n    }();\r\n})(CoreEditingCommands || (CoreEditingCommands = {}));\r\n/**\r\n * A command that will invoke a command on the focused editor.\r\n */\r\nclass EditorHandlerCommand extends Command {\r\n    constructor(id, handlerId, description) {\r\n        super({\r\n            id: id,\r\n            precondition: undefined,\r\n            description: description\r\n        });\r\n        this._handlerId = handlerId;\r\n    }\r\n    runCommand(accessor, args) {\r\n        const editor = accessor.get(ICodeEditorService).getFocusedCodeEditor();\r\n        if (!editor) {\r\n            return;\r\n        }\r\n        editor.trigger('keyboard', this._handlerId, args);\r\n    }\r\n}\r\nfunction registerOverwritableCommand(handlerId, description) {\r\n    registerCommand(new EditorHandlerCommand('default:' + handlerId, handlerId));\r\n    registerCommand(new EditorHandlerCommand(handlerId, handlerId, description));\r\n}\r\nregisterOverwritableCommand(\"type\" /* Type */, {\r\n    description: `Type`,\r\n    args: [{\r\n            name: 'args',\r\n            schema: {\r\n                'type': 'object',\r\n                'required': ['text'],\r\n                'properties': {\r\n                    'text': {\r\n                        'type': 'string'\r\n                    }\r\n                },\r\n            }\r\n        }]\r\n});\r\nregisterOverwritableCommand(\"replacePreviousChar\" /* ReplacePreviousChar */);\r\nregisterOverwritableCommand(\"compositionStart\" /* CompositionStart */);\r\nregisterOverwritableCommand(\"compositionEnd\" /* CompositionEnd */);\r\nregisterOverwritableCommand(\"paste\" /* Paste */);\r\nregisterOverwritableCommand(\"cut\" /* Cut */);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}