{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\nimport { PauseableEmitter } from '../../../base/common/event.js';\nimport { Iterable } from '../../../base/common/iterator.js';\nimport { DisposableStore, MutableDisposable } from '../../../base/common/lifecycle.js';\nimport { TernarySearchTree } from '../../../base/common/map.js';\nimport { CommandsRegistry } from '../../commands/common/commands.js';\nimport { IConfigurationService } from '../../configuration/common/configuration.js';\nimport { IContextKeyService, SET_CONTEXT_COMMAND_ID } from '../common/contextkey.js';\nimport { KeybindingResolver } from '../../keybinding/common/keybindingResolver.js';\nconst KEYBINDING_CONTEXT_ATTR = 'data-keybinding-context';\nexport class Context {\n  constructor(id, parent) {\n    this._id = id;\n    this._parent = parent;\n    this._value = Object.create(null);\n    this._value['_contextId'] = id;\n  }\n  setValue(key, value) {\n    // console.log('SET ' + key + ' = ' + value + ' ON ' + this._id);\n    if (this._value[key] !== value) {\n      this._value[key] = value;\n      return true;\n    }\n    return false;\n  }\n  removeValue(key) {\n    // console.log('REMOVE ' + key + ' FROM ' + this._id);\n    if (key in this._value) {\n      delete this._value[key];\n      return true;\n    }\n    return false;\n  }\n  getValue(key) {\n    const ret = this._value[key];\n    if (typeof ret === 'undefined' && this._parent) {\n      return this._parent.getValue(key);\n    }\n    return ret;\n  }\n}\nclass NullContext extends Context {\n  constructor() {\n    super(-1, null);\n  }\n  setValue(key, value) {\n    return false;\n  }\n  removeValue(key) {\n    return false;\n  }\n  getValue(key) {\n    return undefined;\n  }\n}\nNullContext.INSTANCE = new NullContext();\nclass ConfigAwareContextValuesContainer extends Context {\n  constructor(id, _configurationService, emitter) {\n    super(id, null);\n    this._configurationService = _configurationService;\n    this._values = TernarySearchTree.forConfigKeys();\n    this._listener = this._configurationService.onDidChangeConfiguration(event => {\n      if (event.source === 6 /* DEFAULT */) {\n        // new setting, reset everything\n        const allKeys = Array.from(Iterable.map(this._values, _ref => {\n          let [k] = _ref;\n          return k;\n        }));\n        this._values.clear();\n        emitter.fire(new ArrayContextKeyChangeEvent(allKeys));\n      } else {\n        const changedKeys = [];\n        for (const configKey of event.affectedKeys) {\n          const contextKey = \"config.\".concat(configKey);\n          const cachedItems = this._values.findSuperstr(contextKey);\n          if (cachedItems !== undefined) {\n            changedKeys.push(...Iterable.map(cachedItems, _ref2 => {\n              let [key] = _ref2;\n              return key;\n            }));\n            this._values.deleteSuperstr(contextKey);\n          }\n          if (this._values.has(contextKey)) {\n            changedKeys.push(contextKey);\n            this._values.delete(contextKey);\n          }\n        }\n        emitter.fire(new ArrayContextKeyChangeEvent(changedKeys));\n      }\n    });\n  }\n  dispose() {\n    this._listener.dispose();\n  }\n  getValue(key) {\n    if (key.indexOf(ConfigAwareContextValuesContainer._keyPrefix) !== 0) {\n      return super.getValue(key);\n    }\n    if (this._values.has(key)) {\n      return this._values.get(key);\n    }\n    const configKey = key.substr(ConfigAwareContextValuesContainer._keyPrefix.length);\n    const configValue = this._configurationService.getValue(configKey);\n    let value = undefined;\n    switch (typeof configValue) {\n      case 'number':\n      case 'boolean':\n      case 'string':\n        value = configValue;\n        break;\n      default:\n        if (Array.isArray(configValue)) {\n          value = JSON.stringify(configValue);\n        } else {\n          value = configValue;\n        }\n    }\n    this._values.set(key, value);\n    return value;\n  }\n  setValue(key, value) {\n    return super.setValue(key, value);\n  }\n  removeValue(key) {\n    return super.removeValue(key);\n  }\n}\nConfigAwareContextValuesContainer._keyPrefix = 'config.';\nclass ContextKey {\n  constructor(service, key, defaultValue) {\n    this._service = service;\n    this._key = key;\n    this._defaultValue = defaultValue;\n    this.reset();\n  }\n  set(value) {\n    this._service.setContext(this._key, value);\n  }\n  reset() {\n    if (typeof this._defaultValue === 'undefined') {\n      this._service.removeContext(this._key);\n    } else {\n      this._service.setContext(this._key, this._defaultValue);\n    }\n  }\n  get() {\n    return this._service.getContextKeyValue(this._key);\n  }\n}\nclass SimpleContextKeyChangeEvent {\n  constructor(key) {\n    this.key = key;\n  }\n  affectsSome(keys) {\n    return keys.has(this.key);\n  }\n}\nclass ArrayContextKeyChangeEvent {\n  constructor(keys) {\n    this.keys = keys;\n  }\n  affectsSome(keys) {\n    for (const key of this.keys) {\n      if (keys.has(key)) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\nclass CompositeContextKeyChangeEvent {\n  constructor(events) {\n    this.events = events;\n  }\n  affectsSome(keys) {\n    for (const e of this.events) {\n      if (e.affectsSome(keys)) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\nexport class AbstractContextKeyService {\n  constructor(myContextId) {\n    this._onDidChangeContext = new PauseableEmitter({\n      merge: input => new CompositeContextKeyChangeEvent(input)\n    });\n    this.onDidChangeContext = this._onDidChangeContext.event;\n    this._isDisposed = false;\n    this._myContextId = myContextId;\n  }\n  createKey(key, defaultValue) {\n    if (this._isDisposed) {\n      throw new Error(\"AbstractContextKeyService has been disposed\");\n    }\n    return new ContextKey(this, key, defaultValue);\n  }\n  bufferChangeEvents(callback) {\n    this._onDidChangeContext.pause();\n    try {\n      callback();\n    } finally {\n      this._onDidChangeContext.resume();\n    }\n  }\n  createScoped(domNode) {\n    if (this._isDisposed) {\n      throw new Error(\"AbstractContextKeyService has been disposed\");\n    }\n    return new ScopedContextKeyService(this, domNode);\n  }\n  contextMatchesRules(rules) {\n    if (this._isDisposed) {\n      throw new Error(\"AbstractContextKeyService has been disposed\");\n    }\n    const context = this.getContextValuesContainer(this._myContextId);\n    const result = KeybindingResolver.contextMatchesRules(context, rules);\n    // console.group(rules.serialize() + ' -> ' + result);\n    // rules.keys().forEach(key => { console.log(key, ctx[key]); });\n    // console.groupEnd();\n    return result;\n  }\n  getContextKeyValue(key) {\n    if (this._isDisposed) {\n      return undefined;\n    }\n    return this.getContextValuesContainer(this._myContextId).getValue(key);\n  }\n  setContext(key, value) {\n    if (this._isDisposed) {\n      return;\n    }\n    const myContext = this.getContextValuesContainer(this._myContextId);\n    if (!myContext) {\n      return;\n    }\n    if (myContext.setValue(key, value)) {\n      this._onDidChangeContext.fire(new SimpleContextKeyChangeEvent(key));\n    }\n  }\n  removeContext(key) {\n    if (this._isDisposed) {\n      return;\n    }\n    if (this.getContextValuesContainer(this._myContextId).removeValue(key)) {\n      this._onDidChangeContext.fire(new SimpleContextKeyChangeEvent(key));\n    }\n  }\n  getContext(target) {\n    if (this._isDisposed) {\n      return NullContext.INSTANCE;\n    }\n    return this.getContextValuesContainer(findContextAttr(target));\n  }\n}\nlet ContextKeyService = class ContextKeyService extends AbstractContextKeyService {\n  constructor(configurationService) {\n    super(0);\n    this._contexts = new Map();\n    this._toDispose = new DisposableStore();\n    this._lastContextId = 0;\n    const myContext = new ConfigAwareContextValuesContainer(this._myContextId, configurationService, this._onDidChangeContext);\n    this._contexts.set(this._myContextId, myContext);\n    this._toDispose.add(myContext);\n    // Uncomment this to see the contexts continuously logged\n    // let lastLoggedValue: string | null = null;\n    // setInterval(() => {\n    // \tlet values = Object.keys(this._contexts).map((key) => this._contexts[key]);\n    // \tlet logValue = values.map(v => JSON.stringify(v._value, null, '\\t')).join('\\n');\n    // \tif (lastLoggedValue !== logValue) {\n    // \t\tlastLoggedValue = logValue;\n    // \t\tconsole.log(lastLoggedValue);\n    // \t}\n    // }, 2000);\n  }\n\n  dispose() {\n    this._onDidChangeContext.dispose();\n    this._isDisposed = true;\n    this._toDispose.dispose();\n  }\n  getContextValuesContainer(contextId) {\n    if (this._isDisposed) {\n      return NullContext.INSTANCE;\n    }\n    return this._contexts.get(contextId) || NullContext.INSTANCE;\n  }\n  createChildContext() {\n    let parentContextId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._myContextId;\n    if (this._isDisposed) {\n      throw new Error(\"ContextKeyService has been disposed\");\n    }\n    let id = ++this._lastContextId;\n    this._contexts.set(id, new Context(id, this.getContextValuesContainer(parentContextId)));\n    return id;\n  }\n  disposeContext(contextId) {\n    if (!this._isDisposed) {\n      this._contexts.delete(contextId);\n    }\n  }\n};\nContextKeyService = __decorate([__param(0, IConfigurationService)], ContextKeyService);\nexport { ContextKeyService };\nclass ScopedContextKeyService extends AbstractContextKeyService {\n  constructor(parent, domNode) {\n    super(parent.createChildContext());\n    this._parentChangeListener = new MutableDisposable();\n    this._parent = parent;\n    this._updateParentChangeListener();\n    if (domNode) {\n      this._domNode = domNode;\n      if (this._domNode.hasAttribute(KEYBINDING_CONTEXT_ATTR)) {\n        let extraInfo = '';\n        if (this._domNode.classList) {\n          extraInfo = Array.from(this._domNode.classList.values()).join(', ');\n        }\n        console.error(\"Element already has context attribute\".concat(extraInfo ? ': ' + extraInfo : ''));\n      }\n      this._domNode.setAttribute(KEYBINDING_CONTEXT_ATTR, String(this._myContextId));\n    }\n  }\n  _updateParentChangeListener() {\n    // Forward parent events to this listener. Parent will change.\n    this._parentChangeListener.value = this._parent.onDidChangeContext(this._onDidChangeContext.fire, this._onDidChangeContext);\n  }\n  dispose() {\n    var _a;\n    this._onDidChangeContext.dispose();\n    this._isDisposed = true;\n    this._parent.disposeContext(this._myContextId);\n    (_a = this._parentChangeListener) === null || _a === void 0 ? void 0 : _a.dispose();\n    if (this._domNode) {\n      this._domNode.removeAttribute(KEYBINDING_CONTEXT_ATTR);\n      this._domNode = undefined;\n    }\n  }\n  getContextValuesContainer(contextId) {\n    if (this._isDisposed) {\n      return NullContext.INSTANCE;\n    }\n    return this._parent.getContextValuesContainer(contextId);\n  }\n  createChildContext() {\n    let parentContextId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._myContextId;\n    if (this._isDisposed) {\n      throw new Error(\"ScopedContextKeyService has been disposed\");\n    }\n    return this._parent.createChildContext(parentContextId);\n  }\n  disposeContext(contextId) {\n    if (this._isDisposed) {\n      return;\n    }\n    this._parent.disposeContext(contextId);\n  }\n}\nfunction findContextAttr(domNode) {\n  while (domNode) {\n    if (domNode.hasAttribute(KEYBINDING_CONTEXT_ATTR)) {\n      const attr = domNode.getAttribute(KEYBINDING_CONTEXT_ATTR);\n      if (attr) {\n        return parseInt(attr, 10);\n      }\n      return NaN;\n    }\n    domNode = domNode.parentElement;\n  }\n  return 0;\n}\nCommandsRegistry.registerCommand(SET_CONTEXT_COMMAND_ID, function (accessor, contextKey, contextValue) {\n  accessor.get(IContextKeyService).createKey(String(contextKey), contextValue);\n});","map":{"version":3,"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","PauseableEmitter","Iterable","DisposableStore","MutableDisposable","TernarySearchTree","CommandsRegistry","IConfigurationService","IContextKeyService","SET_CONTEXT_COMMAND_ID","KeybindingResolver","KEYBINDING_CONTEXT_ATTR","Context","constructor","id","parent","_id","_parent","_value","create","setValue","value","removeValue","getValue","ret","NullContext","undefined","INSTANCE","ConfigAwareContextValuesContainer","_configurationService","emitter","_values","forConfigKeys","_listener","onDidChangeConfiguration","event","source","allKeys","Array","from","map","_ref","k","clear","fire","ArrayContextKeyChangeEvent","changedKeys","configKey","affectedKeys","contextKey","concat","cachedItems","findSuperstr","push","_ref2","deleteSuperstr","has","delete","dispose","indexOf","_keyPrefix","get","substr","configValue","isArray","JSON","stringify","set","ContextKey","service","defaultValue","_service","_key","_defaultValue","reset","setContext","removeContext","getContextKeyValue","SimpleContextKeyChangeEvent","affectsSome","keys","CompositeContextKeyChangeEvent","events","e","AbstractContextKeyService","myContextId","_onDidChangeContext","merge","input","onDidChangeContext","_isDisposed","_myContextId","createKey","Error","bufferChangeEvents","callback","pause","resume","createScoped","domNode","ScopedContextKeyService","contextMatchesRules","rules","context","getContextValuesContainer","result","myContext","getContext","findContextAttr","ContextKeyService","configurationService","_contexts","Map","_toDispose","_lastContextId","add","contextId","createChildContext","parentContextId","disposeContext","_parentChangeListener","_updateParentChangeListener","_domNode","hasAttribute","extraInfo","classList","values","join","console","error","setAttribute","String","_a","removeAttribute","attr","getAttribute","parseInt","NaN","parentElement","registerCommand","accessor","contextValue"],"sources":["C:/Users/Administrator/Desktop/sqllineage-master/sqllineagejs/node_modules/monaco-editor/esm/vs/platform/contextkey/browser/contextKeyService.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n};\r\nimport { PauseableEmitter } from '../../../base/common/event.js';\r\nimport { Iterable } from '../../../base/common/iterator.js';\r\nimport { DisposableStore, MutableDisposable } from '../../../base/common/lifecycle.js';\r\nimport { TernarySearchTree } from '../../../base/common/map.js';\r\nimport { CommandsRegistry } from '../../commands/common/commands.js';\r\nimport { IConfigurationService } from '../../configuration/common/configuration.js';\r\nimport { IContextKeyService, SET_CONTEXT_COMMAND_ID } from '../common/contextkey.js';\r\nimport { KeybindingResolver } from '../../keybinding/common/keybindingResolver.js';\r\nconst KEYBINDING_CONTEXT_ATTR = 'data-keybinding-context';\r\nexport class Context {\r\n    constructor(id, parent) {\r\n        this._id = id;\r\n        this._parent = parent;\r\n        this._value = Object.create(null);\r\n        this._value['_contextId'] = id;\r\n    }\r\n    setValue(key, value) {\r\n        // console.log('SET ' + key + ' = ' + value + ' ON ' + this._id);\r\n        if (this._value[key] !== value) {\r\n            this._value[key] = value;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    removeValue(key) {\r\n        // console.log('REMOVE ' + key + ' FROM ' + this._id);\r\n        if (key in this._value) {\r\n            delete this._value[key];\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    getValue(key) {\r\n        const ret = this._value[key];\r\n        if (typeof ret === 'undefined' && this._parent) {\r\n            return this._parent.getValue(key);\r\n        }\r\n        return ret;\r\n    }\r\n}\r\nclass NullContext extends Context {\r\n    constructor() {\r\n        super(-1, null);\r\n    }\r\n    setValue(key, value) {\r\n        return false;\r\n    }\r\n    removeValue(key) {\r\n        return false;\r\n    }\r\n    getValue(key) {\r\n        return undefined;\r\n    }\r\n}\r\nNullContext.INSTANCE = new NullContext();\r\nclass ConfigAwareContextValuesContainer extends Context {\r\n    constructor(id, _configurationService, emitter) {\r\n        super(id, null);\r\n        this._configurationService = _configurationService;\r\n        this._values = TernarySearchTree.forConfigKeys();\r\n        this._listener = this._configurationService.onDidChangeConfiguration(event => {\r\n            if (event.source === 6 /* DEFAULT */) {\r\n                // new setting, reset everything\r\n                const allKeys = Array.from(Iterable.map(this._values, ([k]) => k));\r\n                this._values.clear();\r\n                emitter.fire(new ArrayContextKeyChangeEvent(allKeys));\r\n            }\r\n            else {\r\n                const changedKeys = [];\r\n                for (const configKey of event.affectedKeys) {\r\n                    const contextKey = `config.${configKey}`;\r\n                    const cachedItems = this._values.findSuperstr(contextKey);\r\n                    if (cachedItems !== undefined) {\r\n                        changedKeys.push(...Iterable.map(cachedItems, ([key]) => key));\r\n                        this._values.deleteSuperstr(contextKey);\r\n                    }\r\n                    if (this._values.has(contextKey)) {\r\n                        changedKeys.push(contextKey);\r\n                        this._values.delete(contextKey);\r\n                    }\r\n                }\r\n                emitter.fire(new ArrayContextKeyChangeEvent(changedKeys));\r\n            }\r\n        });\r\n    }\r\n    dispose() {\r\n        this._listener.dispose();\r\n    }\r\n    getValue(key) {\r\n        if (key.indexOf(ConfigAwareContextValuesContainer._keyPrefix) !== 0) {\r\n            return super.getValue(key);\r\n        }\r\n        if (this._values.has(key)) {\r\n            return this._values.get(key);\r\n        }\r\n        const configKey = key.substr(ConfigAwareContextValuesContainer._keyPrefix.length);\r\n        const configValue = this._configurationService.getValue(configKey);\r\n        let value = undefined;\r\n        switch (typeof configValue) {\r\n            case 'number':\r\n            case 'boolean':\r\n            case 'string':\r\n                value = configValue;\r\n                break;\r\n            default:\r\n                if (Array.isArray(configValue)) {\r\n                    value = JSON.stringify(configValue);\r\n                }\r\n                else {\r\n                    value = configValue;\r\n                }\r\n        }\r\n        this._values.set(key, value);\r\n        return value;\r\n    }\r\n    setValue(key, value) {\r\n        return super.setValue(key, value);\r\n    }\r\n    removeValue(key) {\r\n        return super.removeValue(key);\r\n    }\r\n}\r\nConfigAwareContextValuesContainer._keyPrefix = 'config.';\r\nclass ContextKey {\r\n    constructor(service, key, defaultValue) {\r\n        this._service = service;\r\n        this._key = key;\r\n        this._defaultValue = defaultValue;\r\n        this.reset();\r\n    }\r\n    set(value) {\r\n        this._service.setContext(this._key, value);\r\n    }\r\n    reset() {\r\n        if (typeof this._defaultValue === 'undefined') {\r\n            this._service.removeContext(this._key);\r\n        }\r\n        else {\r\n            this._service.setContext(this._key, this._defaultValue);\r\n        }\r\n    }\r\n    get() {\r\n        return this._service.getContextKeyValue(this._key);\r\n    }\r\n}\r\nclass SimpleContextKeyChangeEvent {\r\n    constructor(key) {\r\n        this.key = key;\r\n    }\r\n    affectsSome(keys) {\r\n        return keys.has(this.key);\r\n    }\r\n}\r\nclass ArrayContextKeyChangeEvent {\r\n    constructor(keys) {\r\n        this.keys = keys;\r\n    }\r\n    affectsSome(keys) {\r\n        for (const key of this.keys) {\r\n            if (keys.has(key)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\nclass CompositeContextKeyChangeEvent {\r\n    constructor(events) {\r\n        this.events = events;\r\n    }\r\n    affectsSome(keys) {\r\n        for (const e of this.events) {\r\n            if (e.affectsSome(keys)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\nexport class AbstractContextKeyService {\r\n    constructor(myContextId) {\r\n        this._onDidChangeContext = new PauseableEmitter({ merge: input => new CompositeContextKeyChangeEvent(input) });\r\n        this.onDidChangeContext = this._onDidChangeContext.event;\r\n        this._isDisposed = false;\r\n        this._myContextId = myContextId;\r\n    }\r\n    createKey(key, defaultValue) {\r\n        if (this._isDisposed) {\r\n            throw new Error(`AbstractContextKeyService has been disposed`);\r\n        }\r\n        return new ContextKey(this, key, defaultValue);\r\n    }\r\n    bufferChangeEvents(callback) {\r\n        this._onDidChangeContext.pause();\r\n        try {\r\n            callback();\r\n        }\r\n        finally {\r\n            this._onDidChangeContext.resume();\r\n        }\r\n    }\r\n    createScoped(domNode) {\r\n        if (this._isDisposed) {\r\n            throw new Error(`AbstractContextKeyService has been disposed`);\r\n        }\r\n        return new ScopedContextKeyService(this, domNode);\r\n    }\r\n    contextMatchesRules(rules) {\r\n        if (this._isDisposed) {\r\n            throw new Error(`AbstractContextKeyService has been disposed`);\r\n        }\r\n        const context = this.getContextValuesContainer(this._myContextId);\r\n        const result = KeybindingResolver.contextMatchesRules(context, rules);\r\n        // console.group(rules.serialize() + ' -> ' + result);\r\n        // rules.keys().forEach(key => { console.log(key, ctx[key]); });\r\n        // console.groupEnd();\r\n        return result;\r\n    }\r\n    getContextKeyValue(key) {\r\n        if (this._isDisposed) {\r\n            return undefined;\r\n        }\r\n        return this.getContextValuesContainer(this._myContextId).getValue(key);\r\n    }\r\n    setContext(key, value) {\r\n        if (this._isDisposed) {\r\n            return;\r\n        }\r\n        const myContext = this.getContextValuesContainer(this._myContextId);\r\n        if (!myContext) {\r\n            return;\r\n        }\r\n        if (myContext.setValue(key, value)) {\r\n            this._onDidChangeContext.fire(new SimpleContextKeyChangeEvent(key));\r\n        }\r\n    }\r\n    removeContext(key) {\r\n        if (this._isDisposed) {\r\n            return;\r\n        }\r\n        if (this.getContextValuesContainer(this._myContextId).removeValue(key)) {\r\n            this._onDidChangeContext.fire(new SimpleContextKeyChangeEvent(key));\r\n        }\r\n    }\r\n    getContext(target) {\r\n        if (this._isDisposed) {\r\n            return NullContext.INSTANCE;\r\n        }\r\n        return this.getContextValuesContainer(findContextAttr(target));\r\n    }\r\n}\r\nlet ContextKeyService = class ContextKeyService extends AbstractContextKeyService {\r\n    constructor(configurationService) {\r\n        super(0);\r\n        this._contexts = new Map();\r\n        this._toDispose = new DisposableStore();\r\n        this._lastContextId = 0;\r\n        const myContext = new ConfigAwareContextValuesContainer(this._myContextId, configurationService, this._onDidChangeContext);\r\n        this._contexts.set(this._myContextId, myContext);\r\n        this._toDispose.add(myContext);\r\n        // Uncomment this to see the contexts continuously logged\r\n        // let lastLoggedValue: string | null = null;\r\n        // setInterval(() => {\r\n        // \tlet values = Object.keys(this._contexts).map((key) => this._contexts[key]);\r\n        // \tlet logValue = values.map(v => JSON.stringify(v._value, null, '\\t')).join('\\n');\r\n        // \tif (lastLoggedValue !== logValue) {\r\n        // \t\tlastLoggedValue = logValue;\r\n        // \t\tconsole.log(lastLoggedValue);\r\n        // \t}\r\n        // }, 2000);\r\n    }\r\n    dispose() {\r\n        this._onDidChangeContext.dispose();\r\n        this._isDisposed = true;\r\n        this._toDispose.dispose();\r\n    }\r\n    getContextValuesContainer(contextId) {\r\n        if (this._isDisposed) {\r\n            return NullContext.INSTANCE;\r\n        }\r\n        return this._contexts.get(contextId) || NullContext.INSTANCE;\r\n    }\r\n    createChildContext(parentContextId = this._myContextId) {\r\n        if (this._isDisposed) {\r\n            throw new Error(`ContextKeyService has been disposed`);\r\n        }\r\n        let id = (++this._lastContextId);\r\n        this._contexts.set(id, new Context(id, this.getContextValuesContainer(parentContextId)));\r\n        return id;\r\n    }\r\n    disposeContext(contextId) {\r\n        if (!this._isDisposed) {\r\n            this._contexts.delete(contextId);\r\n        }\r\n    }\r\n};\r\nContextKeyService = __decorate([\r\n    __param(0, IConfigurationService)\r\n], ContextKeyService);\r\nexport { ContextKeyService };\r\nclass ScopedContextKeyService extends AbstractContextKeyService {\r\n    constructor(parent, domNode) {\r\n        super(parent.createChildContext());\r\n        this._parentChangeListener = new MutableDisposable();\r\n        this._parent = parent;\r\n        this._updateParentChangeListener();\r\n        if (domNode) {\r\n            this._domNode = domNode;\r\n            if (this._domNode.hasAttribute(KEYBINDING_CONTEXT_ATTR)) {\r\n                let extraInfo = '';\r\n                if (this._domNode.classList) {\r\n                    extraInfo = Array.from(this._domNode.classList.values()).join(', ');\r\n                }\r\n                console.error(`Element already has context attribute${extraInfo ? ': ' + extraInfo : ''}`);\r\n            }\r\n            this._domNode.setAttribute(KEYBINDING_CONTEXT_ATTR, String(this._myContextId));\r\n        }\r\n    }\r\n    _updateParentChangeListener() {\r\n        // Forward parent events to this listener. Parent will change.\r\n        this._parentChangeListener.value = this._parent.onDidChangeContext(this._onDidChangeContext.fire, this._onDidChangeContext);\r\n    }\r\n    dispose() {\r\n        var _a;\r\n        this._onDidChangeContext.dispose();\r\n        this._isDisposed = true;\r\n        this._parent.disposeContext(this._myContextId);\r\n        (_a = this._parentChangeListener) === null || _a === void 0 ? void 0 : _a.dispose();\r\n        if (this._domNode) {\r\n            this._domNode.removeAttribute(KEYBINDING_CONTEXT_ATTR);\r\n            this._domNode = undefined;\r\n        }\r\n    }\r\n    getContextValuesContainer(contextId) {\r\n        if (this._isDisposed) {\r\n            return NullContext.INSTANCE;\r\n        }\r\n        return this._parent.getContextValuesContainer(contextId);\r\n    }\r\n    createChildContext(parentContextId = this._myContextId) {\r\n        if (this._isDisposed) {\r\n            throw new Error(`ScopedContextKeyService has been disposed`);\r\n        }\r\n        return this._parent.createChildContext(parentContextId);\r\n    }\r\n    disposeContext(contextId) {\r\n        if (this._isDisposed) {\r\n            return;\r\n        }\r\n        this._parent.disposeContext(contextId);\r\n    }\r\n}\r\nfunction findContextAttr(domNode) {\r\n    while (domNode) {\r\n        if (domNode.hasAttribute(KEYBINDING_CONTEXT_ATTR)) {\r\n            const attr = domNode.getAttribute(KEYBINDING_CONTEXT_ATTR);\r\n            if (attr) {\r\n                return parseInt(attr, 10);\r\n            }\r\n            return NaN;\r\n        }\r\n        domNode = domNode.parentElement;\r\n    }\r\n    return 0;\r\n}\r\nCommandsRegistry.registerCommand(SET_CONTEXT_COMMAND_ID, function (accessor, contextKey, contextValue) {\r\n    accessor.get(IContextKeyService).createKey(String(contextKey), contextValue);\r\n});\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}