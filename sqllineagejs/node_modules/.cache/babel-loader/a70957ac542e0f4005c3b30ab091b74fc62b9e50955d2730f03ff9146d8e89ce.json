{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport * as dom from '../../../base/browser/dom.js';\nimport * as browser from '../../../base/browser/browser.js';\nimport { Selection } from '../../common/core/selection.js';\nimport { createFastDomNode } from '../../../base/browser/fastDomNode.js';\nimport { onUnexpectedError } from '../../../base/common/errors.js';\nimport { PointerHandler } from '../controller/pointerHandler.js';\nimport { TextAreaHandler } from '../controller/textAreaHandler.js';\nimport { ViewController } from './viewController.js';\nimport { ViewUserInputEvents } from './viewUserInputEvents.js';\nimport { ContentViewOverlays, MarginViewOverlays } from './viewOverlays.js';\nimport { PartFingerprints } from './viewPart.js';\nimport { ViewContentWidgets } from '../viewParts/contentWidgets/contentWidgets.js';\nimport { CurrentLineHighlightOverlay, CurrentLineMarginHighlightOverlay } from '../viewParts/currentLineHighlight/currentLineHighlight.js';\nimport { DecorationsOverlay } from '../viewParts/decorations/decorations.js';\nimport { EditorScrollbar } from '../viewParts/editorScrollbar/editorScrollbar.js';\nimport { GlyphMarginOverlay } from '../viewParts/glyphMargin/glyphMargin.js';\nimport { IndentGuidesOverlay } from '../viewParts/indentGuides/indentGuides.js';\nimport { LineNumbersOverlay } from '../viewParts/lineNumbers/lineNumbers.js';\nimport { ViewLines } from '../viewParts/lines/viewLines.js';\nimport { LinesDecorationsOverlay } from '../viewParts/linesDecorations/linesDecorations.js';\nimport { Margin } from '../viewParts/margin/margin.js';\nimport { MarginViewLineDecorationsOverlay } from '../viewParts/marginDecorations/marginDecorations.js';\nimport { Minimap } from '../viewParts/minimap/minimap.js';\nimport { ViewOverlayWidgets } from '../viewParts/overlayWidgets/overlayWidgets.js';\nimport { DecorationsOverviewRuler } from '../viewParts/overviewRuler/decorationsOverviewRuler.js';\nimport { OverviewRuler } from '../viewParts/overviewRuler/overviewRuler.js';\nimport { Rulers } from '../viewParts/rulers/rulers.js';\nimport { ScrollDecorationViewPart } from '../viewParts/scrollDecoration/scrollDecoration.js';\nimport { SelectionsOverlay } from '../viewParts/selections/selections.js';\nimport { ViewCursors } from '../viewParts/viewCursors/viewCursors.js';\nimport { ViewZones } from '../viewParts/viewZones/viewZones.js';\nimport { Position } from '../../common/core/position.js';\nimport { Range } from '../../common/core/range.js';\nimport { RenderingContext } from '../../common/view/renderingContext.js';\nimport { ViewContext } from '../../common/view/viewContext.js';\nimport { ViewportData } from '../../common/viewLayout/viewLinesViewportData.js';\nimport { ViewEventHandler } from '../../common/viewModel/viewEventHandler.js';\nimport { getThemeTypeSelector } from '../../../platform/theme/common/themeService.js';\nimport { PointerHandlerLastRenderData } from '../controller/mouseTarget.js';\nexport class View extends ViewEventHandler {\n  constructor(commandDelegate, configuration, themeService, model, userInputEvents, overflowWidgetsDomNode) {\n    super();\n    this._selections = [new Selection(1, 1, 1, 1)];\n    this._renderAnimationFrame = null;\n    const viewController = new ViewController(configuration, model, userInputEvents, commandDelegate);\n    // The view context is passed on to most classes (basically to reduce param. counts in ctors)\n    this._context = new ViewContext(configuration, themeService.getColorTheme(), model);\n    this._configPixelRatio = this._configPixelRatio = this._context.configuration.options.get(122 /* pixelRatio */);\n    // Ensure the view is the first event handler in order to update the layout\n    this._context.addEventHandler(this);\n    this._register(themeService.onDidColorThemeChange(theme => {\n      this._context.theme.update(theme);\n      this._context.model.onDidColorThemeChange();\n      this.render(true, false);\n    }));\n    this._viewParts = [];\n    // Keyboard handler\n    this._textAreaHandler = new TextAreaHandler(this._context, viewController, this._createTextAreaHandlerHelper());\n    this._viewParts.push(this._textAreaHandler);\n    // These two dom nodes must be constructed up front, since references are needed in the layout provider (scrolling & co.)\n    this._linesContent = createFastDomNode(document.createElement('div'));\n    this._linesContent.setClassName('lines-content' + ' monaco-editor-background');\n    this._linesContent.setPosition('absolute');\n    this.domNode = createFastDomNode(document.createElement('div'));\n    this.domNode.setClassName(this._getEditorClassName());\n    // Set role 'code' for better screen reader support https://github.com/microsoft/vscode/issues/93438\n    this.domNode.setAttribute('role', 'code');\n    this._overflowGuardContainer = createFastDomNode(document.createElement('div'));\n    PartFingerprints.write(this._overflowGuardContainer, 3 /* OverflowGuard */);\n    this._overflowGuardContainer.setClassName('overflow-guard');\n    this._scrollbar = new EditorScrollbar(this._context, this._linesContent, this.domNode, this._overflowGuardContainer);\n    this._viewParts.push(this._scrollbar);\n    // View Lines\n    this._viewLines = new ViewLines(this._context, this._linesContent);\n    // View Zones\n    this._viewZones = new ViewZones(this._context);\n    this._viewParts.push(this._viewZones);\n    // Decorations overview ruler\n    const decorationsOverviewRuler = new DecorationsOverviewRuler(this._context);\n    this._viewParts.push(decorationsOverviewRuler);\n    const scrollDecoration = new ScrollDecorationViewPart(this._context);\n    this._viewParts.push(scrollDecoration);\n    const contentViewOverlays = new ContentViewOverlays(this._context);\n    this._viewParts.push(contentViewOverlays);\n    contentViewOverlays.addDynamicOverlay(new CurrentLineHighlightOverlay(this._context));\n    contentViewOverlays.addDynamicOverlay(new SelectionsOverlay(this._context));\n    contentViewOverlays.addDynamicOverlay(new IndentGuidesOverlay(this._context));\n    contentViewOverlays.addDynamicOverlay(new DecorationsOverlay(this._context));\n    const marginViewOverlays = new MarginViewOverlays(this._context);\n    this._viewParts.push(marginViewOverlays);\n    marginViewOverlays.addDynamicOverlay(new CurrentLineMarginHighlightOverlay(this._context));\n    marginViewOverlays.addDynamicOverlay(new GlyphMarginOverlay(this._context));\n    marginViewOverlays.addDynamicOverlay(new MarginViewLineDecorationsOverlay(this._context));\n    marginViewOverlays.addDynamicOverlay(new LinesDecorationsOverlay(this._context));\n    marginViewOverlays.addDynamicOverlay(new LineNumbersOverlay(this._context));\n    const margin = new Margin(this._context);\n    margin.getDomNode().appendChild(this._viewZones.marginDomNode);\n    margin.getDomNode().appendChild(marginViewOverlays.getDomNode());\n    this._viewParts.push(margin);\n    // Content widgets\n    this._contentWidgets = new ViewContentWidgets(this._context, this.domNode);\n    this._viewParts.push(this._contentWidgets);\n    this._viewCursors = new ViewCursors(this._context);\n    this._viewParts.push(this._viewCursors);\n    // Overlay widgets\n    this._overlayWidgets = new ViewOverlayWidgets(this._context);\n    this._viewParts.push(this._overlayWidgets);\n    const rulers = new Rulers(this._context);\n    this._viewParts.push(rulers);\n    const minimap = new Minimap(this._context);\n    this._viewParts.push(minimap);\n    // -------------- Wire dom nodes up\n    if (decorationsOverviewRuler) {\n      const overviewRulerData = this._scrollbar.getOverviewRulerLayoutInfo();\n      overviewRulerData.parent.insertBefore(decorationsOverviewRuler.getDomNode(), overviewRulerData.insertBefore);\n    }\n    this._linesContent.appendChild(contentViewOverlays.getDomNode());\n    this._linesContent.appendChild(rulers.domNode);\n    this._linesContent.appendChild(this._viewZones.domNode);\n    this._linesContent.appendChild(this._viewLines.getDomNode());\n    this._linesContent.appendChild(this._contentWidgets.domNode);\n    this._linesContent.appendChild(this._viewCursors.getDomNode());\n    this._overflowGuardContainer.appendChild(margin.getDomNode());\n    this._overflowGuardContainer.appendChild(this._scrollbar.getDomNode());\n    this._overflowGuardContainer.appendChild(scrollDecoration.getDomNode());\n    this._overflowGuardContainer.appendChild(this._textAreaHandler.textArea);\n    this._overflowGuardContainer.appendChild(this._textAreaHandler.textAreaCover);\n    this._overflowGuardContainer.appendChild(this._overlayWidgets.getDomNode());\n    this._overflowGuardContainer.appendChild(minimap.getDomNode());\n    this.domNode.appendChild(this._overflowGuardContainer);\n    if (overflowWidgetsDomNode) {\n      overflowWidgetsDomNode.appendChild(this._contentWidgets.overflowingContentWidgetsDomNode.domNode);\n    } else {\n      this.domNode.appendChild(this._contentWidgets.overflowingContentWidgetsDomNode);\n    }\n    this._applyLayout();\n    // Pointer handler\n    this._pointerHandler = this._register(new PointerHandler(this._context, viewController, this._createPointerHandlerHelper()));\n  }\n  _flushAccumulatedAndRenderNow() {\n    this._renderNow();\n  }\n  _createPointerHandlerHelper() {\n    return {\n      viewDomNode: this.domNode.domNode,\n      linesContentDomNode: this._linesContent.domNode,\n      focusTextArea: () => {\n        this.focus();\n      },\n      getLastRenderData: () => {\n        const lastViewCursorsRenderData = this._viewCursors.getLastRenderData() || [];\n        const lastTextareaPosition = this._textAreaHandler.getLastRenderData();\n        return new PointerHandlerLastRenderData(lastViewCursorsRenderData, lastTextareaPosition);\n      },\n      shouldSuppressMouseDownOnViewZone: viewZoneId => {\n        return this._viewZones.shouldSuppressMouseDownOnViewZone(viewZoneId);\n      },\n      shouldSuppressMouseDownOnWidget: widgetId => {\n        return this._contentWidgets.shouldSuppressMouseDownOnWidget(widgetId);\n      },\n      getPositionFromDOMInfo: (spanNode, offset) => {\n        this._flushAccumulatedAndRenderNow();\n        return this._viewLines.getPositionFromDOMInfo(spanNode, offset);\n      },\n      visibleRangeForPosition: (lineNumber, column) => {\n        this._flushAccumulatedAndRenderNow();\n        return this._viewLines.visibleRangeForPosition(new Position(lineNumber, column));\n      },\n      getLineWidth: lineNumber => {\n        this._flushAccumulatedAndRenderNow();\n        return this._viewLines.getLineWidth(lineNumber);\n      }\n    };\n  }\n  _createTextAreaHandlerHelper() {\n    return {\n      visibleRangeForPositionRelativeToEditor: (lineNumber, column) => {\n        this._flushAccumulatedAndRenderNow();\n        return this._viewLines.visibleRangeForPosition(new Position(lineNumber, column));\n      }\n    };\n  }\n  _applyLayout() {\n    const options = this._context.configuration.options;\n    const layoutInfo = options.get(124 /* layoutInfo */);\n    this.domNode.setWidth(layoutInfo.width);\n    this.domNode.setHeight(layoutInfo.height);\n    this._overflowGuardContainer.setWidth(layoutInfo.width);\n    this._overflowGuardContainer.setHeight(layoutInfo.height);\n    this._linesContent.setWidth(1000000);\n    this._linesContent.setHeight(1000000);\n  }\n  _getEditorClassName() {\n    const focused = this._textAreaHandler.isFocused() ? ' focused' : '';\n    return this._context.configuration.options.get(121 /* editorClassName */) + ' ' + getThemeTypeSelector(this._context.theme.type) + focused;\n  }\n  // --- begin event handlers\n  handleEvents(events) {\n    super.handleEvents(events);\n    this._scheduleRender();\n  }\n  onConfigurationChanged(e) {\n    this._configPixelRatio = this._context.configuration.options.get(122 /* pixelRatio */);\n    this.domNode.setClassName(this._getEditorClassName());\n    this._applyLayout();\n    return false;\n  }\n  onCursorStateChanged(e) {\n    this._selections = e.selections;\n    return false;\n  }\n  onFocusChanged(e) {\n    this.domNode.setClassName(this._getEditorClassName());\n    return false;\n  }\n  onThemeChanged(e) {\n    this.domNode.setClassName(this._getEditorClassName());\n    return false;\n  }\n  // --- end event handlers\n  dispose() {\n    if (this._renderAnimationFrame !== null) {\n      this._renderAnimationFrame.dispose();\n      this._renderAnimationFrame = null;\n    }\n    this._contentWidgets.overflowingContentWidgetsDomNode.domNode.remove();\n    this._context.removeEventHandler(this);\n    this._viewLines.dispose();\n    // Destroy view parts\n    for (const viewPart of this._viewParts) {\n      viewPart.dispose();\n    }\n    super.dispose();\n  }\n  _scheduleRender() {\n    if (this._renderAnimationFrame === null) {\n      this._renderAnimationFrame = dom.runAtThisOrScheduleAtNextAnimationFrame(this._onRenderScheduled.bind(this), 100);\n    }\n  }\n  _onRenderScheduled() {\n    this._renderAnimationFrame = null;\n    this._flushAccumulatedAndRenderNow();\n  }\n  _renderNow() {\n    safeInvokeNoArg(() => this._actualRender());\n  }\n  _getViewPartsToRender() {\n    let result = [],\n      resultLen = 0;\n    for (const viewPart of this._viewParts) {\n      if (viewPart.shouldRender()) {\n        result[resultLen++] = viewPart;\n      }\n    }\n    return result;\n  }\n  _actualRender() {\n    if (!dom.isInDOM(this.domNode.domNode)) {\n      return;\n    }\n    let viewPartsToRender = this._getViewPartsToRender();\n    if (!this._viewLines.shouldRender() && viewPartsToRender.length === 0) {\n      // Nothing to render\n      return;\n    }\n    const partialViewportData = this._context.viewLayout.getLinesViewportData();\n    this._context.model.setViewport(partialViewportData.startLineNumber, partialViewportData.endLineNumber, partialViewportData.centeredLineNumber);\n    const viewportData = new ViewportData(this._selections, partialViewportData, this._context.viewLayout.getWhitespaceViewportData(), this._context.model);\n    if (this._contentWidgets.shouldRender()) {\n      // Give the content widgets a chance to set their max width before a possible synchronous layout\n      this._contentWidgets.onBeforeRender(viewportData);\n    }\n    if (this._viewLines.shouldRender()) {\n      this._viewLines.renderText(viewportData);\n      this._viewLines.onDidRender();\n      // Rendering of viewLines might cause scroll events to occur, so collect view parts to render again\n      viewPartsToRender = this._getViewPartsToRender();\n    }\n    const renderingContext = new RenderingContext(this._context.viewLayout, viewportData, this._viewLines);\n    // Render the rest of the parts\n    for (const viewPart of viewPartsToRender) {\n      viewPart.prepareRender(renderingContext);\n    }\n    for (const viewPart of viewPartsToRender) {\n      viewPart.render(renderingContext);\n      viewPart.onDidRender();\n    }\n    // Try to detect browser zooming and paint again if necessary\n    if (Math.abs(browser.getPixelRatio() - this._configPixelRatio) > 0.001) {\n      // looks like the pixel ratio has changed\n      this._context.configuration.updatePixelRatio();\n    }\n  }\n  // --- BEGIN CodeEditor helpers\n  delegateVerticalScrollbarMouseDown(browserEvent) {\n    this._scrollbar.delegateVerticalScrollbarMouseDown(browserEvent);\n  }\n  restoreState(scrollPosition) {\n    this._context.model.setScrollPosition({\n      scrollTop: scrollPosition.scrollTop\n    }, 1 /* Immediate */);\n    this._context.model.tokenizeViewport();\n    this._renderNow();\n    this._viewLines.updateLineWidths();\n    this._context.model.setScrollPosition({\n      scrollLeft: scrollPosition.scrollLeft\n    }, 1 /* Immediate */);\n  }\n\n  getOffsetForColumn(modelLineNumber, modelColumn) {\n    const modelPosition = this._context.model.validateModelPosition({\n      lineNumber: modelLineNumber,\n      column: modelColumn\n    });\n    const viewPosition = this._context.model.coordinatesConverter.convertModelPositionToViewPosition(modelPosition);\n    this._flushAccumulatedAndRenderNow();\n    const visibleRange = this._viewLines.visibleRangeForPosition(new Position(viewPosition.lineNumber, viewPosition.column));\n    if (!visibleRange) {\n      return -1;\n    }\n    return visibleRange.left;\n  }\n  getTargetAtClientPoint(clientX, clientY) {\n    const mouseTarget = this._pointerHandler.getTargetAtClientPoint(clientX, clientY);\n    if (!mouseTarget) {\n      return null;\n    }\n    return ViewUserInputEvents.convertViewToModelMouseTarget(mouseTarget, this._context.model.coordinatesConverter);\n  }\n  createOverviewRuler(cssClassName) {\n    return new OverviewRuler(this._context, cssClassName);\n  }\n  change(callback) {\n    this._viewZones.changeViewZones(callback);\n    this._scheduleRender();\n  }\n  render(now, everything) {\n    if (everything) {\n      // Force everything to render...\n      this._viewLines.forceShouldRender();\n      for (const viewPart of this._viewParts) {\n        viewPart.forceShouldRender();\n      }\n    }\n    if (now) {\n      this._flushAccumulatedAndRenderNow();\n    } else {\n      this._scheduleRender();\n    }\n  }\n  focus() {\n    this._textAreaHandler.focusTextArea();\n  }\n  isFocused() {\n    return this._textAreaHandler.isFocused();\n  }\n  setAriaOptions(options) {\n    this._textAreaHandler.setAriaOptions(options);\n  }\n  addContentWidget(widgetData) {\n    this._contentWidgets.addWidget(widgetData.widget);\n    this.layoutContentWidget(widgetData);\n    this._scheduleRender();\n  }\n  layoutContentWidget(widgetData) {\n    let newRange = widgetData.position ? widgetData.position.range || null : null;\n    if (newRange === null) {\n      const newPosition = widgetData.position ? widgetData.position.position : null;\n      if (newPosition !== null) {\n        newRange = new Range(newPosition.lineNumber, newPosition.column, newPosition.lineNumber, newPosition.column);\n      }\n    }\n    const newPreference = widgetData.position ? widgetData.position.preference : null;\n    this._contentWidgets.setWidgetPosition(widgetData.widget, newRange, newPreference);\n    this._scheduleRender();\n  }\n  removeContentWidget(widgetData) {\n    this._contentWidgets.removeWidget(widgetData.widget);\n    this._scheduleRender();\n  }\n  addOverlayWidget(widgetData) {\n    this._overlayWidgets.addWidget(widgetData.widget);\n    this.layoutOverlayWidget(widgetData);\n    this._scheduleRender();\n  }\n  layoutOverlayWidget(widgetData) {\n    const newPreference = widgetData.position ? widgetData.position.preference : null;\n    const shouldRender = this._overlayWidgets.setWidgetPosition(widgetData.widget, newPreference);\n    if (shouldRender) {\n      this._scheduleRender();\n    }\n  }\n  removeOverlayWidget(widgetData) {\n    this._overlayWidgets.removeWidget(widgetData.widget);\n    this._scheduleRender();\n  }\n}\nfunction safeInvokeNoArg(func) {\n  try {\n    return func();\n  } catch (e) {\n    onUnexpectedError(e);\n  }\n}","map":{"version":3,"names":["dom","browser","Selection","createFastDomNode","onUnexpectedError","PointerHandler","TextAreaHandler","ViewController","ViewUserInputEvents","ContentViewOverlays","MarginViewOverlays","PartFingerprints","ViewContentWidgets","CurrentLineHighlightOverlay","CurrentLineMarginHighlightOverlay","DecorationsOverlay","EditorScrollbar","GlyphMarginOverlay","IndentGuidesOverlay","LineNumbersOverlay","ViewLines","LinesDecorationsOverlay","Margin","MarginViewLineDecorationsOverlay","Minimap","ViewOverlayWidgets","DecorationsOverviewRuler","OverviewRuler","Rulers","ScrollDecorationViewPart","SelectionsOverlay","ViewCursors","ViewZones","Position","Range","RenderingContext","ViewContext","ViewportData","ViewEventHandler","getThemeTypeSelector","PointerHandlerLastRenderData","View","constructor","commandDelegate","configuration","themeService","model","userInputEvents","overflowWidgetsDomNode","_selections","_renderAnimationFrame","viewController","_context","getColorTheme","_configPixelRatio","options","get","addEventHandler","_register","onDidColorThemeChange","theme","update","render","_viewParts","_textAreaHandler","_createTextAreaHandlerHelper","push","_linesContent","document","createElement","setClassName","setPosition","domNode","_getEditorClassName","setAttribute","_overflowGuardContainer","write","_scrollbar","_viewLines","_viewZones","decorationsOverviewRuler","scrollDecoration","contentViewOverlays","addDynamicOverlay","marginViewOverlays","margin","getDomNode","appendChild","marginDomNode","_contentWidgets","_viewCursors","_overlayWidgets","rulers","minimap","overviewRulerData","getOverviewRulerLayoutInfo","parent","insertBefore","textArea","textAreaCover","overflowingContentWidgetsDomNode","_applyLayout","_pointerHandler","_createPointerHandlerHelper","_flushAccumulatedAndRenderNow","_renderNow","viewDomNode","linesContentDomNode","focusTextArea","focus","getLastRenderData","lastViewCursorsRenderData","lastTextareaPosition","shouldSuppressMouseDownOnViewZone","viewZoneId","shouldSuppressMouseDownOnWidget","widgetId","getPositionFromDOMInfo","spanNode","offset","visibleRangeForPosition","lineNumber","column","getLineWidth","visibleRangeForPositionRelativeToEditor","layoutInfo","setWidth","width","setHeight","height","focused","isFocused","type","handleEvents","events","_scheduleRender","onConfigurationChanged","e","onCursorStateChanged","selections","onFocusChanged","onThemeChanged","dispose","remove","removeEventHandler","viewPart","runAtThisOrScheduleAtNextAnimationFrame","_onRenderScheduled","bind","safeInvokeNoArg","_actualRender","_getViewPartsToRender","result","resultLen","shouldRender","isInDOM","viewPartsToRender","length","partialViewportData","viewLayout","getLinesViewportData","setViewport","startLineNumber","endLineNumber","centeredLineNumber","viewportData","getWhitespaceViewportData","onBeforeRender","renderText","onDidRender","renderingContext","prepareRender","Math","abs","getPixelRatio","updatePixelRatio","delegateVerticalScrollbarMouseDown","browserEvent","restoreState","scrollPosition","setScrollPosition","scrollTop","tokenizeViewport","updateLineWidths","scrollLeft","getOffsetForColumn","modelLineNumber","modelColumn","modelPosition","validateModelPosition","viewPosition","coordinatesConverter","convertModelPositionToViewPosition","visibleRange","left","getTargetAtClientPoint","clientX","clientY","mouseTarget","convertViewToModelMouseTarget","createOverviewRuler","cssClassName","change","callback","changeViewZones","now","everything","forceShouldRender","setAriaOptions","addContentWidget","widgetData","addWidget","widget","layoutContentWidget","newRange","position","range","newPosition","newPreference","preference","setWidgetPosition","removeContentWidget","removeWidget","addOverlayWidget","layoutOverlayWidget","removeOverlayWidget","func"],"sources":["C:/Users/Administrator/Desktop/sqllineage-master/sqllineagejs/node_modules/monaco-editor/esm/vs/editor/browser/view/viewImpl.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport * as dom from '../../../base/browser/dom.js';\r\nimport * as browser from '../../../base/browser/browser.js';\r\nimport { Selection } from '../../common/core/selection.js';\r\nimport { createFastDomNode } from '../../../base/browser/fastDomNode.js';\r\nimport { onUnexpectedError } from '../../../base/common/errors.js';\r\nimport { PointerHandler } from '../controller/pointerHandler.js';\r\nimport { TextAreaHandler } from '../controller/textAreaHandler.js';\r\nimport { ViewController } from './viewController.js';\r\nimport { ViewUserInputEvents } from './viewUserInputEvents.js';\r\nimport { ContentViewOverlays, MarginViewOverlays } from './viewOverlays.js';\r\nimport { PartFingerprints } from './viewPart.js';\r\nimport { ViewContentWidgets } from '../viewParts/contentWidgets/contentWidgets.js';\r\nimport { CurrentLineHighlightOverlay, CurrentLineMarginHighlightOverlay } from '../viewParts/currentLineHighlight/currentLineHighlight.js';\r\nimport { DecorationsOverlay } from '../viewParts/decorations/decorations.js';\r\nimport { EditorScrollbar } from '../viewParts/editorScrollbar/editorScrollbar.js';\r\nimport { GlyphMarginOverlay } from '../viewParts/glyphMargin/glyphMargin.js';\r\nimport { IndentGuidesOverlay } from '../viewParts/indentGuides/indentGuides.js';\r\nimport { LineNumbersOverlay } from '../viewParts/lineNumbers/lineNumbers.js';\r\nimport { ViewLines } from '../viewParts/lines/viewLines.js';\r\nimport { LinesDecorationsOverlay } from '../viewParts/linesDecorations/linesDecorations.js';\r\nimport { Margin } from '../viewParts/margin/margin.js';\r\nimport { MarginViewLineDecorationsOverlay } from '../viewParts/marginDecorations/marginDecorations.js';\r\nimport { Minimap } from '../viewParts/minimap/minimap.js';\r\nimport { ViewOverlayWidgets } from '../viewParts/overlayWidgets/overlayWidgets.js';\r\nimport { DecorationsOverviewRuler } from '../viewParts/overviewRuler/decorationsOverviewRuler.js';\r\nimport { OverviewRuler } from '../viewParts/overviewRuler/overviewRuler.js';\r\nimport { Rulers } from '../viewParts/rulers/rulers.js';\r\nimport { ScrollDecorationViewPart } from '../viewParts/scrollDecoration/scrollDecoration.js';\r\nimport { SelectionsOverlay } from '../viewParts/selections/selections.js';\r\nimport { ViewCursors } from '../viewParts/viewCursors/viewCursors.js';\r\nimport { ViewZones } from '../viewParts/viewZones/viewZones.js';\r\nimport { Position } from '../../common/core/position.js';\r\nimport { Range } from '../../common/core/range.js';\r\nimport { RenderingContext } from '../../common/view/renderingContext.js';\r\nimport { ViewContext } from '../../common/view/viewContext.js';\r\nimport { ViewportData } from '../../common/viewLayout/viewLinesViewportData.js';\r\nimport { ViewEventHandler } from '../../common/viewModel/viewEventHandler.js';\r\nimport { getThemeTypeSelector } from '../../../platform/theme/common/themeService.js';\r\nimport { PointerHandlerLastRenderData } from '../controller/mouseTarget.js';\r\nexport class View extends ViewEventHandler {\r\n    constructor(commandDelegate, configuration, themeService, model, userInputEvents, overflowWidgetsDomNode) {\r\n        super();\r\n        this._selections = [new Selection(1, 1, 1, 1)];\r\n        this._renderAnimationFrame = null;\r\n        const viewController = new ViewController(configuration, model, userInputEvents, commandDelegate);\r\n        // The view context is passed on to most classes (basically to reduce param. counts in ctors)\r\n        this._context = new ViewContext(configuration, themeService.getColorTheme(), model);\r\n        this._configPixelRatio = this._configPixelRatio = this._context.configuration.options.get(122 /* pixelRatio */);\r\n        // Ensure the view is the first event handler in order to update the layout\r\n        this._context.addEventHandler(this);\r\n        this._register(themeService.onDidColorThemeChange(theme => {\r\n            this._context.theme.update(theme);\r\n            this._context.model.onDidColorThemeChange();\r\n            this.render(true, false);\r\n        }));\r\n        this._viewParts = [];\r\n        // Keyboard handler\r\n        this._textAreaHandler = new TextAreaHandler(this._context, viewController, this._createTextAreaHandlerHelper());\r\n        this._viewParts.push(this._textAreaHandler);\r\n        // These two dom nodes must be constructed up front, since references are needed in the layout provider (scrolling & co.)\r\n        this._linesContent = createFastDomNode(document.createElement('div'));\r\n        this._linesContent.setClassName('lines-content' + ' monaco-editor-background');\r\n        this._linesContent.setPosition('absolute');\r\n        this.domNode = createFastDomNode(document.createElement('div'));\r\n        this.domNode.setClassName(this._getEditorClassName());\r\n        // Set role 'code' for better screen reader support https://github.com/microsoft/vscode/issues/93438\r\n        this.domNode.setAttribute('role', 'code');\r\n        this._overflowGuardContainer = createFastDomNode(document.createElement('div'));\r\n        PartFingerprints.write(this._overflowGuardContainer, 3 /* OverflowGuard */);\r\n        this._overflowGuardContainer.setClassName('overflow-guard');\r\n        this._scrollbar = new EditorScrollbar(this._context, this._linesContent, this.domNode, this._overflowGuardContainer);\r\n        this._viewParts.push(this._scrollbar);\r\n        // View Lines\r\n        this._viewLines = new ViewLines(this._context, this._linesContent);\r\n        // View Zones\r\n        this._viewZones = new ViewZones(this._context);\r\n        this._viewParts.push(this._viewZones);\r\n        // Decorations overview ruler\r\n        const decorationsOverviewRuler = new DecorationsOverviewRuler(this._context);\r\n        this._viewParts.push(decorationsOverviewRuler);\r\n        const scrollDecoration = new ScrollDecorationViewPart(this._context);\r\n        this._viewParts.push(scrollDecoration);\r\n        const contentViewOverlays = new ContentViewOverlays(this._context);\r\n        this._viewParts.push(contentViewOverlays);\r\n        contentViewOverlays.addDynamicOverlay(new CurrentLineHighlightOverlay(this._context));\r\n        contentViewOverlays.addDynamicOverlay(new SelectionsOverlay(this._context));\r\n        contentViewOverlays.addDynamicOverlay(new IndentGuidesOverlay(this._context));\r\n        contentViewOverlays.addDynamicOverlay(new DecorationsOverlay(this._context));\r\n        const marginViewOverlays = new MarginViewOverlays(this._context);\r\n        this._viewParts.push(marginViewOverlays);\r\n        marginViewOverlays.addDynamicOverlay(new CurrentLineMarginHighlightOverlay(this._context));\r\n        marginViewOverlays.addDynamicOverlay(new GlyphMarginOverlay(this._context));\r\n        marginViewOverlays.addDynamicOverlay(new MarginViewLineDecorationsOverlay(this._context));\r\n        marginViewOverlays.addDynamicOverlay(new LinesDecorationsOverlay(this._context));\r\n        marginViewOverlays.addDynamicOverlay(new LineNumbersOverlay(this._context));\r\n        const margin = new Margin(this._context);\r\n        margin.getDomNode().appendChild(this._viewZones.marginDomNode);\r\n        margin.getDomNode().appendChild(marginViewOverlays.getDomNode());\r\n        this._viewParts.push(margin);\r\n        // Content widgets\r\n        this._contentWidgets = new ViewContentWidgets(this._context, this.domNode);\r\n        this._viewParts.push(this._contentWidgets);\r\n        this._viewCursors = new ViewCursors(this._context);\r\n        this._viewParts.push(this._viewCursors);\r\n        // Overlay widgets\r\n        this._overlayWidgets = new ViewOverlayWidgets(this._context);\r\n        this._viewParts.push(this._overlayWidgets);\r\n        const rulers = new Rulers(this._context);\r\n        this._viewParts.push(rulers);\r\n        const minimap = new Minimap(this._context);\r\n        this._viewParts.push(minimap);\r\n        // -------------- Wire dom nodes up\r\n        if (decorationsOverviewRuler) {\r\n            const overviewRulerData = this._scrollbar.getOverviewRulerLayoutInfo();\r\n            overviewRulerData.parent.insertBefore(decorationsOverviewRuler.getDomNode(), overviewRulerData.insertBefore);\r\n        }\r\n        this._linesContent.appendChild(contentViewOverlays.getDomNode());\r\n        this._linesContent.appendChild(rulers.domNode);\r\n        this._linesContent.appendChild(this._viewZones.domNode);\r\n        this._linesContent.appendChild(this._viewLines.getDomNode());\r\n        this._linesContent.appendChild(this._contentWidgets.domNode);\r\n        this._linesContent.appendChild(this._viewCursors.getDomNode());\r\n        this._overflowGuardContainer.appendChild(margin.getDomNode());\r\n        this._overflowGuardContainer.appendChild(this._scrollbar.getDomNode());\r\n        this._overflowGuardContainer.appendChild(scrollDecoration.getDomNode());\r\n        this._overflowGuardContainer.appendChild(this._textAreaHandler.textArea);\r\n        this._overflowGuardContainer.appendChild(this._textAreaHandler.textAreaCover);\r\n        this._overflowGuardContainer.appendChild(this._overlayWidgets.getDomNode());\r\n        this._overflowGuardContainer.appendChild(minimap.getDomNode());\r\n        this.domNode.appendChild(this._overflowGuardContainer);\r\n        if (overflowWidgetsDomNode) {\r\n            overflowWidgetsDomNode.appendChild(this._contentWidgets.overflowingContentWidgetsDomNode.domNode);\r\n        }\r\n        else {\r\n            this.domNode.appendChild(this._contentWidgets.overflowingContentWidgetsDomNode);\r\n        }\r\n        this._applyLayout();\r\n        // Pointer handler\r\n        this._pointerHandler = this._register(new PointerHandler(this._context, viewController, this._createPointerHandlerHelper()));\r\n    }\r\n    _flushAccumulatedAndRenderNow() {\r\n        this._renderNow();\r\n    }\r\n    _createPointerHandlerHelper() {\r\n        return {\r\n            viewDomNode: this.domNode.domNode,\r\n            linesContentDomNode: this._linesContent.domNode,\r\n            focusTextArea: () => {\r\n                this.focus();\r\n            },\r\n            getLastRenderData: () => {\r\n                const lastViewCursorsRenderData = this._viewCursors.getLastRenderData() || [];\r\n                const lastTextareaPosition = this._textAreaHandler.getLastRenderData();\r\n                return new PointerHandlerLastRenderData(lastViewCursorsRenderData, lastTextareaPosition);\r\n            },\r\n            shouldSuppressMouseDownOnViewZone: (viewZoneId) => {\r\n                return this._viewZones.shouldSuppressMouseDownOnViewZone(viewZoneId);\r\n            },\r\n            shouldSuppressMouseDownOnWidget: (widgetId) => {\r\n                return this._contentWidgets.shouldSuppressMouseDownOnWidget(widgetId);\r\n            },\r\n            getPositionFromDOMInfo: (spanNode, offset) => {\r\n                this._flushAccumulatedAndRenderNow();\r\n                return this._viewLines.getPositionFromDOMInfo(spanNode, offset);\r\n            },\r\n            visibleRangeForPosition: (lineNumber, column) => {\r\n                this._flushAccumulatedAndRenderNow();\r\n                return this._viewLines.visibleRangeForPosition(new Position(lineNumber, column));\r\n            },\r\n            getLineWidth: (lineNumber) => {\r\n                this._flushAccumulatedAndRenderNow();\r\n                return this._viewLines.getLineWidth(lineNumber);\r\n            }\r\n        };\r\n    }\r\n    _createTextAreaHandlerHelper() {\r\n        return {\r\n            visibleRangeForPositionRelativeToEditor: (lineNumber, column) => {\r\n                this._flushAccumulatedAndRenderNow();\r\n                return this._viewLines.visibleRangeForPosition(new Position(lineNumber, column));\r\n            }\r\n        };\r\n    }\r\n    _applyLayout() {\r\n        const options = this._context.configuration.options;\r\n        const layoutInfo = options.get(124 /* layoutInfo */);\r\n        this.domNode.setWidth(layoutInfo.width);\r\n        this.domNode.setHeight(layoutInfo.height);\r\n        this._overflowGuardContainer.setWidth(layoutInfo.width);\r\n        this._overflowGuardContainer.setHeight(layoutInfo.height);\r\n        this._linesContent.setWidth(1000000);\r\n        this._linesContent.setHeight(1000000);\r\n    }\r\n    _getEditorClassName() {\r\n        const focused = this._textAreaHandler.isFocused() ? ' focused' : '';\r\n        return this._context.configuration.options.get(121 /* editorClassName */) + ' ' + getThemeTypeSelector(this._context.theme.type) + focused;\r\n    }\r\n    // --- begin event handlers\r\n    handleEvents(events) {\r\n        super.handleEvents(events);\r\n        this._scheduleRender();\r\n    }\r\n    onConfigurationChanged(e) {\r\n        this._configPixelRatio = this._context.configuration.options.get(122 /* pixelRatio */);\r\n        this.domNode.setClassName(this._getEditorClassName());\r\n        this._applyLayout();\r\n        return false;\r\n    }\r\n    onCursorStateChanged(e) {\r\n        this._selections = e.selections;\r\n        return false;\r\n    }\r\n    onFocusChanged(e) {\r\n        this.domNode.setClassName(this._getEditorClassName());\r\n        return false;\r\n    }\r\n    onThemeChanged(e) {\r\n        this.domNode.setClassName(this._getEditorClassName());\r\n        return false;\r\n    }\r\n    // --- end event handlers\r\n    dispose() {\r\n        if (this._renderAnimationFrame !== null) {\r\n            this._renderAnimationFrame.dispose();\r\n            this._renderAnimationFrame = null;\r\n        }\r\n        this._contentWidgets.overflowingContentWidgetsDomNode.domNode.remove();\r\n        this._context.removeEventHandler(this);\r\n        this._viewLines.dispose();\r\n        // Destroy view parts\r\n        for (const viewPart of this._viewParts) {\r\n            viewPart.dispose();\r\n        }\r\n        super.dispose();\r\n    }\r\n    _scheduleRender() {\r\n        if (this._renderAnimationFrame === null) {\r\n            this._renderAnimationFrame = dom.runAtThisOrScheduleAtNextAnimationFrame(this._onRenderScheduled.bind(this), 100);\r\n        }\r\n    }\r\n    _onRenderScheduled() {\r\n        this._renderAnimationFrame = null;\r\n        this._flushAccumulatedAndRenderNow();\r\n    }\r\n    _renderNow() {\r\n        safeInvokeNoArg(() => this._actualRender());\r\n    }\r\n    _getViewPartsToRender() {\r\n        let result = [], resultLen = 0;\r\n        for (const viewPart of this._viewParts) {\r\n            if (viewPart.shouldRender()) {\r\n                result[resultLen++] = viewPart;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    _actualRender() {\r\n        if (!dom.isInDOM(this.domNode.domNode)) {\r\n            return;\r\n        }\r\n        let viewPartsToRender = this._getViewPartsToRender();\r\n        if (!this._viewLines.shouldRender() && viewPartsToRender.length === 0) {\r\n            // Nothing to render\r\n            return;\r\n        }\r\n        const partialViewportData = this._context.viewLayout.getLinesViewportData();\r\n        this._context.model.setViewport(partialViewportData.startLineNumber, partialViewportData.endLineNumber, partialViewportData.centeredLineNumber);\r\n        const viewportData = new ViewportData(this._selections, partialViewportData, this._context.viewLayout.getWhitespaceViewportData(), this._context.model);\r\n        if (this._contentWidgets.shouldRender()) {\r\n            // Give the content widgets a chance to set their max width before a possible synchronous layout\r\n            this._contentWidgets.onBeforeRender(viewportData);\r\n        }\r\n        if (this._viewLines.shouldRender()) {\r\n            this._viewLines.renderText(viewportData);\r\n            this._viewLines.onDidRender();\r\n            // Rendering of viewLines might cause scroll events to occur, so collect view parts to render again\r\n            viewPartsToRender = this._getViewPartsToRender();\r\n        }\r\n        const renderingContext = new RenderingContext(this._context.viewLayout, viewportData, this._viewLines);\r\n        // Render the rest of the parts\r\n        for (const viewPart of viewPartsToRender) {\r\n            viewPart.prepareRender(renderingContext);\r\n        }\r\n        for (const viewPart of viewPartsToRender) {\r\n            viewPart.render(renderingContext);\r\n            viewPart.onDidRender();\r\n        }\r\n        // Try to detect browser zooming and paint again if necessary\r\n        if (Math.abs(browser.getPixelRatio() - this._configPixelRatio) > 0.001) {\r\n            // looks like the pixel ratio has changed\r\n            this._context.configuration.updatePixelRatio();\r\n        }\r\n    }\r\n    // --- BEGIN CodeEditor helpers\r\n    delegateVerticalScrollbarMouseDown(browserEvent) {\r\n        this._scrollbar.delegateVerticalScrollbarMouseDown(browserEvent);\r\n    }\r\n    restoreState(scrollPosition) {\r\n        this._context.model.setScrollPosition({ scrollTop: scrollPosition.scrollTop }, 1 /* Immediate */);\r\n        this._context.model.tokenizeViewport();\r\n        this._renderNow();\r\n        this._viewLines.updateLineWidths();\r\n        this._context.model.setScrollPosition({ scrollLeft: scrollPosition.scrollLeft }, 1 /* Immediate */);\r\n    }\r\n    getOffsetForColumn(modelLineNumber, modelColumn) {\r\n        const modelPosition = this._context.model.validateModelPosition({\r\n            lineNumber: modelLineNumber,\r\n            column: modelColumn\r\n        });\r\n        const viewPosition = this._context.model.coordinatesConverter.convertModelPositionToViewPosition(modelPosition);\r\n        this._flushAccumulatedAndRenderNow();\r\n        const visibleRange = this._viewLines.visibleRangeForPosition(new Position(viewPosition.lineNumber, viewPosition.column));\r\n        if (!visibleRange) {\r\n            return -1;\r\n        }\r\n        return visibleRange.left;\r\n    }\r\n    getTargetAtClientPoint(clientX, clientY) {\r\n        const mouseTarget = this._pointerHandler.getTargetAtClientPoint(clientX, clientY);\r\n        if (!mouseTarget) {\r\n            return null;\r\n        }\r\n        return ViewUserInputEvents.convertViewToModelMouseTarget(mouseTarget, this._context.model.coordinatesConverter);\r\n    }\r\n    createOverviewRuler(cssClassName) {\r\n        return new OverviewRuler(this._context, cssClassName);\r\n    }\r\n    change(callback) {\r\n        this._viewZones.changeViewZones(callback);\r\n        this._scheduleRender();\r\n    }\r\n    render(now, everything) {\r\n        if (everything) {\r\n            // Force everything to render...\r\n            this._viewLines.forceShouldRender();\r\n            for (const viewPart of this._viewParts) {\r\n                viewPart.forceShouldRender();\r\n            }\r\n        }\r\n        if (now) {\r\n            this._flushAccumulatedAndRenderNow();\r\n        }\r\n        else {\r\n            this._scheduleRender();\r\n        }\r\n    }\r\n    focus() {\r\n        this._textAreaHandler.focusTextArea();\r\n    }\r\n    isFocused() {\r\n        return this._textAreaHandler.isFocused();\r\n    }\r\n    setAriaOptions(options) {\r\n        this._textAreaHandler.setAriaOptions(options);\r\n    }\r\n    addContentWidget(widgetData) {\r\n        this._contentWidgets.addWidget(widgetData.widget);\r\n        this.layoutContentWidget(widgetData);\r\n        this._scheduleRender();\r\n    }\r\n    layoutContentWidget(widgetData) {\r\n        let newRange = widgetData.position ? widgetData.position.range || null : null;\r\n        if (newRange === null) {\r\n            const newPosition = widgetData.position ? widgetData.position.position : null;\r\n            if (newPosition !== null) {\r\n                newRange = new Range(newPosition.lineNumber, newPosition.column, newPosition.lineNumber, newPosition.column);\r\n            }\r\n        }\r\n        const newPreference = widgetData.position ? widgetData.position.preference : null;\r\n        this._contentWidgets.setWidgetPosition(widgetData.widget, newRange, newPreference);\r\n        this._scheduleRender();\r\n    }\r\n    removeContentWidget(widgetData) {\r\n        this._contentWidgets.removeWidget(widgetData.widget);\r\n        this._scheduleRender();\r\n    }\r\n    addOverlayWidget(widgetData) {\r\n        this._overlayWidgets.addWidget(widgetData.widget);\r\n        this.layoutOverlayWidget(widgetData);\r\n        this._scheduleRender();\r\n    }\r\n    layoutOverlayWidget(widgetData) {\r\n        const newPreference = widgetData.position ? widgetData.position.preference : null;\r\n        const shouldRender = this._overlayWidgets.setWidgetPosition(widgetData.widget, newPreference);\r\n        if (shouldRender) {\r\n            this._scheduleRender();\r\n        }\r\n    }\r\n    removeOverlayWidget(widgetData) {\r\n        this._overlayWidgets.removeWidget(widgetData.widget);\r\n        this._scheduleRender();\r\n    }\r\n}\r\nfunction safeInvokeNoArg(func) {\r\n    try {\r\n        return func();\r\n    }\r\n    catch (e) {\r\n        onUnexpectedError(e);\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}