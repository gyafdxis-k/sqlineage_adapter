{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { transformErrorForSerialization } from '../errors.js';\nimport { Disposable } from '../lifecycle.js';\nimport { isWeb } from '../platform.js';\nimport * as types from '../types.js';\nconst INITIALIZE = '$initialize';\nlet webWorkerWarningLogged = false;\nexport function logOnceWebWorkerWarning(err) {\n  if (!isWeb) {\n    // running tests\n    return;\n  }\n  if (!webWorkerWarningLogged) {\n    webWorkerWarningLogged = true;\n    console.warn('Could not create web worker(s). Falling back to loading web worker code in main thread, which might cause UI freezes. Please see https://github.com/microsoft/monaco-editor#faq');\n  }\n  console.warn(err.message);\n}\nclass SimpleWorkerProtocol {\n  constructor(handler) {\n    this._workerId = -1;\n    this._handler = handler;\n    this._lastSentReq = 0;\n    this._pendingReplies = Object.create(null);\n  }\n  setWorkerId(workerId) {\n    this._workerId = workerId;\n  }\n  sendMessage(method, args) {\n    let req = String(++this._lastSentReq);\n    return new Promise((resolve, reject) => {\n      this._pendingReplies[req] = {\n        resolve: resolve,\n        reject: reject\n      };\n      this._send({\n        vsWorker: this._workerId,\n        req: req,\n        method: method,\n        args: args\n      });\n    });\n  }\n  handleMessage(message) {\n    if (!message || !message.vsWorker) {\n      return;\n    }\n    if (this._workerId !== -1 && message.vsWorker !== this._workerId) {\n      return;\n    }\n    this._handleMessage(message);\n  }\n  _handleMessage(msg) {\n    if (msg.seq) {\n      let replyMessage = msg;\n      if (!this._pendingReplies[replyMessage.seq]) {\n        console.warn('Got reply to unknown seq');\n        return;\n      }\n      let reply = this._pendingReplies[replyMessage.seq];\n      delete this._pendingReplies[replyMessage.seq];\n      if (replyMessage.err) {\n        let err = replyMessage.err;\n        if (replyMessage.err.$isError) {\n          err = new Error();\n          err.name = replyMessage.err.name;\n          err.message = replyMessage.err.message;\n          err.stack = replyMessage.err.stack;\n        }\n        reply.reject(err);\n        return;\n      }\n      reply.resolve(replyMessage.res);\n      return;\n    }\n    let requestMessage = msg;\n    let req = requestMessage.req;\n    let result = this._handler.handleMessage(requestMessage.method, requestMessage.args);\n    result.then(r => {\n      this._send({\n        vsWorker: this._workerId,\n        seq: req,\n        res: r,\n        err: undefined\n      });\n    }, e => {\n      if (e.detail instanceof Error) {\n        // Loading errors have a detail property that points to the actual error\n        e.detail = transformErrorForSerialization(e.detail);\n      }\n      this._send({\n        vsWorker: this._workerId,\n        seq: req,\n        res: undefined,\n        err: transformErrorForSerialization(e)\n      });\n    });\n  }\n  _send(msg) {\n    let transfer = [];\n    if (msg.req) {\n      const m = msg;\n      for (let i = 0; i < m.args.length; i++) {\n        if (m.args[i] instanceof ArrayBuffer) {\n          transfer.push(m.args[i]);\n        }\n      }\n    } else {\n      const m = msg;\n      if (m.res instanceof ArrayBuffer) {\n        transfer.push(m.res);\n      }\n    }\n    this._handler.sendMessage(msg, transfer);\n  }\n}\n/**\r\n * Main thread side\r\n */\nexport class SimpleWorkerClient extends Disposable {\n  constructor(workerFactory, moduleId, host) {\n    super();\n    let lazyProxyReject = null;\n    this._worker = this._register(workerFactory.create('vs/base/common/worker/simpleWorker', msg => {\n      this._protocol.handleMessage(msg);\n    }, err => {\n      // in Firefox, web workers fail lazily :(\n      // we will reject the proxy\n      if (lazyProxyReject) {\n        lazyProxyReject(err);\n      }\n    }));\n    this._protocol = new SimpleWorkerProtocol({\n      sendMessage: (msg, transfer) => {\n        this._worker.postMessage(msg, transfer);\n      },\n      handleMessage: (method, args) => {\n        if (typeof host[method] !== 'function') {\n          return Promise.reject(new Error('Missing method ' + method + ' on main thread host.'));\n        }\n        try {\n          return Promise.resolve(host[method].apply(host, args));\n        } catch (e) {\n          return Promise.reject(e);\n        }\n      }\n    });\n    this._protocol.setWorkerId(this._worker.getId());\n    // Gather loader configuration\n    let loaderConfiguration = null;\n    if (typeof self.require !== 'undefined' && typeof self.require.getConfig === 'function') {\n      // Get the configuration from the Monaco AMD Loader\n      loaderConfiguration = self.require.getConfig();\n    } else if (typeof self.requirejs !== 'undefined') {\n      // Get the configuration from requirejs\n      loaderConfiguration = self.requirejs.s.contexts._.config;\n    }\n    const hostMethods = types.getAllMethodNames(host);\n    // Send initialize message\n    this._onModuleLoaded = this._protocol.sendMessage(INITIALIZE, [this._worker.getId(), JSON.parse(JSON.stringify(loaderConfiguration)), moduleId, hostMethods]);\n    // Create proxy to loaded code\n    const proxyMethodRequest = (method, args) => {\n      return this._request(method, args);\n    };\n    this._lazyProxy = new Promise((resolve, reject) => {\n      lazyProxyReject = reject;\n      this._onModuleLoaded.then(availableMethods => {\n        resolve(types.createProxyObject(availableMethods, proxyMethodRequest));\n      }, e => {\n        reject(e);\n        this._onError('Worker failed to load ' + moduleId, e);\n      });\n    });\n  }\n  getProxyObject() {\n    return this._lazyProxy;\n  }\n  _request(method, args) {\n    return new Promise((resolve, reject) => {\n      this._onModuleLoaded.then(() => {\n        this._protocol.sendMessage(method, args).then(resolve, reject);\n      }, reject);\n    });\n  }\n  _onError(message, error) {\n    console.error(message);\n    console.info(error);\n  }\n}\n/**\r\n * Worker side\r\n */\nexport class SimpleWorkerServer {\n  constructor(postMessage, requestHandlerFactory) {\n    this._requestHandlerFactory = requestHandlerFactory;\n    this._requestHandler = null;\n    this._protocol = new SimpleWorkerProtocol({\n      sendMessage: (msg, transfer) => {\n        postMessage(msg, transfer);\n      },\n      handleMessage: (method, args) => this._handleMessage(method, args)\n    });\n  }\n  onmessage(msg) {\n    this._protocol.handleMessage(msg);\n  }\n  _handleMessage(method, args) {\n    if (method === INITIALIZE) {\n      return this.initialize(args[0], args[1], args[2], args[3]);\n    }\n    if (!this._requestHandler || typeof this._requestHandler[method] !== 'function') {\n      return Promise.reject(new Error('Missing requestHandler or method: ' + method));\n    }\n    try {\n      return Promise.resolve(this._requestHandler[method].apply(this._requestHandler, args));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  }\n  initialize(workerId, loaderConfig, moduleId, hostMethods) {\n    this._protocol.setWorkerId(workerId);\n    const proxyMethodRequest = (method, args) => {\n      return this._protocol.sendMessage(method, args);\n    };\n    const hostProxy = types.createProxyObject(hostMethods, proxyMethodRequest);\n    if (this._requestHandlerFactory) {\n      // static request handler\n      this._requestHandler = this._requestHandlerFactory(hostProxy);\n      return Promise.resolve(types.getAllMethodNames(this._requestHandler));\n    }\n    if (loaderConfig) {\n      // Remove 'baseUrl', handling it is beyond scope for now\n      if (typeof loaderConfig.baseUrl !== 'undefined') {\n        delete loaderConfig['baseUrl'];\n      }\n      if (typeof loaderConfig.paths !== 'undefined') {\n        if (typeof loaderConfig.paths.vs !== 'undefined') {\n          delete loaderConfig.paths['vs'];\n        }\n      }\n      if (typeof loaderConfig.trustedTypesPolicy !== undefined) {\n        // don't use, it has been destroyed during serialize\n        delete loaderConfig['trustedTypesPolicy'];\n      }\n      // Since this is in a web worker, enable catching errors\n      loaderConfig.catchError = true;\n      self.require.config(loaderConfig);\n    }\n    return new Promise((resolve, reject) => {\n      // Use the global require to be sure to get the global config\n      self.require([moduleId], module => {\n        this._requestHandler = module.create(hostProxy);\n        if (!this._requestHandler) {\n          reject(new Error(\"No RequestHandler!\"));\n          return;\n        }\n        resolve(types.getAllMethodNames(this._requestHandler));\n      }, reject);\n    });\n  }\n}\n/**\r\n * Called on the worker side\r\n */\nexport function create(postMessage) {\n  return new SimpleWorkerServer(postMessage, null);\n}","map":{"version":3,"names":["transformErrorForSerialization","Disposable","isWeb","types","INITIALIZE","webWorkerWarningLogged","logOnceWebWorkerWarning","err","console","warn","message","SimpleWorkerProtocol","constructor","handler","_workerId","_handler","_lastSentReq","_pendingReplies","Object","create","setWorkerId","workerId","sendMessage","method","args","req","String","Promise","resolve","reject","_send","vsWorker","handleMessage","_handleMessage","msg","seq","replyMessage","reply","$isError","Error","name","stack","res","requestMessage","result","then","r","undefined","e","detail","transfer","m","i","length","ArrayBuffer","push","SimpleWorkerClient","workerFactory","moduleId","host","lazyProxyReject","_worker","_register","_protocol","postMessage","apply","getId","loaderConfiguration","self","require","getConfig","requirejs","s","contexts","_","config","hostMethods","getAllMethodNames","_onModuleLoaded","JSON","parse","stringify","proxyMethodRequest","_request","_lazyProxy","availableMethods","createProxyObject","_onError","getProxyObject","error","info","SimpleWorkerServer","requestHandlerFactory","_requestHandlerFactory","_requestHandler","onmessage","initialize","loaderConfig","hostProxy","baseUrl","paths","vs","trustedTypesPolicy","catchError","module"],"sources":["C:/Users/Administrator/Desktop/sqllineage-master/sqllineagejs/node_modules/monaco-editor/esm/vs/base/common/worker/simpleWorker.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { transformErrorForSerialization } from '../errors.js';\r\nimport { Disposable } from '../lifecycle.js';\r\nimport { isWeb } from '../platform.js';\r\nimport * as types from '../types.js';\r\nconst INITIALIZE = '$initialize';\r\nlet webWorkerWarningLogged = false;\r\nexport function logOnceWebWorkerWarning(err) {\r\n    if (!isWeb) {\r\n        // running tests\r\n        return;\r\n    }\r\n    if (!webWorkerWarningLogged) {\r\n        webWorkerWarningLogged = true;\r\n        console.warn('Could not create web worker(s). Falling back to loading web worker code in main thread, which might cause UI freezes. Please see https://github.com/microsoft/monaco-editor#faq');\r\n    }\r\n    console.warn(err.message);\r\n}\r\nclass SimpleWorkerProtocol {\r\n    constructor(handler) {\r\n        this._workerId = -1;\r\n        this._handler = handler;\r\n        this._lastSentReq = 0;\r\n        this._pendingReplies = Object.create(null);\r\n    }\r\n    setWorkerId(workerId) {\r\n        this._workerId = workerId;\r\n    }\r\n    sendMessage(method, args) {\r\n        let req = String(++this._lastSentReq);\r\n        return new Promise((resolve, reject) => {\r\n            this._pendingReplies[req] = {\r\n                resolve: resolve,\r\n                reject: reject\r\n            };\r\n            this._send({\r\n                vsWorker: this._workerId,\r\n                req: req,\r\n                method: method,\r\n                args: args\r\n            });\r\n        });\r\n    }\r\n    handleMessage(message) {\r\n        if (!message || !message.vsWorker) {\r\n            return;\r\n        }\r\n        if (this._workerId !== -1 && message.vsWorker !== this._workerId) {\r\n            return;\r\n        }\r\n        this._handleMessage(message);\r\n    }\r\n    _handleMessage(msg) {\r\n        if (msg.seq) {\r\n            let replyMessage = msg;\r\n            if (!this._pendingReplies[replyMessage.seq]) {\r\n                console.warn('Got reply to unknown seq');\r\n                return;\r\n            }\r\n            let reply = this._pendingReplies[replyMessage.seq];\r\n            delete this._pendingReplies[replyMessage.seq];\r\n            if (replyMessage.err) {\r\n                let err = replyMessage.err;\r\n                if (replyMessage.err.$isError) {\r\n                    err = new Error();\r\n                    err.name = replyMessage.err.name;\r\n                    err.message = replyMessage.err.message;\r\n                    err.stack = replyMessage.err.stack;\r\n                }\r\n                reply.reject(err);\r\n                return;\r\n            }\r\n            reply.resolve(replyMessage.res);\r\n            return;\r\n        }\r\n        let requestMessage = msg;\r\n        let req = requestMessage.req;\r\n        let result = this._handler.handleMessage(requestMessage.method, requestMessage.args);\r\n        result.then((r) => {\r\n            this._send({\r\n                vsWorker: this._workerId,\r\n                seq: req,\r\n                res: r,\r\n                err: undefined\r\n            });\r\n        }, (e) => {\r\n            if (e.detail instanceof Error) {\r\n                // Loading errors have a detail property that points to the actual error\r\n                e.detail = transformErrorForSerialization(e.detail);\r\n            }\r\n            this._send({\r\n                vsWorker: this._workerId,\r\n                seq: req,\r\n                res: undefined,\r\n                err: transformErrorForSerialization(e)\r\n            });\r\n        });\r\n    }\r\n    _send(msg) {\r\n        let transfer = [];\r\n        if (msg.req) {\r\n            const m = msg;\r\n            for (let i = 0; i < m.args.length; i++) {\r\n                if (m.args[i] instanceof ArrayBuffer) {\r\n                    transfer.push(m.args[i]);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            const m = msg;\r\n            if (m.res instanceof ArrayBuffer) {\r\n                transfer.push(m.res);\r\n            }\r\n        }\r\n        this._handler.sendMessage(msg, transfer);\r\n    }\r\n}\r\n/**\r\n * Main thread side\r\n */\r\nexport class SimpleWorkerClient extends Disposable {\r\n    constructor(workerFactory, moduleId, host) {\r\n        super();\r\n        let lazyProxyReject = null;\r\n        this._worker = this._register(workerFactory.create('vs/base/common/worker/simpleWorker', (msg) => {\r\n            this._protocol.handleMessage(msg);\r\n        }, (err) => {\r\n            // in Firefox, web workers fail lazily :(\r\n            // we will reject the proxy\r\n            if (lazyProxyReject) {\r\n                lazyProxyReject(err);\r\n            }\r\n        }));\r\n        this._protocol = new SimpleWorkerProtocol({\r\n            sendMessage: (msg, transfer) => {\r\n                this._worker.postMessage(msg, transfer);\r\n            },\r\n            handleMessage: (method, args) => {\r\n                if (typeof host[method] !== 'function') {\r\n                    return Promise.reject(new Error('Missing method ' + method + ' on main thread host.'));\r\n                }\r\n                try {\r\n                    return Promise.resolve(host[method].apply(host, args));\r\n                }\r\n                catch (e) {\r\n                    return Promise.reject(e);\r\n                }\r\n            }\r\n        });\r\n        this._protocol.setWorkerId(this._worker.getId());\r\n        // Gather loader configuration\r\n        let loaderConfiguration = null;\r\n        if (typeof self.require !== 'undefined' && typeof self.require.getConfig === 'function') {\r\n            // Get the configuration from the Monaco AMD Loader\r\n            loaderConfiguration = self.require.getConfig();\r\n        }\r\n        else if (typeof self.requirejs !== 'undefined') {\r\n            // Get the configuration from requirejs\r\n            loaderConfiguration = self.requirejs.s.contexts._.config;\r\n        }\r\n        const hostMethods = types.getAllMethodNames(host);\r\n        // Send initialize message\r\n        this._onModuleLoaded = this._protocol.sendMessage(INITIALIZE, [\r\n            this._worker.getId(),\r\n            JSON.parse(JSON.stringify(loaderConfiguration)),\r\n            moduleId,\r\n            hostMethods,\r\n        ]);\r\n        // Create proxy to loaded code\r\n        const proxyMethodRequest = (method, args) => {\r\n            return this._request(method, args);\r\n        };\r\n        this._lazyProxy = new Promise((resolve, reject) => {\r\n            lazyProxyReject = reject;\r\n            this._onModuleLoaded.then((availableMethods) => {\r\n                resolve(types.createProxyObject(availableMethods, proxyMethodRequest));\r\n            }, (e) => {\r\n                reject(e);\r\n                this._onError('Worker failed to load ' + moduleId, e);\r\n            });\r\n        });\r\n    }\r\n    getProxyObject() {\r\n        return this._lazyProxy;\r\n    }\r\n    _request(method, args) {\r\n        return new Promise((resolve, reject) => {\r\n            this._onModuleLoaded.then(() => {\r\n                this._protocol.sendMessage(method, args).then(resolve, reject);\r\n            }, reject);\r\n        });\r\n    }\r\n    _onError(message, error) {\r\n        console.error(message);\r\n        console.info(error);\r\n    }\r\n}\r\n/**\r\n * Worker side\r\n */\r\nexport class SimpleWorkerServer {\r\n    constructor(postMessage, requestHandlerFactory) {\r\n        this._requestHandlerFactory = requestHandlerFactory;\r\n        this._requestHandler = null;\r\n        this._protocol = new SimpleWorkerProtocol({\r\n            sendMessage: (msg, transfer) => {\r\n                postMessage(msg, transfer);\r\n            },\r\n            handleMessage: (method, args) => this._handleMessage(method, args)\r\n        });\r\n    }\r\n    onmessage(msg) {\r\n        this._protocol.handleMessage(msg);\r\n    }\r\n    _handleMessage(method, args) {\r\n        if (method === INITIALIZE) {\r\n            return this.initialize(args[0], args[1], args[2], args[3]);\r\n        }\r\n        if (!this._requestHandler || typeof this._requestHandler[method] !== 'function') {\r\n            return Promise.reject(new Error('Missing requestHandler or method: ' + method));\r\n        }\r\n        try {\r\n            return Promise.resolve(this._requestHandler[method].apply(this._requestHandler, args));\r\n        }\r\n        catch (e) {\r\n            return Promise.reject(e);\r\n        }\r\n    }\r\n    initialize(workerId, loaderConfig, moduleId, hostMethods) {\r\n        this._protocol.setWorkerId(workerId);\r\n        const proxyMethodRequest = (method, args) => {\r\n            return this._protocol.sendMessage(method, args);\r\n        };\r\n        const hostProxy = types.createProxyObject(hostMethods, proxyMethodRequest);\r\n        if (this._requestHandlerFactory) {\r\n            // static request handler\r\n            this._requestHandler = this._requestHandlerFactory(hostProxy);\r\n            return Promise.resolve(types.getAllMethodNames(this._requestHandler));\r\n        }\r\n        if (loaderConfig) {\r\n            // Remove 'baseUrl', handling it is beyond scope for now\r\n            if (typeof loaderConfig.baseUrl !== 'undefined') {\r\n                delete loaderConfig['baseUrl'];\r\n            }\r\n            if (typeof loaderConfig.paths !== 'undefined') {\r\n                if (typeof loaderConfig.paths.vs !== 'undefined') {\r\n                    delete loaderConfig.paths['vs'];\r\n                }\r\n            }\r\n            if (typeof loaderConfig.trustedTypesPolicy !== undefined) {\r\n                // don't use, it has been destroyed during serialize\r\n                delete loaderConfig['trustedTypesPolicy'];\r\n            }\r\n            // Since this is in a web worker, enable catching errors\r\n            loaderConfig.catchError = true;\r\n            self.require.config(loaderConfig);\r\n        }\r\n        return new Promise((resolve, reject) => {\r\n            // Use the global require to be sure to get the global config\r\n            self.require([moduleId], (module) => {\r\n                this._requestHandler = module.create(hostProxy);\r\n                if (!this._requestHandler) {\r\n                    reject(new Error(`No RequestHandler!`));\r\n                    return;\r\n                }\r\n                resolve(types.getAllMethodNames(this._requestHandler));\r\n            }, reject);\r\n        });\r\n    }\r\n}\r\n/**\r\n * Called on the worker side\r\n */\r\nexport function create(postMessage) {\r\n    return new SimpleWorkerServer(postMessage, null);\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}