{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { OverviewRulerLane } from '../../common/model.js';\nimport { themeColorFromId } from '../../../platform/theme/common/themeService.js';\nimport { overviewRulerRangeHighlight } from '../../common/view/editorColorRegistry.js';\nimport { DisposableStore, toDisposable, MutableDisposable } from '../../../base/common/lifecycle.js';\nimport { isDiffEditor, getCodeEditor } from '../../browser/editorBrowser.js';\nimport { withNullAsUndefined } from '../../../base/common/types.js';\nimport { once } from '../../../base/common/functional.js';\n/**\r\n * A reusable quick access provider for the editor with support\r\n * for adding decorations for navigating in the currently active file\r\n * (for example \"Go to line\", \"Go to symbol\").\r\n */\nexport class AbstractEditorNavigationQuickAccessProvider {\n  constructor(options) {\n    this.options = options;\n    //#endregion\n    //#region Decorations Utils\n    this.rangeHighlightDecorationId = undefined;\n  }\n  //#region Provider methods\n  provide(picker, token) {\n    var _a;\n    const disposables = new DisposableStore();\n    // Apply options if any\n    picker.canAcceptInBackground = !!((_a = this.options) === null || _a === void 0 ? void 0 : _a.canAcceptInBackground);\n    // Disable filtering & sorting, we control the results\n    picker.matchOnLabel = picker.matchOnDescription = picker.matchOnDetail = picker.sortByLabel = false;\n    // Provide based on current active editor\n    const pickerDisposable = disposables.add(new MutableDisposable());\n    pickerDisposable.value = this.doProvide(picker, token);\n    // Re-create whenever the active editor changes\n    disposables.add(this.onDidActiveTextEditorControlChange(() => {\n      // Clear old\n      pickerDisposable.value = undefined;\n      // Add new\n      pickerDisposable.value = this.doProvide(picker, token);\n    }));\n    return disposables;\n  }\n  doProvide(picker, token) {\n    const disposables = new DisposableStore();\n    // With text control\n    const editor = this.activeTextEditorControl;\n    if (editor && this.canProvideWithTextEditor(editor)) {\n      const context = {\n        editor\n      };\n      // Restore any view state if this picker was closed\n      // without actually going to a line\n      const codeEditor = getCodeEditor(editor);\n      if (codeEditor) {\n        // Remember view state and update it when the cursor position\n        // changes even later because it could be that the user has\n        // configured quick access to remain open when focus is lost and\n        // we always want to restore the current location.\n        let lastKnownEditorViewState = withNullAsUndefined(editor.saveViewState());\n        disposables.add(codeEditor.onDidChangeCursorPosition(() => {\n          lastKnownEditorViewState = withNullAsUndefined(editor.saveViewState());\n        }));\n        context.restoreViewState = () => {\n          if (lastKnownEditorViewState && editor === this.activeTextEditorControl) {\n            editor.restoreViewState(lastKnownEditorViewState);\n          }\n        };\n        disposables.add(once(token.onCancellationRequested)(() => {\n          var _a;\n          return (_a = context.restoreViewState) === null || _a === void 0 ? void 0 : _a.call(context);\n        }));\n      }\n      // Clean up decorations on dispose\n      disposables.add(toDisposable(() => this.clearDecorations(editor)));\n      // Ask subclass for entries\n      disposables.add(this.provideWithTextEditor(context, picker, token));\n    }\n    // Without text control\n    else {\n      disposables.add(this.provideWithoutTextEditor(picker, token));\n    }\n    return disposables;\n  }\n  /**\r\n   * Subclasses to implement if they can operate on the text editor.\r\n   */\n  canProvideWithTextEditor(editor) {\n    return true;\n  }\n  gotoLocation(_ref, options) {\n    let {\n      editor\n    } = _ref;\n    editor.setSelection(options.range);\n    editor.revealRangeInCenter(options.range, 0 /* Smooth */);\n    if (!options.preserveFocus) {\n      editor.focus();\n    }\n  }\n  getModel(editor) {\n    var _a;\n    return isDiffEditor(editor) ? (_a = editor.getModel()) === null || _a === void 0 ? void 0 : _a.modified : editor.getModel();\n  }\n  addDecorations(editor, range) {\n    editor.changeDecorations(changeAccessor => {\n      // Reset old decorations if any\n      const deleteDecorations = [];\n      if (this.rangeHighlightDecorationId) {\n        deleteDecorations.push(this.rangeHighlightDecorationId.overviewRulerDecorationId);\n        deleteDecorations.push(this.rangeHighlightDecorationId.rangeHighlightId);\n        this.rangeHighlightDecorationId = undefined;\n      }\n      // Add new decorations for the range\n      const newDecorations = [\n      // highlight the entire line on the range\n      {\n        range,\n        options: {\n          className: 'rangeHighlight',\n          isWholeLine: true\n        }\n      },\n      // also add overview ruler highlight\n      {\n        range,\n        options: {\n          overviewRuler: {\n            color: themeColorFromId(overviewRulerRangeHighlight),\n            position: OverviewRulerLane.Full\n          }\n        }\n      }];\n      const [rangeHighlightId, overviewRulerDecorationId] = changeAccessor.deltaDecorations(deleteDecorations, newDecorations);\n      this.rangeHighlightDecorationId = {\n        rangeHighlightId,\n        overviewRulerDecorationId\n      };\n    });\n  }\n  clearDecorations(editor) {\n    const rangeHighlightDecorationId = this.rangeHighlightDecorationId;\n    if (rangeHighlightDecorationId) {\n      editor.changeDecorations(changeAccessor => {\n        changeAccessor.deltaDecorations([rangeHighlightDecorationId.overviewRulerDecorationId, rangeHighlightDecorationId.rangeHighlightId], []);\n      });\n      this.rangeHighlightDecorationId = undefined;\n    }\n  }\n}","map":{"version":3,"names":["OverviewRulerLane","themeColorFromId","overviewRulerRangeHighlight","DisposableStore","toDisposable","MutableDisposable","isDiffEditor","getCodeEditor","withNullAsUndefined","once","AbstractEditorNavigationQuickAccessProvider","constructor","options","rangeHighlightDecorationId","undefined","provide","picker","token","_a","disposables","canAcceptInBackground","matchOnLabel","matchOnDescription","matchOnDetail","sortByLabel","pickerDisposable","add","value","doProvide","onDidActiveTextEditorControlChange","editor","activeTextEditorControl","canProvideWithTextEditor","context","codeEditor","lastKnownEditorViewState","saveViewState","onDidChangeCursorPosition","restoreViewState","onCancellationRequested","call","clearDecorations","provideWithTextEditor","provideWithoutTextEditor","gotoLocation","_ref","setSelection","range","revealRangeInCenter","preserveFocus","focus","getModel","modified","addDecorations","changeDecorations","changeAccessor","deleteDecorations","push","overviewRulerDecorationId","rangeHighlightId","newDecorations","className","isWholeLine","overviewRuler","color","position","Full","deltaDecorations"],"sources":["C:/Users/Administrator/Desktop/sqllineage-master/sqllineagejs/node_modules/monaco-editor/esm/vs/editor/contrib/quickAccess/editorNavigationQuickAccess.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { OverviewRulerLane } from '../../common/model.js';\r\nimport { themeColorFromId } from '../../../platform/theme/common/themeService.js';\r\nimport { overviewRulerRangeHighlight } from '../../common/view/editorColorRegistry.js';\r\nimport { DisposableStore, toDisposable, MutableDisposable } from '../../../base/common/lifecycle.js';\r\nimport { isDiffEditor, getCodeEditor } from '../../browser/editorBrowser.js';\r\nimport { withNullAsUndefined } from '../../../base/common/types.js';\r\nimport { once } from '../../../base/common/functional.js';\r\n/**\r\n * A reusable quick access provider for the editor with support\r\n * for adding decorations for navigating in the currently active file\r\n * (for example \"Go to line\", \"Go to symbol\").\r\n */\r\nexport class AbstractEditorNavigationQuickAccessProvider {\r\n    constructor(options) {\r\n        this.options = options;\r\n        //#endregion\r\n        //#region Decorations Utils\r\n        this.rangeHighlightDecorationId = undefined;\r\n    }\r\n    //#region Provider methods\r\n    provide(picker, token) {\r\n        var _a;\r\n        const disposables = new DisposableStore();\r\n        // Apply options if any\r\n        picker.canAcceptInBackground = !!((_a = this.options) === null || _a === void 0 ? void 0 : _a.canAcceptInBackground);\r\n        // Disable filtering & sorting, we control the results\r\n        picker.matchOnLabel = picker.matchOnDescription = picker.matchOnDetail = picker.sortByLabel = false;\r\n        // Provide based on current active editor\r\n        const pickerDisposable = disposables.add(new MutableDisposable());\r\n        pickerDisposable.value = this.doProvide(picker, token);\r\n        // Re-create whenever the active editor changes\r\n        disposables.add(this.onDidActiveTextEditorControlChange(() => {\r\n            // Clear old\r\n            pickerDisposable.value = undefined;\r\n            // Add new\r\n            pickerDisposable.value = this.doProvide(picker, token);\r\n        }));\r\n        return disposables;\r\n    }\r\n    doProvide(picker, token) {\r\n        const disposables = new DisposableStore();\r\n        // With text control\r\n        const editor = this.activeTextEditorControl;\r\n        if (editor && this.canProvideWithTextEditor(editor)) {\r\n            const context = { editor };\r\n            // Restore any view state if this picker was closed\r\n            // without actually going to a line\r\n            const codeEditor = getCodeEditor(editor);\r\n            if (codeEditor) {\r\n                // Remember view state and update it when the cursor position\r\n                // changes even later because it could be that the user has\r\n                // configured quick access to remain open when focus is lost and\r\n                // we always want to restore the current location.\r\n                let lastKnownEditorViewState = withNullAsUndefined(editor.saveViewState());\r\n                disposables.add(codeEditor.onDidChangeCursorPosition(() => {\r\n                    lastKnownEditorViewState = withNullAsUndefined(editor.saveViewState());\r\n                }));\r\n                context.restoreViewState = () => {\r\n                    if (lastKnownEditorViewState && editor === this.activeTextEditorControl) {\r\n                        editor.restoreViewState(lastKnownEditorViewState);\r\n                    }\r\n                };\r\n                disposables.add(once(token.onCancellationRequested)(() => { var _a; return (_a = context.restoreViewState) === null || _a === void 0 ? void 0 : _a.call(context); }));\r\n            }\r\n            // Clean up decorations on dispose\r\n            disposables.add(toDisposable(() => this.clearDecorations(editor)));\r\n            // Ask subclass for entries\r\n            disposables.add(this.provideWithTextEditor(context, picker, token));\r\n        }\r\n        // Without text control\r\n        else {\r\n            disposables.add(this.provideWithoutTextEditor(picker, token));\r\n        }\r\n        return disposables;\r\n    }\r\n    /**\r\n     * Subclasses to implement if they can operate on the text editor.\r\n     */\r\n    canProvideWithTextEditor(editor) {\r\n        return true;\r\n    }\r\n    gotoLocation({ editor }, options) {\r\n        editor.setSelection(options.range);\r\n        editor.revealRangeInCenter(options.range, 0 /* Smooth */);\r\n        if (!options.preserveFocus) {\r\n            editor.focus();\r\n        }\r\n    }\r\n    getModel(editor) {\r\n        var _a;\r\n        return isDiffEditor(editor) ? (_a = editor.getModel()) === null || _a === void 0 ? void 0 : _a.modified :\r\n            editor.getModel();\r\n    }\r\n    addDecorations(editor, range) {\r\n        editor.changeDecorations(changeAccessor => {\r\n            // Reset old decorations if any\r\n            const deleteDecorations = [];\r\n            if (this.rangeHighlightDecorationId) {\r\n                deleteDecorations.push(this.rangeHighlightDecorationId.overviewRulerDecorationId);\r\n                deleteDecorations.push(this.rangeHighlightDecorationId.rangeHighlightId);\r\n                this.rangeHighlightDecorationId = undefined;\r\n            }\r\n            // Add new decorations for the range\r\n            const newDecorations = [\r\n                // highlight the entire line on the range\r\n                {\r\n                    range,\r\n                    options: {\r\n                        className: 'rangeHighlight',\r\n                        isWholeLine: true\r\n                    }\r\n                },\r\n                // also add overview ruler highlight\r\n                {\r\n                    range,\r\n                    options: {\r\n                        overviewRuler: {\r\n                            color: themeColorFromId(overviewRulerRangeHighlight),\r\n                            position: OverviewRulerLane.Full\r\n                        }\r\n                    }\r\n                }\r\n            ];\r\n            const [rangeHighlightId, overviewRulerDecorationId] = changeAccessor.deltaDecorations(deleteDecorations, newDecorations);\r\n            this.rangeHighlightDecorationId = { rangeHighlightId, overviewRulerDecorationId };\r\n        });\r\n    }\r\n    clearDecorations(editor) {\r\n        const rangeHighlightDecorationId = this.rangeHighlightDecorationId;\r\n        if (rangeHighlightDecorationId) {\r\n            editor.changeDecorations(changeAccessor => {\r\n                changeAccessor.deltaDecorations([\r\n                    rangeHighlightDecorationId.overviewRulerDecorationId,\r\n                    rangeHighlightDecorationId.rangeHighlightId\r\n                ], []);\r\n            });\r\n            this.rangeHighlightDecorationId = undefined;\r\n        }\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}