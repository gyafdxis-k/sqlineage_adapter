{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { Disposable } from '../../../base/common/lifecycle.js';\nexport class ElementSizeObserver extends Disposable {\n  constructor(referenceDomElement, dimension, changeCallback) {\n    super();\n    this.referenceDomElement = referenceDomElement;\n    this.changeCallback = changeCallback;\n    this.width = -1;\n    this.height = -1;\n    this.resizeObserver = null;\n    this.measureReferenceDomElementToken = -1;\n    this.measureReferenceDomElement(false, dimension);\n  }\n  dispose() {\n    this.stopObserving();\n    super.dispose();\n  }\n  getWidth() {\n    return this.width;\n  }\n  getHeight() {\n    return this.height;\n  }\n  startObserving() {\n    if (typeof ResizeObserver !== 'undefined') {\n      if (!this.resizeObserver && this.referenceDomElement) {\n        this.resizeObserver = new ResizeObserver(entries => {\n          if (entries && entries[0] && entries[0].contentRect) {\n            this.observe({\n              width: entries[0].contentRect.width,\n              height: entries[0].contentRect.height\n            });\n          } else {\n            this.observe();\n          }\n        });\n        this.resizeObserver.observe(this.referenceDomElement);\n      }\n    } else {\n      if (this.measureReferenceDomElementToken === -1) {\n        // setInterval type defaults to NodeJS.Timeout instead of number, so specify it as a number\n        this.measureReferenceDomElementToken = setInterval(() => this.observe(), 100);\n      }\n    }\n  }\n  stopObserving() {\n    if (this.resizeObserver) {\n      this.resizeObserver.disconnect();\n      this.resizeObserver = null;\n    }\n    if (this.measureReferenceDomElementToken !== -1) {\n      clearInterval(this.measureReferenceDomElementToken);\n      this.measureReferenceDomElementToken = -1;\n    }\n  }\n  observe(dimension) {\n    this.measureReferenceDomElement(true, dimension);\n  }\n  measureReferenceDomElement(callChangeCallback, dimension) {\n    let observedWidth = 0;\n    let observedHeight = 0;\n    if (dimension) {\n      observedWidth = dimension.width;\n      observedHeight = dimension.height;\n    } else if (this.referenceDomElement) {\n      observedWidth = this.referenceDomElement.clientWidth;\n      observedHeight = this.referenceDomElement.clientHeight;\n    }\n    observedWidth = Math.max(5, observedWidth);\n    observedHeight = Math.max(5, observedHeight);\n    if (this.width !== observedWidth || this.height !== observedHeight) {\n      this.width = observedWidth;\n      this.height = observedHeight;\n      if (callChangeCallback) {\n        this.changeCallback();\n      }\n    }\n  }\n}","map":{"version":3,"names":["Disposable","ElementSizeObserver","constructor","referenceDomElement","dimension","changeCallback","width","height","resizeObserver","measureReferenceDomElementToken","measureReferenceDomElement","dispose","stopObserving","getWidth","getHeight","startObserving","ResizeObserver","entries","contentRect","observe","setInterval","disconnect","clearInterval","callChangeCallback","observedWidth","observedHeight","clientWidth","clientHeight","Math","max"],"sources":["C:/Users/Administrator/Desktop/sqllineage-master/sqllineagejs/node_modules/monaco-editor/esm/vs/editor/browser/config/elementSizeObserver.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { Disposable } from '../../../base/common/lifecycle.js';\r\nexport class ElementSizeObserver extends Disposable {\r\n    constructor(referenceDomElement, dimension, changeCallback) {\r\n        super();\r\n        this.referenceDomElement = referenceDomElement;\r\n        this.changeCallback = changeCallback;\r\n        this.width = -1;\r\n        this.height = -1;\r\n        this.resizeObserver = null;\r\n        this.measureReferenceDomElementToken = -1;\r\n        this.measureReferenceDomElement(false, dimension);\r\n    }\r\n    dispose() {\r\n        this.stopObserving();\r\n        super.dispose();\r\n    }\r\n    getWidth() {\r\n        return this.width;\r\n    }\r\n    getHeight() {\r\n        return this.height;\r\n    }\r\n    startObserving() {\r\n        if (typeof ResizeObserver !== 'undefined') {\r\n            if (!this.resizeObserver && this.referenceDomElement) {\r\n                this.resizeObserver = new ResizeObserver((entries) => {\r\n                    if (entries && entries[0] && entries[0].contentRect) {\r\n                        this.observe({ width: entries[0].contentRect.width, height: entries[0].contentRect.height });\r\n                    }\r\n                    else {\r\n                        this.observe();\r\n                    }\r\n                });\r\n                this.resizeObserver.observe(this.referenceDomElement);\r\n            }\r\n        }\r\n        else {\r\n            if (this.measureReferenceDomElementToken === -1) {\r\n                // setInterval type defaults to NodeJS.Timeout instead of number, so specify it as a number\r\n                this.measureReferenceDomElementToken = setInterval(() => this.observe(), 100);\r\n            }\r\n        }\r\n    }\r\n    stopObserving() {\r\n        if (this.resizeObserver) {\r\n            this.resizeObserver.disconnect();\r\n            this.resizeObserver = null;\r\n        }\r\n        if (this.measureReferenceDomElementToken !== -1) {\r\n            clearInterval(this.measureReferenceDomElementToken);\r\n            this.measureReferenceDomElementToken = -1;\r\n        }\r\n    }\r\n    observe(dimension) {\r\n        this.measureReferenceDomElement(true, dimension);\r\n    }\r\n    measureReferenceDomElement(callChangeCallback, dimension) {\r\n        let observedWidth = 0;\r\n        let observedHeight = 0;\r\n        if (dimension) {\r\n            observedWidth = dimension.width;\r\n            observedHeight = dimension.height;\r\n        }\r\n        else if (this.referenceDomElement) {\r\n            observedWidth = this.referenceDomElement.clientWidth;\r\n            observedHeight = this.referenceDomElement.clientHeight;\r\n        }\r\n        observedWidth = Math.max(5, observedWidth);\r\n        observedHeight = Math.max(5, observedHeight);\r\n        if (this.width !== observedWidth || this.height !== observedHeight) {\r\n            this.width = observedWidth;\r\n            this.height = observedHeight;\r\n            if (callChangeCallback) {\r\n                this.changeCallback();\r\n            }\r\n        }\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}