{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../../../base/common/event.js';\nimport { hash } from '../../../base/common/hash.js';\nimport { toDisposable } from '../../../base/common/lifecycle.js';\nimport { LRUCache } from '../../../base/common/map.js';\nimport { MovingAverage } from '../../../base/common/numbers.js';\nimport { score } from './languageSelector.js';\nimport { shouldSynchronizeModel } from '../services/modelService.js';\nfunction isExclusive(selector) {\n  if (typeof selector === 'string') {\n    return false;\n  } else if (Array.isArray(selector)) {\n    return selector.every(isExclusive);\n  } else {\n    return !!selector.exclusive;\n  }\n}\nexport class LanguageFeatureRegistry {\n  constructor() {\n    this._clock = 0;\n    this._entries = [];\n    this._onDidChange = new Emitter();\n  }\n  get onDidChange() {\n    return this._onDidChange.event;\n  }\n  register(selector, provider) {\n    let entry = {\n      selector,\n      provider,\n      _score: -1,\n      _time: this._clock++\n    };\n    this._entries.push(entry);\n    this._lastCandidate = undefined;\n    this._onDidChange.fire(this._entries.length);\n    return toDisposable(() => {\n      if (entry) {\n        let idx = this._entries.indexOf(entry);\n        if (idx >= 0) {\n          this._entries.splice(idx, 1);\n          this._lastCandidate = undefined;\n          this._onDidChange.fire(this._entries.length);\n          entry = undefined;\n        }\n      }\n    });\n  }\n  has(model) {\n    return this.all(model).length > 0;\n  }\n  all(model) {\n    if (!model) {\n      return [];\n    }\n    this._updateScores(model);\n    const result = [];\n    // from registry\n    for (let entry of this._entries) {\n      if (entry._score > 0) {\n        result.push(entry.provider);\n      }\n    }\n    return result;\n  }\n  ordered(model) {\n    const result = [];\n    this._orderedForEach(model, entry => result.push(entry.provider));\n    return result;\n  }\n  orderedGroups(model) {\n    const result = [];\n    let lastBucket;\n    let lastBucketScore;\n    this._orderedForEach(model, entry => {\n      if (lastBucket && lastBucketScore === entry._score) {\n        lastBucket.push(entry.provider);\n      } else {\n        lastBucketScore = entry._score;\n        lastBucket = [entry.provider];\n        result.push(lastBucket);\n      }\n    });\n    return result;\n  }\n  _orderedForEach(model, callback) {\n    if (!model) {\n      return;\n    }\n    this._updateScores(model);\n    for (const entry of this._entries) {\n      if (entry._score > 0) {\n        callback(entry);\n      }\n    }\n  }\n  _updateScores(model) {\n    let candidate = {\n      uri: model.uri.toString(),\n      language: model.getLanguageIdentifier().language\n    };\n    if (this._lastCandidate && this._lastCandidate.language === candidate.language && this._lastCandidate.uri === candidate.uri) {\n      // nothing has changed\n      return;\n    }\n    this._lastCandidate = candidate;\n    for (let entry of this._entries) {\n      entry._score = score(entry.selector, model.uri, model.getLanguageIdentifier().language, shouldSynchronizeModel(model));\n      if (isExclusive(entry.selector) && entry._score > 0) {\n        // support for one exclusive selector that overwrites\n        // any other selector\n        for (let entry of this._entries) {\n          entry._score = 0;\n        }\n        entry._score = 1000;\n        break;\n      }\n    }\n    // needs sorting\n    this._entries.sort(LanguageFeatureRegistry._compareByScoreAndTime);\n  }\n  static _compareByScoreAndTime(a, b) {\n    if (a._score < b._score) {\n      return 1;\n    } else if (a._score > b._score) {\n      return -1;\n    } else if (a._time < b._time) {\n      return 1;\n    } else if (a._time > b._time) {\n      return -1;\n    } else {\n      return 0;\n    }\n  }\n}\n/**\r\n * Keeps moving average per model and set of providers so that requests\r\n * can be debounce according to the provider performance\r\n */\nexport class LanguageFeatureRequestDelays {\n  constructor(_registry, min) {\n    let max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Number.MAX_SAFE_INTEGER;\n    this._registry = _registry;\n    this.min = min;\n    this.max = max;\n    this._cache = new LRUCache(50, 0.7);\n  }\n  _key(model) {\n    return model.id + hash(this._registry.all(model));\n  }\n  _clamp(value) {\n    if (value === undefined) {\n      return this.min;\n    } else {\n      return Math.min(this.max, Math.max(this.min, Math.floor(value * 1.3)));\n    }\n  }\n  get(model) {\n    const key = this._key(model);\n    const avg = this._cache.get(key);\n    return this._clamp(avg === null || avg === void 0 ? void 0 : avg.value);\n  }\n  update(model, value) {\n    const key = this._key(model);\n    let avg = this._cache.get(key);\n    if (!avg) {\n      avg = new MovingAverage();\n      this._cache.set(key, avg);\n    }\n    avg.update(value);\n    return this.get(model);\n  }\n}","map":{"version":3,"names":["Emitter","hash","toDisposable","LRUCache","MovingAverage","score","shouldSynchronizeModel","isExclusive","selector","Array","isArray","every","exclusive","LanguageFeatureRegistry","constructor","_clock","_entries","_onDidChange","onDidChange","event","register","provider","entry","_score","_time","push","_lastCandidate","undefined","fire","length","idx","indexOf","splice","has","model","all","_updateScores","result","ordered","_orderedForEach","orderedGroups","lastBucket","lastBucketScore","callback","candidate","uri","toString","language","getLanguageIdentifier","sort","_compareByScoreAndTime","a","b","LanguageFeatureRequestDelays","_registry","min","max","arguments","Number","MAX_SAFE_INTEGER","_cache","_key","id","_clamp","value","Math","floor","get","key","avg","update","set"],"sources":["C:/Users/Administrator/Desktop/sqllineage-master/sqllineagejs/node_modules/monaco-editor/esm/vs/editor/common/modes/languageFeatureRegistry.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { Emitter } from '../../../base/common/event.js';\r\nimport { hash } from '../../../base/common/hash.js';\r\nimport { toDisposable } from '../../../base/common/lifecycle.js';\r\nimport { LRUCache } from '../../../base/common/map.js';\r\nimport { MovingAverage } from '../../../base/common/numbers.js';\r\nimport { score } from './languageSelector.js';\r\nimport { shouldSynchronizeModel } from '../services/modelService.js';\r\nfunction isExclusive(selector) {\r\n    if (typeof selector === 'string') {\r\n        return false;\r\n    }\r\n    else if (Array.isArray(selector)) {\r\n        return selector.every(isExclusive);\r\n    }\r\n    else {\r\n        return !!selector.exclusive;\r\n    }\r\n}\r\nexport class LanguageFeatureRegistry {\r\n    constructor() {\r\n        this._clock = 0;\r\n        this._entries = [];\r\n        this._onDidChange = new Emitter();\r\n    }\r\n    get onDidChange() {\r\n        return this._onDidChange.event;\r\n    }\r\n    register(selector, provider) {\r\n        let entry = {\r\n            selector,\r\n            provider,\r\n            _score: -1,\r\n            _time: this._clock++\r\n        };\r\n        this._entries.push(entry);\r\n        this._lastCandidate = undefined;\r\n        this._onDidChange.fire(this._entries.length);\r\n        return toDisposable(() => {\r\n            if (entry) {\r\n                let idx = this._entries.indexOf(entry);\r\n                if (idx >= 0) {\r\n                    this._entries.splice(idx, 1);\r\n                    this._lastCandidate = undefined;\r\n                    this._onDidChange.fire(this._entries.length);\r\n                    entry = undefined;\r\n                }\r\n            }\r\n        });\r\n    }\r\n    has(model) {\r\n        return this.all(model).length > 0;\r\n    }\r\n    all(model) {\r\n        if (!model) {\r\n            return [];\r\n        }\r\n        this._updateScores(model);\r\n        const result = [];\r\n        // from registry\r\n        for (let entry of this._entries) {\r\n            if (entry._score > 0) {\r\n                result.push(entry.provider);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    ordered(model) {\r\n        const result = [];\r\n        this._orderedForEach(model, entry => result.push(entry.provider));\r\n        return result;\r\n    }\r\n    orderedGroups(model) {\r\n        const result = [];\r\n        let lastBucket;\r\n        let lastBucketScore;\r\n        this._orderedForEach(model, entry => {\r\n            if (lastBucket && lastBucketScore === entry._score) {\r\n                lastBucket.push(entry.provider);\r\n            }\r\n            else {\r\n                lastBucketScore = entry._score;\r\n                lastBucket = [entry.provider];\r\n                result.push(lastBucket);\r\n            }\r\n        });\r\n        return result;\r\n    }\r\n    _orderedForEach(model, callback) {\r\n        if (!model) {\r\n            return;\r\n        }\r\n        this._updateScores(model);\r\n        for (const entry of this._entries) {\r\n            if (entry._score > 0) {\r\n                callback(entry);\r\n            }\r\n        }\r\n    }\r\n    _updateScores(model) {\r\n        let candidate = {\r\n            uri: model.uri.toString(),\r\n            language: model.getLanguageIdentifier().language\r\n        };\r\n        if (this._lastCandidate\r\n            && this._lastCandidate.language === candidate.language\r\n            && this._lastCandidate.uri === candidate.uri) {\r\n            // nothing has changed\r\n            return;\r\n        }\r\n        this._lastCandidate = candidate;\r\n        for (let entry of this._entries) {\r\n            entry._score = score(entry.selector, model.uri, model.getLanguageIdentifier().language, shouldSynchronizeModel(model));\r\n            if (isExclusive(entry.selector) && entry._score > 0) {\r\n                // support for one exclusive selector that overwrites\r\n                // any other selector\r\n                for (let entry of this._entries) {\r\n                    entry._score = 0;\r\n                }\r\n                entry._score = 1000;\r\n                break;\r\n            }\r\n        }\r\n        // needs sorting\r\n        this._entries.sort(LanguageFeatureRegistry._compareByScoreAndTime);\r\n    }\r\n    static _compareByScoreAndTime(a, b) {\r\n        if (a._score < b._score) {\r\n            return 1;\r\n        }\r\n        else if (a._score > b._score) {\r\n            return -1;\r\n        }\r\n        else if (a._time < b._time) {\r\n            return 1;\r\n        }\r\n        else if (a._time > b._time) {\r\n            return -1;\r\n        }\r\n        else {\r\n            return 0;\r\n        }\r\n    }\r\n}\r\n/**\r\n * Keeps moving average per model and set of providers so that requests\r\n * can be debounce according to the provider performance\r\n */\r\nexport class LanguageFeatureRequestDelays {\r\n    constructor(_registry, min, max = Number.MAX_SAFE_INTEGER) {\r\n        this._registry = _registry;\r\n        this.min = min;\r\n        this.max = max;\r\n        this._cache = new LRUCache(50, 0.7);\r\n    }\r\n    _key(model) {\r\n        return model.id + hash(this._registry.all(model));\r\n    }\r\n    _clamp(value) {\r\n        if (value === undefined) {\r\n            return this.min;\r\n        }\r\n        else {\r\n            return Math.min(this.max, Math.max(this.min, Math.floor(value * 1.3)));\r\n        }\r\n    }\r\n    get(model) {\r\n        const key = this._key(model);\r\n        const avg = this._cache.get(key);\r\n        return this._clamp(avg === null || avg === void 0 ? void 0 : avg.value);\r\n    }\r\n    update(model, value) {\r\n        const key = this._key(model);\r\n        let avg = this._cache.get(key);\r\n        if (!avg) {\r\n            avg = new MovingAverage();\r\n            this._cache.set(key, avg);\r\n        }\r\n        avg.update(value);\r\n        return this.get(model);\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}