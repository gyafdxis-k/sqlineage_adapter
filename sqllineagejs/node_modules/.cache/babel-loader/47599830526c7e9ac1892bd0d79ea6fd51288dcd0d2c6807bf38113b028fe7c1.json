{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport * as dom from '../../../base/browser/dom.js';\nimport { Color } from '../../../base/common/color.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { TokenizationRegistry, TokenMetadata } from '../../common/modes.js';\nimport { TokenTheme, generateTokensCSSForColorMap } from '../../common/modes/supports/tokenization.js';\nimport { hc_black, vs, vs_dark } from '../common/themes.js';\nimport { Registry } from '../../../platform/registry/common/platform.js';\nimport { Extensions } from '../../../platform/theme/common/colorRegistry.js';\nimport { Extensions as ThemingExtensions } from '../../../platform/theme/common/themeService.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { ColorScheme } from '../../../platform/theme/common/theme.js';\nimport { getIconRegistry } from '../../../platform/theme/common/iconRegistry.js';\nconst VS_THEME_NAME = 'vs';\nconst VS_DARK_THEME_NAME = 'vs-dark';\nconst HC_BLACK_THEME_NAME = 'hc-black';\nconst colorRegistry = Registry.as(Extensions.ColorContribution);\nconst themingRegistry = Registry.as(ThemingExtensions.ThemingContribution);\nclass StandaloneTheme {\n  constructor(name, standaloneThemeData) {\n    this.semanticHighlighting = false;\n    this.themeData = standaloneThemeData;\n    let base = standaloneThemeData.base;\n    if (name.length > 0) {\n      if (isBuiltinTheme(name)) {\n        this.id = name;\n      } else {\n        this.id = base + ' ' + name;\n      }\n      this.themeName = name;\n    } else {\n      this.id = base;\n      this.themeName = base;\n    }\n    this.colors = null;\n    this.defaultColors = Object.create(null);\n    this._tokenTheme = null;\n  }\n  get base() {\n    return this.themeData.base;\n  }\n  notifyBaseUpdated() {\n    if (this.themeData.inherit) {\n      this.colors = null;\n      this._tokenTheme = null;\n    }\n  }\n  getColors() {\n    if (!this.colors) {\n      const colors = new Map();\n      for (let id in this.themeData.colors) {\n        colors.set(id, Color.fromHex(this.themeData.colors[id]));\n      }\n      if (this.themeData.inherit) {\n        let baseData = getBuiltinRules(this.themeData.base);\n        for (let id in baseData.colors) {\n          if (!colors.has(id)) {\n            colors.set(id, Color.fromHex(baseData.colors[id]));\n          }\n        }\n      }\n      this.colors = colors;\n    }\n    return this.colors;\n  }\n  getColor(colorId, useDefault) {\n    const color = this.getColors().get(colorId);\n    if (color) {\n      return color;\n    }\n    if (useDefault !== false) {\n      return this.getDefault(colorId);\n    }\n    return undefined;\n  }\n  getDefault(colorId) {\n    let color = this.defaultColors[colorId];\n    if (color) {\n      return color;\n    }\n    color = colorRegistry.resolveDefaultColor(colorId, this);\n    this.defaultColors[colorId] = color;\n    return color;\n  }\n  defines(colorId) {\n    return Object.prototype.hasOwnProperty.call(this.getColors(), colorId);\n  }\n  get type() {\n    switch (this.base) {\n      case VS_THEME_NAME:\n        return ColorScheme.LIGHT;\n      case HC_BLACK_THEME_NAME:\n        return ColorScheme.HIGH_CONTRAST;\n      default:\n        return ColorScheme.DARK;\n    }\n  }\n  get tokenTheme() {\n    if (!this._tokenTheme) {\n      let rules = [];\n      let encodedTokensColors = [];\n      if (this.themeData.inherit) {\n        let baseData = getBuiltinRules(this.themeData.base);\n        rules = baseData.rules;\n        if (baseData.encodedTokensColors) {\n          encodedTokensColors = baseData.encodedTokensColors;\n        }\n      }\n      rules = rules.concat(this.themeData.rules);\n      if (this.themeData.encodedTokensColors) {\n        encodedTokensColors = this.themeData.encodedTokensColors;\n      }\n      this._tokenTheme = TokenTheme.createFromRawTokenTheme(rules, encodedTokensColors);\n    }\n    return this._tokenTheme;\n  }\n  getTokenStyleMetadata(type, modifiers, modelLanguage) {\n    // use theme rules match\n    const style = this.tokenTheme._match([type].concat(modifiers).join('.'));\n    const metadata = style.metadata;\n    const foreground = TokenMetadata.getForeground(metadata);\n    const fontStyle = TokenMetadata.getFontStyle(metadata);\n    return {\n      foreground: foreground,\n      italic: Boolean(fontStyle & 1 /* Italic */),\n      bold: Boolean(fontStyle & 2 /* Bold */),\n      underline: Boolean(fontStyle & 4 /* Underline */)\n    };\n  }\n}\n\nfunction isBuiltinTheme(themeName) {\n  return themeName === VS_THEME_NAME || themeName === VS_DARK_THEME_NAME || themeName === HC_BLACK_THEME_NAME;\n}\nfunction getBuiltinRules(builtinTheme) {\n  switch (builtinTheme) {\n    case VS_THEME_NAME:\n      return vs;\n    case VS_DARK_THEME_NAME:\n      return vs_dark;\n    case HC_BLACK_THEME_NAME:\n      return hc_black;\n  }\n}\nfunction newBuiltInTheme(builtinTheme) {\n  let themeData = getBuiltinRules(builtinTheme);\n  return new StandaloneTheme(builtinTheme, themeData);\n}\nexport class StandaloneThemeServiceImpl extends Disposable {\n  constructor() {\n    super();\n    this._onColorThemeChange = this._register(new Emitter());\n    this.onDidColorThemeChange = this._onColorThemeChange.event;\n    this._environment = Object.create(null);\n    this._knownThemes = new Map();\n    this._knownThemes.set(VS_THEME_NAME, newBuiltInTheme(VS_THEME_NAME));\n    this._knownThemes.set(VS_DARK_THEME_NAME, newBuiltInTheme(VS_DARK_THEME_NAME));\n    this._knownThemes.set(HC_BLACK_THEME_NAME, newBuiltInTheme(HC_BLACK_THEME_NAME));\n    const iconRegistry = getIconRegistry();\n    this._codiconCSS = iconRegistry.getCSS();\n    this._themeCSS = '';\n    this._allCSS = \"\".concat(this._codiconCSS, \"\\n\").concat(this._themeCSS);\n    this._globalStyleElement = null;\n    this._styleElements = [];\n    this._colorMapOverride = null;\n    this.setTheme(VS_THEME_NAME);\n    iconRegistry.onDidChange(() => {\n      this._codiconCSS = iconRegistry.getCSS();\n      this._updateCSS();\n    });\n  }\n  registerEditorContainer(domNode) {\n    if (dom.isInShadowDOM(domNode)) {\n      return this._registerShadowDomContainer(domNode);\n    }\n    return this._registerRegularEditorContainer();\n  }\n  _registerRegularEditorContainer() {\n    if (!this._globalStyleElement) {\n      this._globalStyleElement = dom.createStyleSheet();\n      this._globalStyleElement.className = 'monaco-colors';\n      this._globalStyleElement.textContent = this._allCSS;\n      this._styleElements.push(this._globalStyleElement);\n    }\n    return Disposable.None;\n  }\n  _registerShadowDomContainer(domNode) {\n    const styleElement = dom.createStyleSheet(domNode);\n    styleElement.className = 'monaco-colors';\n    styleElement.textContent = this._allCSS;\n    this._styleElements.push(styleElement);\n    return {\n      dispose: () => {\n        for (let i = 0; i < this._styleElements.length; i++) {\n          if (this._styleElements[i] === styleElement) {\n            this._styleElements.splice(i, 1);\n            return;\n          }\n        }\n      }\n    };\n  }\n  defineTheme(themeName, themeData) {\n    if (!/^[a-z0-9\\-]+$/i.test(themeName)) {\n      throw new Error('Illegal theme name!');\n    }\n    if (!isBuiltinTheme(themeData.base) && !isBuiltinTheme(themeName)) {\n      throw new Error('Illegal theme base!');\n    }\n    // set or replace theme\n    this._knownThemes.set(themeName, new StandaloneTheme(themeName, themeData));\n    if (isBuiltinTheme(themeName)) {\n      this._knownThemes.forEach(theme => {\n        if (theme.base === themeName) {\n          theme.notifyBaseUpdated();\n        }\n      });\n    }\n    if (this._theme && this._theme.themeName === themeName) {\n      this.setTheme(themeName); // refresh theme\n    }\n  }\n\n  getColorTheme() {\n    return this._theme;\n  }\n  setColorMapOverride(colorMapOverride) {\n    this._colorMapOverride = colorMapOverride;\n    this._updateThemeOrColorMap();\n  }\n  setTheme(themeName) {\n    let theme;\n    if (this._knownThemes.has(themeName)) {\n      theme = this._knownThemes.get(themeName);\n    } else {\n      theme = this._knownThemes.get(VS_THEME_NAME);\n    }\n    if (this._theme === theme) {\n      // Nothing to do\n      return theme.id;\n    }\n    this._theme = theme;\n    this._updateThemeOrColorMap();\n    return theme.id;\n  }\n  _updateThemeOrColorMap() {\n    let cssRules = [];\n    let hasRule = {};\n    let ruleCollector = {\n      addRule: rule => {\n        if (!hasRule[rule]) {\n          cssRules.push(rule);\n          hasRule[rule] = true;\n        }\n      }\n    };\n    themingRegistry.getThemingParticipants().forEach(p => p(this._theme, ruleCollector, this._environment));\n    const colorMap = this._colorMapOverride || this._theme.tokenTheme.getColorMap();\n    ruleCollector.addRule(generateTokensCSSForColorMap(colorMap));\n    this._themeCSS = cssRules.join('\\n');\n    this._updateCSS();\n    TokenizationRegistry.setColorMap(colorMap);\n    this._onColorThemeChange.fire(this._theme);\n  }\n  _updateCSS() {\n    this._allCSS = \"\".concat(this._codiconCSS, \"\\n\").concat(this._themeCSS);\n    this._styleElements.forEach(styleElement => styleElement.textContent = this._allCSS);\n  }\n  getFileIconTheme() {\n    return {\n      hasFileIcons: false,\n      hasFolderIcons: false,\n      hidesExplorerArrows: false\n    };\n  }\n}","map":{"version":3,"names":["dom","Color","Emitter","TokenizationRegistry","TokenMetadata","TokenTheme","generateTokensCSSForColorMap","hc_black","vs","vs_dark","Registry","Extensions","ThemingExtensions","Disposable","ColorScheme","getIconRegistry","VS_THEME_NAME","VS_DARK_THEME_NAME","HC_BLACK_THEME_NAME","colorRegistry","as","ColorContribution","themingRegistry","ThemingContribution","StandaloneTheme","constructor","name","standaloneThemeData","semanticHighlighting","themeData","base","length","isBuiltinTheme","id","themeName","colors","defaultColors","Object","create","_tokenTheme","notifyBaseUpdated","inherit","getColors","Map","set","fromHex","baseData","getBuiltinRules","has","getColor","colorId","useDefault","color","get","getDefault","undefined","resolveDefaultColor","defines","prototype","hasOwnProperty","call","type","LIGHT","HIGH_CONTRAST","DARK","tokenTheme","rules","encodedTokensColors","concat","createFromRawTokenTheme","getTokenStyleMetadata","modifiers","modelLanguage","style","_match","join","metadata","foreground","getForeground","fontStyle","getFontStyle","italic","Boolean","bold","underline","builtinTheme","newBuiltInTheme","StandaloneThemeServiceImpl","_onColorThemeChange","_register","onDidColorThemeChange","event","_environment","_knownThemes","iconRegistry","_codiconCSS","getCSS","_themeCSS","_allCSS","_globalStyleElement","_styleElements","_colorMapOverride","setTheme","onDidChange","_updateCSS","registerEditorContainer","domNode","isInShadowDOM","_registerShadowDomContainer","_registerRegularEditorContainer","createStyleSheet","className","textContent","push","None","styleElement","dispose","i","splice","defineTheme","test","Error","forEach","theme","_theme","getColorTheme","setColorMapOverride","colorMapOverride","_updateThemeOrColorMap","cssRules","hasRule","ruleCollector","addRule","rule","getThemingParticipants","p","colorMap","getColorMap","setColorMap","fire","getFileIconTheme","hasFileIcons","hasFolderIcons","hidesExplorerArrows"],"sources":["C:/Users/Administrator/Desktop/sqllineage-master/sqllineagejs/node_modules/monaco-editor/esm/vs/editor/standalone/browser/standaloneThemeServiceImpl.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport * as dom from '../../../base/browser/dom.js';\r\nimport { Color } from '../../../base/common/color.js';\r\nimport { Emitter } from '../../../base/common/event.js';\r\nimport { TokenizationRegistry, TokenMetadata } from '../../common/modes.js';\r\nimport { TokenTheme, generateTokensCSSForColorMap } from '../../common/modes/supports/tokenization.js';\r\nimport { hc_black, vs, vs_dark } from '../common/themes.js';\r\nimport { Registry } from '../../../platform/registry/common/platform.js';\r\nimport { Extensions } from '../../../platform/theme/common/colorRegistry.js';\r\nimport { Extensions as ThemingExtensions } from '../../../platform/theme/common/themeService.js';\r\nimport { Disposable } from '../../../base/common/lifecycle.js';\r\nimport { ColorScheme } from '../../../platform/theme/common/theme.js';\r\nimport { getIconRegistry } from '../../../platform/theme/common/iconRegistry.js';\r\nconst VS_THEME_NAME = 'vs';\r\nconst VS_DARK_THEME_NAME = 'vs-dark';\r\nconst HC_BLACK_THEME_NAME = 'hc-black';\r\nconst colorRegistry = Registry.as(Extensions.ColorContribution);\r\nconst themingRegistry = Registry.as(ThemingExtensions.ThemingContribution);\r\nclass StandaloneTheme {\r\n    constructor(name, standaloneThemeData) {\r\n        this.semanticHighlighting = false;\r\n        this.themeData = standaloneThemeData;\r\n        let base = standaloneThemeData.base;\r\n        if (name.length > 0) {\r\n            if (isBuiltinTheme(name)) {\r\n                this.id = name;\r\n            }\r\n            else {\r\n                this.id = base + ' ' + name;\r\n            }\r\n            this.themeName = name;\r\n        }\r\n        else {\r\n            this.id = base;\r\n            this.themeName = base;\r\n        }\r\n        this.colors = null;\r\n        this.defaultColors = Object.create(null);\r\n        this._tokenTheme = null;\r\n    }\r\n    get base() {\r\n        return this.themeData.base;\r\n    }\r\n    notifyBaseUpdated() {\r\n        if (this.themeData.inherit) {\r\n            this.colors = null;\r\n            this._tokenTheme = null;\r\n        }\r\n    }\r\n    getColors() {\r\n        if (!this.colors) {\r\n            const colors = new Map();\r\n            for (let id in this.themeData.colors) {\r\n                colors.set(id, Color.fromHex(this.themeData.colors[id]));\r\n            }\r\n            if (this.themeData.inherit) {\r\n                let baseData = getBuiltinRules(this.themeData.base);\r\n                for (let id in baseData.colors) {\r\n                    if (!colors.has(id)) {\r\n                        colors.set(id, Color.fromHex(baseData.colors[id]));\r\n                    }\r\n                }\r\n            }\r\n            this.colors = colors;\r\n        }\r\n        return this.colors;\r\n    }\r\n    getColor(colorId, useDefault) {\r\n        const color = this.getColors().get(colorId);\r\n        if (color) {\r\n            return color;\r\n        }\r\n        if (useDefault !== false) {\r\n            return this.getDefault(colorId);\r\n        }\r\n        return undefined;\r\n    }\r\n    getDefault(colorId) {\r\n        let color = this.defaultColors[colorId];\r\n        if (color) {\r\n            return color;\r\n        }\r\n        color = colorRegistry.resolveDefaultColor(colorId, this);\r\n        this.defaultColors[colorId] = color;\r\n        return color;\r\n    }\r\n    defines(colorId) {\r\n        return Object.prototype.hasOwnProperty.call(this.getColors(), colorId);\r\n    }\r\n    get type() {\r\n        switch (this.base) {\r\n            case VS_THEME_NAME: return ColorScheme.LIGHT;\r\n            case HC_BLACK_THEME_NAME: return ColorScheme.HIGH_CONTRAST;\r\n            default: return ColorScheme.DARK;\r\n        }\r\n    }\r\n    get tokenTheme() {\r\n        if (!this._tokenTheme) {\r\n            let rules = [];\r\n            let encodedTokensColors = [];\r\n            if (this.themeData.inherit) {\r\n                let baseData = getBuiltinRules(this.themeData.base);\r\n                rules = baseData.rules;\r\n                if (baseData.encodedTokensColors) {\r\n                    encodedTokensColors = baseData.encodedTokensColors;\r\n                }\r\n            }\r\n            rules = rules.concat(this.themeData.rules);\r\n            if (this.themeData.encodedTokensColors) {\r\n                encodedTokensColors = this.themeData.encodedTokensColors;\r\n            }\r\n            this._tokenTheme = TokenTheme.createFromRawTokenTheme(rules, encodedTokensColors);\r\n        }\r\n        return this._tokenTheme;\r\n    }\r\n    getTokenStyleMetadata(type, modifiers, modelLanguage) {\r\n        // use theme rules match\r\n        const style = this.tokenTheme._match([type].concat(modifiers).join('.'));\r\n        const metadata = style.metadata;\r\n        const foreground = TokenMetadata.getForeground(metadata);\r\n        const fontStyle = TokenMetadata.getFontStyle(metadata);\r\n        return {\r\n            foreground: foreground,\r\n            italic: Boolean(fontStyle & 1 /* Italic */),\r\n            bold: Boolean(fontStyle & 2 /* Bold */),\r\n            underline: Boolean(fontStyle & 4 /* Underline */)\r\n        };\r\n    }\r\n}\r\nfunction isBuiltinTheme(themeName) {\r\n    return (themeName === VS_THEME_NAME\r\n        || themeName === VS_DARK_THEME_NAME\r\n        || themeName === HC_BLACK_THEME_NAME);\r\n}\r\nfunction getBuiltinRules(builtinTheme) {\r\n    switch (builtinTheme) {\r\n        case VS_THEME_NAME:\r\n            return vs;\r\n        case VS_DARK_THEME_NAME:\r\n            return vs_dark;\r\n        case HC_BLACK_THEME_NAME:\r\n            return hc_black;\r\n    }\r\n}\r\nfunction newBuiltInTheme(builtinTheme) {\r\n    let themeData = getBuiltinRules(builtinTheme);\r\n    return new StandaloneTheme(builtinTheme, themeData);\r\n}\r\nexport class StandaloneThemeServiceImpl extends Disposable {\r\n    constructor() {\r\n        super();\r\n        this._onColorThemeChange = this._register(new Emitter());\r\n        this.onDidColorThemeChange = this._onColorThemeChange.event;\r\n        this._environment = Object.create(null);\r\n        this._knownThemes = new Map();\r\n        this._knownThemes.set(VS_THEME_NAME, newBuiltInTheme(VS_THEME_NAME));\r\n        this._knownThemes.set(VS_DARK_THEME_NAME, newBuiltInTheme(VS_DARK_THEME_NAME));\r\n        this._knownThemes.set(HC_BLACK_THEME_NAME, newBuiltInTheme(HC_BLACK_THEME_NAME));\r\n        const iconRegistry = getIconRegistry();\r\n        this._codiconCSS = iconRegistry.getCSS();\r\n        this._themeCSS = '';\r\n        this._allCSS = `${this._codiconCSS}\\n${this._themeCSS}`;\r\n        this._globalStyleElement = null;\r\n        this._styleElements = [];\r\n        this._colorMapOverride = null;\r\n        this.setTheme(VS_THEME_NAME);\r\n        iconRegistry.onDidChange(() => {\r\n            this._codiconCSS = iconRegistry.getCSS();\r\n            this._updateCSS();\r\n        });\r\n    }\r\n    registerEditorContainer(domNode) {\r\n        if (dom.isInShadowDOM(domNode)) {\r\n            return this._registerShadowDomContainer(domNode);\r\n        }\r\n        return this._registerRegularEditorContainer();\r\n    }\r\n    _registerRegularEditorContainer() {\r\n        if (!this._globalStyleElement) {\r\n            this._globalStyleElement = dom.createStyleSheet();\r\n            this._globalStyleElement.className = 'monaco-colors';\r\n            this._globalStyleElement.textContent = this._allCSS;\r\n            this._styleElements.push(this._globalStyleElement);\r\n        }\r\n        return Disposable.None;\r\n    }\r\n    _registerShadowDomContainer(domNode) {\r\n        const styleElement = dom.createStyleSheet(domNode);\r\n        styleElement.className = 'monaco-colors';\r\n        styleElement.textContent = this._allCSS;\r\n        this._styleElements.push(styleElement);\r\n        return {\r\n            dispose: () => {\r\n                for (let i = 0; i < this._styleElements.length; i++) {\r\n                    if (this._styleElements[i] === styleElement) {\r\n                        this._styleElements.splice(i, 1);\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n        };\r\n    }\r\n    defineTheme(themeName, themeData) {\r\n        if (!/^[a-z0-9\\-]+$/i.test(themeName)) {\r\n            throw new Error('Illegal theme name!');\r\n        }\r\n        if (!isBuiltinTheme(themeData.base) && !isBuiltinTheme(themeName)) {\r\n            throw new Error('Illegal theme base!');\r\n        }\r\n        // set or replace theme\r\n        this._knownThemes.set(themeName, new StandaloneTheme(themeName, themeData));\r\n        if (isBuiltinTheme(themeName)) {\r\n            this._knownThemes.forEach(theme => {\r\n                if (theme.base === themeName) {\r\n                    theme.notifyBaseUpdated();\r\n                }\r\n            });\r\n        }\r\n        if (this._theme && this._theme.themeName === themeName) {\r\n            this.setTheme(themeName); // refresh theme\r\n        }\r\n    }\r\n    getColorTheme() {\r\n        return this._theme;\r\n    }\r\n    setColorMapOverride(colorMapOverride) {\r\n        this._colorMapOverride = colorMapOverride;\r\n        this._updateThemeOrColorMap();\r\n    }\r\n    setTheme(themeName) {\r\n        let theme;\r\n        if (this._knownThemes.has(themeName)) {\r\n            theme = this._knownThemes.get(themeName);\r\n        }\r\n        else {\r\n            theme = this._knownThemes.get(VS_THEME_NAME);\r\n        }\r\n        if (this._theme === theme) {\r\n            // Nothing to do\r\n            return theme.id;\r\n        }\r\n        this._theme = theme;\r\n        this._updateThemeOrColorMap();\r\n        return theme.id;\r\n    }\r\n    _updateThemeOrColorMap() {\r\n        let cssRules = [];\r\n        let hasRule = {};\r\n        let ruleCollector = {\r\n            addRule: (rule) => {\r\n                if (!hasRule[rule]) {\r\n                    cssRules.push(rule);\r\n                    hasRule[rule] = true;\r\n                }\r\n            }\r\n        };\r\n        themingRegistry.getThemingParticipants().forEach(p => p(this._theme, ruleCollector, this._environment));\r\n        const colorMap = this._colorMapOverride || this._theme.tokenTheme.getColorMap();\r\n        ruleCollector.addRule(generateTokensCSSForColorMap(colorMap));\r\n        this._themeCSS = cssRules.join('\\n');\r\n        this._updateCSS();\r\n        TokenizationRegistry.setColorMap(colorMap);\r\n        this._onColorThemeChange.fire(this._theme);\r\n    }\r\n    _updateCSS() {\r\n        this._allCSS = `${this._codiconCSS}\\n${this._themeCSS}`;\r\n        this._styleElements.forEach(styleElement => styleElement.textContent = this._allCSS);\r\n    }\r\n    getFileIconTheme() {\r\n        return {\r\n            hasFileIcons: false,\r\n            hasFolderIcons: false,\r\n            hidesExplorerArrows: false\r\n        };\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}