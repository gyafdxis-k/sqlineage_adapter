{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../nls.js';\nimport { RunOnceScheduler } from '../../../base/common/async.js';\nimport { KeyChord } from '../../../base/common/keyCodes.js';\nimport { Disposable, DisposableStore } from '../../../base/common/lifecycle.js';\nimport { EditorAction, registerEditorAction, registerEditorContribution } from '../../browser/editorExtensions.js';\nimport { CursorMoveCommands } from '../../common/controller/cursorMoveCommands.js';\nimport { Range } from '../../common/core/range.js';\nimport { Selection } from '../../common/core/selection.js';\nimport { EditorContextKeys } from '../../common/editorContextKeys.js';\nimport { OverviewRulerLane } from '../../common/model.js';\nimport { ModelDecorationOptions } from '../../common/model/textModel.js';\nimport { DocumentHighlightProviderRegistry } from '../../common/modes.js';\nimport { CommonFindController } from '../find/findController.js';\nimport { MenuId } from '../../../platform/actions/common/actions.js';\nimport { overviewRulerSelectionHighlightForeground } from '../../../platform/theme/common/colorRegistry.js';\nimport { themeColorFromId } from '../../../platform/theme/common/themeService.js';\nimport { ContextKeyExpr } from '../../../platform/contextkey/common/contextkey.js';\nexport class InsertCursorAbove extends EditorAction {\n  constructor() {\n    super({\n      id: 'editor.action.insertCursorAbove',\n      label: nls.localize('mutlicursor.insertAbove', \"Add Cursor Above\"),\n      alias: 'Add Cursor Above',\n      precondition: undefined,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: 2048 /* CtrlCmd */ | 512 /* Alt */ | 16 /* UpArrow */,\n        linux: {\n          primary: 1024 /* Shift */ | 512 /* Alt */ | 16 /* UpArrow */,\n          secondary: [2048 /* CtrlCmd */ | 1024 /* Shift */ | 16 /* UpArrow */]\n        },\n\n        weight: 100 /* EditorContrib */\n      },\n\n      menuOpts: {\n        menuId: MenuId.MenubarSelectionMenu,\n        group: '3_multi',\n        title: nls.localize({\n          key: 'miInsertCursorAbove',\n          comment: ['&& denotes a mnemonic']\n        }, \"&&Add Cursor Above\"),\n        order: 2\n      }\n    });\n  }\n  run(accessor, editor, args) {\n    if (!editor.hasModel()) {\n      return;\n    }\n    const useLogicalLine = args && args.logicalLine === true;\n    const viewModel = editor._getViewModel();\n    if (viewModel.cursorConfig.readOnly) {\n      return;\n    }\n    viewModel.pushStackElement();\n    viewModel.setCursorStates(args.source, 3 /* Explicit */, CursorMoveCommands.addCursorUp(viewModel, viewModel.getCursorStates(), useLogicalLine));\n    viewModel.revealTopMostCursor(args.source);\n  }\n}\nexport class InsertCursorBelow extends EditorAction {\n  constructor() {\n    super({\n      id: 'editor.action.insertCursorBelow',\n      label: nls.localize('mutlicursor.insertBelow', \"Add Cursor Below\"),\n      alias: 'Add Cursor Below',\n      precondition: undefined,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: 2048 /* CtrlCmd */ | 512 /* Alt */ | 18 /* DownArrow */,\n        linux: {\n          primary: 1024 /* Shift */ | 512 /* Alt */ | 18 /* DownArrow */,\n          secondary: [2048 /* CtrlCmd */ | 1024 /* Shift */ | 18 /* DownArrow */]\n        },\n\n        weight: 100 /* EditorContrib */\n      },\n\n      menuOpts: {\n        menuId: MenuId.MenubarSelectionMenu,\n        group: '3_multi',\n        title: nls.localize({\n          key: 'miInsertCursorBelow',\n          comment: ['&& denotes a mnemonic']\n        }, \"A&&dd Cursor Below\"),\n        order: 3\n      }\n    });\n  }\n  run(accessor, editor, args) {\n    if (!editor.hasModel()) {\n      return;\n    }\n    const useLogicalLine = args && args.logicalLine === true;\n    const viewModel = editor._getViewModel();\n    if (viewModel.cursorConfig.readOnly) {\n      return;\n    }\n    viewModel.pushStackElement();\n    viewModel.setCursorStates(args.source, 3 /* Explicit */, CursorMoveCommands.addCursorDown(viewModel, viewModel.getCursorStates(), useLogicalLine));\n    viewModel.revealBottomMostCursor(args.source);\n  }\n}\nclass InsertCursorAtEndOfEachLineSelected extends EditorAction {\n  constructor() {\n    super({\n      id: 'editor.action.insertCursorAtEndOfEachLineSelected',\n      label: nls.localize('mutlicursor.insertAtEndOfEachLineSelected', \"Add Cursors to Line Ends\"),\n      alias: 'Add Cursors to Line Ends',\n      precondition: undefined,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: 1024 /* Shift */ | 512 /* Alt */ | 39 /* KEY_I */,\n        weight: 100 /* EditorContrib */\n      },\n\n      menuOpts: {\n        menuId: MenuId.MenubarSelectionMenu,\n        group: '3_multi',\n        title: nls.localize({\n          key: 'miInsertCursorAtEndOfEachLineSelected',\n          comment: ['&& denotes a mnemonic']\n        }, \"Add C&&ursors to Line Ends\"),\n        order: 4\n      }\n    });\n  }\n  getCursorsForSelection(selection, model, result) {\n    if (selection.isEmpty()) {\n      return;\n    }\n    for (let i = selection.startLineNumber; i < selection.endLineNumber; i++) {\n      let currentLineMaxColumn = model.getLineMaxColumn(i);\n      result.push(new Selection(i, currentLineMaxColumn, i, currentLineMaxColumn));\n    }\n    if (selection.endColumn > 1) {\n      result.push(new Selection(selection.endLineNumber, selection.endColumn, selection.endLineNumber, selection.endColumn));\n    }\n  }\n  run(accessor, editor) {\n    if (!editor.hasModel()) {\n      return;\n    }\n    const model = editor.getModel();\n    const selections = editor.getSelections();\n    let newSelections = [];\n    selections.forEach(sel => this.getCursorsForSelection(sel, model, newSelections));\n    if (newSelections.length > 0) {\n      editor.setSelections(newSelections);\n    }\n  }\n}\nclass InsertCursorAtEndOfLineSelected extends EditorAction {\n  constructor() {\n    super({\n      id: 'editor.action.addCursorsToBottom',\n      label: nls.localize('mutlicursor.addCursorsToBottom', \"Add Cursors To Bottom\"),\n      alias: 'Add Cursors To Bottom',\n      precondition: undefined\n    });\n  }\n  run(accessor, editor) {\n    if (!editor.hasModel()) {\n      return;\n    }\n    const selections = editor.getSelections();\n    const lineCount = editor.getModel().getLineCount();\n    let newSelections = [];\n    for (let i = selections[0].startLineNumber; i <= lineCount; i++) {\n      newSelections.push(new Selection(i, selections[0].startColumn, i, selections[0].endColumn));\n    }\n    if (newSelections.length > 0) {\n      editor.setSelections(newSelections);\n    }\n  }\n}\nclass InsertCursorAtTopOfLineSelected extends EditorAction {\n  constructor() {\n    super({\n      id: 'editor.action.addCursorsToTop',\n      label: nls.localize('mutlicursor.addCursorsToTop', \"Add Cursors To Top\"),\n      alias: 'Add Cursors To Top',\n      precondition: undefined\n    });\n  }\n  run(accessor, editor) {\n    if (!editor.hasModel()) {\n      return;\n    }\n    const selections = editor.getSelections();\n    let newSelections = [];\n    for (let i = selections[0].startLineNumber; i >= 1; i--) {\n      newSelections.push(new Selection(i, selections[0].startColumn, i, selections[0].endColumn));\n    }\n    if (newSelections.length > 0) {\n      editor.setSelections(newSelections);\n    }\n  }\n}\nexport class MultiCursorSessionResult {\n  constructor(selections, revealRange, revealScrollType) {\n    this.selections = selections;\n    this.revealRange = revealRange;\n    this.revealScrollType = revealScrollType;\n  }\n}\nexport class MultiCursorSession {\n  constructor(_editor, findController, isDisconnectedFromFindController, searchText, wholeWord, matchCase, currentMatch) {\n    this._editor = _editor;\n    this.findController = findController;\n    this.isDisconnectedFromFindController = isDisconnectedFromFindController;\n    this.searchText = searchText;\n    this.wholeWord = wholeWord;\n    this.matchCase = matchCase;\n    this.currentMatch = currentMatch;\n  }\n  static create(editor, findController) {\n    if (!editor.hasModel()) {\n      return null;\n    }\n    const findState = findController.getState();\n    // Find widget owns entirely what we search for if:\n    //  - focus is not in the editor (i.e. it is in the find widget)\n    //  - and the search widget is visible\n    //  - and the search string is non-empty\n    if (!editor.hasTextFocus() && findState.isRevealed && findState.searchString.length > 0) {\n      // Find widget owns what is searched for\n      return new MultiCursorSession(editor, findController, false, findState.searchString, findState.wholeWord, findState.matchCase, null);\n    }\n    // Otherwise, the selection gives the search text, and the find widget gives the search settings\n    // The exception is the find state disassociation case: when beginning with a single, collapsed selection\n    let isDisconnectedFromFindController = false;\n    let wholeWord;\n    let matchCase;\n    const selections = editor.getSelections();\n    if (selections.length === 1 && selections[0].isEmpty()) {\n      isDisconnectedFromFindController = true;\n      wholeWord = true;\n      matchCase = true;\n    } else {\n      wholeWord = findState.wholeWord;\n      matchCase = findState.matchCase;\n    }\n    // Selection owns what is searched for\n    const s = editor.getSelection();\n    let searchText;\n    let currentMatch = null;\n    if (s.isEmpty()) {\n      // selection is empty => expand to current word\n      const word = editor.getConfiguredWordAtPosition(s.getStartPosition());\n      if (!word) {\n        return null;\n      }\n      searchText = word.word;\n      currentMatch = new Selection(s.startLineNumber, word.startColumn, s.startLineNumber, word.endColumn);\n    } else {\n      searchText = editor.getModel().getValueInRange(s).replace(/\\r\\n/g, '\\n');\n    }\n    return new MultiCursorSession(editor, findController, isDisconnectedFromFindController, searchText, wholeWord, matchCase, currentMatch);\n  }\n  addSelectionToNextFindMatch() {\n    if (!this._editor.hasModel()) {\n      return null;\n    }\n    const nextMatch = this._getNextMatch();\n    if (!nextMatch) {\n      return null;\n    }\n    const allSelections = this._editor.getSelections();\n    return new MultiCursorSessionResult(allSelections.concat(nextMatch), nextMatch, 0 /* Smooth */);\n  }\n\n  moveSelectionToNextFindMatch() {\n    if (!this._editor.hasModel()) {\n      return null;\n    }\n    const nextMatch = this._getNextMatch();\n    if (!nextMatch) {\n      return null;\n    }\n    const allSelections = this._editor.getSelections();\n    return new MultiCursorSessionResult(allSelections.slice(0, allSelections.length - 1).concat(nextMatch), nextMatch, 0 /* Smooth */);\n  }\n\n  _getNextMatch() {\n    if (!this._editor.hasModel()) {\n      return null;\n    }\n    if (this.currentMatch) {\n      const result = this.currentMatch;\n      this.currentMatch = null;\n      return result;\n    }\n    this.findController.highlightFindOptions();\n    const allSelections = this._editor.getSelections();\n    const lastAddedSelection = allSelections[allSelections.length - 1];\n    const nextMatch = this._editor.getModel().findNextMatch(this.searchText, lastAddedSelection.getEndPosition(), false, this.matchCase, this.wholeWord ? this._editor.getOption(110 /* wordSeparators */) : null, false);\n    if (!nextMatch) {\n      return null;\n    }\n    return new Selection(nextMatch.range.startLineNumber, nextMatch.range.startColumn, nextMatch.range.endLineNumber, nextMatch.range.endColumn);\n  }\n  addSelectionToPreviousFindMatch() {\n    if (!this._editor.hasModel()) {\n      return null;\n    }\n    const previousMatch = this._getPreviousMatch();\n    if (!previousMatch) {\n      return null;\n    }\n    const allSelections = this._editor.getSelections();\n    return new MultiCursorSessionResult(allSelections.concat(previousMatch), previousMatch, 0 /* Smooth */);\n  }\n\n  moveSelectionToPreviousFindMatch() {\n    if (!this._editor.hasModel()) {\n      return null;\n    }\n    const previousMatch = this._getPreviousMatch();\n    if (!previousMatch) {\n      return null;\n    }\n    const allSelections = this._editor.getSelections();\n    return new MultiCursorSessionResult(allSelections.slice(0, allSelections.length - 1).concat(previousMatch), previousMatch, 0 /* Smooth */);\n  }\n\n  _getPreviousMatch() {\n    if (!this._editor.hasModel()) {\n      return null;\n    }\n    if (this.currentMatch) {\n      const result = this.currentMatch;\n      this.currentMatch = null;\n      return result;\n    }\n    this.findController.highlightFindOptions();\n    const allSelections = this._editor.getSelections();\n    const lastAddedSelection = allSelections[allSelections.length - 1];\n    const previousMatch = this._editor.getModel().findPreviousMatch(this.searchText, lastAddedSelection.getStartPosition(), false, this.matchCase, this.wholeWord ? this._editor.getOption(110 /* wordSeparators */) : null, false);\n    if (!previousMatch) {\n      return null;\n    }\n    return new Selection(previousMatch.range.startLineNumber, previousMatch.range.startColumn, previousMatch.range.endLineNumber, previousMatch.range.endColumn);\n  }\n  selectAll() {\n    if (!this._editor.hasModel()) {\n      return [];\n    }\n    this.findController.highlightFindOptions();\n    return this._editor.getModel().findMatches(this.searchText, true, false, this.matchCase, this.wholeWord ? this._editor.getOption(110 /* wordSeparators */) : null, false, 1073741824 /* MAX_SAFE_SMALL_INTEGER */);\n  }\n}\n\nexport class MultiCursorSelectionController extends Disposable {\n  constructor(editor) {\n    super();\n    this._sessionDispose = this._register(new DisposableStore());\n    this._editor = editor;\n    this._ignoreSelectionChange = false;\n    this._session = null;\n  }\n  static get(editor) {\n    return editor.getContribution(MultiCursorSelectionController.ID);\n  }\n  dispose() {\n    this._endSession();\n    super.dispose();\n  }\n  _beginSessionIfNeeded(findController) {\n    if (!this._session) {\n      // Create a new session\n      const session = MultiCursorSession.create(this._editor, findController);\n      if (!session) {\n        return;\n      }\n      this._session = session;\n      const newState = {\n        searchString: this._session.searchText\n      };\n      if (this._session.isDisconnectedFromFindController) {\n        newState.wholeWordOverride = 1 /* True */;\n        newState.matchCaseOverride = 1 /* True */;\n        newState.isRegexOverride = 2 /* False */;\n      }\n\n      findController.getState().change(newState, false);\n      this._sessionDispose.add(this._editor.onDidChangeCursorSelection(e => {\n        if (this._ignoreSelectionChange) {\n          return;\n        }\n        this._endSession();\n      }));\n      this._sessionDispose.add(this._editor.onDidBlurEditorText(() => {\n        this._endSession();\n      }));\n      this._sessionDispose.add(findController.getState().onFindReplaceStateChange(e => {\n        if (e.matchCase || e.wholeWord) {\n          this._endSession();\n        }\n      }));\n    }\n  }\n  _endSession() {\n    this._sessionDispose.clear();\n    if (this._session && this._session.isDisconnectedFromFindController) {\n      const newState = {\n        wholeWordOverride: 0 /* NotSet */,\n        matchCaseOverride: 0 /* NotSet */,\n        isRegexOverride: 0 /* NotSet */\n      };\n\n      this._session.findController.getState().change(newState, false);\n    }\n    this._session = null;\n  }\n  _setSelections(selections) {\n    this._ignoreSelectionChange = true;\n    this._editor.setSelections(selections);\n    this._ignoreSelectionChange = false;\n  }\n  _expandEmptyToWord(model, selection) {\n    if (!selection.isEmpty()) {\n      return selection;\n    }\n    const word = this._editor.getConfiguredWordAtPosition(selection.getStartPosition());\n    if (!word) {\n      return selection;\n    }\n    return new Selection(selection.startLineNumber, word.startColumn, selection.startLineNumber, word.endColumn);\n  }\n  _applySessionResult(result) {\n    if (!result) {\n      return;\n    }\n    this._setSelections(result.selections);\n    if (result.revealRange) {\n      this._editor.revealRangeInCenterIfOutsideViewport(result.revealRange, result.revealScrollType);\n    }\n  }\n  getSession(findController) {\n    return this._session;\n  }\n  addSelectionToNextFindMatch(findController) {\n    if (!this._editor.hasModel()) {\n      return;\n    }\n    if (!this._session) {\n      // If there are multiple cursors, handle the case where they do not all select the same text.\n      const allSelections = this._editor.getSelections();\n      if (allSelections.length > 1) {\n        const findState = findController.getState();\n        const matchCase = findState.matchCase;\n        const selectionsContainSameText = modelRangesContainSameText(this._editor.getModel(), allSelections, matchCase);\n        if (!selectionsContainSameText) {\n          const model = this._editor.getModel();\n          let resultingSelections = [];\n          for (let i = 0, len = allSelections.length; i < len; i++) {\n            resultingSelections[i] = this._expandEmptyToWord(model, allSelections[i]);\n          }\n          this._editor.setSelections(resultingSelections);\n          return;\n        }\n      }\n    }\n    this._beginSessionIfNeeded(findController);\n    if (this._session) {\n      this._applySessionResult(this._session.addSelectionToNextFindMatch());\n    }\n  }\n  addSelectionToPreviousFindMatch(findController) {\n    this._beginSessionIfNeeded(findController);\n    if (this._session) {\n      this._applySessionResult(this._session.addSelectionToPreviousFindMatch());\n    }\n  }\n  moveSelectionToNextFindMatch(findController) {\n    this._beginSessionIfNeeded(findController);\n    if (this._session) {\n      this._applySessionResult(this._session.moveSelectionToNextFindMatch());\n    }\n  }\n  moveSelectionToPreviousFindMatch(findController) {\n    this._beginSessionIfNeeded(findController);\n    if (this._session) {\n      this._applySessionResult(this._session.moveSelectionToPreviousFindMatch());\n    }\n  }\n  selectAll(findController) {\n    if (!this._editor.hasModel()) {\n      return;\n    }\n    let matches = null;\n    const findState = findController.getState();\n    // Special case: find widget owns entirely what we search for if:\n    // - focus is not in the editor (i.e. it is in the find widget)\n    // - and the search widget is visible\n    // - and the search string is non-empty\n    // - and we're searching for a regex\n    if (findState.isRevealed && findState.searchString.length > 0 && findState.isRegex) {\n      matches = this._editor.getModel().findMatches(findState.searchString, true, findState.isRegex, findState.matchCase, findState.wholeWord ? this._editor.getOption(110 /* wordSeparators */) : null, false, 1073741824 /* MAX_SAFE_SMALL_INTEGER */);\n    } else {\n      this._beginSessionIfNeeded(findController);\n      if (!this._session) {\n        return;\n      }\n      matches = this._session.selectAll();\n    }\n    if (findState.searchScope) {\n      const states = findState.searchScope;\n      let inSelection = [];\n      matches.forEach(match => {\n        states.forEach(state => {\n          if (match.range.endLineNumber <= state.endLineNumber && match.range.startLineNumber >= state.startLineNumber) {\n            inSelection.push(match);\n          }\n        });\n      });\n      matches = inSelection;\n    }\n    if (matches.length > 0) {\n      const editorSelection = this._editor.getSelection();\n      // Have the primary cursor remain the one where the action was invoked\n      for (let i = 0, len = matches.length; i < len; i++) {\n        const match = matches[i];\n        const intersection = match.range.intersectRanges(editorSelection);\n        if (intersection) {\n          // bingo!\n          matches[i] = matches[0];\n          matches[0] = match;\n          break;\n        }\n      }\n      this._setSelections(matches.map(m => new Selection(m.range.startLineNumber, m.range.startColumn, m.range.endLineNumber, m.range.endColumn)));\n    }\n  }\n}\nMultiCursorSelectionController.ID = 'editor.contrib.multiCursorController';\nexport class MultiCursorSelectionControllerAction extends EditorAction {\n  run(accessor, editor) {\n    const multiCursorController = MultiCursorSelectionController.get(editor);\n    if (!multiCursorController) {\n      return;\n    }\n    const findController = CommonFindController.get(editor);\n    if (!findController) {\n      return;\n    }\n    this._run(multiCursorController, findController);\n  }\n}\nexport class AddSelectionToNextFindMatchAction extends MultiCursorSelectionControllerAction {\n  constructor() {\n    super({\n      id: 'editor.action.addSelectionToNextFindMatch',\n      label: nls.localize('addSelectionToNextFindMatch', \"Add Selection To Next Find Match\"),\n      alias: 'Add Selection To Next Find Match',\n      precondition: undefined,\n      kbOpts: {\n        kbExpr: EditorContextKeys.focus,\n        primary: 2048 /* CtrlCmd */ | 34 /* KEY_D */,\n        weight: 100 /* EditorContrib */\n      },\n\n      menuOpts: {\n        menuId: MenuId.MenubarSelectionMenu,\n        group: '3_multi',\n        title: nls.localize({\n          key: 'miAddSelectionToNextFindMatch',\n          comment: ['&& denotes a mnemonic']\n        }, \"Add &&Next Occurrence\"),\n        order: 5\n      }\n    });\n  }\n  _run(multiCursorController, findController) {\n    multiCursorController.addSelectionToNextFindMatch(findController);\n  }\n}\nexport class AddSelectionToPreviousFindMatchAction extends MultiCursorSelectionControllerAction {\n  constructor() {\n    super({\n      id: 'editor.action.addSelectionToPreviousFindMatch',\n      label: nls.localize('addSelectionToPreviousFindMatch', \"Add Selection To Previous Find Match\"),\n      alias: 'Add Selection To Previous Find Match',\n      precondition: undefined,\n      menuOpts: {\n        menuId: MenuId.MenubarSelectionMenu,\n        group: '3_multi',\n        title: nls.localize({\n          key: 'miAddSelectionToPreviousFindMatch',\n          comment: ['&& denotes a mnemonic']\n        }, \"Add P&&revious Occurrence\"),\n        order: 6\n      }\n    });\n  }\n  _run(multiCursorController, findController) {\n    multiCursorController.addSelectionToPreviousFindMatch(findController);\n  }\n}\nexport class MoveSelectionToNextFindMatchAction extends MultiCursorSelectionControllerAction {\n  constructor() {\n    super({\n      id: 'editor.action.moveSelectionToNextFindMatch',\n      label: nls.localize('moveSelectionToNextFindMatch', \"Move Last Selection To Next Find Match\"),\n      alias: 'Move Last Selection To Next Find Match',\n      precondition: undefined,\n      kbOpts: {\n        kbExpr: EditorContextKeys.focus,\n        primary: KeyChord(2048 /* CtrlCmd */ | 41 /* KEY_K */, 2048 /* CtrlCmd */ | 34 /* KEY_D */),\n        weight: 100 /* EditorContrib */\n      }\n    });\n  }\n\n  _run(multiCursorController, findController) {\n    multiCursorController.moveSelectionToNextFindMatch(findController);\n  }\n}\nexport class MoveSelectionToPreviousFindMatchAction extends MultiCursorSelectionControllerAction {\n  constructor() {\n    super({\n      id: 'editor.action.moveSelectionToPreviousFindMatch',\n      label: nls.localize('moveSelectionToPreviousFindMatch', \"Move Last Selection To Previous Find Match\"),\n      alias: 'Move Last Selection To Previous Find Match',\n      precondition: undefined\n    });\n  }\n  _run(multiCursorController, findController) {\n    multiCursorController.moveSelectionToPreviousFindMatch(findController);\n  }\n}\nexport class SelectHighlightsAction extends MultiCursorSelectionControllerAction {\n  constructor() {\n    super({\n      id: 'editor.action.selectHighlights',\n      label: nls.localize('selectAllOccurrencesOfFindMatch', \"Select All Occurrences of Find Match\"),\n      alias: 'Select All Occurrences of Find Match',\n      precondition: undefined,\n      kbOpts: {\n        kbExpr: EditorContextKeys.focus,\n        primary: 2048 /* CtrlCmd */ | 1024 /* Shift */ | 42 /* KEY_L */,\n        weight: 100 /* EditorContrib */\n      },\n\n      menuOpts: {\n        menuId: MenuId.MenubarSelectionMenu,\n        group: '3_multi',\n        title: nls.localize({\n          key: 'miSelectHighlights',\n          comment: ['&& denotes a mnemonic']\n        }, \"Select All &&Occurrences\"),\n        order: 7\n      }\n    });\n  }\n  _run(multiCursorController, findController) {\n    multiCursorController.selectAll(findController);\n  }\n}\nexport class CompatChangeAll extends MultiCursorSelectionControllerAction {\n  constructor() {\n    super({\n      id: 'editor.action.changeAll',\n      label: nls.localize('changeAll.label', \"Change All Occurrences\"),\n      alias: 'Change All Occurrences',\n      precondition: ContextKeyExpr.and(EditorContextKeys.writable, EditorContextKeys.editorTextFocus),\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: 2048 /* CtrlCmd */ | 60 /* F2 */,\n        weight: 100 /* EditorContrib */\n      },\n\n      contextMenuOpts: {\n        group: '1_modification',\n        order: 1.2\n      }\n    });\n  }\n  _run(multiCursorController, findController) {\n    multiCursorController.selectAll(findController);\n  }\n}\nclass SelectionHighlighterState {\n  constructor(searchText, matchCase, wordSeparators, modelVersionId) {\n    this.searchText = searchText;\n    this.matchCase = matchCase;\n    this.wordSeparators = wordSeparators;\n    this.modelVersionId = modelVersionId;\n  }\n  /**\r\n   * Everything equals except for `lastWordUnderCursor`\r\n   */\n  static softEquals(a, b) {\n    if (!a && !b) {\n      return true;\n    }\n    if (!a || !b) {\n      return false;\n    }\n    return a.searchText === b.searchText && a.matchCase === b.matchCase && a.wordSeparators === b.wordSeparators && a.modelVersionId === b.modelVersionId;\n  }\n}\nexport class SelectionHighlighter extends Disposable {\n  constructor(editor) {\n    super();\n    this.editor = editor;\n    this._isEnabled = editor.getOption(92 /* selectionHighlight */);\n    this.decorations = [];\n    this.updateSoon = this._register(new RunOnceScheduler(() => this._update(), 300));\n    this.state = null;\n    this._register(editor.onDidChangeConfiguration(e => {\n      this._isEnabled = editor.getOption(92 /* selectionHighlight */);\n    }));\n\n    this._register(editor.onDidChangeCursorSelection(e => {\n      if (!this._isEnabled) {\n        // Early exit if nothing needs to be done!\n        // Leave some form of early exit check here if you wish to continue being a cursor position change listener ;)\n        return;\n      }\n      if (e.selection.isEmpty()) {\n        if (e.reason === 3 /* Explicit */) {\n          if (this.state) {\n            // no longer valid\n            this._setState(null);\n          }\n          this.updateSoon.schedule();\n        } else {\n          this._setState(null);\n        }\n      } else {\n        this._update();\n      }\n    }));\n    this._register(editor.onDidChangeModel(e => {\n      this._setState(null);\n    }));\n    this._register(editor.onDidChangeModelContent(e => {\n      if (this._isEnabled) {\n        this.updateSoon.schedule();\n      }\n    }));\n    this._register(CommonFindController.get(editor).getState().onFindReplaceStateChange(e => {\n      this._update();\n    }));\n  }\n  _update() {\n    this._setState(SelectionHighlighter._createState(this._isEnabled, this.editor));\n  }\n  static _createState(isEnabled, editor) {\n    if (!isEnabled) {\n      return null;\n    }\n    if (!editor.hasModel()) {\n      return null;\n    }\n    const s = editor.getSelection();\n    if (s.startLineNumber !== s.endLineNumber) {\n      // multiline forbidden for perf reasons\n      return null;\n    }\n    const multiCursorController = MultiCursorSelectionController.get(editor);\n    if (!multiCursorController) {\n      return null;\n    }\n    const findController = CommonFindController.get(editor);\n    if (!findController) {\n      return null;\n    }\n    let r = multiCursorController.getSession(findController);\n    if (!r) {\n      const allSelections = editor.getSelections();\n      if (allSelections.length > 1) {\n        const findState = findController.getState();\n        const matchCase = findState.matchCase;\n        const selectionsContainSameText = modelRangesContainSameText(editor.getModel(), allSelections, matchCase);\n        if (!selectionsContainSameText) {\n          return null;\n        }\n      }\n      r = MultiCursorSession.create(editor, findController);\n    }\n    if (!r) {\n      return null;\n    }\n    if (r.currentMatch) {\n      // This is an empty selection\n      // Do not interfere with semantic word highlighting in the no selection case\n      return null;\n    }\n    if (/^[ \\t]+$/.test(r.searchText)) {\n      // whitespace only selection\n      return null;\n    }\n    if (r.searchText.length > 200) {\n      // very long selection\n      return null;\n    }\n    // TODO: better handling of this case\n    const findState = findController.getState();\n    const caseSensitive = findState.matchCase;\n    // Return early if the find widget shows the exact same matches\n    if (findState.isRevealed) {\n      let findStateSearchString = findState.searchString;\n      if (!caseSensitive) {\n        findStateSearchString = findStateSearchString.toLowerCase();\n      }\n      let mySearchString = r.searchText;\n      if (!caseSensitive) {\n        mySearchString = mySearchString.toLowerCase();\n      }\n      if (findStateSearchString === mySearchString && r.matchCase === findState.matchCase && r.wholeWord === findState.wholeWord && !findState.isRegex) {\n        return null;\n      }\n    }\n    return new SelectionHighlighterState(r.searchText, r.matchCase, r.wholeWord ? editor.getOption(110 /* wordSeparators */) : null, editor.getModel().getVersionId());\n  }\n  _setState(state) {\n    if (SelectionHighlighterState.softEquals(this.state, state)) {\n      this.state = state;\n      return;\n    }\n    this.state = state;\n    if (!this.state) {\n      this.decorations = this.editor.deltaDecorations(this.decorations, []);\n      return;\n    }\n    if (!this.editor.hasModel()) {\n      return;\n    }\n    const model = this.editor.getModel();\n    if (model.isTooLargeForTokenization()) {\n      // the file is too large, so searching word under cursor in the whole document takes is blocking the UI.\n      return;\n    }\n    const hasFindOccurrences = DocumentHighlightProviderRegistry.has(model) && this.editor.getOption(66 /* occurrencesHighlight */);\n    let allMatches = model.findMatches(this.state.searchText, true, false, this.state.matchCase, this.state.wordSeparators, false).map(m => m.range);\n    allMatches.sort(Range.compareRangesUsingStarts);\n    let selections = this.editor.getSelections();\n    selections.sort(Range.compareRangesUsingStarts);\n    // do not overlap with selection (issue #64 and #512)\n    let matches = [];\n    for (let i = 0, j = 0, len = allMatches.length, lenJ = selections.length; i < len;) {\n      const match = allMatches[i];\n      if (j >= lenJ) {\n        // finished all editor selections\n        matches.push(match);\n        i++;\n      } else {\n        const cmp = Range.compareRangesUsingStarts(match, selections[j]);\n        if (cmp < 0) {\n          // match is before sel\n          if (selections[j].isEmpty() || !Range.areIntersecting(match, selections[j])) {\n            matches.push(match);\n          }\n          i++;\n        } else if (cmp > 0) {\n          // sel is before match\n          j++;\n        } else {\n          // sel is equal to match\n          i++;\n          j++;\n        }\n      }\n    }\n    const decorations = matches.map(r => {\n      return {\n        range: r,\n        // Show in overviewRuler only if model has no semantic highlighting\n        options: hasFindOccurrences ? SelectionHighlighter._SELECTION_HIGHLIGHT : SelectionHighlighter._SELECTION_HIGHLIGHT_OVERVIEW\n      };\n    });\n    this.decorations = this.editor.deltaDecorations(this.decorations, decorations);\n  }\n  dispose() {\n    this._setState(null);\n    super.dispose();\n  }\n}\nSelectionHighlighter.ID = 'editor.contrib.selectionHighlighter';\nSelectionHighlighter._SELECTION_HIGHLIGHT_OVERVIEW = ModelDecorationOptions.register({\n  stickiness: 1 /* NeverGrowsWhenTypingAtEdges */,\n  className: 'selectionHighlight',\n  overviewRuler: {\n    color: themeColorFromId(overviewRulerSelectionHighlightForeground),\n    position: OverviewRulerLane.Center\n  }\n});\nSelectionHighlighter._SELECTION_HIGHLIGHT = ModelDecorationOptions.register({\n  stickiness: 1 /* NeverGrowsWhenTypingAtEdges */,\n  className: 'selectionHighlight'\n});\nfunction modelRangesContainSameText(model, ranges, matchCase) {\n  const selectedText = getValueInRange(model, ranges[0], !matchCase);\n  for (let i = 1, len = ranges.length; i < len; i++) {\n    const range = ranges[i];\n    if (range.isEmpty()) {\n      return false;\n    }\n    const thisSelectedText = getValueInRange(model, range, !matchCase);\n    if (selectedText !== thisSelectedText) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction getValueInRange(model, range, toLowerCase) {\n  const text = model.getValueInRange(range);\n  return toLowerCase ? text.toLowerCase() : text;\n}\nregisterEditorContribution(MultiCursorSelectionController.ID, MultiCursorSelectionController);\nregisterEditorContribution(SelectionHighlighter.ID, SelectionHighlighter);\nregisterEditorAction(InsertCursorAbove);\nregisterEditorAction(InsertCursorBelow);\nregisterEditorAction(InsertCursorAtEndOfEachLineSelected);\nregisterEditorAction(AddSelectionToNextFindMatchAction);\nregisterEditorAction(AddSelectionToPreviousFindMatchAction);\nregisterEditorAction(MoveSelectionToNextFindMatchAction);\nregisterEditorAction(MoveSelectionToPreviousFindMatchAction);\nregisterEditorAction(SelectHighlightsAction);\nregisterEditorAction(CompatChangeAll);\nregisterEditorAction(InsertCursorAtEndOfLineSelected);\nregisterEditorAction(InsertCursorAtTopOfLineSelected);","map":{"version":3,"names":["nls","RunOnceScheduler","KeyChord","Disposable","DisposableStore","EditorAction","registerEditorAction","registerEditorContribution","CursorMoveCommands","Range","Selection","EditorContextKeys","OverviewRulerLane","ModelDecorationOptions","DocumentHighlightProviderRegistry","CommonFindController","MenuId","overviewRulerSelectionHighlightForeground","themeColorFromId","ContextKeyExpr","InsertCursorAbove","constructor","id","label","localize","alias","precondition","undefined","kbOpts","kbExpr","editorTextFocus","primary","linux","secondary","weight","menuOpts","menuId","MenubarSelectionMenu","group","title","key","comment","order","run","accessor","editor","args","hasModel","useLogicalLine","logicalLine","viewModel","_getViewModel","cursorConfig","readOnly","pushStackElement","setCursorStates","source","addCursorUp","getCursorStates","revealTopMostCursor","InsertCursorBelow","addCursorDown","revealBottomMostCursor","InsertCursorAtEndOfEachLineSelected","getCursorsForSelection","selection","model","result","isEmpty","i","startLineNumber","endLineNumber","currentLineMaxColumn","getLineMaxColumn","push","endColumn","getModel","selections","getSelections","newSelections","forEach","sel","length","setSelections","InsertCursorAtEndOfLineSelected","lineCount","getLineCount","startColumn","InsertCursorAtTopOfLineSelected","MultiCursorSessionResult","revealRange","revealScrollType","MultiCursorSession","_editor","findController","isDisconnectedFromFindController","searchText","wholeWord","matchCase","currentMatch","create","findState","getState","hasTextFocus","isRevealed","searchString","s","getSelection","word","getConfiguredWordAtPosition","getStartPosition","getValueInRange","replace","addSelectionToNextFindMatch","nextMatch","_getNextMatch","allSelections","concat","moveSelectionToNextFindMatch","slice","highlightFindOptions","lastAddedSelection","findNextMatch","getEndPosition","getOption","range","addSelectionToPreviousFindMatch","previousMatch","_getPreviousMatch","moveSelectionToPreviousFindMatch","findPreviousMatch","selectAll","findMatches","MultiCursorSelectionController","_sessionDispose","_register","_ignoreSelectionChange","_session","get","getContribution","ID","dispose","_endSession","_beginSessionIfNeeded","session","newState","wholeWordOverride","matchCaseOverride","isRegexOverride","change","add","onDidChangeCursorSelection","e","onDidBlurEditorText","onFindReplaceStateChange","clear","_setSelections","_expandEmptyToWord","_applySessionResult","revealRangeInCenterIfOutsideViewport","getSession","selectionsContainSameText","modelRangesContainSameText","resultingSelections","len","matches","isRegex","searchScope","states","inSelection","match","state","editorSelection","intersection","intersectRanges","map","m","MultiCursorSelectionControllerAction","multiCursorController","_run","AddSelectionToNextFindMatchAction","focus","AddSelectionToPreviousFindMatchAction","MoveSelectionToNextFindMatchAction","MoveSelectionToPreviousFindMatchAction","SelectHighlightsAction","CompatChangeAll","and","writable","contextMenuOpts","SelectionHighlighterState","wordSeparators","modelVersionId","softEquals","a","b","SelectionHighlighter","_isEnabled","decorations","updateSoon","_update","onDidChangeConfiguration","reason","_setState","schedule","onDidChangeModel","onDidChangeModelContent","_createState","isEnabled","r","test","caseSensitive","findStateSearchString","toLowerCase","mySearchString","getVersionId","deltaDecorations","isTooLargeForTokenization","hasFindOccurrences","has","allMatches","sort","compareRangesUsingStarts","j","lenJ","cmp","areIntersecting","options","_SELECTION_HIGHLIGHT","_SELECTION_HIGHLIGHT_OVERVIEW","register","stickiness","className","overviewRuler","color","position","Center","ranges","selectedText","thisSelectedText","text"],"sources":["C:/Users/Administrator/Desktop/sqllineage-master/sqllineagejs/node_modules/monaco-editor/esm/vs/editor/contrib/multicursor/multicursor.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport * as nls from '../../../nls.js';\r\nimport { RunOnceScheduler } from '../../../base/common/async.js';\r\nimport { KeyChord } from '../../../base/common/keyCodes.js';\r\nimport { Disposable, DisposableStore } from '../../../base/common/lifecycle.js';\r\nimport { EditorAction, registerEditorAction, registerEditorContribution } from '../../browser/editorExtensions.js';\r\nimport { CursorMoveCommands } from '../../common/controller/cursorMoveCommands.js';\r\nimport { Range } from '../../common/core/range.js';\r\nimport { Selection } from '../../common/core/selection.js';\r\nimport { EditorContextKeys } from '../../common/editorContextKeys.js';\r\nimport { OverviewRulerLane } from '../../common/model.js';\r\nimport { ModelDecorationOptions } from '../../common/model/textModel.js';\r\nimport { DocumentHighlightProviderRegistry } from '../../common/modes.js';\r\nimport { CommonFindController } from '../find/findController.js';\r\nimport { MenuId } from '../../../platform/actions/common/actions.js';\r\nimport { overviewRulerSelectionHighlightForeground } from '../../../platform/theme/common/colorRegistry.js';\r\nimport { themeColorFromId } from '../../../platform/theme/common/themeService.js';\r\nimport { ContextKeyExpr } from '../../../platform/contextkey/common/contextkey.js';\r\nexport class InsertCursorAbove extends EditorAction {\r\n    constructor() {\r\n        super({\r\n            id: 'editor.action.insertCursorAbove',\r\n            label: nls.localize('mutlicursor.insertAbove', \"Add Cursor Above\"),\r\n            alias: 'Add Cursor Above',\r\n            precondition: undefined,\r\n            kbOpts: {\r\n                kbExpr: EditorContextKeys.editorTextFocus,\r\n                primary: 2048 /* CtrlCmd */ | 512 /* Alt */ | 16 /* UpArrow */,\r\n                linux: {\r\n                    primary: 1024 /* Shift */ | 512 /* Alt */ | 16 /* UpArrow */,\r\n                    secondary: [2048 /* CtrlCmd */ | 1024 /* Shift */ | 16 /* UpArrow */]\r\n                },\r\n                weight: 100 /* EditorContrib */\r\n            },\r\n            menuOpts: {\r\n                menuId: MenuId.MenubarSelectionMenu,\r\n                group: '3_multi',\r\n                title: nls.localize({ key: 'miInsertCursorAbove', comment: ['&& denotes a mnemonic'] }, \"&&Add Cursor Above\"),\r\n                order: 2\r\n            }\r\n        });\r\n    }\r\n    run(accessor, editor, args) {\r\n        if (!editor.hasModel()) {\r\n            return;\r\n        }\r\n        const useLogicalLine = (args && args.logicalLine === true);\r\n        const viewModel = editor._getViewModel();\r\n        if (viewModel.cursorConfig.readOnly) {\r\n            return;\r\n        }\r\n        viewModel.pushStackElement();\r\n        viewModel.setCursorStates(args.source, 3 /* Explicit */, CursorMoveCommands.addCursorUp(viewModel, viewModel.getCursorStates(), useLogicalLine));\r\n        viewModel.revealTopMostCursor(args.source);\r\n    }\r\n}\r\nexport class InsertCursorBelow extends EditorAction {\r\n    constructor() {\r\n        super({\r\n            id: 'editor.action.insertCursorBelow',\r\n            label: nls.localize('mutlicursor.insertBelow', \"Add Cursor Below\"),\r\n            alias: 'Add Cursor Below',\r\n            precondition: undefined,\r\n            kbOpts: {\r\n                kbExpr: EditorContextKeys.editorTextFocus,\r\n                primary: 2048 /* CtrlCmd */ | 512 /* Alt */ | 18 /* DownArrow */,\r\n                linux: {\r\n                    primary: 1024 /* Shift */ | 512 /* Alt */ | 18 /* DownArrow */,\r\n                    secondary: [2048 /* CtrlCmd */ | 1024 /* Shift */ | 18 /* DownArrow */]\r\n                },\r\n                weight: 100 /* EditorContrib */\r\n            },\r\n            menuOpts: {\r\n                menuId: MenuId.MenubarSelectionMenu,\r\n                group: '3_multi',\r\n                title: nls.localize({ key: 'miInsertCursorBelow', comment: ['&& denotes a mnemonic'] }, \"A&&dd Cursor Below\"),\r\n                order: 3\r\n            }\r\n        });\r\n    }\r\n    run(accessor, editor, args) {\r\n        if (!editor.hasModel()) {\r\n            return;\r\n        }\r\n        const useLogicalLine = (args && args.logicalLine === true);\r\n        const viewModel = editor._getViewModel();\r\n        if (viewModel.cursorConfig.readOnly) {\r\n            return;\r\n        }\r\n        viewModel.pushStackElement();\r\n        viewModel.setCursorStates(args.source, 3 /* Explicit */, CursorMoveCommands.addCursorDown(viewModel, viewModel.getCursorStates(), useLogicalLine));\r\n        viewModel.revealBottomMostCursor(args.source);\r\n    }\r\n}\r\nclass InsertCursorAtEndOfEachLineSelected extends EditorAction {\r\n    constructor() {\r\n        super({\r\n            id: 'editor.action.insertCursorAtEndOfEachLineSelected',\r\n            label: nls.localize('mutlicursor.insertAtEndOfEachLineSelected', \"Add Cursors to Line Ends\"),\r\n            alias: 'Add Cursors to Line Ends',\r\n            precondition: undefined,\r\n            kbOpts: {\r\n                kbExpr: EditorContextKeys.editorTextFocus,\r\n                primary: 1024 /* Shift */ | 512 /* Alt */ | 39 /* KEY_I */,\r\n                weight: 100 /* EditorContrib */\r\n            },\r\n            menuOpts: {\r\n                menuId: MenuId.MenubarSelectionMenu,\r\n                group: '3_multi',\r\n                title: nls.localize({ key: 'miInsertCursorAtEndOfEachLineSelected', comment: ['&& denotes a mnemonic'] }, \"Add C&&ursors to Line Ends\"),\r\n                order: 4\r\n            }\r\n        });\r\n    }\r\n    getCursorsForSelection(selection, model, result) {\r\n        if (selection.isEmpty()) {\r\n            return;\r\n        }\r\n        for (let i = selection.startLineNumber; i < selection.endLineNumber; i++) {\r\n            let currentLineMaxColumn = model.getLineMaxColumn(i);\r\n            result.push(new Selection(i, currentLineMaxColumn, i, currentLineMaxColumn));\r\n        }\r\n        if (selection.endColumn > 1) {\r\n            result.push(new Selection(selection.endLineNumber, selection.endColumn, selection.endLineNumber, selection.endColumn));\r\n        }\r\n    }\r\n    run(accessor, editor) {\r\n        if (!editor.hasModel()) {\r\n            return;\r\n        }\r\n        const model = editor.getModel();\r\n        const selections = editor.getSelections();\r\n        let newSelections = [];\r\n        selections.forEach((sel) => this.getCursorsForSelection(sel, model, newSelections));\r\n        if (newSelections.length > 0) {\r\n            editor.setSelections(newSelections);\r\n        }\r\n    }\r\n}\r\nclass InsertCursorAtEndOfLineSelected extends EditorAction {\r\n    constructor() {\r\n        super({\r\n            id: 'editor.action.addCursorsToBottom',\r\n            label: nls.localize('mutlicursor.addCursorsToBottom', \"Add Cursors To Bottom\"),\r\n            alias: 'Add Cursors To Bottom',\r\n            precondition: undefined\r\n        });\r\n    }\r\n    run(accessor, editor) {\r\n        if (!editor.hasModel()) {\r\n            return;\r\n        }\r\n        const selections = editor.getSelections();\r\n        const lineCount = editor.getModel().getLineCount();\r\n        let newSelections = [];\r\n        for (let i = selections[0].startLineNumber; i <= lineCount; i++) {\r\n            newSelections.push(new Selection(i, selections[0].startColumn, i, selections[0].endColumn));\r\n        }\r\n        if (newSelections.length > 0) {\r\n            editor.setSelections(newSelections);\r\n        }\r\n    }\r\n}\r\nclass InsertCursorAtTopOfLineSelected extends EditorAction {\r\n    constructor() {\r\n        super({\r\n            id: 'editor.action.addCursorsToTop',\r\n            label: nls.localize('mutlicursor.addCursorsToTop', \"Add Cursors To Top\"),\r\n            alias: 'Add Cursors To Top',\r\n            precondition: undefined\r\n        });\r\n    }\r\n    run(accessor, editor) {\r\n        if (!editor.hasModel()) {\r\n            return;\r\n        }\r\n        const selections = editor.getSelections();\r\n        let newSelections = [];\r\n        for (let i = selections[0].startLineNumber; i >= 1; i--) {\r\n            newSelections.push(new Selection(i, selections[0].startColumn, i, selections[0].endColumn));\r\n        }\r\n        if (newSelections.length > 0) {\r\n            editor.setSelections(newSelections);\r\n        }\r\n    }\r\n}\r\nexport class MultiCursorSessionResult {\r\n    constructor(selections, revealRange, revealScrollType) {\r\n        this.selections = selections;\r\n        this.revealRange = revealRange;\r\n        this.revealScrollType = revealScrollType;\r\n    }\r\n}\r\nexport class MultiCursorSession {\r\n    constructor(_editor, findController, isDisconnectedFromFindController, searchText, wholeWord, matchCase, currentMatch) {\r\n        this._editor = _editor;\r\n        this.findController = findController;\r\n        this.isDisconnectedFromFindController = isDisconnectedFromFindController;\r\n        this.searchText = searchText;\r\n        this.wholeWord = wholeWord;\r\n        this.matchCase = matchCase;\r\n        this.currentMatch = currentMatch;\r\n    }\r\n    static create(editor, findController) {\r\n        if (!editor.hasModel()) {\r\n            return null;\r\n        }\r\n        const findState = findController.getState();\r\n        // Find widget owns entirely what we search for if:\r\n        //  - focus is not in the editor (i.e. it is in the find widget)\r\n        //  - and the search widget is visible\r\n        //  - and the search string is non-empty\r\n        if (!editor.hasTextFocus() && findState.isRevealed && findState.searchString.length > 0) {\r\n            // Find widget owns what is searched for\r\n            return new MultiCursorSession(editor, findController, false, findState.searchString, findState.wholeWord, findState.matchCase, null);\r\n        }\r\n        // Otherwise, the selection gives the search text, and the find widget gives the search settings\r\n        // The exception is the find state disassociation case: when beginning with a single, collapsed selection\r\n        let isDisconnectedFromFindController = false;\r\n        let wholeWord;\r\n        let matchCase;\r\n        const selections = editor.getSelections();\r\n        if (selections.length === 1 && selections[0].isEmpty()) {\r\n            isDisconnectedFromFindController = true;\r\n            wholeWord = true;\r\n            matchCase = true;\r\n        }\r\n        else {\r\n            wholeWord = findState.wholeWord;\r\n            matchCase = findState.matchCase;\r\n        }\r\n        // Selection owns what is searched for\r\n        const s = editor.getSelection();\r\n        let searchText;\r\n        let currentMatch = null;\r\n        if (s.isEmpty()) {\r\n            // selection is empty => expand to current word\r\n            const word = editor.getConfiguredWordAtPosition(s.getStartPosition());\r\n            if (!word) {\r\n                return null;\r\n            }\r\n            searchText = word.word;\r\n            currentMatch = new Selection(s.startLineNumber, word.startColumn, s.startLineNumber, word.endColumn);\r\n        }\r\n        else {\r\n            searchText = editor.getModel().getValueInRange(s).replace(/\\r\\n/g, '\\n');\r\n        }\r\n        return new MultiCursorSession(editor, findController, isDisconnectedFromFindController, searchText, wholeWord, matchCase, currentMatch);\r\n    }\r\n    addSelectionToNextFindMatch() {\r\n        if (!this._editor.hasModel()) {\r\n            return null;\r\n        }\r\n        const nextMatch = this._getNextMatch();\r\n        if (!nextMatch) {\r\n            return null;\r\n        }\r\n        const allSelections = this._editor.getSelections();\r\n        return new MultiCursorSessionResult(allSelections.concat(nextMatch), nextMatch, 0 /* Smooth */);\r\n    }\r\n    moveSelectionToNextFindMatch() {\r\n        if (!this._editor.hasModel()) {\r\n            return null;\r\n        }\r\n        const nextMatch = this._getNextMatch();\r\n        if (!nextMatch) {\r\n            return null;\r\n        }\r\n        const allSelections = this._editor.getSelections();\r\n        return new MultiCursorSessionResult(allSelections.slice(0, allSelections.length - 1).concat(nextMatch), nextMatch, 0 /* Smooth */);\r\n    }\r\n    _getNextMatch() {\r\n        if (!this._editor.hasModel()) {\r\n            return null;\r\n        }\r\n        if (this.currentMatch) {\r\n            const result = this.currentMatch;\r\n            this.currentMatch = null;\r\n            return result;\r\n        }\r\n        this.findController.highlightFindOptions();\r\n        const allSelections = this._editor.getSelections();\r\n        const lastAddedSelection = allSelections[allSelections.length - 1];\r\n        const nextMatch = this._editor.getModel().findNextMatch(this.searchText, lastAddedSelection.getEndPosition(), false, this.matchCase, this.wholeWord ? this._editor.getOption(110 /* wordSeparators */) : null, false);\r\n        if (!nextMatch) {\r\n            return null;\r\n        }\r\n        return new Selection(nextMatch.range.startLineNumber, nextMatch.range.startColumn, nextMatch.range.endLineNumber, nextMatch.range.endColumn);\r\n    }\r\n    addSelectionToPreviousFindMatch() {\r\n        if (!this._editor.hasModel()) {\r\n            return null;\r\n        }\r\n        const previousMatch = this._getPreviousMatch();\r\n        if (!previousMatch) {\r\n            return null;\r\n        }\r\n        const allSelections = this._editor.getSelections();\r\n        return new MultiCursorSessionResult(allSelections.concat(previousMatch), previousMatch, 0 /* Smooth */);\r\n    }\r\n    moveSelectionToPreviousFindMatch() {\r\n        if (!this._editor.hasModel()) {\r\n            return null;\r\n        }\r\n        const previousMatch = this._getPreviousMatch();\r\n        if (!previousMatch) {\r\n            return null;\r\n        }\r\n        const allSelections = this._editor.getSelections();\r\n        return new MultiCursorSessionResult(allSelections.slice(0, allSelections.length - 1).concat(previousMatch), previousMatch, 0 /* Smooth */);\r\n    }\r\n    _getPreviousMatch() {\r\n        if (!this._editor.hasModel()) {\r\n            return null;\r\n        }\r\n        if (this.currentMatch) {\r\n            const result = this.currentMatch;\r\n            this.currentMatch = null;\r\n            return result;\r\n        }\r\n        this.findController.highlightFindOptions();\r\n        const allSelections = this._editor.getSelections();\r\n        const lastAddedSelection = allSelections[allSelections.length - 1];\r\n        const previousMatch = this._editor.getModel().findPreviousMatch(this.searchText, lastAddedSelection.getStartPosition(), false, this.matchCase, this.wholeWord ? this._editor.getOption(110 /* wordSeparators */) : null, false);\r\n        if (!previousMatch) {\r\n            return null;\r\n        }\r\n        return new Selection(previousMatch.range.startLineNumber, previousMatch.range.startColumn, previousMatch.range.endLineNumber, previousMatch.range.endColumn);\r\n    }\r\n    selectAll() {\r\n        if (!this._editor.hasModel()) {\r\n            return [];\r\n        }\r\n        this.findController.highlightFindOptions();\r\n        return this._editor.getModel().findMatches(this.searchText, true, false, this.matchCase, this.wholeWord ? this._editor.getOption(110 /* wordSeparators */) : null, false, 1073741824 /* MAX_SAFE_SMALL_INTEGER */);\r\n    }\r\n}\r\nexport class MultiCursorSelectionController extends Disposable {\r\n    constructor(editor) {\r\n        super();\r\n        this._sessionDispose = this._register(new DisposableStore());\r\n        this._editor = editor;\r\n        this._ignoreSelectionChange = false;\r\n        this._session = null;\r\n    }\r\n    static get(editor) {\r\n        return editor.getContribution(MultiCursorSelectionController.ID);\r\n    }\r\n    dispose() {\r\n        this._endSession();\r\n        super.dispose();\r\n    }\r\n    _beginSessionIfNeeded(findController) {\r\n        if (!this._session) {\r\n            // Create a new session\r\n            const session = MultiCursorSession.create(this._editor, findController);\r\n            if (!session) {\r\n                return;\r\n            }\r\n            this._session = session;\r\n            const newState = { searchString: this._session.searchText };\r\n            if (this._session.isDisconnectedFromFindController) {\r\n                newState.wholeWordOverride = 1 /* True */;\r\n                newState.matchCaseOverride = 1 /* True */;\r\n                newState.isRegexOverride = 2 /* False */;\r\n            }\r\n            findController.getState().change(newState, false);\r\n            this._sessionDispose.add(this._editor.onDidChangeCursorSelection((e) => {\r\n                if (this._ignoreSelectionChange) {\r\n                    return;\r\n                }\r\n                this._endSession();\r\n            }));\r\n            this._sessionDispose.add(this._editor.onDidBlurEditorText(() => {\r\n                this._endSession();\r\n            }));\r\n            this._sessionDispose.add(findController.getState().onFindReplaceStateChange((e) => {\r\n                if (e.matchCase || e.wholeWord) {\r\n                    this._endSession();\r\n                }\r\n            }));\r\n        }\r\n    }\r\n    _endSession() {\r\n        this._sessionDispose.clear();\r\n        if (this._session && this._session.isDisconnectedFromFindController) {\r\n            const newState = {\r\n                wholeWordOverride: 0 /* NotSet */,\r\n                matchCaseOverride: 0 /* NotSet */,\r\n                isRegexOverride: 0 /* NotSet */,\r\n            };\r\n            this._session.findController.getState().change(newState, false);\r\n        }\r\n        this._session = null;\r\n    }\r\n    _setSelections(selections) {\r\n        this._ignoreSelectionChange = true;\r\n        this._editor.setSelections(selections);\r\n        this._ignoreSelectionChange = false;\r\n    }\r\n    _expandEmptyToWord(model, selection) {\r\n        if (!selection.isEmpty()) {\r\n            return selection;\r\n        }\r\n        const word = this._editor.getConfiguredWordAtPosition(selection.getStartPosition());\r\n        if (!word) {\r\n            return selection;\r\n        }\r\n        return new Selection(selection.startLineNumber, word.startColumn, selection.startLineNumber, word.endColumn);\r\n    }\r\n    _applySessionResult(result) {\r\n        if (!result) {\r\n            return;\r\n        }\r\n        this._setSelections(result.selections);\r\n        if (result.revealRange) {\r\n            this._editor.revealRangeInCenterIfOutsideViewport(result.revealRange, result.revealScrollType);\r\n        }\r\n    }\r\n    getSession(findController) {\r\n        return this._session;\r\n    }\r\n    addSelectionToNextFindMatch(findController) {\r\n        if (!this._editor.hasModel()) {\r\n            return;\r\n        }\r\n        if (!this._session) {\r\n            // If there are multiple cursors, handle the case where they do not all select the same text.\r\n            const allSelections = this._editor.getSelections();\r\n            if (allSelections.length > 1) {\r\n                const findState = findController.getState();\r\n                const matchCase = findState.matchCase;\r\n                const selectionsContainSameText = modelRangesContainSameText(this._editor.getModel(), allSelections, matchCase);\r\n                if (!selectionsContainSameText) {\r\n                    const model = this._editor.getModel();\r\n                    let resultingSelections = [];\r\n                    for (let i = 0, len = allSelections.length; i < len; i++) {\r\n                        resultingSelections[i] = this._expandEmptyToWord(model, allSelections[i]);\r\n                    }\r\n                    this._editor.setSelections(resultingSelections);\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n        this._beginSessionIfNeeded(findController);\r\n        if (this._session) {\r\n            this._applySessionResult(this._session.addSelectionToNextFindMatch());\r\n        }\r\n    }\r\n    addSelectionToPreviousFindMatch(findController) {\r\n        this._beginSessionIfNeeded(findController);\r\n        if (this._session) {\r\n            this._applySessionResult(this._session.addSelectionToPreviousFindMatch());\r\n        }\r\n    }\r\n    moveSelectionToNextFindMatch(findController) {\r\n        this._beginSessionIfNeeded(findController);\r\n        if (this._session) {\r\n            this._applySessionResult(this._session.moveSelectionToNextFindMatch());\r\n        }\r\n    }\r\n    moveSelectionToPreviousFindMatch(findController) {\r\n        this._beginSessionIfNeeded(findController);\r\n        if (this._session) {\r\n            this._applySessionResult(this._session.moveSelectionToPreviousFindMatch());\r\n        }\r\n    }\r\n    selectAll(findController) {\r\n        if (!this._editor.hasModel()) {\r\n            return;\r\n        }\r\n        let matches = null;\r\n        const findState = findController.getState();\r\n        // Special case: find widget owns entirely what we search for if:\r\n        // - focus is not in the editor (i.e. it is in the find widget)\r\n        // - and the search widget is visible\r\n        // - and the search string is non-empty\r\n        // - and we're searching for a regex\r\n        if (findState.isRevealed && findState.searchString.length > 0 && findState.isRegex) {\r\n            matches = this._editor.getModel().findMatches(findState.searchString, true, findState.isRegex, findState.matchCase, findState.wholeWord ? this._editor.getOption(110 /* wordSeparators */) : null, false, 1073741824 /* MAX_SAFE_SMALL_INTEGER */);\r\n        }\r\n        else {\r\n            this._beginSessionIfNeeded(findController);\r\n            if (!this._session) {\r\n                return;\r\n            }\r\n            matches = this._session.selectAll();\r\n        }\r\n        if (findState.searchScope) {\r\n            const states = findState.searchScope;\r\n            let inSelection = [];\r\n            matches.forEach((match) => {\r\n                states.forEach((state) => {\r\n                    if (match.range.endLineNumber <= state.endLineNumber && match.range.startLineNumber >= state.startLineNumber) {\r\n                        inSelection.push(match);\r\n                    }\r\n                });\r\n            });\r\n            matches = inSelection;\r\n        }\r\n        if (matches.length > 0) {\r\n            const editorSelection = this._editor.getSelection();\r\n            // Have the primary cursor remain the one where the action was invoked\r\n            for (let i = 0, len = matches.length; i < len; i++) {\r\n                const match = matches[i];\r\n                const intersection = match.range.intersectRanges(editorSelection);\r\n                if (intersection) {\r\n                    // bingo!\r\n                    matches[i] = matches[0];\r\n                    matches[0] = match;\r\n                    break;\r\n                }\r\n            }\r\n            this._setSelections(matches.map(m => new Selection(m.range.startLineNumber, m.range.startColumn, m.range.endLineNumber, m.range.endColumn)));\r\n        }\r\n    }\r\n}\r\nMultiCursorSelectionController.ID = 'editor.contrib.multiCursorController';\r\nexport class MultiCursorSelectionControllerAction extends EditorAction {\r\n    run(accessor, editor) {\r\n        const multiCursorController = MultiCursorSelectionController.get(editor);\r\n        if (!multiCursorController) {\r\n            return;\r\n        }\r\n        const findController = CommonFindController.get(editor);\r\n        if (!findController) {\r\n            return;\r\n        }\r\n        this._run(multiCursorController, findController);\r\n    }\r\n}\r\nexport class AddSelectionToNextFindMatchAction extends MultiCursorSelectionControllerAction {\r\n    constructor() {\r\n        super({\r\n            id: 'editor.action.addSelectionToNextFindMatch',\r\n            label: nls.localize('addSelectionToNextFindMatch', \"Add Selection To Next Find Match\"),\r\n            alias: 'Add Selection To Next Find Match',\r\n            precondition: undefined,\r\n            kbOpts: {\r\n                kbExpr: EditorContextKeys.focus,\r\n                primary: 2048 /* CtrlCmd */ | 34 /* KEY_D */,\r\n                weight: 100 /* EditorContrib */\r\n            },\r\n            menuOpts: {\r\n                menuId: MenuId.MenubarSelectionMenu,\r\n                group: '3_multi',\r\n                title: nls.localize({ key: 'miAddSelectionToNextFindMatch', comment: ['&& denotes a mnemonic'] }, \"Add &&Next Occurrence\"),\r\n                order: 5\r\n            }\r\n        });\r\n    }\r\n    _run(multiCursorController, findController) {\r\n        multiCursorController.addSelectionToNextFindMatch(findController);\r\n    }\r\n}\r\nexport class AddSelectionToPreviousFindMatchAction extends MultiCursorSelectionControllerAction {\r\n    constructor() {\r\n        super({\r\n            id: 'editor.action.addSelectionToPreviousFindMatch',\r\n            label: nls.localize('addSelectionToPreviousFindMatch', \"Add Selection To Previous Find Match\"),\r\n            alias: 'Add Selection To Previous Find Match',\r\n            precondition: undefined,\r\n            menuOpts: {\r\n                menuId: MenuId.MenubarSelectionMenu,\r\n                group: '3_multi',\r\n                title: nls.localize({ key: 'miAddSelectionToPreviousFindMatch', comment: ['&& denotes a mnemonic'] }, \"Add P&&revious Occurrence\"),\r\n                order: 6\r\n            }\r\n        });\r\n    }\r\n    _run(multiCursorController, findController) {\r\n        multiCursorController.addSelectionToPreviousFindMatch(findController);\r\n    }\r\n}\r\nexport class MoveSelectionToNextFindMatchAction extends MultiCursorSelectionControllerAction {\r\n    constructor() {\r\n        super({\r\n            id: 'editor.action.moveSelectionToNextFindMatch',\r\n            label: nls.localize('moveSelectionToNextFindMatch', \"Move Last Selection To Next Find Match\"),\r\n            alias: 'Move Last Selection To Next Find Match',\r\n            precondition: undefined,\r\n            kbOpts: {\r\n                kbExpr: EditorContextKeys.focus,\r\n                primary: KeyChord(2048 /* CtrlCmd */ | 41 /* KEY_K */, 2048 /* CtrlCmd */ | 34 /* KEY_D */),\r\n                weight: 100 /* EditorContrib */\r\n            }\r\n        });\r\n    }\r\n    _run(multiCursorController, findController) {\r\n        multiCursorController.moveSelectionToNextFindMatch(findController);\r\n    }\r\n}\r\nexport class MoveSelectionToPreviousFindMatchAction extends MultiCursorSelectionControllerAction {\r\n    constructor() {\r\n        super({\r\n            id: 'editor.action.moveSelectionToPreviousFindMatch',\r\n            label: nls.localize('moveSelectionToPreviousFindMatch', \"Move Last Selection To Previous Find Match\"),\r\n            alias: 'Move Last Selection To Previous Find Match',\r\n            precondition: undefined\r\n        });\r\n    }\r\n    _run(multiCursorController, findController) {\r\n        multiCursorController.moveSelectionToPreviousFindMatch(findController);\r\n    }\r\n}\r\nexport class SelectHighlightsAction extends MultiCursorSelectionControllerAction {\r\n    constructor() {\r\n        super({\r\n            id: 'editor.action.selectHighlights',\r\n            label: nls.localize('selectAllOccurrencesOfFindMatch', \"Select All Occurrences of Find Match\"),\r\n            alias: 'Select All Occurrences of Find Match',\r\n            precondition: undefined,\r\n            kbOpts: {\r\n                kbExpr: EditorContextKeys.focus,\r\n                primary: 2048 /* CtrlCmd */ | 1024 /* Shift */ | 42 /* KEY_L */,\r\n                weight: 100 /* EditorContrib */\r\n            },\r\n            menuOpts: {\r\n                menuId: MenuId.MenubarSelectionMenu,\r\n                group: '3_multi',\r\n                title: nls.localize({ key: 'miSelectHighlights', comment: ['&& denotes a mnemonic'] }, \"Select All &&Occurrences\"),\r\n                order: 7\r\n            }\r\n        });\r\n    }\r\n    _run(multiCursorController, findController) {\r\n        multiCursorController.selectAll(findController);\r\n    }\r\n}\r\nexport class CompatChangeAll extends MultiCursorSelectionControllerAction {\r\n    constructor() {\r\n        super({\r\n            id: 'editor.action.changeAll',\r\n            label: nls.localize('changeAll.label', \"Change All Occurrences\"),\r\n            alias: 'Change All Occurrences',\r\n            precondition: ContextKeyExpr.and(EditorContextKeys.writable, EditorContextKeys.editorTextFocus),\r\n            kbOpts: {\r\n                kbExpr: EditorContextKeys.editorTextFocus,\r\n                primary: 2048 /* CtrlCmd */ | 60 /* F2 */,\r\n                weight: 100 /* EditorContrib */\r\n            },\r\n            contextMenuOpts: {\r\n                group: '1_modification',\r\n                order: 1.2\r\n            }\r\n        });\r\n    }\r\n    _run(multiCursorController, findController) {\r\n        multiCursorController.selectAll(findController);\r\n    }\r\n}\r\nclass SelectionHighlighterState {\r\n    constructor(searchText, matchCase, wordSeparators, modelVersionId) {\r\n        this.searchText = searchText;\r\n        this.matchCase = matchCase;\r\n        this.wordSeparators = wordSeparators;\r\n        this.modelVersionId = modelVersionId;\r\n    }\r\n    /**\r\n     * Everything equals except for `lastWordUnderCursor`\r\n     */\r\n    static softEquals(a, b) {\r\n        if (!a && !b) {\r\n            return true;\r\n        }\r\n        if (!a || !b) {\r\n            return false;\r\n        }\r\n        return (a.searchText === b.searchText\r\n            && a.matchCase === b.matchCase\r\n            && a.wordSeparators === b.wordSeparators\r\n            && a.modelVersionId === b.modelVersionId);\r\n    }\r\n}\r\nexport class SelectionHighlighter extends Disposable {\r\n    constructor(editor) {\r\n        super();\r\n        this.editor = editor;\r\n        this._isEnabled = editor.getOption(92 /* selectionHighlight */);\r\n        this.decorations = [];\r\n        this.updateSoon = this._register(new RunOnceScheduler(() => this._update(), 300));\r\n        this.state = null;\r\n        this._register(editor.onDidChangeConfiguration((e) => {\r\n            this._isEnabled = editor.getOption(92 /* selectionHighlight */);\r\n        }));\r\n        this._register(editor.onDidChangeCursorSelection((e) => {\r\n            if (!this._isEnabled) {\r\n                // Early exit if nothing needs to be done!\r\n                // Leave some form of early exit check here if you wish to continue being a cursor position change listener ;)\r\n                return;\r\n            }\r\n            if (e.selection.isEmpty()) {\r\n                if (e.reason === 3 /* Explicit */) {\r\n                    if (this.state) {\r\n                        // no longer valid\r\n                        this._setState(null);\r\n                    }\r\n                    this.updateSoon.schedule();\r\n                }\r\n                else {\r\n                    this._setState(null);\r\n                }\r\n            }\r\n            else {\r\n                this._update();\r\n            }\r\n        }));\r\n        this._register(editor.onDidChangeModel((e) => {\r\n            this._setState(null);\r\n        }));\r\n        this._register(editor.onDidChangeModelContent((e) => {\r\n            if (this._isEnabled) {\r\n                this.updateSoon.schedule();\r\n            }\r\n        }));\r\n        this._register(CommonFindController.get(editor).getState().onFindReplaceStateChange((e) => {\r\n            this._update();\r\n        }));\r\n    }\r\n    _update() {\r\n        this._setState(SelectionHighlighter._createState(this._isEnabled, this.editor));\r\n    }\r\n    static _createState(isEnabled, editor) {\r\n        if (!isEnabled) {\r\n            return null;\r\n        }\r\n        if (!editor.hasModel()) {\r\n            return null;\r\n        }\r\n        const s = editor.getSelection();\r\n        if (s.startLineNumber !== s.endLineNumber) {\r\n            // multiline forbidden for perf reasons\r\n            return null;\r\n        }\r\n        const multiCursorController = MultiCursorSelectionController.get(editor);\r\n        if (!multiCursorController) {\r\n            return null;\r\n        }\r\n        const findController = CommonFindController.get(editor);\r\n        if (!findController) {\r\n            return null;\r\n        }\r\n        let r = multiCursorController.getSession(findController);\r\n        if (!r) {\r\n            const allSelections = editor.getSelections();\r\n            if (allSelections.length > 1) {\r\n                const findState = findController.getState();\r\n                const matchCase = findState.matchCase;\r\n                const selectionsContainSameText = modelRangesContainSameText(editor.getModel(), allSelections, matchCase);\r\n                if (!selectionsContainSameText) {\r\n                    return null;\r\n                }\r\n            }\r\n            r = MultiCursorSession.create(editor, findController);\r\n        }\r\n        if (!r) {\r\n            return null;\r\n        }\r\n        if (r.currentMatch) {\r\n            // This is an empty selection\r\n            // Do not interfere with semantic word highlighting in the no selection case\r\n            return null;\r\n        }\r\n        if (/^[ \\t]+$/.test(r.searchText)) {\r\n            // whitespace only selection\r\n            return null;\r\n        }\r\n        if (r.searchText.length > 200) {\r\n            // very long selection\r\n            return null;\r\n        }\r\n        // TODO: better handling of this case\r\n        const findState = findController.getState();\r\n        const caseSensitive = findState.matchCase;\r\n        // Return early if the find widget shows the exact same matches\r\n        if (findState.isRevealed) {\r\n            let findStateSearchString = findState.searchString;\r\n            if (!caseSensitive) {\r\n                findStateSearchString = findStateSearchString.toLowerCase();\r\n            }\r\n            let mySearchString = r.searchText;\r\n            if (!caseSensitive) {\r\n                mySearchString = mySearchString.toLowerCase();\r\n            }\r\n            if (findStateSearchString === mySearchString && r.matchCase === findState.matchCase && r.wholeWord === findState.wholeWord && !findState.isRegex) {\r\n                return null;\r\n            }\r\n        }\r\n        return new SelectionHighlighterState(r.searchText, r.matchCase, r.wholeWord ? editor.getOption(110 /* wordSeparators */) : null, editor.getModel().getVersionId());\r\n    }\r\n    _setState(state) {\r\n        if (SelectionHighlighterState.softEquals(this.state, state)) {\r\n            this.state = state;\r\n            return;\r\n        }\r\n        this.state = state;\r\n        if (!this.state) {\r\n            this.decorations = this.editor.deltaDecorations(this.decorations, []);\r\n            return;\r\n        }\r\n        if (!this.editor.hasModel()) {\r\n            return;\r\n        }\r\n        const model = this.editor.getModel();\r\n        if (model.isTooLargeForTokenization()) {\r\n            // the file is too large, so searching word under cursor in the whole document takes is blocking the UI.\r\n            return;\r\n        }\r\n        const hasFindOccurrences = DocumentHighlightProviderRegistry.has(model) && this.editor.getOption(66 /* occurrencesHighlight */);\r\n        let allMatches = model.findMatches(this.state.searchText, true, false, this.state.matchCase, this.state.wordSeparators, false).map(m => m.range);\r\n        allMatches.sort(Range.compareRangesUsingStarts);\r\n        let selections = this.editor.getSelections();\r\n        selections.sort(Range.compareRangesUsingStarts);\r\n        // do not overlap with selection (issue #64 and #512)\r\n        let matches = [];\r\n        for (let i = 0, j = 0, len = allMatches.length, lenJ = selections.length; i < len;) {\r\n            const match = allMatches[i];\r\n            if (j >= lenJ) {\r\n                // finished all editor selections\r\n                matches.push(match);\r\n                i++;\r\n            }\r\n            else {\r\n                const cmp = Range.compareRangesUsingStarts(match, selections[j]);\r\n                if (cmp < 0) {\r\n                    // match is before sel\r\n                    if (selections[j].isEmpty() || !Range.areIntersecting(match, selections[j])) {\r\n                        matches.push(match);\r\n                    }\r\n                    i++;\r\n                }\r\n                else if (cmp > 0) {\r\n                    // sel is before match\r\n                    j++;\r\n                }\r\n                else {\r\n                    // sel is equal to match\r\n                    i++;\r\n                    j++;\r\n                }\r\n            }\r\n        }\r\n        const decorations = matches.map(r => {\r\n            return {\r\n                range: r,\r\n                // Show in overviewRuler only if model has no semantic highlighting\r\n                options: (hasFindOccurrences ? SelectionHighlighter._SELECTION_HIGHLIGHT : SelectionHighlighter._SELECTION_HIGHLIGHT_OVERVIEW)\r\n            };\r\n        });\r\n        this.decorations = this.editor.deltaDecorations(this.decorations, decorations);\r\n    }\r\n    dispose() {\r\n        this._setState(null);\r\n        super.dispose();\r\n    }\r\n}\r\nSelectionHighlighter.ID = 'editor.contrib.selectionHighlighter';\r\nSelectionHighlighter._SELECTION_HIGHLIGHT_OVERVIEW = ModelDecorationOptions.register({\r\n    stickiness: 1 /* NeverGrowsWhenTypingAtEdges */,\r\n    className: 'selectionHighlight',\r\n    overviewRuler: {\r\n        color: themeColorFromId(overviewRulerSelectionHighlightForeground),\r\n        position: OverviewRulerLane.Center\r\n    }\r\n});\r\nSelectionHighlighter._SELECTION_HIGHLIGHT = ModelDecorationOptions.register({\r\n    stickiness: 1 /* NeverGrowsWhenTypingAtEdges */,\r\n    className: 'selectionHighlight',\r\n});\r\nfunction modelRangesContainSameText(model, ranges, matchCase) {\r\n    const selectedText = getValueInRange(model, ranges[0], !matchCase);\r\n    for (let i = 1, len = ranges.length; i < len; i++) {\r\n        const range = ranges[i];\r\n        if (range.isEmpty()) {\r\n            return false;\r\n        }\r\n        const thisSelectedText = getValueInRange(model, range, !matchCase);\r\n        if (selectedText !== thisSelectedText) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction getValueInRange(model, range, toLowerCase) {\r\n    const text = model.getValueInRange(range);\r\n    return (toLowerCase ? text.toLowerCase() : text);\r\n}\r\nregisterEditorContribution(MultiCursorSelectionController.ID, MultiCursorSelectionController);\r\nregisterEditorContribution(SelectionHighlighter.ID, SelectionHighlighter);\r\nregisterEditorAction(InsertCursorAbove);\r\nregisterEditorAction(InsertCursorBelow);\r\nregisterEditorAction(InsertCursorAtEndOfEachLineSelected);\r\nregisterEditorAction(AddSelectionToNextFindMatchAction);\r\nregisterEditorAction(AddSelectionToPreviousFindMatchAction);\r\nregisterEditorAction(MoveSelectionToNextFindMatchAction);\r\nregisterEditorAction(MoveSelectionToPreviousFindMatchAction);\r\nregisterEditorAction(SelectHighlightsAction);\r\nregisterEditorAction(CompatChangeAll);\r\nregisterEditorAction(InsertCursorAtEndOfLineSelected);\r\nregisterEditorAction(InsertCursorAtTopOfLineSelected);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}