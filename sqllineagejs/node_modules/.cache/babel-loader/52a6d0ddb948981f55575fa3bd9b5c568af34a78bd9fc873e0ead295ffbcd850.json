{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport * as nls from '../../../nls.js';\nimport * as browser from '../../../base/browser/browser.js';\nimport * as platform from '../../../base/common/platform.js';\nimport { CopyOptions, InMemoryClipboardMetadataManager } from '../../browser/controller/textAreaInput.js';\nimport { EditorAction, registerEditorAction, MultiCommand } from '../../browser/editorExtensions.js';\nimport { ICodeEditorService } from '../../browser/services/codeEditorService.js';\nimport { EditorContextKeys } from '../../common/editorContextKeys.js';\nimport { MenuId } from '../../../platform/actions/common/actions.js';\nimport { IClipboardService } from '../../../platform/clipboard/common/clipboardService.js';\nconst CLIPBOARD_CONTEXT_MENU_GROUP = '9_cutcopypaste';\nconst supportsCut = platform.isNative || document.queryCommandSupported('cut');\nconst supportsCopy = platform.isNative || document.queryCommandSupported('copy');\n// IE and Edge have trouble with setting html content in clipboard\nconst supportsCopyWithSyntaxHighlighting = supportsCopy && !browser.isEdgeLegacy;\n// Firefox only supports navigator.clipboard.readText() in browser extensions.\n// See https://developer.mozilla.org/en-US/docs/Web/API/Clipboard/readText#Browser_compatibility\n// When loading over http, navigator.clipboard can be undefined. See https://github.com/microsoft/monaco-editor/issues/2313\nconst supportsPaste = typeof navigator.clipboard === 'undefined' || browser.isFirefox ? document.queryCommandSupported('paste') : true;\nfunction registerCommand(command) {\n  command.register();\n  return command;\n}\nexport const CutAction = supportsCut ? registerCommand(new MultiCommand({\n  id: 'editor.action.clipboardCutAction',\n  precondition: undefined,\n  kbOpts:\n  // Do not bind cut keybindings in the browser,\n  // since browsers do that for us and it avoids security prompts\n  platform.isNative ? {\n    primary: 2048 /* CtrlCmd */ | 54 /* KEY_X */,\n    win: {\n      primary: 2048 /* CtrlCmd */ | 54 /* KEY_X */,\n      secondary: [1024 /* Shift */ | 20 /* Delete */]\n    },\n    weight: 100 /* EditorContrib */\n  } : undefined,\n  menuOpts: [{\n    menuId: MenuId.MenubarEditMenu,\n    group: '2_ccp',\n    title: nls.localize({\n      key: 'miCut',\n      comment: ['&& denotes a mnemonic']\n    }, \"Cu&&t\"),\n    order: 1\n  }, {\n    menuId: MenuId.EditorContext,\n    group: CLIPBOARD_CONTEXT_MENU_GROUP,\n    title: nls.localize('actions.clipboard.cutLabel', \"Cut\"),\n    when: EditorContextKeys.writable,\n    order: 1\n  }, {\n    menuId: MenuId.CommandPalette,\n    group: '',\n    title: nls.localize('actions.clipboard.cutLabel', \"Cut\"),\n    order: 1\n  }]\n})) : undefined;\nexport const CopyAction = supportsCopy ? registerCommand(new MultiCommand({\n  id: 'editor.action.clipboardCopyAction',\n  precondition: undefined,\n  kbOpts:\n  // Do not bind copy keybindings in the browser,\n  // since browsers do that for us and it avoids security prompts\n  platform.isNative ? {\n    primary: 2048 /* CtrlCmd */ | 33 /* KEY_C */,\n    win: {\n      primary: 2048 /* CtrlCmd */ | 33 /* KEY_C */,\n      secondary: [2048 /* CtrlCmd */ | 19 /* Insert */]\n    },\n    weight: 100 /* EditorContrib */\n  } : undefined,\n  menuOpts: [{\n    menuId: MenuId.MenubarEditMenu,\n    group: '2_ccp',\n    title: nls.localize({\n      key: 'miCopy',\n      comment: ['&& denotes a mnemonic']\n    }, \"&&Copy\"),\n    order: 2\n  }, {\n    menuId: MenuId.EditorContext,\n    group: CLIPBOARD_CONTEXT_MENU_GROUP,\n    title: nls.localize('actions.clipboard.copyLabel', \"Copy\"),\n    order: 2\n  }, {\n    menuId: MenuId.CommandPalette,\n    group: '',\n    title: nls.localize('actions.clipboard.copyLabel', \"Copy\"),\n    order: 1\n  }]\n})) : undefined;\nexport const PasteAction = supportsPaste ? registerCommand(new MultiCommand({\n  id: 'editor.action.clipboardPasteAction',\n  precondition: undefined,\n  kbOpts:\n  // Do not bind paste keybindings in the browser,\n  // since browsers do that for us and it avoids security prompts\n  platform.isNative ? {\n    primary: 2048 /* CtrlCmd */ | 52 /* KEY_V */,\n    win: {\n      primary: 2048 /* CtrlCmd */ | 52 /* KEY_V */,\n      secondary: [1024 /* Shift */ | 19 /* Insert */]\n    },\n    linux: {\n      primary: 2048 /* CtrlCmd */ | 52 /* KEY_V */,\n      secondary: [1024 /* Shift */ | 19 /* Insert */]\n    },\n    weight: 100 /* EditorContrib */\n  } : undefined,\n  menuOpts: [{\n    menuId: MenuId.MenubarEditMenu,\n    group: '2_ccp',\n    title: nls.localize({\n      key: 'miPaste',\n      comment: ['&& denotes a mnemonic']\n    }, \"&&Paste\"),\n    order: 3\n  }, {\n    menuId: MenuId.EditorContext,\n    group: CLIPBOARD_CONTEXT_MENU_GROUP,\n    title: nls.localize('actions.clipboard.pasteLabel', \"Paste\"),\n    when: EditorContextKeys.writable,\n    order: 3\n  }, {\n    menuId: MenuId.CommandPalette,\n    group: '',\n    title: nls.localize('actions.clipboard.pasteLabel', \"Paste\"),\n    order: 1\n  }]\n})) : undefined;\nclass ExecCommandCopyWithSyntaxHighlightingAction extends EditorAction {\n  constructor() {\n    super({\n      id: 'editor.action.clipboardCopyWithSyntaxHighlightingAction',\n      label: nls.localize('actions.clipboard.copyWithSyntaxHighlightingLabel', \"Copy With Syntax Highlighting\"),\n      alias: 'Copy With Syntax Highlighting',\n      precondition: undefined,\n      kbOpts: {\n        kbExpr: EditorContextKeys.textInputFocus,\n        primary: 0,\n        weight: 100 /* EditorContrib */\n      }\n    });\n  }\n\n  run(accessor, editor) {\n    if (!editor.hasModel()) {\n      return;\n    }\n    const emptySelectionClipboard = editor.getOption(28 /* emptySelectionClipboard */);\n    if (!emptySelectionClipboard && editor.getSelection().isEmpty()) {\n      return;\n    }\n    CopyOptions.forceCopyWithSyntaxHighlighting = true;\n    editor.focus();\n    document.execCommand('copy');\n    CopyOptions.forceCopyWithSyntaxHighlighting = false;\n  }\n}\nfunction registerExecCommandImpl(target, browserCommand) {\n  if (!target) {\n    return;\n  }\n  // 1. handle case when focus is in editor.\n  target.addImplementation(10000, (accessor, args) => {\n    // Only if editor text focus (i.e. not if editor has widget focus).\n    const focusedEditor = accessor.get(ICodeEditorService).getFocusedCodeEditor();\n    if (focusedEditor && focusedEditor.hasTextFocus()) {\n      // Do not execute if there is no selection and empty selection clipboard is off\n      const emptySelectionClipboard = focusedEditor.getOption(28 /* emptySelectionClipboard */);\n      const selection = focusedEditor.getSelection();\n      if (selection && selection.isEmpty() && !emptySelectionClipboard) {\n        return true;\n      }\n      document.execCommand(browserCommand);\n      return true;\n    }\n    return false;\n  });\n  // 2. (default) handle case when focus is somewhere else.\n  target.addImplementation(0, (accessor, args) => {\n    document.execCommand(browserCommand);\n    return true;\n  });\n}\nregisterExecCommandImpl(CutAction, 'cut');\nregisterExecCommandImpl(CopyAction, 'copy');\nif (PasteAction) {\n  // 1. Paste: handle case when focus is in editor.\n  PasteAction.addImplementation(10000, (accessor, args) => {\n    const codeEditorService = accessor.get(ICodeEditorService);\n    const clipboardService = accessor.get(IClipboardService);\n    // Only if editor text focus (i.e. not if editor has widget focus).\n    const focusedEditor = codeEditorService.getFocusedCodeEditor();\n    if (focusedEditor && focusedEditor.hasTextFocus()) {\n      const result = document.execCommand('paste');\n      // Use the clipboard service if document.execCommand('paste') was not successful\n      if (!result && platform.isWeb) {\n        (() => __awaiter(void 0, void 0, void 0, function* () {\n          const clipboardText = yield clipboardService.readText();\n          if (clipboardText !== '') {\n            const metadata = InMemoryClipboardMetadataManager.INSTANCE.get(clipboardText);\n            let pasteOnNewLine = false;\n            let multicursorText = null;\n            let mode = null;\n            if (metadata) {\n              pasteOnNewLine = focusedEditor.getOption(28 /* emptySelectionClipboard */) && !!metadata.isFromEmptySelection;\n              multicursorText = typeof metadata.multicursorText !== 'undefined' ? metadata.multicursorText : null;\n              mode = metadata.mode;\n            }\n            focusedEditor.trigger('keyboard', \"paste\" /* Paste */, {\n              text: clipboardText,\n              pasteOnNewLine,\n              multicursorText,\n              mode\n            });\n          }\n        }))();\n        return true;\n      }\n      return true;\n    }\n    return false;\n  });\n  // 2. Paste: (default) handle case when focus is somewhere else.\n  PasteAction.addImplementation(0, (accessor, args) => {\n    document.execCommand('paste');\n    return true;\n  });\n}\nif (supportsCopyWithSyntaxHighlighting) {\n  registerEditorAction(ExecCommandCopyWithSyntaxHighlightingAction);\n}","map":{"version":3,"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","nls","browser","platform","CopyOptions","InMemoryClipboardMetadataManager","EditorAction","registerEditorAction","MultiCommand","ICodeEditorService","EditorContextKeys","MenuId","IClipboardService","CLIPBOARD_CONTEXT_MENU_GROUP","supportsCut","isNative","document","queryCommandSupported","supportsCopy","supportsCopyWithSyntaxHighlighting","isEdgeLegacy","supportsPaste","navigator","clipboard","isFirefox","registerCommand","command","register","CutAction","id","precondition","undefined","kbOpts","primary","win","secondary","weight","menuOpts","menuId","MenubarEditMenu","group","title","localize","key","comment","order","EditorContext","when","writable","CommandPalette","CopyAction","PasteAction","linux","ExecCommandCopyWithSyntaxHighlightingAction","constructor","label","alias","kbExpr","textInputFocus","run","accessor","editor","hasModel","emptySelectionClipboard","getOption","getSelection","isEmpty","forceCopyWithSyntaxHighlighting","focus","execCommand","registerExecCommandImpl","target","browserCommand","addImplementation","args","focusedEditor","get","getFocusedCodeEditor","hasTextFocus","selection","codeEditorService","clipboardService","isWeb","clipboardText","readText","metadata","INSTANCE","pasteOnNewLine","multicursorText","mode","isFromEmptySelection","trigger","text"],"sources":["C:/Users/Administrator/Desktop/sqllineage-master/sqllineagejs/node_modules/monaco-editor/esm/vs/editor/contrib/clipboard/clipboard.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nimport * as nls from '../../../nls.js';\r\nimport * as browser from '../../../base/browser/browser.js';\r\nimport * as platform from '../../../base/common/platform.js';\r\nimport { CopyOptions, InMemoryClipboardMetadataManager } from '../../browser/controller/textAreaInput.js';\r\nimport { EditorAction, registerEditorAction, MultiCommand } from '../../browser/editorExtensions.js';\r\nimport { ICodeEditorService } from '../../browser/services/codeEditorService.js';\r\nimport { EditorContextKeys } from '../../common/editorContextKeys.js';\r\nimport { MenuId } from '../../../platform/actions/common/actions.js';\r\nimport { IClipboardService } from '../../../platform/clipboard/common/clipboardService.js';\r\nconst CLIPBOARD_CONTEXT_MENU_GROUP = '9_cutcopypaste';\r\nconst supportsCut = (platform.isNative || document.queryCommandSupported('cut'));\r\nconst supportsCopy = (platform.isNative || document.queryCommandSupported('copy'));\r\n// IE and Edge have trouble with setting html content in clipboard\r\nconst supportsCopyWithSyntaxHighlighting = (supportsCopy && !browser.isEdgeLegacy);\r\n// Firefox only supports navigator.clipboard.readText() in browser extensions.\r\n// See https://developer.mozilla.org/en-US/docs/Web/API/Clipboard/readText#Browser_compatibility\r\n// When loading over http, navigator.clipboard can be undefined. See https://github.com/microsoft/monaco-editor/issues/2313\r\nconst supportsPaste = (typeof navigator.clipboard === 'undefined' || browser.isFirefox) ? document.queryCommandSupported('paste') : true;\r\nfunction registerCommand(command) {\r\n    command.register();\r\n    return command;\r\n}\r\nexport const CutAction = supportsCut ? registerCommand(new MultiCommand({\r\n    id: 'editor.action.clipboardCutAction',\r\n    precondition: undefined,\r\n    kbOpts: (\r\n    // Do not bind cut keybindings in the browser,\r\n    // since browsers do that for us and it avoids security prompts\r\n    platform.isNative ? {\r\n        primary: 2048 /* CtrlCmd */ | 54 /* KEY_X */,\r\n        win: { primary: 2048 /* CtrlCmd */ | 54 /* KEY_X */, secondary: [1024 /* Shift */ | 20 /* Delete */] },\r\n        weight: 100 /* EditorContrib */\r\n    } : undefined),\r\n    menuOpts: [{\r\n            menuId: MenuId.MenubarEditMenu,\r\n            group: '2_ccp',\r\n            title: nls.localize({ key: 'miCut', comment: ['&& denotes a mnemonic'] }, \"Cu&&t\"),\r\n            order: 1\r\n        }, {\r\n            menuId: MenuId.EditorContext,\r\n            group: CLIPBOARD_CONTEXT_MENU_GROUP,\r\n            title: nls.localize('actions.clipboard.cutLabel', \"Cut\"),\r\n            when: EditorContextKeys.writable,\r\n            order: 1,\r\n        }, {\r\n            menuId: MenuId.CommandPalette,\r\n            group: '',\r\n            title: nls.localize('actions.clipboard.cutLabel', \"Cut\"),\r\n            order: 1\r\n        }]\r\n})) : undefined;\r\nexport const CopyAction = supportsCopy ? registerCommand(new MultiCommand({\r\n    id: 'editor.action.clipboardCopyAction',\r\n    precondition: undefined,\r\n    kbOpts: (\r\n    // Do not bind copy keybindings in the browser,\r\n    // since browsers do that for us and it avoids security prompts\r\n    platform.isNative ? {\r\n        primary: 2048 /* CtrlCmd */ | 33 /* KEY_C */,\r\n        win: { primary: 2048 /* CtrlCmd */ | 33 /* KEY_C */, secondary: [2048 /* CtrlCmd */ | 19 /* Insert */] },\r\n        weight: 100 /* EditorContrib */\r\n    } : undefined),\r\n    menuOpts: [{\r\n            menuId: MenuId.MenubarEditMenu,\r\n            group: '2_ccp',\r\n            title: nls.localize({ key: 'miCopy', comment: ['&& denotes a mnemonic'] }, \"&&Copy\"),\r\n            order: 2\r\n        }, {\r\n            menuId: MenuId.EditorContext,\r\n            group: CLIPBOARD_CONTEXT_MENU_GROUP,\r\n            title: nls.localize('actions.clipboard.copyLabel', \"Copy\"),\r\n            order: 2,\r\n        }, {\r\n            menuId: MenuId.CommandPalette,\r\n            group: '',\r\n            title: nls.localize('actions.clipboard.copyLabel', \"Copy\"),\r\n            order: 1\r\n        }]\r\n})) : undefined;\r\nexport const PasteAction = supportsPaste ? registerCommand(new MultiCommand({\r\n    id: 'editor.action.clipboardPasteAction',\r\n    precondition: undefined,\r\n    kbOpts: (\r\n    // Do not bind paste keybindings in the browser,\r\n    // since browsers do that for us and it avoids security prompts\r\n    platform.isNative ? {\r\n        primary: 2048 /* CtrlCmd */ | 52 /* KEY_V */,\r\n        win: { primary: 2048 /* CtrlCmd */ | 52 /* KEY_V */, secondary: [1024 /* Shift */ | 19 /* Insert */] },\r\n        linux: { primary: 2048 /* CtrlCmd */ | 52 /* KEY_V */, secondary: [1024 /* Shift */ | 19 /* Insert */] },\r\n        weight: 100 /* EditorContrib */\r\n    } : undefined),\r\n    menuOpts: [{\r\n            menuId: MenuId.MenubarEditMenu,\r\n            group: '2_ccp',\r\n            title: nls.localize({ key: 'miPaste', comment: ['&& denotes a mnemonic'] }, \"&&Paste\"),\r\n            order: 3\r\n        }, {\r\n            menuId: MenuId.EditorContext,\r\n            group: CLIPBOARD_CONTEXT_MENU_GROUP,\r\n            title: nls.localize('actions.clipboard.pasteLabel', \"Paste\"),\r\n            when: EditorContextKeys.writable,\r\n            order: 3,\r\n        }, {\r\n            menuId: MenuId.CommandPalette,\r\n            group: '',\r\n            title: nls.localize('actions.clipboard.pasteLabel', \"Paste\"),\r\n            order: 1\r\n        }]\r\n})) : undefined;\r\nclass ExecCommandCopyWithSyntaxHighlightingAction extends EditorAction {\r\n    constructor() {\r\n        super({\r\n            id: 'editor.action.clipboardCopyWithSyntaxHighlightingAction',\r\n            label: nls.localize('actions.clipboard.copyWithSyntaxHighlightingLabel', \"Copy With Syntax Highlighting\"),\r\n            alias: 'Copy With Syntax Highlighting',\r\n            precondition: undefined,\r\n            kbOpts: {\r\n                kbExpr: EditorContextKeys.textInputFocus,\r\n                primary: 0,\r\n                weight: 100 /* EditorContrib */\r\n            }\r\n        });\r\n    }\r\n    run(accessor, editor) {\r\n        if (!editor.hasModel()) {\r\n            return;\r\n        }\r\n        const emptySelectionClipboard = editor.getOption(28 /* emptySelectionClipboard */);\r\n        if (!emptySelectionClipboard && editor.getSelection().isEmpty()) {\r\n            return;\r\n        }\r\n        CopyOptions.forceCopyWithSyntaxHighlighting = true;\r\n        editor.focus();\r\n        document.execCommand('copy');\r\n        CopyOptions.forceCopyWithSyntaxHighlighting = false;\r\n    }\r\n}\r\nfunction registerExecCommandImpl(target, browserCommand) {\r\n    if (!target) {\r\n        return;\r\n    }\r\n    // 1. handle case when focus is in editor.\r\n    target.addImplementation(10000, (accessor, args) => {\r\n        // Only if editor text focus (i.e. not if editor has widget focus).\r\n        const focusedEditor = accessor.get(ICodeEditorService).getFocusedCodeEditor();\r\n        if (focusedEditor && focusedEditor.hasTextFocus()) {\r\n            // Do not execute if there is no selection and empty selection clipboard is off\r\n            const emptySelectionClipboard = focusedEditor.getOption(28 /* emptySelectionClipboard */);\r\n            const selection = focusedEditor.getSelection();\r\n            if (selection && selection.isEmpty() && !emptySelectionClipboard) {\r\n                return true;\r\n            }\r\n            document.execCommand(browserCommand);\r\n            return true;\r\n        }\r\n        return false;\r\n    });\r\n    // 2. (default) handle case when focus is somewhere else.\r\n    target.addImplementation(0, (accessor, args) => {\r\n        document.execCommand(browserCommand);\r\n        return true;\r\n    });\r\n}\r\nregisterExecCommandImpl(CutAction, 'cut');\r\nregisterExecCommandImpl(CopyAction, 'copy');\r\nif (PasteAction) {\r\n    // 1. Paste: handle case when focus is in editor.\r\n    PasteAction.addImplementation(10000, (accessor, args) => {\r\n        const codeEditorService = accessor.get(ICodeEditorService);\r\n        const clipboardService = accessor.get(IClipboardService);\r\n        // Only if editor text focus (i.e. not if editor has widget focus).\r\n        const focusedEditor = codeEditorService.getFocusedCodeEditor();\r\n        if (focusedEditor && focusedEditor.hasTextFocus()) {\r\n            const result = document.execCommand('paste');\r\n            // Use the clipboard service if document.execCommand('paste') was not successful\r\n            if (!result && platform.isWeb) {\r\n                (() => __awaiter(void 0, void 0, void 0, function* () {\r\n                    const clipboardText = yield clipboardService.readText();\r\n                    if (clipboardText !== '') {\r\n                        const metadata = InMemoryClipboardMetadataManager.INSTANCE.get(clipboardText);\r\n                        let pasteOnNewLine = false;\r\n                        let multicursorText = null;\r\n                        let mode = null;\r\n                        if (metadata) {\r\n                            pasteOnNewLine = (focusedEditor.getOption(28 /* emptySelectionClipboard */) && !!metadata.isFromEmptySelection);\r\n                            multicursorText = (typeof metadata.multicursorText !== 'undefined' ? metadata.multicursorText : null);\r\n                            mode = metadata.mode;\r\n                        }\r\n                        focusedEditor.trigger('keyboard', \"paste\" /* Paste */, {\r\n                            text: clipboardText,\r\n                            pasteOnNewLine,\r\n                            multicursorText,\r\n                            mode\r\n                        });\r\n                    }\r\n                }))();\r\n                return true;\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    });\r\n    // 2. Paste: (default) handle case when focus is somewhere else.\r\n    PasteAction.addImplementation(0, (accessor, args) => {\r\n        document.execCommand('paste');\r\n        return true;\r\n    });\r\n}\r\nif (supportsCopyWithSyntaxHighlighting) {\r\n    registerEditorAction(ExecCommandCopyWithSyntaxHighlightingAction);\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}