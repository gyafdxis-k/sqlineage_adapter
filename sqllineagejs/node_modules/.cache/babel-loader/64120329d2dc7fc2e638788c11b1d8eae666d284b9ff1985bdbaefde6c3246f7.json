{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport * as dom from '../../../base/browser/dom.js';\nimport * as platform from '../../../base/common/platform.js';\nimport { EventType, Gesture } from '../../../base/browser/touch.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { MouseHandler, createMouseMoveEventMerger } from './mouseHandler.js';\nimport { EditorMouseEvent, EditorPointerEventFactory } from '../editorDom.js';\nimport { BrowserFeatures } from '../../../base/browser/canIUse.js';\nfunction gestureChangeEventMerger(lastEvent, currentEvent) {\n  const r = {\n    translationY: currentEvent.translationY,\n    translationX: currentEvent.translationX\n  };\n  if (lastEvent) {\n    r.translationY += lastEvent.translationY;\n    r.translationX += lastEvent.translationX;\n  }\n  return r;\n}\n/**\r\n * Basically Edge but should be modified to handle any pointerEnabled, even without support of MSGesture\r\n */\nclass StandardPointerHandler extends MouseHandler {\n  constructor(context, viewController, viewHelper) {\n    super(context, viewController, viewHelper);\n    this.viewHelper.linesContentDomNode.style.touchAction = 'none';\n    // TODO@Alex -> this expects that the view is added in 100 ms, might not be the case\n    // This handler should be added when the dom node is in the dom tree\n    this._installGestureHandlerTimeout = window.setTimeout(() => {\n      this._installGestureHandlerTimeout = -1;\n      // TODO@Alex: replace the usage of MSGesture here with something that works across all browsers\n      if (window.MSGesture) {\n        const touchGesture = new MSGesture();\n        const penGesture = new MSGesture();\n        touchGesture.target = this.viewHelper.linesContentDomNode;\n        penGesture.target = this.viewHelper.linesContentDomNode;\n        this.viewHelper.linesContentDomNode.addEventListener('pointerdown', e => {\n          const pointerType = e.pointerType;\n          if (pointerType === 'mouse') {\n            this._lastPointerType = 'mouse';\n            return;\n          } else if (pointerType === 'touch') {\n            this._lastPointerType = 'touch';\n            touchGesture.addPointer(e.pointerId);\n          } else {\n            this._lastPointerType = 'pen';\n            penGesture.addPointer(e.pointerId);\n          }\n        });\n        this._register(dom.addDisposableThrottledListener(this.viewHelper.linesContentDomNode, 'MSGestureChange', e => this._onGestureChange(e), gestureChangeEventMerger));\n        this._register(dom.addDisposableListener(this.viewHelper.linesContentDomNode, 'MSGestureTap', e => this._onCaptureGestureTap(e), true));\n      }\n    }, 100);\n    this._lastPointerType = 'mouse';\n  }\n  _onMouseDown(e) {\n    if (this._lastPointerType === 'mouse') {\n      super._onMouseDown(e);\n    }\n  }\n  _onCaptureGestureTap(rawEvent) {\n    const e = new EditorMouseEvent(rawEvent, this.viewHelper.viewDomNode);\n    const t = this._createMouseTarget(e, false);\n    if (t.position) {\n      this.viewController.moveTo(t.position);\n    }\n    // IE does not want to focus when coming in from the browser's address bar\n    if (e.browserEvent.fromElement) {\n      e.preventDefault();\n      this.viewHelper.focusTextArea();\n    } else {\n      // TODO@Alex -> cancel this is focus is lost\n      setTimeout(() => {\n        this.viewHelper.focusTextArea();\n      });\n    }\n  }\n  _onGestureChange(e) {\n    this._context.model.deltaScrollNow(-e.translationX, -e.translationY);\n  }\n  dispose() {\n    window.clearTimeout(this._installGestureHandlerTimeout);\n    super.dispose();\n  }\n}\n/**\r\n * Currently only tested on iOS 13/ iPadOS.\r\n */\nexport class PointerEventHandler extends MouseHandler {\n  constructor(context, viewController, viewHelper) {\n    super(context, viewController, viewHelper);\n    this._register(Gesture.addTarget(this.viewHelper.linesContentDomNode));\n    this._register(dom.addDisposableListener(this.viewHelper.linesContentDomNode, EventType.Tap, e => this.onTap(e)));\n    this._register(dom.addDisposableListener(this.viewHelper.linesContentDomNode, EventType.Change, e => this.onChange(e)));\n    this._register(dom.addDisposableListener(this.viewHelper.linesContentDomNode, EventType.Contextmenu, e => this._onContextMenu(new EditorMouseEvent(e, this.viewHelper.viewDomNode), false)));\n    this._lastPointerType = 'mouse';\n    this._register(dom.addDisposableListener(this.viewHelper.linesContentDomNode, 'pointerdown', e => {\n      const pointerType = e.pointerType;\n      if (pointerType === 'mouse') {\n        this._lastPointerType = 'mouse';\n        return;\n      } else if (pointerType === 'touch') {\n        this._lastPointerType = 'touch';\n      } else {\n        this._lastPointerType = 'pen';\n      }\n    }));\n    // PonterEvents\n    const pointerEvents = new EditorPointerEventFactory(this.viewHelper.viewDomNode);\n    this._register(pointerEvents.onPointerMoveThrottled(this.viewHelper.viewDomNode, e => this._onMouseMove(e), createMouseMoveEventMerger(this.mouseTargetFactory), MouseHandler.MOUSE_MOVE_MINIMUM_TIME));\n    this._register(pointerEvents.onPointerUp(this.viewHelper.viewDomNode, e => this._onMouseUp(e)));\n    this._register(pointerEvents.onPointerLeave(this.viewHelper.viewDomNode, e => this._onMouseLeave(e)));\n    this._register(pointerEvents.onPointerDown(this.viewHelper.viewDomNode, e => this._onMouseDown(e)));\n  }\n  onTap(event) {\n    if (!event.initialTarget || !this.viewHelper.linesContentDomNode.contains(event.initialTarget)) {\n      return;\n    }\n    event.preventDefault();\n    this.viewHelper.focusTextArea();\n    const target = this._createMouseTarget(new EditorMouseEvent(event, this.viewHelper.viewDomNode), false);\n    if (target.position) {\n      // this.viewController.moveTo(target.position);\n      this.viewController.dispatchMouse({\n        position: target.position,\n        mouseColumn: target.position.column,\n        startedOnLineNumbers: false,\n        mouseDownCount: event.tapCount,\n        inSelectionMode: false,\n        altKey: false,\n        ctrlKey: false,\n        metaKey: false,\n        shiftKey: false,\n        leftButton: false,\n        middleButton: false\n      });\n    }\n  }\n  onChange(e) {\n    if (this._lastPointerType === 'touch') {\n      this._context.model.deltaScrollNow(-e.translationX, -e.translationY);\n    }\n  }\n  _onMouseDown(e) {\n    if (e.browserEvent.pointerType === 'touch') {\n      return;\n    }\n    super._onMouseDown(e);\n  }\n}\nclass TouchHandler extends MouseHandler {\n  constructor(context, viewController, viewHelper) {\n    super(context, viewController, viewHelper);\n    this._register(Gesture.addTarget(this.viewHelper.linesContentDomNode));\n    this._register(dom.addDisposableListener(this.viewHelper.linesContentDomNode, EventType.Tap, e => this.onTap(e)));\n    this._register(dom.addDisposableListener(this.viewHelper.linesContentDomNode, EventType.Change, e => this.onChange(e)));\n    this._register(dom.addDisposableListener(this.viewHelper.linesContentDomNode, EventType.Contextmenu, e => this._onContextMenu(new EditorMouseEvent(e, this.viewHelper.viewDomNode), false)));\n  }\n  onTap(event) {\n    event.preventDefault();\n    this.viewHelper.focusTextArea();\n    const target = this._createMouseTarget(new EditorMouseEvent(event, this.viewHelper.viewDomNode), false);\n    if (target.position) {\n      this.viewController.moveTo(target.position);\n    }\n  }\n  onChange(e) {\n    this._context.model.deltaScrollNow(-e.translationX, -e.translationY);\n  }\n}\nexport class PointerHandler extends Disposable {\n  constructor(context, viewController, viewHelper) {\n    super();\n    if (platform.isIOS && BrowserFeatures.pointerEvents) {\n      this.handler = this._register(new PointerEventHandler(context, viewController, viewHelper));\n    } else if (window.TouchEvent) {\n      this.handler = this._register(new TouchHandler(context, viewController, viewHelper));\n    } else if (window.navigator.pointerEnabled || window.PointerEvent) {\n      this.handler = this._register(new StandardPointerHandler(context, viewController, viewHelper));\n    } else {\n      this.handler = this._register(new MouseHandler(context, viewController, viewHelper));\n    }\n  }\n  getTargetAtClientPoint(clientX, clientY) {\n    return this.handler.getTargetAtClientPoint(clientX, clientY);\n  }\n}","map":{"version":3,"names":["dom","platform","EventType","Gesture","Disposable","MouseHandler","createMouseMoveEventMerger","EditorMouseEvent","EditorPointerEventFactory","BrowserFeatures","gestureChangeEventMerger","lastEvent","currentEvent","r","translationY","translationX","StandardPointerHandler","constructor","context","viewController","viewHelper","linesContentDomNode","style","touchAction","_installGestureHandlerTimeout","window","setTimeout","MSGesture","touchGesture","penGesture","target","addEventListener","e","pointerType","_lastPointerType","addPointer","pointerId","_register","addDisposableThrottledListener","_onGestureChange","addDisposableListener","_onCaptureGestureTap","_onMouseDown","rawEvent","viewDomNode","t","_createMouseTarget","position","moveTo","browserEvent","fromElement","preventDefault","focusTextArea","_context","model","deltaScrollNow","dispose","clearTimeout","PointerEventHandler","addTarget","Tap","onTap","Change","onChange","Contextmenu","_onContextMenu","pointerEvents","onPointerMoveThrottled","_onMouseMove","mouseTargetFactory","MOUSE_MOVE_MINIMUM_TIME","onPointerUp","_onMouseUp","onPointerLeave","_onMouseLeave","onPointerDown","event","initialTarget","contains","dispatchMouse","mouseColumn","column","startedOnLineNumbers","mouseDownCount","tapCount","inSelectionMode","altKey","ctrlKey","metaKey","shiftKey","leftButton","middleButton","TouchHandler","PointerHandler","isIOS","handler","TouchEvent","navigator","pointerEnabled","PointerEvent","getTargetAtClientPoint","clientX","clientY"],"sources":["C:/Users/Administrator/Desktop/sqllineage-master/sqllineagejs/node_modules/monaco-editor/esm/vs/editor/browser/controller/pointerHandler.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport * as dom from '../../../base/browser/dom.js';\r\nimport * as platform from '../../../base/common/platform.js';\r\nimport { EventType, Gesture } from '../../../base/browser/touch.js';\r\nimport { Disposable } from '../../../base/common/lifecycle.js';\r\nimport { MouseHandler, createMouseMoveEventMerger } from './mouseHandler.js';\r\nimport { EditorMouseEvent, EditorPointerEventFactory } from '../editorDom.js';\r\nimport { BrowserFeatures } from '../../../base/browser/canIUse.js';\r\nfunction gestureChangeEventMerger(lastEvent, currentEvent) {\r\n    const r = {\r\n        translationY: currentEvent.translationY,\r\n        translationX: currentEvent.translationX\r\n    };\r\n    if (lastEvent) {\r\n        r.translationY += lastEvent.translationY;\r\n        r.translationX += lastEvent.translationX;\r\n    }\r\n    return r;\r\n}\r\n/**\r\n * Basically Edge but should be modified to handle any pointerEnabled, even without support of MSGesture\r\n */\r\nclass StandardPointerHandler extends MouseHandler {\r\n    constructor(context, viewController, viewHelper) {\r\n        super(context, viewController, viewHelper);\r\n        this.viewHelper.linesContentDomNode.style.touchAction = 'none';\r\n        // TODO@Alex -> this expects that the view is added in 100 ms, might not be the case\r\n        // This handler should be added when the dom node is in the dom tree\r\n        this._installGestureHandlerTimeout = window.setTimeout(() => {\r\n            this._installGestureHandlerTimeout = -1;\r\n            // TODO@Alex: replace the usage of MSGesture here with something that works across all browsers\r\n            if (window.MSGesture) {\r\n                const touchGesture = new MSGesture();\r\n                const penGesture = new MSGesture();\r\n                touchGesture.target = this.viewHelper.linesContentDomNode;\r\n                penGesture.target = this.viewHelper.linesContentDomNode;\r\n                this.viewHelper.linesContentDomNode.addEventListener('pointerdown', (e) => {\r\n                    const pointerType = e.pointerType;\r\n                    if (pointerType === 'mouse') {\r\n                        this._lastPointerType = 'mouse';\r\n                        return;\r\n                    }\r\n                    else if (pointerType === 'touch') {\r\n                        this._lastPointerType = 'touch';\r\n                        touchGesture.addPointer(e.pointerId);\r\n                    }\r\n                    else {\r\n                        this._lastPointerType = 'pen';\r\n                        penGesture.addPointer(e.pointerId);\r\n                    }\r\n                });\r\n                this._register(dom.addDisposableThrottledListener(this.viewHelper.linesContentDomNode, 'MSGestureChange', (e) => this._onGestureChange(e), gestureChangeEventMerger));\r\n                this._register(dom.addDisposableListener(this.viewHelper.linesContentDomNode, 'MSGestureTap', (e) => this._onCaptureGestureTap(e), true));\r\n            }\r\n        }, 100);\r\n        this._lastPointerType = 'mouse';\r\n    }\r\n    _onMouseDown(e) {\r\n        if (this._lastPointerType === 'mouse') {\r\n            super._onMouseDown(e);\r\n        }\r\n    }\r\n    _onCaptureGestureTap(rawEvent) {\r\n        const e = new EditorMouseEvent(rawEvent, this.viewHelper.viewDomNode);\r\n        const t = this._createMouseTarget(e, false);\r\n        if (t.position) {\r\n            this.viewController.moveTo(t.position);\r\n        }\r\n        // IE does not want to focus when coming in from the browser's address bar\r\n        if (e.browserEvent.fromElement) {\r\n            e.preventDefault();\r\n            this.viewHelper.focusTextArea();\r\n        }\r\n        else {\r\n            // TODO@Alex -> cancel this is focus is lost\r\n            setTimeout(() => {\r\n                this.viewHelper.focusTextArea();\r\n            });\r\n        }\r\n    }\r\n    _onGestureChange(e) {\r\n        this._context.model.deltaScrollNow(-e.translationX, -e.translationY);\r\n    }\r\n    dispose() {\r\n        window.clearTimeout(this._installGestureHandlerTimeout);\r\n        super.dispose();\r\n    }\r\n}\r\n/**\r\n * Currently only tested on iOS 13/ iPadOS.\r\n */\r\nexport class PointerEventHandler extends MouseHandler {\r\n    constructor(context, viewController, viewHelper) {\r\n        super(context, viewController, viewHelper);\r\n        this._register(Gesture.addTarget(this.viewHelper.linesContentDomNode));\r\n        this._register(dom.addDisposableListener(this.viewHelper.linesContentDomNode, EventType.Tap, (e) => this.onTap(e)));\r\n        this._register(dom.addDisposableListener(this.viewHelper.linesContentDomNode, EventType.Change, (e) => this.onChange(e)));\r\n        this._register(dom.addDisposableListener(this.viewHelper.linesContentDomNode, EventType.Contextmenu, (e) => this._onContextMenu(new EditorMouseEvent(e, this.viewHelper.viewDomNode), false)));\r\n        this._lastPointerType = 'mouse';\r\n        this._register(dom.addDisposableListener(this.viewHelper.linesContentDomNode, 'pointerdown', (e) => {\r\n            const pointerType = e.pointerType;\r\n            if (pointerType === 'mouse') {\r\n                this._lastPointerType = 'mouse';\r\n                return;\r\n            }\r\n            else if (pointerType === 'touch') {\r\n                this._lastPointerType = 'touch';\r\n            }\r\n            else {\r\n                this._lastPointerType = 'pen';\r\n            }\r\n        }));\r\n        // PonterEvents\r\n        const pointerEvents = new EditorPointerEventFactory(this.viewHelper.viewDomNode);\r\n        this._register(pointerEvents.onPointerMoveThrottled(this.viewHelper.viewDomNode, (e) => this._onMouseMove(e), createMouseMoveEventMerger(this.mouseTargetFactory), MouseHandler.MOUSE_MOVE_MINIMUM_TIME));\r\n        this._register(pointerEvents.onPointerUp(this.viewHelper.viewDomNode, (e) => this._onMouseUp(e)));\r\n        this._register(pointerEvents.onPointerLeave(this.viewHelper.viewDomNode, (e) => this._onMouseLeave(e)));\r\n        this._register(pointerEvents.onPointerDown(this.viewHelper.viewDomNode, (e) => this._onMouseDown(e)));\r\n    }\r\n    onTap(event) {\r\n        if (!event.initialTarget || !this.viewHelper.linesContentDomNode.contains(event.initialTarget)) {\r\n            return;\r\n        }\r\n        event.preventDefault();\r\n        this.viewHelper.focusTextArea();\r\n        const target = this._createMouseTarget(new EditorMouseEvent(event, this.viewHelper.viewDomNode), false);\r\n        if (target.position) {\r\n            // this.viewController.moveTo(target.position);\r\n            this.viewController.dispatchMouse({\r\n                position: target.position,\r\n                mouseColumn: target.position.column,\r\n                startedOnLineNumbers: false,\r\n                mouseDownCount: event.tapCount,\r\n                inSelectionMode: false,\r\n                altKey: false,\r\n                ctrlKey: false,\r\n                metaKey: false,\r\n                shiftKey: false,\r\n                leftButton: false,\r\n                middleButton: false,\r\n            });\r\n        }\r\n    }\r\n    onChange(e) {\r\n        if (this._lastPointerType === 'touch') {\r\n            this._context.model.deltaScrollNow(-e.translationX, -e.translationY);\r\n        }\r\n    }\r\n    _onMouseDown(e) {\r\n        if (e.browserEvent.pointerType === 'touch') {\r\n            return;\r\n        }\r\n        super._onMouseDown(e);\r\n    }\r\n}\r\nclass TouchHandler extends MouseHandler {\r\n    constructor(context, viewController, viewHelper) {\r\n        super(context, viewController, viewHelper);\r\n        this._register(Gesture.addTarget(this.viewHelper.linesContentDomNode));\r\n        this._register(dom.addDisposableListener(this.viewHelper.linesContentDomNode, EventType.Tap, (e) => this.onTap(e)));\r\n        this._register(dom.addDisposableListener(this.viewHelper.linesContentDomNode, EventType.Change, (e) => this.onChange(e)));\r\n        this._register(dom.addDisposableListener(this.viewHelper.linesContentDomNode, EventType.Contextmenu, (e) => this._onContextMenu(new EditorMouseEvent(e, this.viewHelper.viewDomNode), false)));\r\n    }\r\n    onTap(event) {\r\n        event.preventDefault();\r\n        this.viewHelper.focusTextArea();\r\n        const target = this._createMouseTarget(new EditorMouseEvent(event, this.viewHelper.viewDomNode), false);\r\n        if (target.position) {\r\n            this.viewController.moveTo(target.position);\r\n        }\r\n    }\r\n    onChange(e) {\r\n        this._context.model.deltaScrollNow(-e.translationX, -e.translationY);\r\n    }\r\n}\r\nexport class PointerHandler extends Disposable {\r\n    constructor(context, viewController, viewHelper) {\r\n        super();\r\n        if ((platform.isIOS && BrowserFeatures.pointerEvents)) {\r\n            this.handler = this._register(new PointerEventHandler(context, viewController, viewHelper));\r\n        }\r\n        else if (window.TouchEvent) {\r\n            this.handler = this._register(new TouchHandler(context, viewController, viewHelper));\r\n        }\r\n        else if (window.navigator.pointerEnabled || window.PointerEvent) {\r\n            this.handler = this._register(new StandardPointerHandler(context, viewController, viewHelper));\r\n        }\r\n        else {\r\n            this.handler = this._register(new MouseHandler(context, viewController, viewHelper));\r\n        }\r\n    }\r\n    getTargetAtClientPoint(clientX, clientY) {\r\n        return this.handler.getTargetAtClientPoint(clientX, clientY);\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}