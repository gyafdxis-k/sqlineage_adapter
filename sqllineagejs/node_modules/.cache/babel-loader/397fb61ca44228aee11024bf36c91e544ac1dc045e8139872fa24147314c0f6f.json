{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport './splitview.css';\nimport { toDisposable, Disposable, combinedDisposable } from '../../../common/lifecycle.js';\nimport { Event, Emitter } from '../../../common/event.js';\nimport * as types from '../../../common/types.js';\nimport { clamp } from '../../../common/numbers.js';\nimport { range, pushToStart, pushToEnd } from '../../../common/arrays.js';\nimport { Sash } from '../sash/sash.js';\nimport { Color } from '../../../common/color.js';\nimport { domEvent } from '../../event.js';\nimport { $, append, scheduleAtNextAnimationFrame } from '../../dom.js';\nimport { SmoothScrollableElement } from '../scrollbar/scrollableElement.js';\nimport { Scrollable } from '../../../common/scrollable.js';\nconst defaultStyles = {\n  separatorBorder: Color.transparent\n};\nclass ViewItem {\n  constructor(container, view, size, disposable) {\n    this.container = container;\n    this.view = view;\n    this.disposable = disposable;\n    this._cachedVisibleSize = undefined;\n    if (typeof size === 'number') {\n      this._size = size;\n      this._cachedVisibleSize = undefined;\n      container.classList.add('visible');\n    } else {\n      this._size = 0;\n      this._cachedVisibleSize = size.cachedVisibleSize;\n    }\n  }\n  set size(size) {\n    this._size = size;\n  }\n  get size() {\n    return this._size;\n  }\n  get visible() {\n    return typeof this._cachedVisibleSize === 'undefined';\n  }\n  setVisible(visible, size) {\n    if (visible === this.visible) {\n      return;\n    }\n    if (visible) {\n      this.size = clamp(this._cachedVisibleSize, this.viewMinimumSize, this.viewMaximumSize);\n      this._cachedVisibleSize = undefined;\n    } else {\n      this._cachedVisibleSize = typeof size === 'number' ? size : this.size;\n      this.size = 0;\n    }\n    this.container.classList.toggle('visible', visible);\n    if (this.view.setVisible) {\n      this.view.setVisible(visible);\n    }\n  }\n  get minimumSize() {\n    return this.visible ? this.view.minimumSize : 0;\n  }\n  get viewMinimumSize() {\n    return this.view.minimumSize;\n  }\n  get maximumSize() {\n    return this.visible ? this.view.maximumSize : 0;\n  }\n  get viewMaximumSize() {\n    return this.view.maximumSize;\n  }\n  get priority() {\n    return this.view.priority;\n  }\n  get snap() {\n    return !!this.view.snap;\n  }\n  set enabled(enabled) {\n    this.container.style.pointerEvents = enabled ? '' : 'none';\n  }\n  layout(offset, layoutContext) {\n    this.layoutContainer(offset);\n    this.view.layout(this.size, offset, layoutContext);\n  }\n  dispose() {\n    this.disposable.dispose();\n    return this.view;\n  }\n}\nclass VerticalViewItem extends ViewItem {\n  layoutContainer(offset) {\n    this.container.style.top = \"\".concat(offset, \"px\");\n    this.container.style.height = \"\".concat(this.size, \"px\");\n  }\n}\nclass HorizontalViewItem extends ViewItem {\n  layoutContainer(offset) {\n    this.container.style.left = \"\".concat(offset, \"px\");\n    this.container.style.width = \"\".concat(this.size, \"px\");\n  }\n}\nvar State;\n(function (State) {\n  State[State[\"Idle\"] = 0] = \"Idle\";\n  State[State[\"Busy\"] = 1] = \"Busy\";\n})(State || (State = {}));\nexport var Sizing;\n(function (Sizing) {\n  Sizing.Distribute = {\n    type: 'distribute'\n  };\n  function Split(index) {\n    return {\n      type: 'split',\n      index\n    };\n  }\n  Sizing.Split = Split;\n  function Invisible(cachedVisibleSize) {\n    return {\n      type: 'invisible',\n      cachedVisibleSize\n    };\n  }\n  Sizing.Invisible = Invisible;\n})(Sizing || (Sizing = {}));\nexport class SplitView extends Disposable {\n  constructor(container) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    super();\n    this.size = 0;\n    this.contentSize = 0;\n    this.proportions = undefined;\n    this.viewItems = [];\n    this.sashItems = [];\n    this.state = State.Idle;\n    this._onDidSashChange = this._register(new Emitter());\n    this.onDidSashChange = this._onDidSashChange.event;\n    this._onDidSashReset = this._register(new Emitter());\n    this._startSnappingEnabled = true;\n    this._endSnappingEnabled = true;\n    this.orientation = types.isUndefined(options.orientation) ? 0 /* VERTICAL */ : options.orientation;\n    this.inverseAltBehavior = !!options.inverseAltBehavior;\n    this.proportionalLayout = types.isUndefined(options.proportionalLayout) ? true : !!options.proportionalLayout;\n    this.el = document.createElement('div');\n    this.el.classList.add('monaco-split-view2');\n    this.el.classList.add(this.orientation === 0 /* VERTICAL */ ? 'vertical' : 'horizontal');\n    container.appendChild(this.el);\n    this.sashContainer = append(this.el, $('.sash-container'));\n    this.viewContainer = $('.split-view-container');\n    this.scrollable = new Scrollable(125, scheduleAtNextAnimationFrame);\n    this.scrollableElement = this._register(new SmoothScrollableElement(this.viewContainer, {\n      vertical: this.orientation === 0 /* VERTICAL */ ? 1 /* Auto */ : 2 /* Hidden */,\n      horizontal: this.orientation === 1 /* HORIZONTAL */ ? 1 /* Auto */ : 2 /* Hidden */\n    }, this.scrollable));\n    this._register(this.scrollableElement.onScroll(e => {\n      this.viewContainer.scrollTop = e.scrollTop;\n      this.viewContainer.scrollLeft = e.scrollLeft;\n    }));\n    append(this.el, this.scrollableElement.getDomNode());\n    this.style(options.styles || defaultStyles);\n    // We have an existing set of view, add them now\n    if (options.descriptor) {\n      this.size = options.descriptor.size;\n      options.descriptor.views.forEach((viewDescriptor, index) => {\n        const sizing = types.isUndefined(viewDescriptor.visible) || viewDescriptor.visible ? viewDescriptor.size : {\n          type: 'invisible',\n          cachedVisibleSize: viewDescriptor.size\n        };\n        const view = viewDescriptor.view;\n        this.doAddView(view, sizing, index, true);\n      });\n      // Initialize content size and proportions for first layout\n      this.contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);\n      this.saveProportions();\n    }\n  }\n  get orthogonalStartSash() {\n    return this._orthogonalStartSash;\n  }\n  set orthogonalStartSash(sash) {\n    for (const sashItem of this.sashItems) {\n      sashItem.sash.orthogonalStartSash = sash;\n    }\n    this._orthogonalStartSash = sash;\n  }\n  get orthogonalEndSash() {\n    return this._orthogonalEndSash;\n  }\n  set orthogonalEndSash(sash) {\n    for (const sashItem of this.sashItems) {\n      sashItem.sash.orthogonalEndSash = sash;\n    }\n    this._orthogonalEndSash = sash;\n  }\n  get startSnappingEnabled() {\n    return this._startSnappingEnabled;\n  }\n  set startSnappingEnabled(startSnappingEnabled) {\n    if (this._startSnappingEnabled === startSnappingEnabled) {\n      return;\n    }\n    this._startSnappingEnabled = startSnappingEnabled;\n    this.updateSashEnablement();\n  }\n  get endSnappingEnabled() {\n    return this._endSnappingEnabled;\n  }\n  set endSnappingEnabled(endSnappingEnabled) {\n    if (this._endSnappingEnabled === endSnappingEnabled) {\n      return;\n    }\n    this._endSnappingEnabled = endSnappingEnabled;\n    this.updateSashEnablement();\n  }\n  style(styles) {\n    if (styles.separatorBorder.isTransparent()) {\n      this.el.classList.remove('separator-border');\n      this.el.style.removeProperty('--separator-border');\n    } else {\n      this.el.classList.add('separator-border');\n      this.el.style.setProperty('--separator-border', styles.separatorBorder.toString());\n    }\n  }\n  addView(view, size) {\n    let index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.viewItems.length;\n    let skipLayout = arguments.length > 3 ? arguments[3] : undefined;\n    this.doAddView(view, size, index, skipLayout);\n  }\n  layout(size, layoutContext) {\n    const previousSize = Math.max(this.size, this.contentSize);\n    this.size = size;\n    this.layoutContext = layoutContext;\n    if (!this.proportions) {\n      const indexes = range(this.viewItems.length);\n      const lowPriorityIndexes = indexes.filter(i => this.viewItems[i].priority === 1 /* Low */);\n      const highPriorityIndexes = indexes.filter(i => this.viewItems[i].priority === 2 /* High */);\n      this.resize(this.viewItems.length - 1, size - previousSize, undefined, lowPriorityIndexes, highPriorityIndexes);\n    } else {\n      for (let i = 0; i < this.viewItems.length; i++) {\n        const item = this.viewItems[i];\n        item.size = clamp(Math.round(this.proportions[i] * size), item.minimumSize, item.maximumSize);\n      }\n    }\n    this.distributeEmptySpace();\n    this.layoutViews();\n  }\n  saveProportions() {\n    if (this.proportionalLayout && this.contentSize > 0) {\n      this.proportions = this.viewItems.map(i => i.size / this.contentSize);\n    }\n  }\n  onSashStart(_ref) {\n    let {\n      sash,\n      start,\n      alt\n    } = _ref;\n    for (const item of this.viewItems) {\n      item.enabled = false;\n    }\n    const index = this.sashItems.findIndex(item => item.sash === sash);\n    // This way, we can press Alt while we resize a sash, macOS style!\n    const disposable = combinedDisposable(domEvent(document.body, 'keydown')(e => resetSashDragState(this.sashDragState.current, e.altKey)), domEvent(document.body, 'keyup')(() => resetSashDragState(this.sashDragState.current, false)));\n    const resetSashDragState = (start, alt) => {\n      const sizes = this.viewItems.map(i => i.size);\n      let minDelta = Number.NEGATIVE_INFINITY;\n      let maxDelta = Number.POSITIVE_INFINITY;\n      if (this.inverseAltBehavior) {\n        alt = !alt;\n      }\n      if (alt) {\n        // When we're using the last sash with Alt, we're resizing\n        // the view to the left/up, instead of right/down as usual\n        // Thus, we must do the inverse of the usual\n        const isLastSash = index === this.sashItems.length - 1;\n        if (isLastSash) {\n          const viewItem = this.viewItems[index];\n          minDelta = (viewItem.minimumSize - viewItem.size) / 2;\n          maxDelta = (viewItem.maximumSize - viewItem.size) / 2;\n        } else {\n          const viewItem = this.viewItems[index + 1];\n          minDelta = (viewItem.size - viewItem.maximumSize) / 2;\n          maxDelta = (viewItem.size - viewItem.minimumSize) / 2;\n        }\n      }\n      let snapBefore;\n      let snapAfter;\n      if (!alt) {\n        const upIndexes = range(index, -1);\n        const downIndexes = range(index + 1, this.viewItems.length);\n        const minDeltaUp = upIndexes.reduce((r, i) => r + (this.viewItems[i].minimumSize - sizes[i]), 0);\n        const maxDeltaUp = upIndexes.reduce((r, i) => r + (this.viewItems[i].viewMaximumSize - sizes[i]), 0);\n        const maxDeltaDown = downIndexes.length === 0 ? Number.POSITIVE_INFINITY : downIndexes.reduce((r, i) => r + (sizes[i] - this.viewItems[i].minimumSize), 0);\n        const minDeltaDown = downIndexes.length === 0 ? Number.NEGATIVE_INFINITY : downIndexes.reduce((r, i) => r + (sizes[i] - this.viewItems[i].viewMaximumSize), 0);\n        const minDelta = Math.max(minDeltaUp, minDeltaDown);\n        const maxDelta = Math.min(maxDeltaDown, maxDeltaUp);\n        const snapBeforeIndex = this.findFirstSnapIndex(upIndexes);\n        const snapAfterIndex = this.findFirstSnapIndex(downIndexes);\n        if (typeof snapBeforeIndex === 'number') {\n          const viewItem = this.viewItems[snapBeforeIndex];\n          const halfSize = Math.floor(viewItem.viewMinimumSize / 2);\n          snapBefore = {\n            index: snapBeforeIndex,\n            limitDelta: viewItem.visible ? minDelta - halfSize : minDelta + halfSize,\n            size: viewItem.size\n          };\n        }\n        if (typeof snapAfterIndex === 'number') {\n          const viewItem = this.viewItems[snapAfterIndex];\n          const halfSize = Math.floor(viewItem.viewMinimumSize / 2);\n          snapAfter = {\n            index: snapAfterIndex,\n            limitDelta: viewItem.visible ? maxDelta + halfSize : maxDelta - halfSize,\n            size: viewItem.size\n          };\n        }\n      }\n      this.sashDragState = {\n        start,\n        current: start,\n        index,\n        sizes,\n        minDelta,\n        maxDelta,\n        alt,\n        snapBefore,\n        snapAfter,\n        disposable\n      };\n    };\n    resetSashDragState(start, alt);\n  }\n  onSashChange(_ref2) {\n    let {\n      current\n    } = _ref2;\n    const {\n      index,\n      start,\n      sizes,\n      alt,\n      minDelta,\n      maxDelta,\n      snapBefore,\n      snapAfter\n    } = this.sashDragState;\n    this.sashDragState.current = current;\n    const delta = current - start;\n    const newDelta = this.resize(index, delta, sizes, undefined, undefined, minDelta, maxDelta, snapBefore, snapAfter);\n    if (alt) {\n      const isLastSash = index === this.sashItems.length - 1;\n      const newSizes = this.viewItems.map(i => i.size);\n      const viewItemIndex = isLastSash ? index : index + 1;\n      const viewItem = this.viewItems[viewItemIndex];\n      const newMinDelta = viewItem.size - viewItem.maximumSize;\n      const newMaxDelta = viewItem.size - viewItem.minimumSize;\n      const resizeIndex = isLastSash ? index - 1 : index + 1;\n      this.resize(resizeIndex, -newDelta, newSizes, undefined, undefined, newMinDelta, newMaxDelta);\n    }\n    this.distributeEmptySpace();\n    this.layoutViews();\n  }\n  onSashEnd(index) {\n    this._onDidSashChange.fire(index);\n    this.sashDragState.disposable.dispose();\n    this.saveProportions();\n    for (const item of this.viewItems) {\n      item.enabled = true;\n    }\n  }\n  onViewChange(item, size) {\n    const index = this.viewItems.indexOf(item);\n    if (index < 0 || index >= this.viewItems.length) {\n      return;\n    }\n    size = typeof size === 'number' ? size : item.size;\n    size = clamp(size, item.minimumSize, item.maximumSize);\n    if (this.inverseAltBehavior && index > 0) {\n      // In this case, we want the view to grow or shrink both sides equally\n      // so we just resize the \"left\" side by half and let `resize` do the clamping magic\n      this.resize(index - 1, Math.floor((item.size - size) / 2));\n      this.distributeEmptySpace();\n      this.layoutViews();\n    } else {\n      item.size = size;\n      this.relayout([index], undefined);\n    }\n  }\n  resizeView(index, size) {\n    if (this.state !== State.Idle) {\n      throw new Error('Cant modify splitview');\n    }\n    this.state = State.Busy;\n    if (index < 0 || index >= this.viewItems.length) {\n      return;\n    }\n    const indexes = range(this.viewItems.length).filter(i => i !== index);\n    const lowPriorityIndexes = [...indexes.filter(i => this.viewItems[i].priority === 1 /* Low */), index];\n    const highPriorityIndexes = indexes.filter(i => this.viewItems[i].priority === 2 /* High */);\n    const item = this.viewItems[index];\n    size = Math.round(size);\n    size = clamp(size, item.minimumSize, Math.min(item.maximumSize, this.size));\n    item.size = size;\n    this.relayout(lowPriorityIndexes, highPriorityIndexes);\n    this.state = State.Idle;\n  }\n  distributeViewSizes() {\n    const flexibleViewItems = [];\n    let flexibleSize = 0;\n    for (const item of this.viewItems) {\n      if (item.maximumSize - item.minimumSize > 0) {\n        flexibleViewItems.push(item);\n        flexibleSize += item.size;\n      }\n    }\n    const size = Math.floor(flexibleSize / flexibleViewItems.length);\n    for (const item of flexibleViewItems) {\n      item.size = clamp(size, item.minimumSize, item.maximumSize);\n    }\n    const indexes = range(this.viewItems.length);\n    const lowPriorityIndexes = indexes.filter(i => this.viewItems[i].priority === 1 /* Low */);\n    const highPriorityIndexes = indexes.filter(i => this.viewItems[i].priority === 2 /* High */);\n    this.relayout(lowPriorityIndexes, highPriorityIndexes);\n  }\n  getViewSize(index) {\n    if (index < 0 || index >= this.viewItems.length) {\n      return -1;\n    }\n    return this.viewItems[index].size;\n  }\n  doAddView(view, size) {\n    let index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.viewItems.length;\n    let skipLayout = arguments.length > 3 ? arguments[3] : undefined;\n    if (this.state !== State.Idle) {\n      throw new Error('Cant modify splitview');\n    }\n    this.state = State.Busy;\n    // Add view\n    const container = $('.split-view-view');\n    if (index === this.viewItems.length) {\n      this.viewContainer.appendChild(container);\n    } else {\n      this.viewContainer.insertBefore(container, this.viewContainer.children.item(index));\n    }\n    const onChangeDisposable = view.onDidChange(size => this.onViewChange(item, size));\n    const containerDisposable = toDisposable(() => this.viewContainer.removeChild(container));\n    const disposable = combinedDisposable(onChangeDisposable, containerDisposable);\n    let viewSize;\n    if (typeof size === 'number') {\n      viewSize = size;\n    } else if (size.type === 'split') {\n      viewSize = this.getViewSize(size.index) / 2;\n    } else if (size.type === 'invisible') {\n      viewSize = {\n        cachedVisibleSize: size.cachedVisibleSize\n      };\n    } else {\n      viewSize = view.minimumSize;\n    }\n    const item = this.orientation === 0 /* VERTICAL */ ? new VerticalViewItem(container, view, viewSize, disposable) : new HorizontalViewItem(container, view, viewSize, disposable);\n    this.viewItems.splice(index, 0, item);\n    // Add sash\n    if (this.viewItems.length > 1) {\n      const sash = this.orientation === 0 /* VERTICAL */ ? new Sash(this.sashContainer, {\n        getHorizontalSashTop: sash => this.getSashPosition(sash)\n      }, {\n        orientation: 1 /* HORIZONTAL */,\n        orthogonalStartSash: this.orthogonalStartSash,\n        orthogonalEndSash: this.orthogonalEndSash\n      }) : new Sash(this.sashContainer, {\n        getVerticalSashLeft: sash => this.getSashPosition(sash)\n      }, {\n        orientation: 0 /* VERTICAL */,\n        orthogonalStartSash: this.orthogonalStartSash,\n        orthogonalEndSash: this.orthogonalEndSash\n      });\n      const sashEventMapper = this.orientation === 0 /* VERTICAL */ ? e => ({\n        sash,\n        start: e.startY,\n        current: e.currentY,\n        alt: e.altKey\n      }) : e => ({\n        sash,\n        start: e.startX,\n        current: e.currentX,\n        alt: e.altKey\n      });\n      const onStart = Event.map(sash.onDidStart, sashEventMapper);\n      const onStartDisposable = onStart(this.onSashStart, this);\n      const onChange = Event.map(sash.onDidChange, sashEventMapper);\n      const onChangeDisposable = onChange(this.onSashChange, this);\n      const onEnd = Event.map(sash.onDidEnd, () => this.sashItems.findIndex(item => item.sash === sash));\n      const onEndDisposable = onEnd(this.onSashEnd, this);\n      const onDidResetDisposable = sash.onDidReset(() => {\n        const index = this.sashItems.findIndex(item => item.sash === sash);\n        const upIndexes = range(index, -1);\n        const downIndexes = range(index + 1, this.viewItems.length);\n        const snapBeforeIndex = this.findFirstSnapIndex(upIndexes);\n        const snapAfterIndex = this.findFirstSnapIndex(downIndexes);\n        if (typeof snapBeforeIndex === 'number' && !this.viewItems[snapBeforeIndex].visible) {\n          return;\n        }\n        if (typeof snapAfterIndex === 'number' && !this.viewItems[snapAfterIndex].visible) {\n          return;\n        }\n        this._onDidSashReset.fire(index);\n      });\n      const disposable = combinedDisposable(onStartDisposable, onChangeDisposable, onEndDisposable, onDidResetDisposable, sash);\n      const sashItem = {\n        sash,\n        disposable\n      };\n      this.sashItems.splice(index - 1, 0, sashItem);\n    }\n    container.appendChild(view.element);\n    let highPriorityIndexes;\n    if (typeof size !== 'number' && size.type === 'split') {\n      highPriorityIndexes = [size.index];\n    }\n    if (!skipLayout) {\n      this.relayout([index], highPriorityIndexes);\n    }\n    this.state = State.Idle;\n    if (!skipLayout && typeof size !== 'number' && size.type === 'distribute') {\n      this.distributeViewSizes();\n    }\n  }\n  relayout(lowPriorityIndexes, highPriorityIndexes) {\n    const contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);\n    this.resize(this.viewItems.length - 1, this.size - contentSize, undefined, lowPriorityIndexes, highPriorityIndexes);\n    this.distributeEmptySpace();\n    this.layoutViews();\n    this.saveProportions();\n  }\n  resize(index, delta) {\n    let sizes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.viewItems.map(i => i.size);\n    let lowPriorityIndexes = arguments.length > 3 ? arguments[3] : undefined;\n    let highPriorityIndexes = arguments.length > 4 ? arguments[4] : undefined;\n    let overloadMinDelta = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : Number.NEGATIVE_INFINITY;\n    let overloadMaxDelta = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : Number.POSITIVE_INFINITY;\n    let snapBefore = arguments.length > 7 ? arguments[7] : undefined;\n    let snapAfter = arguments.length > 8 ? arguments[8] : undefined;\n    if (index < 0 || index >= this.viewItems.length) {\n      return 0;\n    }\n    const upIndexes = range(index, -1);\n    const downIndexes = range(index + 1, this.viewItems.length);\n    if (highPriorityIndexes) {\n      for (const index of highPriorityIndexes) {\n        pushToStart(upIndexes, index);\n        pushToStart(downIndexes, index);\n      }\n    }\n    if (lowPriorityIndexes) {\n      for (const index of lowPriorityIndexes) {\n        pushToEnd(upIndexes, index);\n        pushToEnd(downIndexes, index);\n      }\n    }\n    const upItems = upIndexes.map(i => this.viewItems[i]);\n    const upSizes = upIndexes.map(i => sizes[i]);\n    const downItems = downIndexes.map(i => this.viewItems[i]);\n    const downSizes = downIndexes.map(i => sizes[i]);\n    const minDeltaUp = upIndexes.reduce((r, i) => r + (this.viewItems[i].minimumSize - sizes[i]), 0);\n    const maxDeltaUp = upIndexes.reduce((r, i) => r + (this.viewItems[i].maximumSize - sizes[i]), 0);\n    const maxDeltaDown = downIndexes.length === 0 ? Number.POSITIVE_INFINITY : downIndexes.reduce((r, i) => r + (sizes[i] - this.viewItems[i].minimumSize), 0);\n    const minDeltaDown = downIndexes.length === 0 ? Number.NEGATIVE_INFINITY : downIndexes.reduce((r, i) => r + (sizes[i] - this.viewItems[i].maximumSize), 0);\n    const minDelta = Math.max(minDeltaUp, minDeltaDown, overloadMinDelta);\n    const maxDelta = Math.min(maxDeltaDown, maxDeltaUp, overloadMaxDelta);\n    let snapped = false;\n    if (snapBefore) {\n      const snapView = this.viewItems[snapBefore.index];\n      const visible = delta >= snapBefore.limitDelta;\n      snapped = visible !== snapView.visible;\n      snapView.setVisible(visible, snapBefore.size);\n    }\n    if (!snapped && snapAfter) {\n      const snapView = this.viewItems[snapAfter.index];\n      const visible = delta < snapAfter.limitDelta;\n      snapped = visible !== snapView.visible;\n      snapView.setVisible(visible, snapAfter.size);\n    }\n    if (snapped) {\n      return this.resize(index, delta, sizes, lowPriorityIndexes, highPriorityIndexes, overloadMinDelta, overloadMaxDelta);\n    }\n    delta = clamp(delta, minDelta, maxDelta);\n    for (let i = 0, deltaUp = delta; i < upItems.length; i++) {\n      const item = upItems[i];\n      const size = clamp(upSizes[i] + deltaUp, item.minimumSize, item.maximumSize);\n      const viewDelta = size - upSizes[i];\n      deltaUp -= viewDelta;\n      item.size = size;\n    }\n    for (let i = 0, deltaDown = delta; i < downItems.length; i++) {\n      const item = downItems[i];\n      const size = clamp(downSizes[i] - deltaDown, item.minimumSize, item.maximumSize);\n      const viewDelta = size - downSizes[i];\n      deltaDown += viewDelta;\n      item.size = size;\n    }\n    return delta;\n  }\n  distributeEmptySpace(lowPriorityIndex) {\n    const contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);\n    let emptyDelta = this.size - contentSize;\n    const indexes = range(this.viewItems.length - 1, -1);\n    const lowPriorityIndexes = indexes.filter(i => this.viewItems[i].priority === 1 /* Low */);\n    const highPriorityIndexes = indexes.filter(i => this.viewItems[i].priority === 2 /* High */);\n    for (const index of highPriorityIndexes) {\n      pushToStart(indexes, index);\n    }\n    for (const index of lowPriorityIndexes) {\n      pushToEnd(indexes, index);\n    }\n    if (typeof lowPriorityIndex === 'number') {\n      pushToEnd(indexes, lowPriorityIndex);\n    }\n    for (let i = 0; emptyDelta !== 0 && i < indexes.length; i++) {\n      const item = this.viewItems[indexes[i]];\n      const size = clamp(item.size + emptyDelta, item.minimumSize, item.maximumSize);\n      const viewDelta = size - item.size;\n      emptyDelta -= viewDelta;\n      item.size = size;\n    }\n  }\n  layoutViews() {\n    // Save new content size\n    this.contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);\n    // Layout views\n    let offset = 0;\n    for (const viewItem of this.viewItems) {\n      viewItem.layout(offset, this.layoutContext);\n      offset += viewItem.size;\n    }\n    // Layout sashes\n    this.sashItems.forEach(item => item.sash.layout());\n    this.updateSashEnablement();\n    this.updateScrollableElement();\n  }\n  updateScrollableElement() {\n    if (this.orientation === 0 /* VERTICAL */) {\n      this.scrollableElement.setScrollDimensions({\n        height: this.size,\n        scrollHeight: this.contentSize\n      });\n    } else {\n      this.scrollableElement.setScrollDimensions({\n        width: this.size,\n        scrollWidth: this.contentSize\n      });\n    }\n  }\n  updateSashEnablement() {\n    let previous = false;\n    const collapsesDown = this.viewItems.map(i => previous = i.size - i.minimumSize > 0 || previous);\n    previous = false;\n    const expandsDown = this.viewItems.map(i => previous = i.maximumSize - i.size > 0 || previous);\n    const reverseViews = [...this.viewItems].reverse();\n    previous = false;\n    const collapsesUp = reverseViews.map(i => previous = i.size - i.minimumSize > 0 || previous).reverse();\n    previous = false;\n    const expandsUp = reverseViews.map(i => previous = i.maximumSize - i.size > 0 || previous).reverse();\n    let position = 0;\n    for (let index = 0; index < this.sashItems.length; index++) {\n      const {\n        sash\n      } = this.sashItems[index];\n      const viewItem = this.viewItems[index];\n      position += viewItem.size;\n      const min = !(collapsesDown[index] && expandsUp[index + 1]);\n      const max = !(expandsDown[index] && collapsesUp[index + 1]);\n      if (min && max) {\n        const upIndexes = range(index, -1);\n        const downIndexes = range(index + 1, this.viewItems.length);\n        const snapBeforeIndex = this.findFirstSnapIndex(upIndexes);\n        const snapAfterIndex = this.findFirstSnapIndex(downIndexes);\n        const snappedBefore = typeof snapBeforeIndex === 'number' && !this.viewItems[snapBeforeIndex].visible;\n        const snappedAfter = typeof snapAfterIndex === 'number' && !this.viewItems[snapAfterIndex].visible;\n        if (snappedBefore && collapsesUp[index] && (position > 0 || this.startSnappingEnabled)) {\n          sash.state = 1 /* Minimum */;\n        } else if (snappedAfter && collapsesDown[index] && (position < this.contentSize || this.endSnappingEnabled)) {\n          sash.state = 2 /* Maximum */;\n        } else {\n          sash.state = 0 /* Disabled */;\n        }\n      } else if (min && !max) {\n        sash.state = 1 /* Minimum */;\n      } else if (!min && max) {\n        sash.state = 2 /* Maximum */;\n      } else {\n        sash.state = 3 /* Enabled */;\n      }\n    }\n  }\n\n  getSashPosition(sash) {\n    let position = 0;\n    for (let i = 0; i < this.sashItems.length; i++) {\n      position += this.viewItems[i].size;\n      if (this.sashItems[i].sash === sash) {\n        return position;\n      }\n    }\n    return 0;\n  }\n  findFirstSnapIndex(indexes) {\n    // visible views first\n    for (const index of indexes) {\n      const viewItem = this.viewItems[index];\n      if (!viewItem.visible) {\n        continue;\n      }\n      if (viewItem.snap) {\n        return index;\n      }\n    }\n    // then, hidden views\n    for (const index of indexes) {\n      const viewItem = this.viewItems[index];\n      if (viewItem.visible && viewItem.maximumSize - viewItem.minimumSize > 0) {\n        return undefined;\n      }\n      if (!viewItem.visible && viewItem.snap) {\n        return index;\n      }\n    }\n    return undefined;\n  }\n  dispose() {\n    super.dispose();\n    this.viewItems.forEach(i => i.dispose());\n    this.viewItems = [];\n    this.sashItems.forEach(i => i.disposable.dispose());\n    this.sashItems = [];\n  }\n}","map":{"version":3,"names":["toDisposable","Disposable","combinedDisposable","Event","Emitter","types","clamp","range","pushToStart","pushToEnd","Sash","Color","domEvent","$","append","scheduleAtNextAnimationFrame","SmoothScrollableElement","Scrollable","defaultStyles","separatorBorder","transparent","ViewItem","constructor","container","view","size","disposable","_cachedVisibleSize","undefined","_size","classList","add","cachedVisibleSize","visible","setVisible","viewMinimumSize","viewMaximumSize","toggle","minimumSize","maximumSize","priority","snap","enabled","style","pointerEvents","layout","offset","layoutContext","layoutContainer","dispose","VerticalViewItem","top","concat","height","HorizontalViewItem","left","width","State","Sizing","Distribute","type","Split","index","Invisible","SplitView","options","arguments","length","contentSize","proportions","viewItems","sashItems","state","Idle","_onDidSashChange","_register","onDidSashChange","event","_onDidSashReset","_startSnappingEnabled","_endSnappingEnabled","orientation","isUndefined","inverseAltBehavior","proportionalLayout","el","document","createElement","appendChild","sashContainer","viewContainer","scrollable","scrollableElement","vertical","horizontal","onScroll","e","scrollTop","scrollLeft","getDomNode","styles","descriptor","views","forEach","viewDescriptor","sizing","doAddView","reduce","r","i","saveProportions","orthogonalStartSash","_orthogonalStartSash","sash","sashItem","orthogonalEndSash","_orthogonalEndSash","startSnappingEnabled","updateSashEnablement","endSnappingEnabled","isTransparent","remove","removeProperty","setProperty","toString","addView","skipLayout","previousSize","Math","max","indexes","lowPriorityIndexes","filter","highPriorityIndexes","resize","item","round","distributeEmptySpace","layoutViews","map","onSashStart","_ref","start","alt","findIndex","body","resetSashDragState","sashDragState","current","altKey","sizes","minDelta","Number","NEGATIVE_INFINITY","maxDelta","POSITIVE_INFINITY","isLastSash","viewItem","snapBefore","snapAfter","upIndexes","downIndexes","minDeltaUp","maxDeltaUp","maxDeltaDown","minDeltaDown","min","snapBeforeIndex","findFirstSnapIndex","snapAfterIndex","halfSize","floor","limitDelta","onSashChange","_ref2","delta","newDelta","newSizes","viewItemIndex","newMinDelta","newMaxDelta","resizeIndex","onSashEnd","fire","onViewChange","indexOf","relayout","resizeView","Error","Busy","distributeViewSizes","flexibleViewItems","flexibleSize","push","getViewSize","insertBefore","children","onChangeDisposable","onDidChange","containerDisposable","removeChild","viewSize","splice","getHorizontalSashTop","getSashPosition","getVerticalSashLeft","sashEventMapper","startY","currentY","startX","currentX","onStart","onDidStart","onStartDisposable","onChange","onEnd","onDidEnd","onEndDisposable","onDidResetDisposable","onDidReset","element","overloadMinDelta","overloadMaxDelta","upItems","upSizes","downItems","downSizes","snapped","snapView","deltaUp","viewDelta","deltaDown","lowPriorityIndex","emptyDelta","updateScrollableElement","setScrollDimensions","scrollHeight","scrollWidth","previous","collapsesDown","expandsDown","reverseViews","reverse","collapsesUp","expandsUp","position","snappedBefore","snappedAfter"],"sources":["C:/Users/Administrator/Desktop/sqllineage-master/sqllineagejs/node_modules/monaco-editor/esm/vs/base/browser/ui/splitview/splitview.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport './splitview.css';\r\nimport { toDisposable, Disposable, combinedDisposable } from '../../../common/lifecycle.js';\r\nimport { Event, Emitter } from '../../../common/event.js';\r\nimport * as types from '../../../common/types.js';\r\nimport { clamp } from '../../../common/numbers.js';\r\nimport { range, pushToStart, pushToEnd } from '../../../common/arrays.js';\r\nimport { Sash } from '../sash/sash.js';\r\nimport { Color } from '../../../common/color.js';\r\nimport { domEvent } from '../../event.js';\r\nimport { $, append, scheduleAtNextAnimationFrame } from '../../dom.js';\r\nimport { SmoothScrollableElement } from '../scrollbar/scrollableElement.js';\r\nimport { Scrollable } from '../../../common/scrollable.js';\r\nconst defaultStyles = {\r\n    separatorBorder: Color.transparent\r\n};\r\nclass ViewItem {\r\n    constructor(container, view, size, disposable) {\r\n        this.container = container;\r\n        this.view = view;\r\n        this.disposable = disposable;\r\n        this._cachedVisibleSize = undefined;\r\n        if (typeof size === 'number') {\r\n            this._size = size;\r\n            this._cachedVisibleSize = undefined;\r\n            container.classList.add('visible');\r\n        }\r\n        else {\r\n            this._size = 0;\r\n            this._cachedVisibleSize = size.cachedVisibleSize;\r\n        }\r\n    }\r\n    set size(size) {\r\n        this._size = size;\r\n    }\r\n    get size() {\r\n        return this._size;\r\n    }\r\n    get visible() {\r\n        return typeof this._cachedVisibleSize === 'undefined';\r\n    }\r\n    setVisible(visible, size) {\r\n        if (visible === this.visible) {\r\n            return;\r\n        }\r\n        if (visible) {\r\n            this.size = clamp(this._cachedVisibleSize, this.viewMinimumSize, this.viewMaximumSize);\r\n            this._cachedVisibleSize = undefined;\r\n        }\r\n        else {\r\n            this._cachedVisibleSize = typeof size === 'number' ? size : this.size;\r\n            this.size = 0;\r\n        }\r\n        this.container.classList.toggle('visible', visible);\r\n        if (this.view.setVisible) {\r\n            this.view.setVisible(visible);\r\n        }\r\n    }\r\n    get minimumSize() { return this.visible ? this.view.minimumSize : 0; }\r\n    get viewMinimumSize() { return this.view.minimumSize; }\r\n    get maximumSize() { return this.visible ? this.view.maximumSize : 0; }\r\n    get viewMaximumSize() { return this.view.maximumSize; }\r\n    get priority() { return this.view.priority; }\r\n    get snap() { return !!this.view.snap; }\r\n    set enabled(enabled) {\r\n        this.container.style.pointerEvents = enabled ? '' : 'none';\r\n    }\r\n    layout(offset, layoutContext) {\r\n        this.layoutContainer(offset);\r\n        this.view.layout(this.size, offset, layoutContext);\r\n    }\r\n    dispose() {\r\n        this.disposable.dispose();\r\n        return this.view;\r\n    }\r\n}\r\nclass VerticalViewItem extends ViewItem {\r\n    layoutContainer(offset) {\r\n        this.container.style.top = `${offset}px`;\r\n        this.container.style.height = `${this.size}px`;\r\n    }\r\n}\r\nclass HorizontalViewItem extends ViewItem {\r\n    layoutContainer(offset) {\r\n        this.container.style.left = `${offset}px`;\r\n        this.container.style.width = `${this.size}px`;\r\n    }\r\n}\r\nvar State;\r\n(function (State) {\r\n    State[State[\"Idle\"] = 0] = \"Idle\";\r\n    State[State[\"Busy\"] = 1] = \"Busy\";\r\n})(State || (State = {}));\r\nexport var Sizing;\r\n(function (Sizing) {\r\n    Sizing.Distribute = { type: 'distribute' };\r\n    function Split(index) { return { type: 'split', index }; }\r\n    Sizing.Split = Split;\r\n    function Invisible(cachedVisibleSize) { return { type: 'invisible', cachedVisibleSize }; }\r\n    Sizing.Invisible = Invisible;\r\n})(Sizing || (Sizing = {}));\r\nexport class SplitView extends Disposable {\r\n    constructor(container, options = {}) {\r\n        super();\r\n        this.size = 0;\r\n        this.contentSize = 0;\r\n        this.proportions = undefined;\r\n        this.viewItems = [];\r\n        this.sashItems = [];\r\n        this.state = State.Idle;\r\n        this._onDidSashChange = this._register(new Emitter());\r\n        this.onDidSashChange = this._onDidSashChange.event;\r\n        this._onDidSashReset = this._register(new Emitter());\r\n        this._startSnappingEnabled = true;\r\n        this._endSnappingEnabled = true;\r\n        this.orientation = types.isUndefined(options.orientation) ? 0 /* VERTICAL */ : options.orientation;\r\n        this.inverseAltBehavior = !!options.inverseAltBehavior;\r\n        this.proportionalLayout = types.isUndefined(options.proportionalLayout) ? true : !!options.proportionalLayout;\r\n        this.el = document.createElement('div');\r\n        this.el.classList.add('monaco-split-view2');\r\n        this.el.classList.add(this.orientation === 0 /* VERTICAL */ ? 'vertical' : 'horizontal');\r\n        container.appendChild(this.el);\r\n        this.sashContainer = append(this.el, $('.sash-container'));\r\n        this.viewContainer = $('.split-view-container');\r\n        this.scrollable = new Scrollable(125, scheduleAtNextAnimationFrame);\r\n        this.scrollableElement = this._register(new SmoothScrollableElement(this.viewContainer, {\r\n            vertical: this.orientation === 0 /* VERTICAL */ ? 1 /* Auto */ : 2 /* Hidden */,\r\n            horizontal: this.orientation === 1 /* HORIZONTAL */ ? 1 /* Auto */ : 2 /* Hidden */\r\n        }, this.scrollable));\r\n        this._register(this.scrollableElement.onScroll(e => {\r\n            this.viewContainer.scrollTop = e.scrollTop;\r\n            this.viewContainer.scrollLeft = e.scrollLeft;\r\n        }));\r\n        append(this.el, this.scrollableElement.getDomNode());\r\n        this.style(options.styles || defaultStyles);\r\n        // We have an existing set of view, add them now\r\n        if (options.descriptor) {\r\n            this.size = options.descriptor.size;\r\n            options.descriptor.views.forEach((viewDescriptor, index) => {\r\n                const sizing = types.isUndefined(viewDescriptor.visible) || viewDescriptor.visible ? viewDescriptor.size : { type: 'invisible', cachedVisibleSize: viewDescriptor.size };\r\n                const view = viewDescriptor.view;\r\n                this.doAddView(view, sizing, index, true);\r\n            });\r\n            // Initialize content size and proportions for first layout\r\n            this.contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);\r\n            this.saveProportions();\r\n        }\r\n    }\r\n    get orthogonalStartSash() { return this._orthogonalStartSash; }\r\n    set orthogonalStartSash(sash) {\r\n        for (const sashItem of this.sashItems) {\r\n            sashItem.sash.orthogonalStartSash = sash;\r\n        }\r\n        this._orthogonalStartSash = sash;\r\n    }\r\n    get orthogonalEndSash() { return this._orthogonalEndSash; }\r\n    set orthogonalEndSash(sash) {\r\n        for (const sashItem of this.sashItems) {\r\n            sashItem.sash.orthogonalEndSash = sash;\r\n        }\r\n        this._orthogonalEndSash = sash;\r\n    }\r\n    get startSnappingEnabled() { return this._startSnappingEnabled; }\r\n    set startSnappingEnabled(startSnappingEnabled) {\r\n        if (this._startSnappingEnabled === startSnappingEnabled) {\r\n            return;\r\n        }\r\n        this._startSnappingEnabled = startSnappingEnabled;\r\n        this.updateSashEnablement();\r\n    }\r\n    get endSnappingEnabled() { return this._endSnappingEnabled; }\r\n    set endSnappingEnabled(endSnappingEnabled) {\r\n        if (this._endSnappingEnabled === endSnappingEnabled) {\r\n            return;\r\n        }\r\n        this._endSnappingEnabled = endSnappingEnabled;\r\n        this.updateSashEnablement();\r\n    }\r\n    style(styles) {\r\n        if (styles.separatorBorder.isTransparent()) {\r\n            this.el.classList.remove('separator-border');\r\n            this.el.style.removeProperty('--separator-border');\r\n        }\r\n        else {\r\n            this.el.classList.add('separator-border');\r\n            this.el.style.setProperty('--separator-border', styles.separatorBorder.toString());\r\n        }\r\n    }\r\n    addView(view, size, index = this.viewItems.length, skipLayout) {\r\n        this.doAddView(view, size, index, skipLayout);\r\n    }\r\n    layout(size, layoutContext) {\r\n        const previousSize = Math.max(this.size, this.contentSize);\r\n        this.size = size;\r\n        this.layoutContext = layoutContext;\r\n        if (!this.proportions) {\r\n            const indexes = range(this.viewItems.length);\r\n            const lowPriorityIndexes = indexes.filter(i => this.viewItems[i].priority === 1 /* Low */);\r\n            const highPriorityIndexes = indexes.filter(i => this.viewItems[i].priority === 2 /* High */);\r\n            this.resize(this.viewItems.length - 1, size - previousSize, undefined, lowPriorityIndexes, highPriorityIndexes);\r\n        }\r\n        else {\r\n            for (let i = 0; i < this.viewItems.length; i++) {\r\n                const item = this.viewItems[i];\r\n                item.size = clamp(Math.round(this.proportions[i] * size), item.minimumSize, item.maximumSize);\r\n            }\r\n        }\r\n        this.distributeEmptySpace();\r\n        this.layoutViews();\r\n    }\r\n    saveProportions() {\r\n        if (this.proportionalLayout && this.contentSize > 0) {\r\n            this.proportions = this.viewItems.map(i => i.size / this.contentSize);\r\n        }\r\n    }\r\n    onSashStart({ sash, start, alt }) {\r\n        for (const item of this.viewItems) {\r\n            item.enabled = false;\r\n        }\r\n        const index = this.sashItems.findIndex(item => item.sash === sash);\r\n        // This way, we can press Alt while we resize a sash, macOS style!\r\n        const disposable = combinedDisposable(domEvent(document.body, 'keydown')(e => resetSashDragState(this.sashDragState.current, e.altKey)), domEvent(document.body, 'keyup')(() => resetSashDragState(this.sashDragState.current, false)));\r\n        const resetSashDragState = (start, alt) => {\r\n            const sizes = this.viewItems.map(i => i.size);\r\n            let minDelta = Number.NEGATIVE_INFINITY;\r\n            let maxDelta = Number.POSITIVE_INFINITY;\r\n            if (this.inverseAltBehavior) {\r\n                alt = !alt;\r\n            }\r\n            if (alt) {\r\n                // When we're using the last sash with Alt, we're resizing\r\n                // the view to the left/up, instead of right/down as usual\r\n                // Thus, we must do the inverse of the usual\r\n                const isLastSash = index === this.sashItems.length - 1;\r\n                if (isLastSash) {\r\n                    const viewItem = this.viewItems[index];\r\n                    minDelta = (viewItem.minimumSize - viewItem.size) / 2;\r\n                    maxDelta = (viewItem.maximumSize - viewItem.size) / 2;\r\n                }\r\n                else {\r\n                    const viewItem = this.viewItems[index + 1];\r\n                    minDelta = (viewItem.size - viewItem.maximumSize) / 2;\r\n                    maxDelta = (viewItem.size - viewItem.minimumSize) / 2;\r\n                }\r\n            }\r\n            let snapBefore;\r\n            let snapAfter;\r\n            if (!alt) {\r\n                const upIndexes = range(index, -1);\r\n                const downIndexes = range(index + 1, this.viewItems.length);\r\n                const minDeltaUp = upIndexes.reduce((r, i) => r + (this.viewItems[i].minimumSize - sizes[i]), 0);\r\n                const maxDeltaUp = upIndexes.reduce((r, i) => r + (this.viewItems[i].viewMaximumSize - sizes[i]), 0);\r\n                const maxDeltaDown = downIndexes.length === 0 ? Number.POSITIVE_INFINITY : downIndexes.reduce((r, i) => r + (sizes[i] - this.viewItems[i].minimumSize), 0);\r\n                const minDeltaDown = downIndexes.length === 0 ? Number.NEGATIVE_INFINITY : downIndexes.reduce((r, i) => r + (sizes[i] - this.viewItems[i].viewMaximumSize), 0);\r\n                const minDelta = Math.max(minDeltaUp, minDeltaDown);\r\n                const maxDelta = Math.min(maxDeltaDown, maxDeltaUp);\r\n                const snapBeforeIndex = this.findFirstSnapIndex(upIndexes);\r\n                const snapAfterIndex = this.findFirstSnapIndex(downIndexes);\r\n                if (typeof snapBeforeIndex === 'number') {\r\n                    const viewItem = this.viewItems[snapBeforeIndex];\r\n                    const halfSize = Math.floor(viewItem.viewMinimumSize / 2);\r\n                    snapBefore = {\r\n                        index: snapBeforeIndex,\r\n                        limitDelta: viewItem.visible ? minDelta - halfSize : minDelta + halfSize,\r\n                        size: viewItem.size\r\n                    };\r\n                }\r\n                if (typeof snapAfterIndex === 'number') {\r\n                    const viewItem = this.viewItems[snapAfterIndex];\r\n                    const halfSize = Math.floor(viewItem.viewMinimumSize / 2);\r\n                    snapAfter = {\r\n                        index: snapAfterIndex,\r\n                        limitDelta: viewItem.visible ? maxDelta + halfSize : maxDelta - halfSize,\r\n                        size: viewItem.size\r\n                    };\r\n                }\r\n            }\r\n            this.sashDragState = { start, current: start, index, sizes, minDelta, maxDelta, alt, snapBefore, snapAfter, disposable };\r\n        };\r\n        resetSashDragState(start, alt);\r\n    }\r\n    onSashChange({ current }) {\r\n        const { index, start, sizes, alt, minDelta, maxDelta, snapBefore, snapAfter } = this.sashDragState;\r\n        this.sashDragState.current = current;\r\n        const delta = current - start;\r\n        const newDelta = this.resize(index, delta, sizes, undefined, undefined, minDelta, maxDelta, snapBefore, snapAfter);\r\n        if (alt) {\r\n            const isLastSash = index === this.sashItems.length - 1;\r\n            const newSizes = this.viewItems.map(i => i.size);\r\n            const viewItemIndex = isLastSash ? index : index + 1;\r\n            const viewItem = this.viewItems[viewItemIndex];\r\n            const newMinDelta = viewItem.size - viewItem.maximumSize;\r\n            const newMaxDelta = viewItem.size - viewItem.minimumSize;\r\n            const resizeIndex = isLastSash ? index - 1 : index + 1;\r\n            this.resize(resizeIndex, -newDelta, newSizes, undefined, undefined, newMinDelta, newMaxDelta);\r\n        }\r\n        this.distributeEmptySpace();\r\n        this.layoutViews();\r\n    }\r\n    onSashEnd(index) {\r\n        this._onDidSashChange.fire(index);\r\n        this.sashDragState.disposable.dispose();\r\n        this.saveProportions();\r\n        for (const item of this.viewItems) {\r\n            item.enabled = true;\r\n        }\r\n    }\r\n    onViewChange(item, size) {\r\n        const index = this.viewItems.indexOf(item);\r\n        if (index < 0 || index >= this.viewItems.length) {\r\n            return;\r\n        }\r\n        size = typeof size === 'number' ? size : item.size;\r\n        size = clamp(size, item.minimumSize, item.maximumSize);\r\n        if (this.inverseAltBehavior && index > 0) {\r\n            // In this case, we want the view to grow or shrink both sides equally\r\n            // so we just resize the \"left\" side by half and let `resize` do the clamping magic\r\n            this.resize(index - 1, Math.floor((item.size - size) / 2));\r\n            this.distributeEmptySpace();\r\n            this.layoutViews();\r\n        }\r\n        else {\r\n            item.size = size;\r\n            this.relayout([index], undefined);\r\n        }\r\n    }\r\n    resizeView(index, size) {\r\n        if (this.state !== State.Idle) {\r\n            throw new Error('Cant modify splitview');\r\n        }\r\n        this.state = State.Busy;\r\n        if (index < 0 || index >= this.viewItems.length) {\r\n            return;\r\n        }\r\n        const indexes = range(this.viewItems.length).filter(i => i !== index);\r\n        const lowPriorityIndexes = [...indexes.filter(i => this.viewItems[i].priority === 1 /* Low */), index];\r\n        const highPriorityIndexes = indexes.filter(i => this.viewItems[i].priority === 2 /* High */);\r\n        const item = this.viewItems[index];\r\n        size = Math.round(size);\r\n        size = clamp(size, item.minimumSize, Math.min(item.maximumSize, this.size));\r\n        item.size = size;\r\n        this.relayout(lowPriorityIndexes, highPriorityIndexes);\r\n        this.state = State.Idle;\r\n    }\r\n    distributeViewSizes() {\r\n        const flexibleViewItems = [];\r\n        let flexibleSize = 0;\r\n        for (const item of this.viewItems) {\r\n            if (item.maximumSize - item.minimumSize > 0) {\r\n                flexibleViewItems.push(item);\r\n                flexibleSize += item.size;\r\n            }\r\n        }\r\n        const size = Math.floor(flexibleSize / flexibleViewItems.length);\r\n        for (const item of flexibleViewItems) {\r\n            item.size = clamp(size, item.minimumSize, item.maximumSize);\r\n        }\r\n        const indexes = range(this.viewItems.length);\r\n        const lowPriorityIndexes = indexes.filter(i => this.viewItems[i].priority === 1 /* Low */);\r\n        const highPriorityIndexes = indexes.filter(i => this.viewItems[i].priority === 2 /* High */);\r\n        this.relayout(lowPriorityIndexes, highPriorityIndexes);\r\n    }\r\n    getViewSize(index) {\r\n        if (index < 0 || index >= this.viewItems.length) {\r\n            return -1;\r\n        }\r\n        return this.viewItems[index].size;\r\n    }\r\n    doAddView(view, size, index = this.viewItems.length, skipLayout) {\r\n        if (this.state !== State.Idle) {\r\n            throw new Error('Cant modify splitview');\r\n        }\r\n        this.state = State.Busy;\r\n        // Add view\r\n        const container = $('.split-view-view');\r\n        if (index === this.viewItems.length) {\r\n            this.viewContainer.appendChild(container);\r\n        }\r\n        else {\r\n            this.viewContainer.insertBefore(container, this.viewContainer.children.item(index));\r\n        }\r\n        const onChangeDisposable = view.onDidChange(size => this.onViewChange(item, size));\r\n        const containerDisposable = toDisposable(() => this.viewContainer.removeChild(container));\r\n        const disposable = combinedDisposable(onChangeDisposable, containerDisposable);\r\n        let viewSize;\r\n        if (typeof size === 'number') {\r\n            viewSize = size;\r\n        }\r\n        else if (size.type === 'split') {\r\n            viewSize = this.getViewSize(size.index) / 2;\r\n        }\r\n        else if (size.type === 'invisible') {\r\n            viewSize = { cachedVisibleSize: size.cachedVisibleSize };\r\n        }\r\n        else {\r\n            viewSize = view.minimumSize;\r\n        }\r\n        const item = this.orientation === 0 /* VERTICAL */\r\n            ? new VerticalViewItem(container, view, viewSize, disposable)\r\n            : new HorizontalViewItem(container, view, viewSize, disposable);\r\n        this.viewItems.splice(index, 0, item);\r\n        // Add sash\r\n        if (this.viewItems.length > 1) {\r\n            const sash = this.orientation === 0 /* VERTICAL */\r\n                ? new Sash(this.sashContainer, { getHorizontalSashTop: (sash) => this.getSashPosition(sash) }, {\r\n                    orientation: 1 /* HORIZONTAL */,\r\n                    orthogonalStartSash: this.orthogonalStartSash,\r\n                    orthogonalEndSash: this.orthogonalEndSash\r\n                })\r\n                : new Sash(this.sashContainer, { getVerticalSashLeft: (sash) => this.getSashPosition(sash) }, {\r\n                    orientation: 0 /* VERTICAL */,\r\n                    orthogonalStartSash: this.orthogonalStartSash,\r\n                    orthogonalEndSash: this.orthogonalEndSash\r\n                });\r\n            const sashEventMapper = this.orientation === 0 /* VERTICAL */\r\n                ? (e) => ({ sash, start: e.startY, current: e.currentY, alt: e.altKey })\r\n                : (e) => ({ sash, start: e.startX, current: e.currentX, alt: e.altKey });\r\n            const onStart = Event.map(sash.onDidStart, sashEventMapper);\r\n            const onStartDisposable = onStart(this.onSashStart, this);\r\n            const onChange = Event.map(sash.onDidChange, sashEventMapper);\r\n            const onChangeDisposable = onChange(this.onSashChange, this);\r\n            const onEnd = Event.map(sash.onDidEnd, () => this.sashItems.findIndex(item => item.sash === sash));\r\n            const onEndDisposable = onEnd(this.onSashEnd, this);\r\n            const onDidResetDisposable = sash.onDidReset(() => {\r\n                const index = this.sashItems.findIndex(item => item.sash === sash);\r\n                const upIndexes = range(index, -1);\r\n                const downIndexes = range(index + 1, this.viewItems.length);\r\n                const snapBeforeIndex = this.findFirstSnapIndex(upIndexes);\r\n                const snapAfterIndex = this.findFirstSnapIndex(downIndexes);\r\n                if (typeof snapBeforeIndex === 'number' && !this.viewItems[snapBeforeIndex].visible) {\r\n                    return;\r\n                }\r\n                if (typeof snapAfterIndex === 'number' && !this.viewItems[snapAfterIndex].visible) {\r\n                    return;\r\n                }\r\n                this._onDidSashReset.fire(index);\r\n            });\r\n            const disposable = combinedDisposable(onStartDisposable, onChangeDisposable, onEndDisposable, onDidResetDisposable, sash);\r\n            const sashItem = { sash, disposable };\r\n            this.sashItems.splice(index - 1, 0, sashItem);\r\n        }\r\n        container.appendChild(view.element);\r\n        let highPriorityIndexes;\r\n        if (typeof size !== 'number' && size.type === 'split') {\r\n            highPriorityIndexes = [size.index];\r\n        }\r\n        if (!skipLayout) {\r\n            this.relayout([index], highPriorityIndexes);\r\n        }\r\n        this.state = State.Idle;\r\n        if (!skipLayout && typeof size !== 'number' && size.type === 'distribute') {\r\n            this.distributeViewSizes();\r\n        }\r\n    }\r\n    relayout(lowPriorityIndexes, highPriorityIndexes) {\r\n        const contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);\r\n        this.resize(this.viewItems.length - 1, this.size - contentSize, undefined, lowPriorityIndexes, highPriorityIndexes);\r\n        this.distributeEmptySpace();\r\n        this.layoutViews();\r\n        this.saveProportions();\r\n    }\r\n    resize(index, delta, sizes = this.viewItems.map(i => i.size), lowPriorityIndexes, highPriorityIndexes, overloadMinDelta = Number.NEGATIVE_INFINITY, overloadMaxDelta = Number.POSITIVE_INFINITY, snapBefore, snapAfter) {\r\n        if (index < 0 || index >= this.viewItems.length) {\r\n            return 0;\r\n        }\r\n        const upIndexes = range(index, -1);\r\n        const downIndexes = range(index + 1, this.viewItems.length);\r\n        if (highPriorityIndexes) {\r\n            for (const index of highPriorityIndexes) {\r\n                pushToStart(upIndexes, index);\r\n                pushToStart(downIndexes, index);\r\n            }\r\n        }\r\n        if (lowPriorityIndexes) {\r\n            for (const index of lowPriorityIndexes) {\r\n                pushToEnd(upIndexes, index);\r\n                pushToEnd(downIndexes, index);\r\n            }\r\n        }\r\n        const upItems = upIndexes.map(i => this.viewItems[i]);\r\n        const upSizes = upIndexes.map(i => sizes[i]);\r\n        const downItems = downIndexes.map(i => this.viewItems[i]);\r\n        const downSizes = downIndexes.map(i => sizes[i]);\r\n        const minDeltaUp = upIndexes.reduce((r, i) => r + (this.viewItems[i].minimumSize - sizes[i]), 0);\r\n        const maxDeltaUp = upIndexes.reduce((r, i) => r + (this.viewItems[i].maximumSize - sizes[i]), 0);\r\n        const maxDeltaDown = downIndexes.length === 0 ? Number.POSITIVE_INFINITY : downIndexes.reduce((r, i) => r + (sizes[i] - this.viewItems[i].minimumSize), 0);\r\n        const minDeltaDown = downIndexes.length === 0 ? Number.NEGATIVE_INFINITY : downIndexes.reduce((r, i) => r + (sizes[i] - this.viewItems[i].maximumSize), 0);\r\n        const minDelta = Math.max(minDeltaUp, minDeltaDown, overloadMinDelta);\r\n        const maxDelta = Math.min(maxDeltaDown, maxDeltaUp, overloadMaxDelta);\r\n        let snapped = false;\r\n        if (snapBefore) {\r\n            const snapView = this.viewItems[snapBefore.index];\r\n            const visible = delta >= snapBefore.limitDelta;\r\n            snapped = visible !== snapView.visible;\r\n            snapView.setVisible(visible, snapBefore.size);\r\n        }\r\n        if (!snapped && snapAfter) {\r\n            const snapView = this.viewItems[snapAfter.index];\r\n            const visible = delta < snapAfter.limitDelta;\r\n            snapped = visible !== snapView.visible;\r\n            snapView.setVisible(visible, snapAfter.size);\r\n        }\r\n        if (snapped) {\r\n            return this.resize(index, delta, sizes, lowPriorityIndexes, highPriorityIndexes, overloadMinDelta, overloadMaxDelta);\r\n        }\r\n        delta = clamp(delta, minDelta, maxDelta);\r\n        for (let i = 0, deltaUp = delta; i < upItems.length; i++) {\r\n            const item = upItems[i];\r\n            const size = clamp(upSizes[i] + deltaUp, item.minimumSize, item.maximumSize);\r\n            const viewDelta = size - upSizes[i];\r\n            deltaUp -= viewDelta;\r\n            item.size = size;\r\n        }\r\n        for (let i = 0, deltaDown = delta; i < downItems.length; i++) {\r\n            const item = downItems[i];\r\n            const size = clamp(downSizes[i] - deltaDown, item.minimumSize, item.maximumSize);\r\n            const viewDelta = size - downSizes[i];\r\n            deltaDown += viewDelta;\r\n            item.size = size;\r\n        }\r\n        return delta;\r\n    }\r\n    distributeEmptySpace(lowPriorityIndex) {\r\n        const contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);\r\n        let emptyDelta = this.size - contentSize;\r\n        const indexes = range(this.viewItems.length - 1, -1);\r\n        const lowPriorityIndexes = indexes.filter(i => this.viewItems[i].priority === 1 /* Low */);\r\n        const highPriorityIndexes = indexes.filter(i => this.viewItems[i].priority === 2 /* High */);\r\n        for (const index of highPriorityIndexes) {\r\n            pushToStart(indexes, index);\r\n        }\r\n        for (const index of lowPriorityIndexes) {\r\n            pushToEnd(indexes, index);\r\n        }\r\n        if (typeof lowPriorityIndex === 'number') {\r\n            pushToEnd(indexes, lowPriorityIndex);\r\n        }\r\n        for (let i = 0; emptyDelta !== 0 && i < indexes.length; i++) {\r\n            const item = this.viewItems[indexes[i]];\r\n            const size = clamp(item.size + emptyDelta, item.minimumSize, item.maximumSize);\r\n            const viewDelta = size - item.size;\r\n            emptyDelta -= viewDelta;\r\n            item.size = size;\r\n        }\r\n    }\r\n    layoutViews() {\r\n        // Save new content size\r\n        this.contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);\r\n        // Layout views\r\n        let offset = 0;\r\n        for (const viewItem of this.viewItems) {\r\n            viewItem.layout(offset, this.layoutContext);\r\n            offset += viewItem.size;\r\n        }\r\n        // Layout sashes\r\n        this.sashItems.forEach(item => item.sash.layout());\r\n        this.updateSashEnablement();\r\n        this.updateScrollableElement();\r\n    }\r\n    updateScrollableElement() {\r\n        if (this.orientation === 0 /* VERTICAL */) {\r\n            this.scrollableElement.setScrollDimensions({\r\n                height: this.size,\r\n                scrollHeight: this.contentSize\r\n            });\r\n        }\r\n        else {\r\n            this.scrollableElement.setScrollDimensions({\r\n                width: this.size,\r\n                scrollWidth: this.contentSize\r\n            });\r\n        }\r\n    }\r\n    updateSashEnablement() {\r\n        let previous = false;\r\n        const collapsesDown = this.viewItems.map(i => previous = (i.size - i.minimumSize > 0) || previous);\r\n        previous = false;\r\n        const expandsDown = this.viewItems.map(i => previous = (i.maximumSize - i.size > 0) || previous);\r\n        const reverseViews = [...this.viewItems].reverse();\r\n        previous = false;\r\n        const collapsesUp = reverseViews.map(i => previous = (i.size - i.minimumSize > 0) || previous).reverse();\r\n        previous = false;\r\n        const expandsUp = reverseViews.map(i => previous = (i.maximumSize - i.size > 0) || previous).reverse();\r\n        let position = 0;\r\n        for (let index = 0; index < this.sashItems.length; index++) {\r\n            const { sash } = this.sashItems[index];\r\n            const viewItem = this.viewItems[index];\r\n            position += viewItem.size;\r\n            const min = !(collapsesDown[index] && expandsUp[index + 1]);\r\n            const max = !(expandsDown[index] && collapsesUp[index + 1]);\r\n            if (min && max) {\r\n                const upIndexes = range(index, -1);\r\n                const downIndexes = range(index + 1, this.viewItems.length);\r\n                const snapBeforeIndex = this.findFirstSnapIndex(upIndexes);\r\n                const snapAfterIndex = this.findFirstSnapIndex(downIndexes);\r\n                const snappedBefore = typeof snapBeforeIndex === 'number' && !this.viewItems[snapBeforeIndex].visible;\r\n                const snappedAfter = typeof snapAfterIndex === 'number' && !this.viewItems[snapAfterIndex].visible;\r\n                if (snappedBefore && collapsesUp[index] && (position > 0 || this.startSnappingEnabled)) {\r\n                    sash.state = 1 /* Minimum */;\r\n                }\r\n                else if (snappedAfter && collapsesDown[index] && (position < this.contentSize || this.endSnappingEnabled)) {\r\n                    sash.state = 2 /* Maximum */;\r\n                }\r\n                else {\r\n                    sash.state = 0 /* Disabled */;\r\n                }\r\n            }\r\n            else if (min && !max) {\r\n                sash.state = 1 /* Minimum */;\r\n            }\r\n            else if (!min && max) {\r\n                sash.state = 2 /* Maximum */;\r\n            }\r\n            else {\r\n                sash.state = 3 /* Enabled */;\r\n            }\r\n        }\r\n    }\r\n    getSashPosition(sash) {\r\n        let position = 0;\r\n        for (let i = 0; i < this.sashItems.length; i++) {\r\n            position += this.viewItems[i].size;\r\n            if (this.sashItems[i].sash === sash) {\r\n                return position;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n    findFirstSnapIndex(indexes) {\r\n        // visible views first\r\n        for (const index of indexes) {\r\n            const viewItem = this.viewItems[index];\r\n            if (!viewItem.visible) {\r\n                continue;\r\n            }\r\n            if (viewItem.snap) {\r\n                return index;\r\n            }\r\n        }\r\n        // then, hidden views\r\n        for (const index of indexes) {\r\n            const viewItem = this.viewItems[index];\r\n            if (viewItem.visible && viewItem.maximumSize - viewItem.minimumSize > 0) {\r\n                return undefined;\r\n            }\r\n            if (!viewItem.visible && viewItem.snap) {\r\n                return index;\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n    dispose() {\r\n        super.dispose();\r\n        this.viewItems.forEach(i => i.dispose());\r\n        this.viewItems = [];\r\n        this.sashItems.forEach(i => i.disposable.dispose());\r\n        this.sashItems = [];\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}