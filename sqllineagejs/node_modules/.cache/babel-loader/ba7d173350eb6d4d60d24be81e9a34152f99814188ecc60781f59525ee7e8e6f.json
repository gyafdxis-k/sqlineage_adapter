{"ast":null,"code":"import { ResourceMap } from '../../../base/common/map.js';\nimport * as arrays from '../../../base/common/arrays.js';\nimport * as types from '../../../base/common/types.js';\nimport * as objects from '../../../base/common/objects.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { OVERRIDE_PROPERTY_PATTERN, overrideIdentifierFromKey } from './configurationRegistry.js';\nimport { addToValueTree, toValuesTree, getConfigurationValue, getDefaultValues, getConfigurationKeys, removeFromValueTree } from './configuration.js';\nexport class ConfigurationModel {\n  constructor() {\n    let _contents = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let _keys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    let _overrides = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    this._contents = _contents;\n    this._keys = _keys;\n    this._overrides = _overrides;\n    this.isFrozen = false;\n  }\n  get contents() {\n    return this.checkAndFreeze(this._contents);\n  }\n  get overrides() {\n    return this.checkAndFreeze(this._overrides);\n  }\n  get keys() {\n    return this.checkAndFreeze(this._keys);\n  }\n  isEmpty() {\n    return this._keys.length === 0 && Object.keys(this._contents).length === 0 && this._overrides.length === 0;\n  }\n  getValue(section) {\n    return section ? getConfigurationValue(this.contents, section) : this.contents;\n  }\n  override(identifier) {\n    const overrideContents = this.getContentsForOverrideIdentifer(identifier);\n    if (!overrideContents || typeof overrideContents !== 'object' || !Object.keys(overrideContents).length) {\n      // If there are no valid overrides, return self\n      return this;\n    }\n    let contents = {};\n    for (const key of arrays.distinct([...Object.keys(this.contents), ...Object.keys(overrideContents)])) {\n      let contentsForKey = this.contents[key];\n      let overrideContentsForKey = overrideContents[key];\n      // If there are override contents for the key, clone and merge otherwise use base contents\n      if (overrideContentsForKey) {\n        // Clone and merge only if base contents and override contents are of type object otherwise just override\n        if (typeof contentsForKey === 'object' && typeof overrideContentsForKey === 'object') {\n          contentsForKey = objects.deepClone(contentsForKey);\n          this.mergeContents(contentsForKey, overrideContentsForKey);\n        } else {\n          contentsForKey = overrideContentsForKey;\n        }\n      }\n      contents[key] = contentsForKey;\n    }\n    return new ConfigurationModel(contents, this.keys, this.overrides);\n  }\n  merge() {\n    const contents = objects.deepClone(this.contents);\n    const overrides = objects.deepClone(this.overrides);\n    const keys = [...this.keys];\n    for (var _len = arguments.length, others = new Array(_len), _key = 0; _key < _len; _key++) {\n      others[_key] = arguments[_key];\n    }\n    for (const other of others) {\n      this.mergeContents(contents, other.contents);\n      for (const otherOverride of other.overrides) {\n        const [override] = overrides.filter(o => arrays.equals(o.identifiers, otherOverride.identifiers));\n        if (override) {\n          this.mergeContents(override.contents, otherOverride.contents);\n        } else {\n          overrides.push(objects.deepClone(otherOverride));\n        }\n      }\n      for (const key of other.keys) {\n        if (keys.indexOf(key) === -1) {\n          keys.push(key);\n        }\n      }\n    }\n    return new ConfigurationModel(contents, keys, overrides);\n  }\n  freeze() {\n    this.isFrozen = true;\n    return this;\n  }\n  mergeContents(source, target) {\n    for (const key of Object.keys(target)) {\n      if (key in source) {\n        if (types.isObject(source[key]) && types.isObject(target[key])) {\n          this.mergeContents(source[key], target[key]);\n          continue;\n        }\n      }\n      source[key] = objects.deepClone(target[key]);\n    }\n  }\n  checkAndFreeze(data) {\n    if (this.isFrozen && !Object.isFrozen(data)) {\n      return objects.deepFreeze(data);\n    }\n    return data;\n  }\n  getContentsForOverrideIdentifer(identifier) {\n    for (const override of this.overrides) {\n      if (override.identifiers.indexOf(identifier) !== -1) {\n        return override.contents;\n      }\n    }\n    return null;\n  }\n  toJSON() {\n    return {\n      contents: this.contents,\n      overrides: this.overrides,\n      keys: this.keys\n    };\n  }\n  // Update methods\n  setValue(key, value) {\n    this.addKey(key);\n    addToValueTree(this.contents, key, value, e => {\n      throw new Error(e);\n    });\n  }\n  removeValue(key) {\n    if (this.removeKey(key)) {\n      removeFromValueTree(this.contents, key);\n    }\n  }\n  addKey(key) {\n    let index = this.keys.length;\n    for (let i = 0; i < index; i++) {\n      if (key.indexOf(this.keys[i]) === 0) {\n        index = i;\n      }\n    }\n    this.keys.splice(index, 1, key);\n  }\n  removeKey(key) {\n    let index = this.keys.indexOf(key);\n    if (index !== -1) {\n      this.keys.splice(index, 1);\n      return true;\n    }\n    return false;\n  }\n}\nexport class DefaultConfigurationModel extends ConfigurationModel {\n  constructor() {\n    const contents = getDefaultValues();\n    const keys = getConfigurationKeys();\n    const overrides = [];\n    for (const key of Object.keys(contents)) {\n      if (OVERRIDE_PROPERTY_PATTERN.test(key)) {\n        overrides.push({\n          identifiers: [overrideIdentifierFromKey(key).trim()],\n          keys: Object.keys(contents[key]),\n          contents: toValuesTree(contents[key], message => console.error(\"Conflict in default settings file: \".concat(message)))\n        });\n      }\n    }\n    super(contents, keys, overrides);\n  }\n}\nexport class Configuration {\n  constructor(_defaultConfiguration, _localUserConfiguration) {\n    let _remoteUserConfiguration = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new ConfigurationModel();\n    let _workspaceConfiguration = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new ConfigurationModel();\n    let _folderConfigurations = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : new ResourceMap();\n    let _memoryConfiguration = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : new ConfigurationModel();\n    let _memoryConfigurationByResource = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new ResourceMap();\n    let _freeze = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : true;\n    this._defaultConfiguration = _defaultConfiguration;\n    this._localUserConfiguration = _localUserConfiguration;\n    this._remoteUserConfiguration = _remoteUserConfiguration;\n    this._workspaceConfiguration = _workspaceConfiguration;\n    this._folderConfigurations = _folderConfigurations;\n    this._memoryConfiguration = _memoryConfiguration;\n    this._memoryConfigurationByResource = _memoryConfigurationByResource;\n    this._freeze = _freeze;\n    this._workspaceConsolidatedConfiguration = null;\n    this._foldersConsolidatedConfigurations = new ResourceMap();\n    this._userConfiguration = null;\n  }\n  getValue(section, overrides, workspace) {\n    const consolidateConfigurationModel = this.getConsolidateConfigurationModel(overrides, workspace);\n    return consolidateConfigurationModel.getValue(section);\n  }\n  updateValue(key, value) {\n    let overrides = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let memoryConfiguration;\n    if (overrides.resource) {\n      memoryConfiguration = this._memoryConfigurationByResource.get(overrides.resource);\n      if (!memoryConfiguration) {\n        memoryConfiguration = new ConfigurationModel();\n        this._memoryConfigurationByResource.set(overrides.resource, memoryConfiguration);\n      }\n    } else {\n      memoryConfiguration = this._memoryConfiguration;\n    }\n    if (value === undefined) {\n      memoryConfiguration.removeValue(key);\n    } else {\n      memoryConfiguration.setValue(key, value);\n    }\n    if (!overrides.resource) {\n      this._workspaceConsolidatedConfiguration = null;\n    }\n  }\n  get userConfiguration() {\n    if (!this._userConfiguration) {\n      this._userConfiguration = this._remoteUserConfiguration.isEmpty() ? this._localUserConfiguration : this._localUserConfiguration.merge(this._remoteUserConfiguration);\n      if (this._freeze) {\n        this._userConfiguration.freeze();\n      }\n    }\n    return this._userConfiguration;\n  }\n  getConsolidateConfigurationModel(overrides, workspace) {\n    let configurationModel = this.getConsolidatedConfigurationModelForResource(overrides, workspace);\n    return overrides.overrideIdentifier ? configurationModel.override(overrides.overrideIdentifier) : configurationModel;\n  }\n  getConsolidatedConfigurationModelForResource(_ref, workspace) {\n    let {\n      resource\n    } = _ref;\n    let consolidateConfiguration = this.getWorkspaceConsolidatedConfiguration();\n    if (workspace && resource) {\n      const root = workspace.getFolder(resource);\n      if (root) {\n        consolidateConfiguration = this.getFolderConsolidatedConfiguration(root.uri) || consolidateConfiguration;\n      }\n      const memoryConfigurationForResource = this._memoryConfigurationByResource.get(resource);\n      if (memoryConfigurationForResource) {\n        consolidateConfiguration = consolidateConfiguration.merge(memoryConfigurationForResource);\n      }\n    }\n    return consolidateConfiguration;\n  }\n  getWorkspaceConsolidatedConfiguration() {\n    if (!this._workspaceConsolidatedConfiguration) {\n      this._workspaceConsolidatedConfiguration = this._defaultConfiguration.merge(this.userConfiguration, this._workspaceConfiguration, this._memoryConfiguration);\n      if (this._freeze) {\n        this._workspaceConfiguration = this._workspaceConfiguration.freeze();\n      }\n    }\n    return this._workspaceConsolidatedConfiguration;\n  }\n  getFolderConsolidatedConfiguration(folder) {\n    let folderConsolidatedConfiguration = this._foldersConsolidatedConfigurations.get(folder);\n    if (!folderConsolidatedConfiguration) {\n      const workspaceConsolidateConfiguration = this.getWorkspaceConsolidatedConfiguration();\n      const folderConfiguration = this._folderConfigurations.get(folder);\n      if (folderConfiguration) {\n        folderConsolidatedConfiguration = workspaceConsolidateConfiguration.merge(folderConfiguration);\n        if (this._freeze) {\n          folderConsolidatedConfiguration = folderConsolidatedConfiguration.freeze();\n        }\n        this._foldersConsolidatedConfigurations.set(folder, folderConsolidatedConfiguration);\n      } else {\n        folderConsolidatedConfiguration = workspaceConsolidateConfiguration;\n      }\n    }\n    return folderConsolidatedConfiguration;\n  }\n  toData() {\n    return {\n      defaults: {\n        contents: this._defaultConfiguration.contents,\n        overrides: this._defaultConfiguration.overrides,\n        keys: this._defaultConfiguration.keys\n      },\n      user: {\n        contents: this.userConfiguration.contents,\n        overrides: this.userConfiguration.overrides,\n        keys: this.userConfiguration.keys\n      },\n      workspace: {\n        contents: this._workspaceConfiguration.contents,\n        overrides: this._workspaceConfiguration.overrides,\n        keys: this._workspaceConfiguration.keys\n      },\n      folders: [...this._folderConfigurations.keys()].reduce((result, folder) => {\n        const {\n          contents,\n          overrides,\n          keys\n        } = this._folderConfigurations.get(folder);\n        result.push([folder, {\n          contents,\n          overrides,\n          keys\n        }]);\n        return result;\n      }, [])\n    };\n  }\n  static parse(data) {\n    const defaultConfiguration = this.parseConfigurationModel(data.defaults);\n    const userConfiguration = this.parseConfigurationModel(data.user);\n    const workspaceConfiguration = this.parseConfigurationModel(data.workspace);\n    const folders = data.folders.reduce((result, value) => {\n      result.set(URI.revive(value[0]), this.parseConfigurationModel(value[1]));\n      return result;\n    }, new ResourceMap());\n    return new Configuration(defaultConfiguration, userConfiguration, new ConfigurationModel(), workspaceConfiguration, folders, new ConfigurationModel(), new ResourceMap(), false);\n  }\n  static parseConfigurationModel(model) {\n    return new ConfigurationModel(model.contents, model.keys, model.overrides).freeze();\n  }\n}\nexport class ConfigurationChangeEvent {\n  constructor(change, previous, currentConfiguraiton, currentWorkspace) {\n    this.change = change;\n    this.previous = previous;\n    this.currentConfiguraiton = currentConfiguraiton;\n    this.currentWorkspace = currentWorkspace;\n    this._previousConfiguration = undefined;\n    const keysSet = new Set();\n    change.keys.forEach(key => keysSet.add(key));\n    change.overrides.forEach(_ref2 => {\n      let [, keys] = _ref2;\n      return keys.forEach(key => keysSet.add(key));\n    });\n    this.affectedKeys = [...keysSet.values()];\n    const configurationModel = new ConfigurationModel();\n    this.affectedKeys.forEach(key => configurationModel.setValue(key, {}));\n    this.affectedKeysTree = configurationModel.contents;\n  }\n  get previousConfiguration() {\n    if (!this._previousConfiguration && this.previous) {\n      this._previousConfiguration = Configuration.parse(this.previous.data);\n    }\n    return this._previousConfiguration;\n  }\n  affectsConfiguration(section, overrides) {\n    var _a;\n    if (this.doesAffectedKeysTreeContains(this.affectedKeysTree, section)) {\n      if (overrides) {\n        const value1 = this.previousConfiguration ? this.previousConfiguration.getValue(section, overrides, (_a = this.previous) === null || _a === void 0 ? void 0 : _a.workspace) : undefined;\n        const value2 = this.currentConfiguraiton.getValue(section, overrides, this.currentWorkspace);\n        return !objects.equals(value1, value2);\n      }\n      return true;\n    }\n    return false;\n  }\n  doesAffectedKeysTreeContains(affectedKeysTree, section) {\n    let requestedTree = toValuesTree({\n      [section]: true\n    }, () => {});\n    let key;\n    while (typeof requestedTree === 'object' && (key = Object.keys(requestedTree)[0])) {\n      // Only one key should present, since we added only one property\n      affectedKeysTree = affectedKeysTree[key];\n      if (!affectedKeysTree) {\n        return false; // Requested tree is not found\n      }\n\n      requestedTree = requestedTree[key];\n    }\n    return true;\n  }\n}","map":{"version":3,"names":["ResourceMap","arrays","types","objects","URI","OVERRIDE_PROPERTY_PATTERN","overrideIdentifierFromKey","addToValueTree","toValuesTree","getConfigurationValue","getDefaultValues","getConfigurationKeys","removeFromValueTree","ConfigurationModel","constructor","_contents","arguments","length","undefined","_keys","_overrides","isFrozen","contents","checkAndFreeze","overrides","keys","isEmpty","Object","getValue","section","override","identifier","overrideContents","getContentsForOverrideIdentifer","key","distinct","contentsForKey","overrideContentsForKey","deepClone","mergeContents","merge","_len","others","Array","_key","other","otherOverride","filter","o","equals","identifiers","push","indexOf","freeze","source","target","isObject","data","deepFreeze","toJSON","setValue","value","addKey","e","Error","removeValue","removeKey","index","i","splice","DefaultConfigurationModel","test","trim","message","console","error","concat","Configuration","_defaultConfiguration","_localUserConfiguration","_remoteUserConfiguration","_workspaceConfiguration","_folderConfigurations","_memoryConfiguration","_memoryConfigurationByResource","_freeze","_workspaceConsolidatedConfiguration","_foldersConsolidatedConfigurations","_userConfiguration","workspace","consolidateConfigurationModel","getConsolidateConfigurationModel","updateValue","memoryConfiguration","resource","get","set","userConfiguration","configurationModel","getConsolidatedConfigurationModelForResource","overrideIdentifier","_ref","consolidateConfiguration","getWorkspaceConsolidatedConfiguration","root","getFolder","getFolderConsolidatedConfiguration","uri","memoryConfigurationForResource","folder","folderConsolidatedConfiguration","workspaceConsolidateConfiguration","folderConfiguration","toData","defaults","user","folders","reduce","result","parse","defaultConfiguration","parseConfigurationModel","workspaceConfiguration","revive","model","ConfigurationChangeEvent","change","previous","currentConfiguraiton","currentWorkspace","_previousConfiguration","keysSet","Set","forEach","add","_ref2","affectedKeys","values","affectedKeysTree","previousConfiguration","affectsConfiguration","_a","doesAffectedKeysTreeContains","value1","value2","requestedTree"],"sources":["C:/Users/Administrator/Desktop/sqllineage-master/sqllineagejs/node_modules/monaco-editor/esm/vs/platform/configuration/common/configurationModels.js"],"sourcesContent":["import { ResourceMap } from '../../../base/common/map.js';\r\nimport * as arrays from '../../../base/common/arrays.js';\r\nimport * as types from '../../../base/common/types.js';\r\nimport * as objects from '../../../base/common/objects.js';\r\nimport { URI } from '../../../base/common/uri.js';\r\nimport { OVERRIDE_PROPERTY_PATTERN, overrideIdentifierFromKey } from './configurationRegistry.js';\r\nimport { addToValueTree, toValuesTree, getConfigurationValue, getDefaultValues, getConfigurationKeys, removeFromValueTree } from './configuration.js';\r\nexport class ConfigurationModel {\r\n    constructor(_contents = {}, _keys = [], _overrides = []) {\r\n        this._contents = _contents;\r\n        this._keys = _keys;\r\n        this._overrides = _overrides;\r\n        this.isFrozen = false;\r\n    }\r\n    get contents() {\r\n        return this.checkAndFreeze(this._contents);\r\n    }\r\n    get overrides() {\r\n        return this.checkAndFreeze(this._overrides);\r\n    }\r\n    get keys() {\r\n        return this.checkAndFreeze(this._keys);\r\n    }\r\n    isEmpty() {\r\n        return this._keys.length === 0 && Object.keys(this._contents).length === 0 && this._overrides.length === 0;\r\n    }\r\n    getValue(section) {\r\n        return section ? getConfigurationValue(this.contents, section) : this.contents;\r\n    }\r\n    override(identifier) {\r\n        const overrideContents = this.getContentsForOverrideIdentifer(identifier);\r\n        if (!overrideContents || typeof overrideContents !== 'object' || !Object.keys(overrideContents).length) {\r\n            // If there are no valid overrides, return self\r\n            return this;\r\n        }\r\n        let contents = {};\r\n        for (const key of arrays.distinct([...Object.keys(this.contents), ...Object.keys(overrideContents)])) {\r\n            let contentsForKey = this.contents[key];\r\n            let overrideContentsForKey = overrideContents[key];\r\n            // If there are override contents for the key, clone and merge otherwise use base contents\r\n            if (overrideContentsForKey) {\r\n                // Clone and merge only if base contents and override contents are of type object otherwise just override\r\n                if (typeof contentsForKey === 'object' && typeof overrideContentsForKey === 'object') {\r\n                    contentsForKey = objects.deepClone(contentsForKey);\r\n                    this.mergeContents(contentsForKey, overrideContentsForKey);\r\n                }\r\n                else {\r\n                    contentsForKey = overrideContentsForKey;\r\n                }\r\n            }\r\n            contents[key] = contentsForKey;\r\n        }\r\n        return new ConfigurationModel(contents, this.keys, this.overrides);\r\n    }\r\n    merge(...others) {\r\n        const contents = objects.deepClone(this.contents);\r\n        const overrides = objects.deepClone(this.overrides);\r\n        const keys = [...this.keys];\r\n        for (const other of others) {\r\n            this.mergeContents(contents, other.contents);\r\n            for (const otherOverride of other.overrides) {\r\n                const [override] = overrides.filter(o => arrays.equals(o.identifiers, otherOverride.identifiers));\r\n                if (override) {\r\n                    this.mergeContents(override.contents, otherOverride.contents);\r\n                }\r\n                else {\r\n                    overrides.push(objects.deepClone(otherOverride));\r\n                }\r\n            }\r\n            for (const key of other.keys) {\r\n                if (keys.indexOf(key) === -1) {\r\n                    keys.push(key);\r\n                }\r\n            }\r\n        }\r\n        return new ConfigurationModel(contents, keys, overrides);\r\n    }\r\n    freeze() {\r\n        this.isFrozen = true;\r\n        return this;\r\n    }\r\n    mergeContents(source, target) {\r\n        for (const key of Object.keys(target)) {\r\n            if (key in source) {\r\n                if (types.isObject(source[key]) && types.isObject(target[key])) {\r\n                    this.mergeContents(source[key], target[key]);\r\n                    continue;\r\n                }\r\n            }\r\n            source[key] = objects.deepClone(target[key]);\r\n        }\r\n    }\r\n    checkAndFreeze(data) {\r\n        if (this.isFrozen && !Object.isFrozen(data)) {\r\n            return objects.deepFreeze(data);\r\n        }\r\n        return data;\r\n    }\r\n    getContentsForOverrideIdentifer(identifier) {\r\n        for (const override of this.overrides) {\r\n            if (override.identifiers.indexOf(identifier) !== -1) {\r\n                return override.contents;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    toJSON() {\r\n        return {\r\n            contents: this.contents,\r\n            overrides: this.overrides,\r\n            keys: this.keys\r\n        };\r\n    }\r\n    // Update methods\r\n    setValue(key, value) {\r\n        this.addKey(key);\r\n        addToValueTree(this.contents, key, value, e => { throw new Error(e); });\r\n    }\r\n    removeValue(key) {\r\n        if (this.removeKey(key)) {\r\n            removeFromValueTree(this.contents, key);\r\n        }\r\n    }\r\n    addKey(key) {\r\n        let index = this.keys.length;\r\n        for (let i = 0; i < index; i++) {\r\n            if (key.indexOf(this.keys[i]) === 0) {\r\n                index = i;\r\n            }\r\n        }\r\n        this.keys.splice(index, 1, key);\r\n    }\r\n    removeKey(key) {\r\n        let index = this.keys.indexOf(key);\r\n        if (index !== -1) {\r\n            this.keys.splice(index, 1);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\nexport class DefaultConfigurationModel extends ConfigurationModel {\r\n    constructor() {\r\n        const contents = getDefaultValues();\r\n        const keys = getConfigurationKeys();\r\n        const overrides = [];\r\n        for (const key of Object.keys(contents)) {\r\n            if (OVERRIDE_PROPERTY_PATTERN.test(key)) {\r\n                overrides.push({\r\n                    identifiers: [overrideIdentifierFromKey(key).trim()],\r\n                    keys: Object.keys(contents[key]),\r\n                    contents: toValuesTree(contents[key], message => console.error(`Conflict in default settings file: ${message}`)),\r\n                });\r\n            }\r\n        }\r\n        super(contents, keys, overrides);\r\n    }\r\n}\r\nexport class Configuration {\r\n    constructor(_defaultConfiguration, _localUserConfiguration, _remoteUserConfiguration = new ConfigurationModel(), _workspaceConfiguration = new ConfigurationModel(), _folderConfigurations = new ResourceMap(), _memoryConfiguration = new ConfigurationModel(), _memoryConfigurationByResource = new ResourceMap(), _freeze = true) {\r\n        this._defaultConfiguration = _defaultConfiguration;\r\n        this._localUserConfiguration = _localUserConfiguration;\r\n        this._remoteUserConfiguration = _remoteUserConfiguration;\r\n        this._workspaceConfiguration = _workspaceConfiguration;\r\n        this._folderConfigurations = _folderConfigurations;\r\n        this._memoryConfiguration = _memoryConfiguration;\r\n        this._memoryConfigurationByResource = _memoryConfigurationByResource;\r\n        this._freeze = _freeze;\r\n        this._workspaceConsolidatedConfiguration = null;\r\n        this._foldersConsolidatedConfigurations = new ResourceMap();\r\n        this._userConfiguration = null;\r\n    }\r\n    getValue(section, overrides, workspace) {\r\n        const consolidateConfigurationModel = this.getConsolidateConfigurationModel(overrides, workspace);\r\n        return consolidateConfigurationModel.getValue(section);\r\n    }\r\n    updateValue(key, value, overrides = {}) {\r\n        let memoryConfiguration;\r\n        if (overrides.resource) {\r\n            memoryConfiguration = this._memoryConfigurationByResource.get(overrides.resource);\r\n            if (!memoryConfiguration) {\r\n                memoryConfiguration = new ConfigurationModel();\r\n                this._memoryConfigurationByResource.set(overrides.resource, memoryConfiguration);\r\n            }\r\n        }\r\n        else {\r\n            memoryConfiguration = this._memoryConfiguration;\r\n        }\r\n        if (value === undefined) {\r\n            memoryConfiguration.removeValue(key);\r\n        }\r\n        else {\r\n            memoryConfiguration.setValue(key, value);\r\n        }\r\n        if (!overrides.resource) {\r\n            this._workspaceConsolidatedConfiguration = null;\r\n        }\r\n    }\r\n    get userConfiguration() {\r\n        if (!this._userConfiguration) {\r\n            this._userConfiguration = this._remoteUserConfiguration.isEmpty() ? this._localUserConfiguration : this._localUserConfiguration.merge(this._remoteUserConfiguration);\r\n            if (this._freeze) {\r\n                this._userConfiguration.freeze();\r\n            }\r\n        }\r\n        return this._userConfiguration;\r\n    }\r\n    getConsolidateConfigurationModel(overrides, workspace) {\r\n        let configurationModel = this.getConsolidatedConfigurationModelForResource(overrides, workspace);\r\n        return overrides.overrideIdentifier ? configurationModel.override(overrides.overrideIdentifier) : configurationModel;\r\n    }\r\n    getConsolidatedConfigurationModelForResource({ resource }, workspace) {\r\n        let consolidateConfiguration = this.getWorkspaceConsolidatedConfiguration();\r\n        if (workspace && resource) {\r\n            const root = workspace.getFolder(resource);\r\n            if (root) {\r\n                consolidateConfiguration = this.getFolderConsolidatedConfiguration(root.uri) || consolidateConfiguration;\r\n            }\r\n            const memoryConfigurationForResource = this._memoryConfigurationByResource.get(resource);\r\n            if (memoryConfigurationForResource) {\r\n                consolidateConfiguration = consolidateConfiguration.merge(memoryConfigurationForResource);\r\n            }\r\n        }\r\n        return consolidateConfiguration;\r\n    }\r\n    getWorkspaceConsolidatedConfiguration() {\r\n        if (!this._workspaceConsolidatedConfiguration) {\r\n            this._workspaceConsolidatedConfiguration = this._defaultConfiguration.merge(this.userConfiguration, this._workspaceConfiguration, this._memoryConfiguration);\r\n            if (this._freeze) {\r\n                this._workspaceConfiguration = this._workspaceConfiguration.freeze();\r\n            }\r\n        }\r\n        return this._workspaceConsolidatedConfiguration;\r\n    }\r\n    getFolderConsolidatedConfiguration(folder) {\r\n        let folderConsolidatedConfiguration = this._foldersConsolidatedConfigurations.get(folder);\r\n        if (!folderConsolidatedConfiguration) {\r\n            const workspaceConsolidateConfiguration = this.getWorkspaceConsolidatedConfiguration();\r\n            const folderConfiguration = this._folderConfigurations.get(folder);\r\n            if (folderConfiguration) {\r\n                folderConsolidatedConfiguration = workspaceConsolidateConfiguration.merge(folderConfiguration);\r\n                if (this._freeze) {\r\n                    folderConsolidatedConfiguration = folderConsolidatedConfiguration.freeze();\r\n                }\r\n                this._foldersConsolidatedConfigurations.set(folder, folderConsolidatedConfiguration);\r\n            }\r\n            else {\r\n                folderConsolidatedConfiguration = workspaceConsolidateConfiguration;\r\n            }\r\n        }\r\n        return folderConsolidatedConfiguration;\r\n    }\r\n    toData() {\r\n        return {\r\n            defaults: {\r\n                contents: this._defaultConfiguration.contents,\r\n                overrides: this._defaultConfiguration.overrides,\r\n                keys: this._defaultConfiguration.keys\r\n            },\r\n            user: {\r\n                contents: this.userConfiguration.contents,\r\n                overrides: this.userConfiguration.overrides,\r\n                keys: this.userConfiguration.keys\r\n            },\r\n            workspace: {\r\n                contents: this._workspaceConfiguration.contents,\r\n                overrides: this._workspaceConfiguration.overrides,\r\n                keys: this._workspaceConfiguration.keys\r\n            },\r\n            folders: [...this._folderConfigurations.keys()].reduce((result, folder) => {\r\n                const { contents, overrides, keys } = this._folderConfigurations.get(folder);\r\n                result.push([folder, { contents, overrides, keys }]);\r\n                return result;\r\n            }, [])\r\n        };\r\n    }\r\n    static parse(data) {\r\n        const defaultConfiguration = this.parseConfigurationModel(data.defaults);\r\n        const userConfiguration = this.parseConfigurationModel(data.user);\r\n        const workspaceConfiguration = this.parseConfigurationModel(data.workspace);\r\n        const folders = data.folders.reduce((result, value) => {\r\n            result.set(URI.revive(value[0]), this.parseConfigurationModel(value[1]));\r\n            return result;\r\n        }, new ResourceMap());\r\n        return new Configuration(defaultConfiguration, userConfiguration, new ConfigurationModel(), workspaceConfiguration, folders, new ConfigurationModel(), new ResourceMap(), false);\r\n    }\r\n    static parseConfigurationModel(model) {\r\n        return new ConfigurationModel(model.contents, model.keys, model.overrides).freeze();\r\n    }\r\n}\r\nexport class ConfigurationChangeEvent {\r\n    constructor(change, previous, currentConfiguraiton, currentWorkspace) {\r\n        this.change = change;\r\n        this.previous = previous;\r\n        this.currentConfiguraiton = currentConfiguraiton;\r\n        this.currentWorkspace = currentWorkspace;\r\n        this._previousConfiguration = undefined;\r\n        const keysSet = new Set();\r\n        change.keys.forEach(key => keysSet.add(key));\r\n        change.overrides.forEach(([, keys]) => keys.forEach(key => keysSet.add(key)));\r\n        this.affectedKeys = [...keysSet.values()];\r\n        const configurationModel = new ConfigurationModel();\r\n        this.affectedKeys.forEach(key => configurationModel.setValue(key, {}));\r\n        this.affectedKeysTree = configurationModel.contents;\r\n    }\r\n    get previousConfiguration() {\r\n        if (!this._previousConfiguration && this.previous) {\r\n            this._previousConfiguration = Configuration.parse(this.previous.data);\r\n        }\r\n        return this._previousConfiguration;\r\n    }\r\n    affectsConfiguration(section, overrides) {\r\n        var _a;\r\n        if (this.doesAffectedKeysTreeContains(this.affectedKeysTree, section)) {\r\n            if (overrides) {\r\n                const value1 = this.previousConfiguration ? this.previousConfiguration.getValue(section, overrides, (_a = this.previous) === null || _a === void 0 ? void 0 : _a.workspace) : undefined;\r\n                const value2 = this.currentConfiguraiton.getValue(section, overrides, this.currentWorkspace);\r\n                return !objects.equals(value1, value2);\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    doesAffectedKeysTreeContains(affectedKeysTree, section) {\r\n        let requestedTree = toValuesTree({ [section]: true }, () => { });\r\n        let key;\r\n        while (typeof requestedTree === 'object' && (key = Object.keys(requestedTree)[0])) { // Only one key should present, since we added only one property\r\n            affectedKeysTree = affectedKeysTree[key];\r\n            if (!affectedKeysTree) {\r\n                return false; // Requested tree is not found\r\n            }\r\n            requestedTree = requestedTree[key];\r\n        }\r\n        return true;\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}