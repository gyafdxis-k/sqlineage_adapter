{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { isNonEmptyArray } from '../../../base/common/arrays.js';\nimport { CancellationToken } from '../../../base/common/cancellation.js';\nimport { KeyChord } from '../../../base/common/keyCodes.js';\nimport { DisposableStore } from '../../../base/common/lifecycle.js';\nimport { EditorAction, registerEditorAction, registerEditorContribution } from '../../browser/editorExtensions.js';\nimport { ICodeEditorService } from '../../browser/services/codeEditorService.js';\nimport { CharacterSet } from '../../common/core/characterClassifier.js';\nimport { Range } from '../../common/core/range.js';\nimport { EditorContextKeys } from '../../common/editorContextKeys.js';\nimport { DocumentRangeFormattingEditProviderRegistry, OnTypeFormattingEditProviderRegistry } from '../../common/modes.js';\nimport { IEditorWorkerService } from '../../common/services/editorWorkerService.js';\nimport { getOnTypeFormattingEdits, alertFormattingEdits, formatDocumentRangesWithSelectedProvider, formatDocumentWithSelectedProvider } from './format.js';\nimport { FormattingEdit } from './formattingEdit.js';\nimport * as nls from '../../../nls.js';\nimport { CommandsRegistry, ICommandService } from '../../../platform/commands/common/commands.js';\nimport { ContextKeyExpr } from '../../../platform/contextkey/common/contextkey.js';\nimport { IInstantiationService } from '../../../platform/instantiation/common/instantiation.js';\nimport { onUnexpectedError } from '../../../base/common/errors.js';\nimport { Progress, IEditorProgressService } from '../../../platform/progress/common/progress.js';\nlet FormatOnType = class FormatOnType {\n  constructor(editor, _workerService) {\n    this._workerService = _workerService;\n    this._callOnDispose = new DisposableStore();\n    this._callOnModel = new DisposableStore();\n    this._editor = editor;\n    this._callOnDispose.add(editor.onDidChangeConfiguration(() => this._update()));\n    this._callOnDispose.add(editor.onDidChangeModel(() => this._update()));\n    this._callOnDispose.add(editor.onDidChangeModelLanguage(() => this._update()));\n    this._callOnDispose.add(OnTypeFormattingEditProviderRegistry.onDidChange(this._update, this));\n  }\n  dispose() {\n    this._callOnDispose.dispose();\n    this._callOnModel.dispose();\n  }\n  _update() {\n    // clean up\n    this._callOnModel.clear();\n    // we are disabled\n    if (!this._editor.getOption(43 /* formatOnType */)) {\n      return;\n    }\n    // no model\n    if (!this._editor.hasModel()) {\n      return;\n    }\n    const model = this._editor.getModel();\n    // no support\n    const [support] = OnTypeFormattingEditProviderRegistry.ordered(model);\n    if (!support || !support.autoFormatTriggerCharacters) {\n      return;\n    }\n    // register typing listeners that will trigger the format\n    let triggerChars = new CharacterSet();\n    for (let ch of support.autoFormatTriggerCharacters) {\n      triggerChars.add(ch.charCodeAt(0));\n    }\n    this._callOnModel.add(this._editor.onDidType(text => {\n      let lastCharCode = text.charCodeAt(text.length - 1);\n      if (triggerChars.has(lastCharCode)) {\n        this._trigger(String.fromCharCode(lastCharCode));\n      }\n    }));\n  }\n  _trigger(ch) {\n    if (!this._editor.hasModel()) {\n      return;\n    }\n    if (this._editor.getSelections().length > 1) {\n      return;\n    }\n    const model = this._editor.getModel();\n    const position = this._editor.getPosition();\n    let canceled = false;\n    // install a listener that checks if edits happens before the\n    // position on which we format right now. If so, we won't\n    // apply the format edits\n    const unbind = this._editor.onDidChangeModelContent(e => {\n      if (e.isFlush) {\n        // a model.setValue() was called\n        // cancel only once\n        canceled = true;\n        unbind.dispose();\n        return;\n      }\n      for (let i = 0, len = e.changes.length; i < len; i++) {\n        const change = e.changes[i];\n        if (change.range.endLineNumber <= position.lineNumber) {\n          // cancel only once\n          canceled = true;\n          unbind.dispose();\n          return;\n        }\n      }\n    });\n    getOnTypeFormattingEdits(this._workerService, model, position, ch, model.getFormattingOptions()).then(edits => {\n      unbind.dispose();\n      if (canceled) {\n        return;\n      }\n      if (isNonEmptyArray(edits)) {\n        FormattingEdit.execute(this._editor, edits, true);\n        alertFormattingEdits(edits);\n      }\n    }, err => {\n      unbind.dispose();\n      throw err;\n    });\n  }\n};\nFormatOnType.ID = 'editor.contrib.autoFormat';\nFormatOnType = __decorate([__param(1, IEditorWorkerService)], FormatOnType);\nlet FormatOnPaste = class FormatOnPaste {\n  constructor(editor, _instantiationService) {\n    this.editor = editor;\n    this._instantiationService = _instantiationService;\n    this._callOnDispose = new DisposableStore();\n    this._callOnModel = new DisposableStore();\n    this._callOnDispose.add(editor.onDidChangeConfiguration(() => this._update()));\n    this._callOnDispose.add(editor.onDidChangeModel(() => this._update()));\n    this._callOnDispose.add(editor.onDidChangeModelLanguage(() => this._update()));\n    this._callOnDispose.add(DocumentRangeFormattingEditProviderRegistry.onDidChange(this._update, this));\n  }\n  dispose() {\n    this._callOnDispose.dispose();\n    this._callOnModel.dispose();\n  }\n  _update() {\n    // clean up\n    this._callOnModel.clear();\n    // we are disabled\n    if (!this.editor.getOption(42 /* formatOnPaste */)) {\n      return;\n    }\n    // no model\n    if (!this.editor.hasModel()) {\n      return;\n    }\n    // no formatter\n    if (!DocumentRangeFormattingEditProviderRegistry.has(this.editor.getModel())) {\n      return;\n    }\n    this._callOnModel.add(this.editor.onDidPaste(_ref => {\n      let {\n        range\n      } = _ref;\n      return this._trigger(range);\n    }));\n  }\n  _trigger(range) {\n    if (!this.editor.hasModel()) {\n      return;\n    }\n    if (this.editor.getSelections().length > 1) {\n      return;\n    }\n    this._instantiationService.invokeFunction(formatDocumentRangesWithSelectedProvider, this.editor, range, 2 /* Silent */, Progress.None, CancellationToken.None).catch(onUnexpectedError);\n  }\n};\nFormatOnPaste.ID = 'editor.contrib.formatOnPaste';\nFormatOnPaste = __decorate([__param(1, IInstantiationService)], FormatOnPaste);\nclass FormatDocumentAction extends EditorAction {\n  constructor() {\n    super({\n      id: 'editor.action.formatDocument',\n      label: nls.localize('formatDocument.label', \"Format Document\"),\n      alias: 'Format Document',\n      precondition: ContextKeyExpr.and(EditorContextKeys.notInCompositeEditor, EditorContextKeys.writable, EditorContextKeys.hasDocumentFormattingProvider),\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: 1024 /* Shift */ | 512 /* Alt */ | 36 /* KEY_F */,\n        linux: {\n          primary: 2048 /* CtrlCmd */ | 1024 /* Shift */ | 39 /* KEY_I */\n        },\n        weight: 100 /* EditorContrib */\n      },\n\n      contextMenuOpts: {\n        group: '1_modification',\n        order: 1.3\n      }\n    });\n  }\n  run(accessor, editor) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (editor.hasModel()) {\n        const instaService = accessor.get(IInstantiationService);\n        const progressService = accessor.get(IEditorProgressService);\n        yield progressService.showWhile(instaService.invokeFunction(formatDocumentWithSelectedProvider, editor, 1 /* Explicit */, Progress.None, CancellationToken.None), 250);\n      }\n    });\n  }\n}\nclass FormatSelectionAction extends EditorAction {\n  constructor() {\n    super({\n      id: 'editor.action.formatSelection',\n      label: nls.localize('formatSelection.label', \"Format Selection\"),\n      alias: 'Format Selection',\n      precondition: ContextKeyExpr.and(EditorContextKeys.writable, EditorContextKeys.hasDocumentSelectionFormattingProvider),\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: KeyChord(2048 /* CtrlCmd */ | 41 /* KEY_K */, 2048 /* CtrlCmd */ | 36 /* KEY_F */),\n        weight: 100 /* EditorContrib */\n      },\n\n      contextMenuOpts: {\n        when: EditorContextKeys.hasNonEmptySelection,\n        group: '1_modification',\n        order: 1.31\n      }\n    });\n  }\n  run(accessor, editor) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!editor.hasModel()) {\n        return;\n      }\n      const instaService = accessor.get(IInstantiationService);\n      const model = editor.getModel();\n      const ranges = editor.getSelections().map(range => {\n        return range.isEmpty() ? new Range(range.startLineNumber, 1, range.startLineNumber, model.getLineMaxColumn(range.startLineNumber)) : range;\n      });\n      const progressService = accessor.get(IEditorProgressService);\n      yield progressService.showWhile(instaService.invokeFunction(formatDocumentRangesWithSelectedProvider, editor, ranges, 1 /* Explicit */, Progress.None, CancellationToken.None), 250);\n    });\n  }\n}\nregisterEditorContribution(FormatOnType.ID, FormatOnType);\nregisterEditorContribution(FormatOnPaste.ID, FormatOnPaste);\nregisterEditorAction(FormatDocumentAction);\nregisterEditorAction(FormatSelectionAction);\n// this is the old format action that does both (format document OR format selection)\n// and we keep it here such that existing keybinding configurations etc will still work\nCommandsRegistry.registerCommand('editor.action.format', accessor => __awaiter(void 0, void 0, void 0, function* () {\n  const editor = accessor.get(ICodeEditorService).getFocusedCodeEditor();\n  if (!editor || !editor.hasModel()) {\n    return;\n  }\n  const commandService = accessor.get(ICommandService);\n  if (editor.getSelection().isEmpty()) {\n    yield commandService.executeCommand('editor.action.formatDocument');\n  } else {\n    yield commandService.executeCommand('editor.action.formatSelection');\n  }\n}));","map":{"version":3,"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","isNonEmptyArray","CancellationToken","KeyChord","DisposableStore","EditorAction","registerEditorAction","registerEditorContribution","ICodeEditorService","CharacterSet","Range","EditorContextKeys","DocumentRangeFormattingEditProviderRegistry","OnTypeFormattingEditProviderRegistry","IEditorWorkerService","getOnTypeFormattingEdits","alertFormattingEdits","formatDocumentRangesWithSelectedProvider","formatDocumentWithSelectedProvider","FormattingEdit","nls","CommandsRegistry","ICommandService","ContextKeyExpr","IInstantiationService","onUnexpectedError","Progress","IEditorProgressService","FormatOnType","constructor","editor","_workerService","_callOnDispose","_callOnModel","_editor","add","onDidChangeConfiguration","_update","onDidChangeModel","onDidChangeModelLanguage","onDidChange","dispose","clear","getOption","hasModel","model","getModel","support","ordered","autoFormatTriggerCharacters","triggerChars","ch","charCodeAt","onDidType","text","lastCharCode","has","_trigger","String","fromCharCode","getSelections","position","getPosition","canceled","unbind","onDidChangeModelContent","isFlush","len","changes","change","range","endLineNumber","lineNumber","getFormattingOptions","edits","execute","err","ID","FormatOnPaste","_instantiationService","onDidPaste","_ref","invokeFunction","None","catch","FormatDocumentAction","id","label","localize","alias","precondition","and","notInCompositeEditor","writable","hasDocumentFormattingProvider","kbOpts","kbExpr","editorTextFocus","primary","linux","weight","contextMenuOpts","group","order","run","accessor","instaService","get","progressService","showWhile","FormatSelectionAction","hasDocumentSelectionFormattingProvider","when","hasNonEmptySelection","ranges","map","isEmpty","startLineNumber","getLineMaxColumn","registerCommand","getFocusedCodeEditor","commandService","getSelection","executeCommand"],"sources":["C:/Users/Administrator/Desktop/sqllineage-master/sqllineagejs/node_modules/monaco-editor/esm/vs/editor/contrib/format/formatActions.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n};\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nimport { isNonEmptyArray } from '../../../base/common/arrays.js';\r\nimport { CancellationToken } from '../../../base/common/cancellation.js';\r\nimport { KeyChord } from '../../../base/common/keyCodes.js';\r\nimport { DisposableStore } from '../../../base/common/lifecycle.js';\r\nimport { EditorAction, registerEditorAction, registerEditorContribution } from '../../browser/editorExtensions.js';\r\nimport { ICodeEditorService } from '../../browser/services/codeEditorService.js';\r\nimport { CharacterSet } from '../../common/core/characterClassifier.js';\r\nimport { Range } from '../../common/core/range.js';\r\nimport { EditorContextKeys } from '../../common/editorContextKeys.js';\r\nimport { DocumentRangeFormattingEditProviderRegistry, OnTypeFormattingEditProviderRegistry } from '../../common/modes.js';\r\nimport { IEditorWorkerService } from '../../common/services/editorWorkerService.js';\r\nimport { getOnTypeFormattingEdits, alertFormattingEdits, formatDocumentRangesWithSelectedProvider, formatDocumentWithSelectedProvider } from './format.js';\r\nimport { FormattingEdit } from './formattingEdit.js';\r\nimport * as nls from '../../../nls.js';\r\nimport { CommandsRegistry, ICommandService } from '../../../platform/commands/common/commands.js';\r\nimport { ContextKeyExpr } from '../../../platform/contextkey/common/contextkey.js';\r\nimport { IInstantiationService } from '../../../platform/instantiation/common/instantiation.js';\r\nimport { onUnexpectedError } from '../../../base/common/errors.js';\r\nimport { Progress, IEditorProgressService } from '../../../platform/progress/common/progress.js';\r\nlet FormatOnType = class FormatOnType {\r\n    constructor(editor, _workerService) {\r\n        this._workerService = _workerService;\r\n        this._callOnDispose = new DisposableStore();\r\n        this._callOnModel = new DisposableStore();\r\n        this._editor = editor;\r\n        this._callOnDispose.add(editor.onDidChangeConfiguration(() => this._update()));\r\n        this._callOnDispose.add(editor.onDidChangeModel(() => this._update()));\r\n        this._callOnDispose.add(editor.onDidChangeModelLanguage(() => this._update()));\r\n        this._callOnDispose.add(OnTypeFormattingEditProviderRegistry.onDidChange(this._update, this));\r\n    }\r\n    dispose() {\r\n        this._callOnDispose.dispose();\r\n        this._callOnModel.dispose();\r\n    }\r\n    _update() {\r\n        // clean up\r\n        this._callOnModel.clear();\r\n        // we are disabled\r\n        if (!this._editor.getOption(43 /* formatOnType */)) {\r\n            return;\r\n        }\r\n        // no model\r\n        if (!this._editor.hasModel()) {\r\n            return;\r\n        }\r\n        const model = this._editor.getModel();\r\n        // no support\r\n        const [support] = OnTypeFormattingEditProviderRegistry.ordered(model);\r\n        if (!support || !support.autoFormatTriggerCharacters) {\r\n            return;\r\n        }\r\n        // register typing listeners that will trigger the format\r\n        let triggerChars = new CharacterSet();\r\n        for (let ch of support.autoFormatTriggerCharacters) {\r\n            triggerChars.add(ch.charCodeAt(0));\r\n        }\r\n        this._callOnModel.add(this._editor.onDidType((text) => {\r\n            let lastCharCode = text.charCodeAt(text.length - 1);\r\n            if (triggerChars.has(lastCharCode)) {\r\n                this._trigger(String.fromCharCode(lastCharCode));\r\n            }\r\n        }));\r\n    }\r\n    _trigger(ch) {\r\n        if (!this._editor.hasModel()) {\r\n            return;\r\n        }\r\n        if (this._editor.getSelections().length > 1) {\r\n            return;\r\n        }\r\n        const model = this._editor.getModel();\r\n        const position = this._editor.getPosition();\r\n        let canceled = false;\r\n        // install a listener that checks if edits happens before the\r\n        // position on which we format right now. If so, we won't\r\n        // apply the format edits\r\n        const unbind = this._editor.onDidChangeModelContent((e) => {\r\n            if (e.isFlush) {\r\n                // a model.setValue() was called\r\n                // cancel only once\r\n                canceled = true;\r\n                unbind.dispose();\r\n                return;\r\n            }\r\n            for (let i = 0, len = e.changes.length; i < len; i++) {\r\n                const change = e.changes[i];\r\n                if (change.range.endLineNumber <= position.lineNumber) {\r\n                    // cancel only once\r\n                    canceled = true;\r\n                    unbind.dispose();\r\n                    return;\r\n                }\r\n            }\r\n        });\r\n        getOnTypeFormattingEdits(this._workerService, model, position, ch, model.getFormattingOptions()).then(edits => {\r\n            unbind.dispose();\r\n            if (canceled) {\r\n                return;\r\n            }\r\n            if (isNonEmptyArray(edits)) {\r\n                FormattingEdit.execute(this._editor, edits, true);\r\n                alertFormattingEdits(edits);\r\n            }\r\n        }, (err) => {\r\n            unbind.dispose();\r\n            throw err;\r\n        });\r\n    }\r\n};\r\nFormatOnType.ID = 'editor.contrib.autoFormat';\r\nFormatOnType = __decorate([\r\n    __param(1, IEditorWorkerService)\r\n], FormatOnType);\r\nlet FormatOnPaste = class FormatOnPaste {\r\n    constructor(editor, _instantiationService) {\r\n        this.editor = editor;\r\n        this._instantiationService = _instantiationService;\r\n        this._callOnDispose = new DisposableStore();\r\n        this._callOnModel = new DisposableStore();\r\n        this._callOnDispose.add(editor.onDidChangeConfiguration(() => this._update()));\r\n        this._callOnDispose.add(editor.onDidChangeModel(() => this._update()));\r\n        this._callOnDispose.add(editor.onDidChangeModelLanguage(() => this._update()));\r\n        this._callOnDispose.add(DocumentRangeFormattingEditProviderRegistry.onDidChange(this._update, this));\r\n    }\r\n    dispose() {\r\n        this._callOnDispose.dispose();\r\n        this._callOnModel.dispose();\r\n    }\r\n    _update() {\r\n        // clean up\r\n        this._callOnModel.clear();\r\n        // we are disabled\r\n        if (!this.editor.getOption(42 /* formatOnPaste */)) {\r\n            return;\r\n        }\r\n        // no model\r\n        if (!this.editor.hasModel()) {\r\n            return;\r\n        }\r\n        // no formatter\r\n        if (!DocumentRangeFormattingEditProviderRegistry.has(this.editor.getModel())) {\r\n            return;\r\n        }\r\n        this._callOnModel.add(this.editor.onDidPaste(({ range }) => this._trigger(range)));\r\n    }\r\n    _trigger(range) {\r\n        if (!this.editor.hasModel()) {\r\n            return;\r\n        }\r\n        if (this.editor.getSelections().length > 1) {\r\n            return;\r\n        }\r\n        this._instantiationService.invokeFunction(formatDocumentRangesWithSelectedProvider, this.editor, range, 2 /* Silent */, Progress.None, CancellationToken.None).catch(onUnexpectedError);\r\n    }\r\n};\r\nFormatOnPaste.ID = 'editor.contrib.formatOnPaste';\r\nFormatOnPaste = __decorate([\r\n    __param(1, IInstantiationService)\r\n], FormatOnPaste);\r\nclass FormatDocumentAction extends EditorAction {\r\n    constructor() {\r\n        super({\r\n            id: 'editor.action.formatDocument',\r\n            label: nls.localize('formatDocument.label', \"Format Document\"),\r\n            alias: 'Format Document',\r\n            precondition: ContextKeyExpr.and(EditorContextKeys.notInCompositeEditor, EditorContextKeys.writable, EditorContextKeys.hasDocumentFormattingProvider),\r\n            kbOpts: {\r\n                kbExpr: EditorContextKeys.editorTextFocus,\r\n                primary: 1024 /* Shift */ | 512 /* Alt */ | 36 /* KEY_F */,\r\n                linux: { primary: 2048 /* CtrlCmd */ | 1024 /* Shift */ | 39 /* KEY_I */ },\r\n                weight: 100 /* EditorContrib */\r\n            },\r\n            contextMenuOpts: {\r\n                group: '1_modification',\r\n                order: 1.3\r\n            }\r\n        });\r\n    }\r\n    run(accessor, editor) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (editor.hasModel()) {\r\n                const instaService = accessor.get(IInstantiationService);\r\n                const progressService = accessor.get(IEditorProgressService);\r\n                yield progressService.showWhile(instaService.invokeFunction(formatDocumentWithSelectedProvider, editor, 1 /* Explicit */, Progress.None, CancellationToken.None), 250);\r\n            }\r\n        });\r\n    }\r\n}\r\nclass FormatSelectionAction extends EditorAction {\r\n    constructor() {\r\n        super({\r\n            id: 'editor.action.formatSelection',\r\n            label: nls.localize('formatSelection.label', \"Format Selection\"),\r\n            alias: 'Format Selection',\r\n            precondition: ContextKeyExpr.and(EditorContextKeys.writable, EditorContextKeys.hasDocumentSelectionFormattingProvider),\r\n            kbOpts: {\r\n                kbExpr: EditorContextKeys.editorTextFocus,\r\n                primary: KeyChord(2048 /* CtrlCmd */ | 41 /* KEY_K */, 2048 /* CtrlCmd */ | 36 /* KEY_F */),\r\n                weight: 100 /* EditorContrib */\r\n            },\r\n            contextMenuOpts: {\r\n                when: EditorContextKeys.hasNonEmptySelection,\r\n                group: '1_modification',\r\n                order: 1.31\r\n            }\r\n        });\r\n    }\r\n    run(accessor, editor) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (!editor.hasModel()) {\r\n                return;\r\n            }\r\n            const instaService = accessor.get(IInstantiationService);\r\n            const model = editor.getModel();\r\n            const ranges = editor.getSelections().map(range => {\r\n                return range.isEmpty()\r\n                    ? new Range(range.startLineNumber, 1, range.startLineNumber, model.getLineMaxColumn(range.startLineNumber))\r\n                    : range;\r\n            });\r\n            const progressService = accessor.get(IEditorProgressService);\r\n            yield progressService.showWhile(instaService.invokeFunction(formatDocumentRangesWithSelectedProvider, editor, ranges, 1 /* Explicit */, Progress.None, CancellationToken.None), 250);\r\n        });\r\n    }\r\n}\r\nregisterEditorContribution(FormatOnType.ID, FormatOnType);\r\nregisterEditorContribution(FormatOnPaste.ID, FormatOnPaste);\r\nregisterEditorAction(FormatDocumentAction);\r\nregisterEditorAction(FormatSelectionAction);\r\n// this is the old format action that does both (format document OR format selection)\r\n// and we keep it here such that existing keybinding configurations etc will still work\r\nCommandsRegistry.registerCommand('editor.action.format', (accessor) => __awaiter(void 0, void 0, void 0, function* () {\r\n    const editor = accessor.get(ICodeEditorService).getFocusedCodeEditor();\r\n    if (!editor || !editor.hasModel()) {\r\n        return;\r\n    }\r\n    const commandService = accessor.get(ICommandService);\r\n    if (editor.getSelection().isEmpty()) {\r\n        yield commandService.executeCommand('editor.action.formatDocument');\r\n    }\r\n    else {\r\n        yield commandService.executeCommand('editor.action.formatSelection');\r\n    }\r\n}));\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,IAAIA,UAAU,GAAI,IAAI,IAAI,IAAI,CAACA,UAAU,IAAK,UAAUC,UAAU,EAAEC,MAAM,EAAEC,GAAG,EAAEC,IAAI,EAAE;EACnF,IAAIC,CAAC,GAAGC,SAAS,CAACC,MAAM;IAAEC,CAAC,GAAGH,CAAC,GAAG,CAAC,GAAGH,MAAM,GAAGE,IAAI,KAAK,IAAI,GAAGA,IAAI,GAAGK,MAAM,CAACC,wBAAwB,CAACR,MAAM,EAAEC,GAAG,CAAC,GAAGC,IAAI;IAAEO,CAAC;EAC5H,IAAI,OAAOC,OAAO,KAAK,QAAQ,IAAI,OAAOA,OAAO,CAACC,QAAQ,KAAK,UAAU,EAAEL,CAAC,GAAGI,OAAO,CAACC,QAAQ,CAACZ,UAAU,EAAEC,MAAM,EAAEC,GAAG,EAAEC,IAAI,CAAC,CAAC,KAC1H,KAAK,IAAIU,CAAC,GAAGb,UAAU,CAACM,MAAM,GAAG,CAAC,EAAEO,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE,IAAIH,CAAC,GAAGV,UAAU,CAACa,CAAC,CAAC,EAAEN,CAAC,GAAG,CAACH,CAAC,GAAG,CAAC,GAAGM,CAAC,CAACH,CAAC,CAAC,GAAGH,CAAC,GAAG,CAAC,GAAGM,CAAC,CAACT,MAAM,EAAEC,GAAG,EAAEK,CAAC,CAAC,GAAGG,CAAC,CAACT,MAAM,EAAEC,GAAG,CAAC,KAAKK,CAAC;EACjJ,OAAOH,CAAC,GAAG,CAAC,IAAIG,CAAC,IAAIC,MAAM,CAACM,cAAc,CAACb,MAAM,EAAEC,GAAG,EAAEK,CAAC,CAAC,EAAEA,CAAC;AACjE,CAAC;AACD,IAAIQ,OAAO,GAAI,IAAI,IAAI,IAAI,CAACA,OAAO,IAAK,UAAUC,UAAU,EAAEC,SAAS,EAAE;EACrE,OAAO,UAAUhB,MAAM,EAAEC,GAAG,EAAE;IAAEe,SAAS,CAAChB,MAAM,EAAEC,GAAG,EAAEc,UAAU,CAAC;EAAE,CAAC;AACzE,CAAC;AACD,IAAIE,SAAS,GAAI,IAAI,IAAI,IAAI,CAACA,SAAS,IAAK,UAAUC,OAAO,EAAEC,UAAU,EAAEC,CAAC,EAAEC,SAAS,EAAE;EACrF,SAASC,KAAKA,CAACC,KAAK,EAAE;IAAE,OAAOA,KAAK,YAAYH,CAAC,GAAGG,KAAK,GAAG,IAAIH,CAAC,CAAC,UAAUI,OAAO,EAAE;MAAEA,OAAO,CAACD,KAAK,CAAC;IAAE,CAAC,CAAC;EAAE;EAC3G,OAAO,KAAKH,CAAC,KAAKA,CAAC,GAAGK,OAAO,CAAC,EAAE,UAAUD,OAAO,EAAEE,MAAM,EAAE;IACvD,SAASC,SAASA,CAACJ,KAAK,EAAE;MAAE,IAAI;QAAEK,IAAI,CAACP,SAAS,CAACQ,IAAI,CAACN,KAAK,CAAC,CAAC;MAAE,CAAC,CAAC,OAAOO,CAAC,EAAE;QAAEJ,MAAM,CAACI,CAAC,CAAC;MAAE;IAAE;IAC1F,SAASC,QAAQA,CAACR,KAAK,EAAE;MAAE,IAAI;QAAEK,IAAI,CAACP,SAAS,CAAC,OAAO,CAAC,CAACE,KAAK,CAAC,CAAC;MAAE,CAAC,CAAC,OAAOO,CAAC,EAAE;QAAEJ,MAAM,CAACI,CAAC,CAAC;MAAE;IAAE;IAC7F,SAASF,IAAIA,CAACI,MAAM,EAAE;MAAEA,MAAM,CAACC,IAAI,GAAGT,OAAO,CAACQ,MAAM,CAACT,KAAK,CAAC,GAAGD,KAAK,CAACU,MAAM,CAACT,KAAK,CAAC,CAACW,IAAI,CAACP,SAAS,EAAEI,QAAQ,CAAC;IAAE;IAC7GH,IAAI,CAAC,CAACP,SAAS,GAAGA,SAAS,CAACc,KAAK,CAACjB,OAAO,EAAEC,UAAU,IAAI,EAAE,CAAC,EAAEU,IAAI,CAAC,CAAC,CAAC;EACzE,CAAC,CAAC;AACN,CAAC;AACD,SAASO,eAAe,QAAQ,gCAAgC;AAChE,SAASC,iBAAiB,QAAQ,sCAAsC;AACxE,SAASC,QAAQ,QAAQ,kCAAkC;AAC3D,SAASC,eAAe,QAAQ,mCAAmC;AACnE,SAASC,YAAY,EAAEC,oBAAoB,EAAEC,0BAA0B,QAAQ,mCAAmC;AAClH,SAASC,kBAAkB,QAAQ,6CAA6C;AAChF,SAASC,YAAY,QAAQ,0CAA0C;AACvE,SAASC,KAAK,QAAQ,4BAA4B;AAClD,SAASC,iBAAiB,QAAQ,mCAAmC;AACrE,SAASC,2CAA2C,EAAEC,oCAAoC,QAAQ,uBAAuB;AACzH,SAASC,oBAAoB,QAAQ,8CAA8C;AACnF,SAASC,wBAAwB,EAAEC,oBAAoB,EAAEC,wCAAwC,EAAEC,kCAAkC,QAAQ,aAAa;AAC1J,SAASC,cAAc,QAAQ,qBAAqB;AACpD,OAAO,KAAKC,GAAG,MAAM,iBAAiB;AACtC,SAASC,gBAAgB,EAAEC,eAAe,QAAQ,+CAA+C;AACjG,SAASC,cAAc,QAAQ,mDAAmD;AAClF,SAASC,qBAAqB,QAAQ,yDAAyD;AAC/F,SAASC,iBAAiB,QAAQ,gCAAgC;AAClE,SAASC,QAAQ,EAAEC,sBAAsB,QAAQ,+CAA+C;AAChG,IAAIC,YAAY,GAAG,MAAMA,YAAY,CAAC;EAClCC,WAAWA,CAACC,MAAM,EAAEC,cAAc,EAAE;IAChC,IAAI,CAACA,cAAc,GAAGA,cAAc;IACpC,IAAI,CAACC,cAAc,GAAG,IAAI5B,eAAe,CAAC,CAAC;IAC3C,IAAI,CAAC6B,YAAY,GAAG,IAAI7B,eAAe,CAAC,CAAC;IACzC,IAAI,CAAC8B,OAAO,GAAGJ,MAAM;IACrB,IAAI,CAACE,cAAc,CAACG,GAAG,CAACL,MAAM,CAACM,wBAAwB,CAAC,MAAM,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC,CAAC;IAC9E,IAAI,CAACL,cAAc,CAACG,GAAG,CAACL,MAAM,CAACQ,gBAAgB,CAAC,MAAM,IAAI,CAACD,OAAO,CAAC,CAAC,CAAC,CAAC;IACtE,IAAI,CAACL,cAAc,CAACG,GAAG,CAACL,MAAM,CAACS,wBAAwB,CAAC,MAAM,IAAI,CAACF,OAAO,CAAC,CAAC,CAAC,CAAC;IAC9E,IAAI,CAACL,cAAc,CAACG,GAAG,CAACtB,oCAAoC,CAAC2B,WAAW,CAAC,IAAI,CAACH,OAAO,EAAE,IAAI,CAAC,CAAC;EACjG;EACAI,OAAOA,CAAA,EAAG;IACN,IAAI,CAACT,cAAc,CAACS,OAAO,CAAC,CAAC;IAC7B,IAAI,CAACR,YAAY,CAACQ,OAAO,CAAC,CAAC;EAC/B;EACAJ,OAAOA,CAAA,EAAG;IACN;IACA,IAAI,CAACJ,YAAY,CAACS,KAAK,CAAC,CAAC;IACzB;IACA,IAAI,CAAC,IAAI,CAACR,OAAO,CAACS,SAAS,CAAC,EAAE,CAAC,kBAAkB,CAAC,EAAE;MAChD;IACJ;IACA;IACA,IAAI,CAAC,IAAI,CAACT,OAAO,CAACU,QAAQ,CAAC,CAAC,EAAE;MAC1B;IACJ;IACA,MAAMC,KAAK,GAAG,IAAI,CAACX,OAAO,CAACY,QAAQ,CAAC,CAAC;IACrC;IACA,MAAM,CAACC,OAAO,CAAC,GAAGlC,oCAAoC,CAACmC,OAAO,CAACH,KAAK,CAAC;IACrE,IAAI,CAACE,OAAO,IAAI,CAACA,OAAO,CAACE,2BAA2B,EAAE;MAClD;IACJ;IACA;IACA,IAAIC,YAAY,GAAG,IAAIzC,YAAY,CAAC,CAAC;IACrC,KAAK,IAAI0C,EAAE,IAAIJ,OAAO,CAACE,2BAA2B,EAAE;MAChDC,YAAY,CAACf,GAAG,CAACgB,EAAE,CAACC,UAAU,CAAC,CAAC,CAAC,CAAC;IACtC;IACA,IAAI,CAACnB,YAAY,CAACE,GAAG,CAAC,IAAI,CAACD,OAAO,CAACmB,SAAS,CAAEC,IAAI,IAAK;MACnD,IAAIC,YAAY,GAAGD,IAAI,CAACF,UAAU,CAACE,IAAI,CAACpF,MAAM,GAAG,CAAC,CAAC;MACnD,IAAIgF,YAAY,CAACM,GAAG,CAACD,YAAY,CAAC,EAAE;QAChC,IAAI,CAACE,QAAQ,CAACC,MAAM,CAACC,YAAY,CAACJ,YAAY,CAAC,CAAC;MACpD;IACJ,CAAC,CAAC,CAAC;EACP;EACAE,QAAQA,CAACN,EAAE,EAAE;IACT,IAAI,CAAC,IAAI,CAACjB,OAAO,CAACU,QAAQ,CAAC,CAAC,EAAE;MAC1B;IACJ;IACA,IAAI,IAAI,CAACV,OAAO,CAAC0B,aAAa,CAAC,CAAC,CAAC1F,MAAM,GAAG,CAAC,EAAE;MACzC;IACJ;IACA,MAAM2E,KAAK,GAAG,IAAI,CAACX,OAAO,CAACY,QAAQ,CAAC,CAAC;IACrC,MAAMe,QAAQ,GAAG,IAAI,CAAC3B,OAAO,CAAC4B,WAAW,CAAC,CAAC;IAC3C,IAAIC,QAAQ,GAAG,KAAK;IACpB;IACA;IACA;IACA,MAAMC,MAAM,GAAG,IAAI,CAAC9B,OAAO,CAAC+B,uBAAuB,CAAEtE,CAAC,IAAK;MACvD,IAAIA,CAAC,CAACuE,OAAO,EAAE;QACX;QACA;QACAH,QAAQ,GAAG,IAAI;QACfC,MAAM,CAACvB,OAAO,CAAC,CAAC;QAChB;MACJ;MACA,KAAK,IAAIhE,CAAC,GAAG,CAAC,EAAE0F,GAAG,GAAGxE,CAAC,CAACyE,OAAO,CAAClG,MAAM,EAAEO,CAAC,GAAG0F,GAAG,EAAE1F,CAAC,EAAE,EAAE;QAClD,MAAM4F,MAAM,GAAG1E,CAAC,CAACyE,OAAO,CAAC3F,CAAC,CAAC;QAC3B,IAAI4F,MAAM,CAACC,KAAK,CAACC,aAAa,IAAIV,QAAQ,CAACW,UAAU,EAAE;UACnD;UACAT,QAAQ,GAAG,IAAI;UACfC,MAAM,CAACvB,OAAO,CAAC,CAAC;UAChB;QACJ;MACJ;IACJ,CAAC,CAAC;IACF1B,wBAAwB,CAAC,IAAI,CAACgB,cAAc,EAAEc,KAAK,EAAEgB,QAAQ,EAAEV,EAAE,EAAEN,KAAK,CAAC4B,oBAAoB,CAAC,CAAC,CAAC,CAAC1E,IAAI,CAAC2E,KAAK,IAAI;MAC3GV,MAAM,CAACvB,OAAO,CAAC,CAAC;MAChB,IAAIsB,QAAQ,EAAE;QACV;MACJ;MACA,IAAI9D,eAAe,CAACyE,KAAK,CAAC,EAAE;QACxBvD,cAAc,CAACwD,OAAO,CAAC,IAAI,CAACzC,OAAO,EAAEwC,KAAK,EAAE,IAAI,CAAC;QACjD1D,oBAAoB,CAAC0D,KAAK,CAAC;MAC/B;IACJ,CAAC,EAAGE,GAAG,IAAK;MACRZ,MAAM,CAACvB,OAAO,CAAC,CAAC;MAChB,MAAMmC,GAAG;IACb,CAAC,CAAC;EACN;AACJ,CAAC;AACDhD,YAAY,CAACiD,EAAE,GAAG,2BAA2B;AAC7CjD,YAAY,GAAGjE,UAAU,CAAC,CACtBgB,OAAO,CAAC,CAAC,EAAEmC,oBAAoB,CAAC,CACnC,EAAEc,YAAY,CAAC;AAChB,IAAIkD,aAAa,GAAG,MAAMA,aAAa,CAAC;EACpCjD,WAAWA,CAACC,MAAM,EAAEiD,qBAAqB,EAAE;IACvC,IAAI,CAACjD,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACiD,qBAAqB,GAAGA,qBAAqB;IAClD,IAAI,CAAC/C,cAAc,GAAG,IAAI5B,eAAe,CAAC,CAAC;IAC3C,IAAI,CAAC6B,YAAY,GAAG,IAAI7B,eAAe,CAAC,CAAC;IACzC,IAAI,CAAC4B,cAAc,CAACG,GAAG,CAACL,MAAM,CAACM,wBAAwB,CAAC,MAAM,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC,CAAC;IAC9E,IAAI,CAACL,cAAc,CAACG,GAAG,CAACL,MAAM,CAACQ,gBAAgB,CAAC,MAAM,IAAI,CAACD,OAAO,CAAC,CAAC,CAAC,CAAC;IACtE,IAAI,CAACL,cAAc,CAACG,GAAG,CAACL,MAAM,CAACS,wBAAwB,CAAC,MAAM,IAAI,CAACF,OAAO,CAAC,CAAC,CAAC,CAAC;IAC9E,IAAI,CAACL,cAAc,CAACG,GAAG,CAACvB,2CAA2C,CAAC4B,WAAW,CAAC,IAAI,CAACH,OAAO,EAAE,IAAI,CAAC,CAAC;EACxG;EACAI,OAAOA,CAAA,EAAG;IACN,IAAI,CAACT,cAAc,CAACS,OAAO,CAAC,CAAC;IAC7B,IAAI,CAACR,YAAY,CAACQ,OAAO,CAAC,CAAC;EAC/B;EACAJ,OAAOA,CAAA,EAAG;IACN;IACA,IAAI,CAACJ,YAAY,CAACS,KAAK,CAAC,CAAC;IACzB;IACA,IAAI,CAAC,IAAI,CAACZ,MAAM,CAACa,SAAS,CAAC,EAAE,CAAC,mBAAmB,CAAC,EAAE;MAChD;IACJ;IACA;IACA,IAAI,CAAC,IAAI,CAACb,MAAM,CAACc,QAAQ,CAAC,CAAC,EAAE;MACzB;IACJ;IACA;IACA,IAAI,CAAChC,2CAA2C,CAAC4C,GAAG,CAAC,IAAI,CAAC1B,MAAM,CAACgB,QAAQ,CAAC,CAAC,CAAC,EAAE;MAC1E;IACJ;IACA,IAAI,CAACb,YAAY,CAACE,GAAG,CAAC,IAAI,CAACL,MAAM,CAACkD,UAAU,CAACC,IAAA;MAAA,IAAC;QAAEX;MAAM,CAAC,GAAAW,IAAA;MAAA,OAAK,IAAI,CAACxB,QAAQ,CAACa,KAAK,CAAC;IAAA,EAAC,CAAC;EACtF;EACAb,QAAQA,CAACa,KAAK,EAAE;IACZ,IAAI,CAAC,IAAI,CAACxC,MAAM,CAACc,QAAQ,CAAC,CAAC,EAAE;MACzB;IACJ;IACA,IAAI,IAAI,CAACd,MAAM,CAAC8B,aAAa,CAAC,CAAC,CAAC1F,MAAM,GAAG,CAAC,EAAE;MACxC;IACJ;IACA,IAAI,CAAC6G,qBAAqB,CAACG,cAAc,CAACjE,wCAAwC,EAAE,IAAI,CAACa,MAAM,EAAEwC,KAAK,EAAE,CAAC,CAAC,cAAc5C,QAAQ,CAACyD,IAAI,EAAEjF,iBAAiB,CAACiF,IAAI,CAAC,CAACC,KAAK,CAAC3D,iBAAiB,CAAC;EAC3L;AACJ,CAAC;AACDqD,aAAa,CAACD,EAAE,GAAG,8BAA8B;AACjDC,aAAa,GAAGnH,UAAU,CAAC,CACvBgB,OAAO,CAAC,CAAC,EAAE6C,qBAAqB,CAAC,CACpC,EAAEsD,aAAa,CAAC;AACjB,MAAMO,oBAAoB,SAAShF,YAAY,CAAC;EAC5CwB,WAAWA,CAAA,EAAG;IACV,KAAK,CAAC;MACFyD,EAAE,EAAE,8BAA8B;MAClCC,KAAK,EAAEnE,GAAG,CAACoE,QAAQ,CAAC,sBAAsB,EAAE,iBAAiB,CAAC;MAC9DC,KAAK,EAAE,iBAAiB;MACxBC,YAAY,EAAEnE,cAAc,CAACoE,GAAG,CAAChF,iBAAiB,CAACiF,oBAAoB,EAAEjF,iBAAiB,CAACkF,QAAQ,EAAElF,iBAAiB,CAACmF,6BAA6B,CAAC;MACrJC,MAAM,EAAE;QACJC,MAAM,EAAErF,iBAAiB,CAACsF,eAAe;QACzCC,OAAO,EAAE,IAAI,CAAC,cAAc,GAAG,CAAC,YAAY,EAAE,CAAC;QAC/CC,KAAK,EAAE;UAAED,OAAO,EAAE,IAAI,CAAC,gBAAgB,IAAI,CAAC,cAAc,EAAE,CAAC;QAAY,CAAC;QAC1EE,MAAM,EAAE,GAAG,CAAC;MAChB,CAAC;;MACDC,eAAe,EAAE;QACbC,KAAK,EAAE,gBAAgB;QACvBC,KAAK,EAAE;MACX;IACJ,CAAC,CAAC;EACN;EACAC,GAAGA,CAACC,QAAQ,EAAE3E,MAAM,EAAE;IAClB,OAAOhD,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,aAAa;MAChD,IAAIgD,MAAM,CAACc,QAAQ,CAAC,CAAC,EAAE;QACnB,MAAM8D,YAAY,GAAGD,QAAQ,CAACE,GAAG,CAACnF,qBAAqB,CAAC;QACxD,MAAMoF,eAAe,GAAGH,QAAQ,CAACE,GAAG,CAAChF,sBAAsB,CAAC;QAC5D,MAAMiF,eAAe,CAACC,SAAS,CAACH,YAAY,CAACxB,cAAc,CAAChE,kCAAkC,EAAEY,MAAM,EAAE,CAAC,CAAC,gBAAgBJ,QAAQ,CAACyD,IAAI,EAAEjF,iBAAiB,CAACiF,IAAI,CAAC,EAAE,GAAG,CAAC;MAC1K;IACJ,CAAC,CAAC;EACN;AACJ;AACA,MAAM2B,qBAAqB,SAASzG,YAAY,CAAC;EAC7CwB,WAAWA,CAAA,EAAG;IACV,KAAK,CAAC;MACFyD,EAAE,EAAE,+BAA+B;MACnCC,KAAK,EAAEnE,GAAG,CAACoE,QAAQ,CAAC,uBAAuB,EAAE,kBAAkB,CAAC;MAChEC,KAAK,EAAE,kBAAkB;MACzBC,YAAY,EAAEnE,cAAc,CAACoE,GAAG,CAAChF,iBAAiB,CAACkF,QAAQ,EAAElF,iBAAiB,CAACoG,sCAAsC,CAAC;MACtHhB,MAAM,EAAE;QACJC,MAAM,EAAErF,iBAAiB,CAACsF,eAAe;QACzCC,OAAO,EAAE/F,QAAQ,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC,aAAa,IAAI,CAAC,gBAAgB,EAAE,CAAC,WAAW,CAAC;QAC3FiG,MAAM,EAAE,GAAG,CAAC;MAChB,CAAC;;MACDC,eAAe,EAAE;QACbW,IAAI,EAAErG,iBAAiB,CAACsG,oBAAoB;QAC5CX,KAAK,EAAE,gBAAgB;QACvBC,KAAK,EAAE;MACX;IACJ,CAAC,CAAC;EACN;EACAC,GAAGA,CAACC,QAAQ,EAAE3E,MAAM,EAAE;IAClB,OAAOhD,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,aAAa;MAChD,IAAI,CAACgD,MAAM,CAACc,QAAQ,CAAC,CAAC,EAAE;QACpB;MACJ;MACA,MAAM8D,YAAY,GAAGD,QAAQ,CAACE,GAAG,CAACnF,qBAAqB,CAAC;MACxD,MAAMqB,KAAK,GAAGf,MAAM,CAACgB,QAAQ,CAAC,CAAC;MAC/B,MAAMoE,MAAM,GAAGpF,MAAM,CAAC8B,aAAa,CAAC,CAAC,CAACuD,GAAG,CAAC7C,KAAK,IAAI;QAC/C,OAAOA,KAAK,CAAC8C,OAAO,CAAC,CAAC,GAChB,IAAI1G,KAAK,CAAC4D,KAAK,CAAC+C,eAAe,EAAE,CAAC,EAAE/C,KAAK,CAAC+C,eAAe,EAAExE,KAAK,CAACyE,gBAAgB,CAAChD,KAAK,CAAC+C,eAAe,CAAC,CAAC,GACzG/C,KAAK;MACf,CAAC,CAAC;MACF,MAAMsC,eAAe,GAAGH,QAAQ,CAACE,GAAG,CAAChF,sBAAsB,CAAC;MAC5D,MAAMiF,eAAe,CAACC,SAAS,CAACH,YAAY,CAACxB,cAAc,CAACjE,wCAAwC,EAAEa,MAAM,EAAEoF,MAAM,EAAE,CAAC,CAAC,gBAAgBxF,QAAQ,CAACyD,IAAI,EAAEjF,iBAAiB,CAACiF,IAAI,CAAC,EAAE,GAAG,CAAC;IACxL,CAAC,CAAC;EACN;AACJ;AACA5E,0BAA0B,CAACqB,YAAY,CAACiD,EAAE,EAAEjD,YAAY,CAAC;AACzDrB,0BAA0B,CAACuE,aAAa,CAACD,EAAE,EAAEC,aAAa,CAAC;AAC3DxE,oBAAoB,CAAC+E,oBAAoB,CAAC;AAC1C/E,oBAAoB,CAACwG,qBAAqB,CAAC;AAC3C;AACA;AACAzF,gBAAgB,CAACkG,eAAe,CAAC,sBAAsB,EAAGd,QAAQ,IAAK3H,SAAS,CAAC,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,aAAa;EAClH,MAAMgD,MAAM,GAAG2E,QAAQ,CAACE,GAAG,CAACnG,kBAAkB,CAAC,CAACgH,oBAAoB,CAAC,CAAC;EACtE,IAAI,CAAC1F,MAAM,IAAI,CAACA,MAAM,CAACc,QAAQ,CAAC,CAAC,EAAE;IAC/B;EACJ;EACA,MAAM6E,cAAc,GAAGhB,QAAQ,CAACE,GAAG,CAACrF,eAAe,CAAC;EACpD,IAAIQ,MAAM,CAAC4F,YAAY,CAAC,CAAC,CAACN,OAAO,CAAC,CAAC,EAAE;IACjC,MAAMK,cAAc,CAACE,cAAc,CAAC,8BAA8B,CAAC;EACvE,CAAC,MACI;IACD,MAAMF,cAAc,CAACE,cAAc,CAAC,+BAA+B,CAAC;EACxE;AACJ,CAAC,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}