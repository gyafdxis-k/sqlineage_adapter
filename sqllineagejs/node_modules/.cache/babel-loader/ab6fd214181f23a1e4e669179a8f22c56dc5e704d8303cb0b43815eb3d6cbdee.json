{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../nls.js';\nimport { EditorCommand, registerEditorCommand, EditorAction, registerEditorAction } from '../../browser/editorExtensions.js';\nimport { ReplaceCommand } from '../../common/commands/replaceCommand.js';\nimport { CursorState } from '../../common/controller/cursorCommon.js';\nimport { WordOperations } from '../../common/controller/cursorWordOperations.js';\nimport { getMapForWordSeparators } from '../../common/controller/wordCharacterClassifier.js';\nimport { Position } from '../../common/core/position.js';\nimport { Range } from '../../common/core/range.js';\nimport { Selection } from '../../common/core/selection.js';\nimport { EditorContextKeys } from '../../common/editorContextKeys.js';\nimport { CONTEXT_ACCESSIBILITY_MODE_ENABLED } from '../../../platform/accessibility/common/accessibility.js';\nimport { ContextKeyExpr } from '../../../platform/contextkey/common/contextkey.js';\nimport { EditorOptions } from '../../common/config/editorOptions.js';\nimport { LanguageConfigurationRegistry } from '../../common/modes/languageConfigurationRegistry.js';\nexport class MoveWordCommand extends EditorCommand {\n  constructor(opts) {\n    super(opts);\n    this._inSelectionMode = opts.inSelectionMode;\n    this._wordNavigationType = opts.wordNavigationType;\n  }\n  runEditorCommand(accessor, editor, args) {\n    if (!editor.hasModel()) {\n      return;\n    }\n    const wordSeparators = getMapForWordSeparators(editor.getOption(110 /* wordSeparators */));\n    const model = editor.getModel();\n    const selections = editor.getSelections();\n    const result = selections.map(sel => {\n      const inPosition = new Position(sel.positionLineNumber, sel.positionColumn);\n      const outPosition = this._move(wordSeparators, model, inPosition, this._wordNavigationType);\n      return this._moveTo(sel, outPosition, this._inSelectionMode);\n    });\n    model.pushStackElement();\n    editor._getViewModel().setCursorStates('moveWordCommand', 3 /* Explicit */, result.map(r => CursorState.fromModelSelection(r)));\n    if (result.length === 1) {\n      const pos = new Position(result[0].positionLineNumber, result[0].positionColumn);\n      editor.revealPosition(pos, 0 /* Smooth */);\n    }\n  }\n\n  _moveTo(from, to, inSelectionMode) {\n    if (inSelectionMode) {\n      // move just position\n      return new Selection(from.selectionStartLineNumber, from.selectionStartColumn, to.lineNumber, to.column);\n    } else {\n      // move everything\n      return new Selection(to.lineNumber, to.column, to.lineNumber, to.column);\n    }\n  }\n}\nexport class WordLeftCommand extends MoveWordCommand {\n  _move(wordSeparators, model, position, wordNavigationType) {\n    return WordOperations.moveWordLeft(wordSeparators, model, position, wordNavigationType);\n  }\n}\nexport class WordRightCommand extends MoveWordCommand {\n  _move(wordSeparators, model, position, wordNavigationType) {\n    return WordOperations.moveWordRight(wordSeparators, model, position, wordNavigationType);\n  }\n}\nexport class CursorWordStartLeft extends WordLeftCommand {\n  constructor() {\n    super({\n      inSelectionMode: false,\n      wordNavigationType: 0 /* WordStart */,\n      id: 'cursorWordStartLeft',\n      precondition: undefined\n    });\n  }\n}\nexport class CursorWordEndLeft extends WordLeftCommand {\n  constructor() {\n    super({\n      inSelectionMode: false,\n      wordNavigationType: 2 /* WordEnd */,\n      id: 'cursorWordEndLeft',\n      precondition: undefined\n    });\n  }\n}\nexport class CursorWordLeft extends WordLeftCommand {\n  constructor() {\n    super({\n      inSelectionMode: false,\n      wordNavigationType: 1 /* WordStartFast */,\n      id: 'cursorWordLeft',\n      precondition: undefined,\n      kbOpts: {\n        kbExpr: EditorContextKeys.textInputFocus,\n        primary: 2048 /* CtrlCmd */ | 15 /* LeftArrow */,\n        mac: {\n          primary: 512 /* Alt */ | 15 /* LeftArrow */\n        },\n        weight: 100 /* EditorContrib */\n      }\n    });\n  }\n}\n\nexport class CursorWordStartLeftSelect extends WordLeftCommand {\n  constructor() {\n    super({\n      inSelectionMode: true,\n      wordNavigationType: 0 /* WordStart */,\n      id: 'cursorWordStartLeftSelect',\n      precondition: undefined\n    });\n  }\n}\nexport class CursorWordEndLeftSelect extends WordLeftCommand {\n  constructor() {\n    super({\n      inSelectionMode: true,\n      wordNavigationType: 2 /* WordEnd */,\n      id: 'cursorWordEndLeftSelect',\n      precondition: undefined\n    });\n  }\n}\nexport class CursorWordLeftSelect extends WordLeftCommand {\n  constructor() {\n    super({\n      inSelectionMode: true,\n      wordNavigationType: 1 /* WordStartFast */,\n      id: 'cursorWordLeftSelect',\n      precondition: undefined,\n      kbOpts: {\n        kbExpr: EditorContextKeys.textInputFocus,\n        primary: 2048 /* CtrlCmd */ | 1024 /* Shift */ | 15 /* LeftArrow */,\n        mac: {\n          primary: 512 /* Alt */ | 1024 /* Shift */ | 15 /* LeftArrow */\n        },\n        weight: 100 /* EditorContrib */\n      }\n    });\n  }\n}\n// Accessibility navigation commands should only be enabled on windows since they are tuned to what NVDA expects\nexport class CursorWordAccessibilityLeft extends WordLeftCommand {\n  constructor() {\n    super({\n      inSelectionMode: false,\n      wordNavigationType: 3 /* WordAccessibility */,\n      id: 'cursorWordAccessibilityLeft',\n      precondition: undefined,\n      kbOpts: {\n        kbExpr: ContextKeyExpr.and(EditorContextKeys.textInputFocus, CONTEXT_ACCESSIBILITY_MODE_ENABLED),\n        win: {\n          primary: 2048 /* CtrlCmd */ | 15 /* LeftArrow */\n        },\n        weight: 100 /* EditorContrib */ + 1\n      }\n    });\n  }\n  _move(_, model, position, wordNavigationType) {\n    return super._move(getMapForWordSeparators(EditorOptions.wordSeparators.defaultValue), model, position, wordNavigationType);\n  }\n}\nexport class CursorWordAccessibilityLeftSelect extends WordLeftCommand {\n  constructor() {\n    super({\n      inSelectionMode: true,\n      wordNavigationType: 3 /* WordAccessibility */,\n      id: 'cursorWordAccessibilityLeftSelect',\n      precondition: undefined,\n      kbOpts: {\n        kbExpr: ContextKeyExpr.and(EditorContextKeys.textInputFocus, CONTEXT_ACCESSIBILITY_MODE_ENABLED),\n        win: {\n          primary: 2048 /* CtrlCmd */ | 1024 /* Shift */ | 15 /* LeftArrow */\n        },\n        weight: 100 /* EditorContrib */ + 1\n      }\n    });\n  }\n  _move(_, model, position, wordNavigationType) {\n    return super._move(getMapForWordSeparators(EditorOptions.wordSeparators.defaultValue), model, position, wordNavigationType);\n  }\n}\nexport class CursorWordStartRight extends WordRightCommand {\n  constructor() {\n    super({\n      inSelectionMode: false,\n      wordNavigationType: 0 /* WordStart */,\n      id: 'cursorWordStartRight',\n      precondition: undefined\n    });\n  }\n}\nexport class CursorWordEndRight extends WordRightCommand {\n  constructor() {\n    super({\n      inSelectionMode: false,\n      wordNavigationType: 2 /* WordEnd */,\n      id: 'cursorWordEndRight',\n      precondition: undefined,\n      kbOpts: {\n        kbExpr: EditorContextKeys.textInputFocus,\n        primary: 2048 /* CtrlCmd */ | 17 /* RightArrow */,\n        mac: {\n          primary: 512 /* Alt */ | 17 /* RightArrow */\n        },\n        weight: 100 /* EditorContrib */\n      }\n    });\n  }\n}\n\nexport class CursorWordRight extends WordRightCommand {\n  constructor() {\n    super({\n      inSelectionMode: false,\n      wordNavigationType: 2 /* WordEnd */,\n      id: 'cursorWordRight',\n      precondition: undefined\n    });\n  }\n}\nexport class CursorWordStartRightSelect extends WordRightCommand {\n  constructor() {\n    super({\n      inSelectionMode: true,\n      wordNavigationType: 0 /* WordStart */,\n      id: 'cursorWordStartRightSelect',\n      precondition: undefined\n    });\n  }\n}\nexport class CursorWordEndRightSelect extends WordRightCommand {\n  constructor() {\n    super({\n      inSelectionMode: true,\n      wordNavigationType: 2 /* WordEnd */,\n      id: 'cursorWordEndRightSelect',\n      precondition: undefined,\n      kbOpts: {\n        kbExpr: EditorContextKeys.textInputFocus,\n        primary: 2048 /* CtrlCmd */ | 1024 /* Shift */ | 17 /* RightArrow */,\n        mac: {\n          primary: 512 /* Alt */ | 1024 /* Shift */ | 17 /* RightArrow */\n        },\n        weight: 100 /* EditorContrib */\n      }\n    });\n  }\n}\n\nexport class CursorWordRightSelect extends WordRightCommand {\n  constructor() {\n    super({\n      inSelectionMode: true,\n      wordNavigationType: 2 /* WordEnd */,\n      id: 'cursorWordRightSelect',\n      precondition: undefined\n    });\n  }\n}\nexport class CursorWordAccessibilityRight extends WordRightCommand {\n  constructor() {\n    super({\n      inSelectionMode: false,\n      wordNavigationType: 3 /* WordAccessibility */,\n      id: 'cursorWordAccessibilityRight',\n      precondition: undefined,\n      kbOpts: {\n        kbExpr: ContextKeyExpr.and(EditorContextKeys.textInputFocus, CONTEXT_ACCESSIBILITY_MODE_ENABLED),\n        win: {\n          primary: 2048 /* CtrlCmd */ | 17 /* RightArrow */\n        },\n        weight: 100 /* EditorContrib */ + 1\n      }\n    });\n  }\n  _move(_, model, position, wordNavigationType) {\n    return super._move(getMapForWordSeparators(EditorOptions.wordSeparators.defaultValue), model, position, wordNavigationType);\n  }\n}\nexport class CursorWordAccessibilityRightSelect extends WordRightCommand {\n  constructor() {\n    super({\n      inSelectionMode: true,\n      wordNavigationType: 3 /* WordAccessibility */,\n      id: 'cursorWordAccessibilityRightSelect',\n      precondition: undefined,\n      kbOpts: {\n        kbExpr: ContextKeyExpr.and(EditorContextKeys.textInputFocus, CONTEXT_ACCESSIBILITY_MODE_ENABLED),\n        win: {\n          primary: 2048 /* CtrlCmd */ | 1024 /* Shift */ | 17 /* RightArrow */\n        },\n        weight: 100 /* EditorContrib */ + 1\n      }\n    });\n  }\n  _move(_, model, position, wordNavigationType) {\n    return super._move(getMapForWordSeparators(EditorOptions.wordSeparators.defaultValue), model, position, wordNavigationType);\n  }\n}\nexport class DeleteWordCommand extends EditorCommand {\n  constructor(opts) {\n    super(opts);\n    this._whitespaceHeuristics = opts.whitespaceHeuristics;\n    this._wordNavigationType = opts.wordNavigationType;\n  }\n  runEditorCommand(accessor, editor, args) {\n    if (!editor.hasModel()) {\n      return;\n    }\n    const wordSeparators = getMapForWordSeparators(editor.getOption(110 /* wordSeparators */));\n    const model = editor.getModel();\n    const selections = editor.getSelections();\n    const autoClosingBrackets = editor.getOption(5 /* autoClosingBrackets */);\n    const autoClosingQuotes = editor.getOption(7 /* autoClosingQuotes */);\n    const autoClosingPairs = LanguageConfigurationRegistry.getAutoClosingPairs(model.getLanguageIdentifier().id);\n    const commands = selections.map(sel => {\n      const deleteRange = this._delete({\n        wordSeparators,\n        model,\n        selection: sel,\n        whitespaceHeuristics: this._whitespaceHeuristics,\n        autoClosingBrackets,\n        autoClosingQuotes,\n        autoClosingPairs\n      }, this._wordNavigationType);\n      return new ReplaceCommand(deleteRange, '');\n    });\n    editor.pushUndoStop();\n    editor.executeCommands(this.id, commands);\n    editor.pushUndoStop();\n  }\n}\nexport class DeleteWordLeftCommand extends DeleteWordCommand {\n  _delete(ctx, wordNavigationType) {\n    let r = WordOperations.deleteWordLeft(ctx, wordNavigationType);\n    if (r) {\n      return r;\n    }\n    return new Range(1, 1, 1, 1);\n  }\n}\nexport class DeleteWordRightCommand extends DeleteWordCommand {\n  _delete(ctx, wordNavigationType) {\n    let r = WordOperations.deleteWordRight(ctx, wordNavigationType);\n    if (r) {\n      return r;\n    }\n    const lineCount = ctx.model.getLineCount();\n    const maxColumn = ctx.model.getLineMaxColumn(lineCount);\n    return new Range(lineCount, maxColumn, lineCount, maxColumn);\n  }\n}\nexport class DeleteWordStartLeft extends DeleteWordLeftCommand {\n  constructor() {\n    super({\n      whitespaceHeuristics: false,\n      wordNavigationType: 0 /* WordStart */,\n      id: 'deleteWordStartLeft',\n      precondition: EditorContextKeys.writable\n    });\n  }\n}\nexport class DeleteWordEndLeft extends DeleteWordLeftCommand {\n  constructor() {\n    super({\n      whitespaceHeuristics: false,\n      wordNavigationType: 2 /* WordEnd */,\n      id: 'deleteWordEndLeft',\n      precondition: EditorContextKeys.writable\n    });\n  }\n}\nexport class DeleteWordLeft extends DeleteWordLeftCommand {\n  constructor() {\n    super({\n      whitespaceHeuristics: true,\n      wordNavigationType: 0 /* WordStart */,\n      id: 'deleteWordLeft',\n      precondition: EditorContextKeys.writable,\n      kbOpts: {\n        kbExpr: EditorContextKeys.textInputFocus,\n        primary: 2048 /* CtrlCmd */ | 1 /* Backspace */,\n        mac: {\n          primary: 512 /* Alt */ | 1 /* Backspace */\n        },\n        weight: 100 /* EditorContrib */\n      }\n    });\n  }\n}\n\nexport class DeleteWordStartRight extends DeleteWordRightCommand {\n  constructor() {\n    super({\n      whitespaceHeuristics: false,\n      wordNavigationType: 0 /* WordStart */,\n      id: 'deleteWordStartRight',\n      precondition: EditorContextKeys.writable\n    });\n  }\n}\nexport class DeleteWordEndRight extends DeleteWordRightCommand {\n  constructor() {\n    super({\n      whitespaceHeuristics: false,\n      wordNavigationType: 2 /* WordEnd */,\n      id: 'deleteWordEndRight',\n      precondition: EditorContextKeys.writable\n    });\n  }\n}\nexport class DeleteWordRight extends DeleteWordRightCommand {\n  constructor() {\n    super({\n      whitespaceHeuristics: true,\n      wordNavigationType: 2 /* WordEnd */,\n      id: 'deleteWordRight',\n      precondition: EditorContextKeys.writable,\n      kbOpts: {\n        kbExpr: EditorContextKeys.textInputFocus,\n        primary: 2048 /* CtrlCmd */ | 20 /* Delete */,\n        mac: {\n          primary: 512 /* Alt */ | 20 /* Delete */\n        },\n        weight: 100 /* EditorContrib */\n      }\n    });\n  }\n}\n\nexport class DeleteInsideWord extends EditorAction {\n  constructor() {\n    super({\n      id: 'deleteInsideWord',\n      precondition: EditorContextKeys.writable,\n      label: nls.localize('deleteInsideWord', \"Delete Word\"),\n      alias: 'Delete Word'\n    });\n  }\n  run(accessor, editor, args) {\n    if (!editor.hasModel()) {\n      return;\n    }\n    const wordSeparators = getMapForWordSeparators(editor.getOption(110 /* wordSeparators */));\n    const model = editor.getModel();\n    const selections = editor.getSelections();\n    const commands = selections.map(sel => {\n      const deleteRange = WordOperations.deleteInsideWord(wordSeparators, model, sel);\n      return new ReplaceCommand(deleteRange, '');\n    });\n    editor.pushUndoStop();\n    editor.executeCommands(this.id, commands);\n    editor.pushUndoStop();\n  }\n}\nregisterEditorCommand(new CursorWordStartLeft());\nregisterEditorCommand(new CursorWordEndLeft());\nregisterEditorCommand(new CursorWordLeft());\nregisterEditorCommand(new CursorWordStartLeftSelect());\nregisterEditorCommand(new CursorWordEndLeftSelect());\nregisterEditorCommand(new CursorWordLeftSelect());\nregisterEditorCommand(new CursorWordStartRight());\nregisterEditorCommand(new CursorWordEndRight());\nregisterEditorCommand(new CursorWordRight());\nregisterEditorCommand(new CursorWordStartRightSelect());\nregisterEditorCommand(new CursorWordEndRightSelect());\nregisterEditorCommand(new CursorWordRightSelect());\nregisterEditorCommand(new CursorWordAccessibilityLeft());\nregisterEditorCommand(new CursorWordAccessibilityLeftSelect());\nregisterEditorCommand(new CursorWordAccessibilityRight());\nregisterEditorCommand(new CursorWordAccessibilityRightSelect());\nregisterEditorCommand(new DeleteWordStartLeft());\nregisterEditorCommand(new DeleteWordEndLeft());\nregisterEditorCommand(new DeleteWordLeft());\nregisterEditorCommand(new DeleteWordStartRight());\nregisterEditorCommand(new DeleteWordEndRight());\nregisterEditorCommand(new DeleteWordRight());\nregisterEditorAction(DeleteInsideWord);","map":{"version":3,"names":["nls","EditorCommand","registerEditorCommand","EditorAction","registerEditorAction","ReplaceCommand","CursorState","WordOperations","getMapForWordSeparators","Position","Range","Selection","EditorContextKeys","CONTEXT_ACCESSIBILITY_MODE_ENABLED","ContextKeyExpr","EditorOptions","LanguageConfigurationRegistry","MoveWordCommand","constructor","opts","_inSelectionMode","inSelectionMode","_wordNavigationType","wordNavigationType","runEditorCommand","accessor","editor","args","hasModel","wordSeparators","getOption","model","getModel","selections","getSelections","result","map","sel","inPosition","positionLineNumber","positionColumn","outPosition","_move","_moveTo","pushStackElement","_getViewModel","setCursorStates","r","fromModelSelection","length","pos","revealPosition","from","to","selectionStartLineNumber","selectionStartColumn","lineNumber","column","WordLeftCommand","position","moveWordLeft","WordRightCommand","moveWordRight","CursorWordStartLeft","id","precondition","undefined","CursorWordEndLeft","CursorWordLeft","kbOpts","kbExpr","textInputFocus","primary","mac","weight","CursorWordStartLeftSelect","CursorWordEndLeftSelect","CursorWordLeftSelect","CursorWordAccessibilityLeft","and","win","_","defaultValue","CursorWordAccessibilityLeftSelect","CursorWordStartRight","CursorWordEndRight","CursorWordRight","CursorWordStartRightSelect","CursorWordEndRightSelect","CursorWordRightSelect","CursorWordAccessibilityRight","CursorWordAccessibilityRightSelect","DeleteWordCommand","_whitespaceHeuristics","whitespaceHeuristics","autoClosingBrackets","autoClosingQuotes","autoClosingPairs","getAutoClosingPairs","getLanguageIdentifier","commands","deleteRange","_delete","selection","pushUndoStop","executeCommands","DeleteWordLeftCommand","ctx","deleteWordLeft","DeleteWordRightCommand","deleteWordRight","lineCount","getLineCount","maxColumn","getLineMaxColumn","DeleteWordStartLeft","writable","DeleteWordEndLeft","DeleteWordLeft","DeleteWordStartRight","DeleteWordEndRight","DeleteWordRight","DeleteInsideWord","label","localize","alias","run","deleteInsideWord"],"sources":["C:/Users/Administrator/Desktop/sqllineage-master/sqllineagejs/node_modules/monaco-editor/esm/vs/editor/contrib/wordOperations/wordOperations.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport * as nls from '../../../nls.js';\r\nimport { EditorCommand, registerEditorCommand, EditorAction, registerEditorAction } from '../../browser/editorExtensions.js';\r\nimport { ReplaceCommand } from '../../common/commands/replaceCommand.js';\r\nimport { CursorState } from '../../common/controller/cursorCommon.js';\r\nimport { WordOperations } from '../../common/controller/cursorWordOperations.js';\r\nimport { getMapForWordSeparators } from '../../common/controller/wordCharacterClassifier.js';\r\nimport { Position } from '../../common/core/position.js';\r\nimport { Range } from '../../common/core/range.js';\r\nimport { Selection } from '../../common/core/selection.js';\r\nimport { EditorContextKeys } from '../../common/editorContextKeys.js';\r\nimport { CONTEXT_ACCESSIBILITY_MODE_ENABLED } from '../../../platform/accessibility/common/accessibility.js';\r\nimport { ContextKeyExpr } from '../../../platform/contextkey/common/contextkey.js';\r\nimport { EditorOptions } from '../../common/config/editorOptions.js';\r\nimport { LanguageConfigurationRegistry } from '../../common/modes/languageConfigurationRegistry.js';\r\nexport class MoveWordCommand extends EditorCommand {\r\n    constructor(opts) {\r\n        super(opts);\r\n        this._inSelectionMode = opts.inSelectionMode;\r\n        this._wordNavigationType = opts.wordNavigationType;\r\n    }\r\n    runEditorCommand(accessor, editor, args) {\r\n        if (!editor.hasModel()) {\r\n            return;\r\n        }\r\n        const wordSeparators = getMapForWordSeparators(editor.getOption(110 /* wordSeparators */));\r\n        const model = editor.getModel();\r\n        const selections = editor.getSelections();\r\n        const result = selections.map((sel) => {\r\n            const inPosition = new Position(sel.positionLineNumber, sel.positionColumn);\r\n            const outPosition = this._move(wordSeparators, model, inPosition, this._wordNavigationType);\r\n            return this._moveTo(sel, outPosition, this._inSelectionMode);\r\n        });\r\n        model.pushStackElement();\r\n        editor._getViewModel().setCursorStates('moveWordCommand', 3 /* Explicit */, result.map(r => CursorState.fromModelSelection(r)));\r\n        if (result.length === 1) {\r\n            const pos = new Position(result[0].positionLineNumber, result[0].positionColumn);\r\n            editor.revealPosition(pos, 0 /* Smooth */);\r\n        }\r\n    }\r\n    _moveTo(from, to, inSelectionMode) {\r\n        if (inSelectionMode) {\r\n            // move just position\r\n            return new Selection(from.selectionStartLineNumber, from.selectionStartColumn, to.lineNumber, to.column);\r\n        }\r\n        else {\r\n            // move everything\r\n            return new Selection(to.lineNumber, to.column, to.lineNumber, to.column);\r\n        }\r\n    }\r\n}\r\nexport class WordLeftCommand extends MoveWordCommand {\r\n    _move(wordSeparators, model, position, wordNavigationType) {\r\n        return WordOperations.moveWordLeft(wordSeparators, model, position, wordNavigationType);\r\n    }\r\n}\r\nexport class WordRightCommand extends MoveWordCommand {\r\n    _move(wordSeparators, model, position, wordNavigationType) {\r\n        return WordOperations.moveWordRight(wordSeparators, model, position, wordNavigationType);\r\n    }\r\n}\r\nexport class CursorWordStartLeft extends WordLeftCommand {\r\n    constructor() {\r\n        super({\r\n            inSelectionMode: false,\r\n            wordNavigationType: 0 /* WordStart */,\r\n            id: 'cursorWordStartLeft',\r\n            precondition: undefined\r\n        });\r\n    }\r\n}\r\nexport class CursorWordEndLeft extends WordLeftCommand {\r\n    constructor() {\r\n        super({\r\n            inSelectionMode: false,\r\n            wordNavigationType: 2 /* WordEnd */,\r\n            id: 'cursorWordEndLeft',\r\n            precondition: undefined\r\n        });\r\n    }\r\n}\r\nexport class CursorWordLeft extends WordLeftCommand {\r\n    constructor() {\r\n        super({\r\n            inSelectionMode: false,\r\n            wordNavigationType: 1 /* WordStartFast */,\r\n            id: 'cursorWordLeft',\r\n            precondition: undefined,\r\n            kbOpts: {\r\n                kbExpr: EditorContextKeys.textInputFocus,\r\n                primary: 2048 /* CtrlCmd */ | 15 /* LeftArrow */,\r\n                mac: { primary: 512 /* Alt */ | 15 /* LeftArrow */ },\r\n                weight: 100 /* EditorContrib */\r\n            }\r\n        });\r\n    }\r\n}\r\nexport class CursorWordStartLeftSelect extends WordLeftCommand {\r\n    constructor() {\r\n        super({\r\n            inSelectionMode: true,\r\n            wordNavigationType: 0 /* WordStart */,\r\n            id: 'cursorWordStartLeftSelect',\r\n            precondition: undefined\r\n        });\r\n    }\r\n}\r\nexport class CursorWordEndLeftSelect extends WordLeftCommand {\r\n    constructor() {\r\n        super({\r\n            inSelectionMode: true,\r\n            wordNavigationType: 2 /* WordEnd */,\r\n            id: 'cursorWordEndLeftSelect',\r\n            precondition: undefined\r\n        });\r\n    }\r\n}\r\nexport class CursorWordLeftSelect extends WordLeftCommand {\r\n    constructor() {\r\n        super({\r\n            inSelectionMode: true,\r\n            wordNavigationType: 1 /* WordStartFast */,\r\n            id: 'cursorWordLeftSelect',\r\n            precondition: undefined,\r\n            kbOpts: {\r\n                kbExpr: EditorContextKeys.textInputFocus,\r\n                primary: 2048 /* CtrlCmd */ | 1024 /* Shift */ | 15 /* LeftArrow */,\r\n                mac: { primary: 512 /* Alt */ | 1024 /* Shift */ | 15 /* LeftArrow */ },\r\n                weight: 100 /* EditorContrib */\r\n            }\r\n        });\r\n    }\r\n}\r\n// Accessibility navigation commands should only be enabled on windows since they are tuned to what NVDA expects\r\nexport class CursorWordAccessibilityLeft extends WordLeftCommand {\r\n    constructor() {\r\n        super({\r\n            inSelectionMode: false,\r\n            wordNavigationType: 3 /* WordAccessibility */,\r\n            id: 'cursorWordAccessibilityLeft',\r\n            precondition: undefined,\r\n            kbOpts: {\r\n                kbExpr: ContextKeyExpr.and(EditorContextKeys.textInputFocus, CONTEXT_ACCESSIBILITY_MODE_ENABLED),\r\n                win: { primary: 2048 /* CtrlCmd */ | 15 /* LeftArrow */ },\r\n                weight: 100 /* EditorContrib */ + 1\r\n            }\r\n        });\r\n    }\r\n    _move(_, model, position, wordNavigationType) {\r\n        return super._move(getMapForWordSeparators(EditorOptions.wordSeparators.defaultValue), model, position, wordNavigationType);\r\n    }\r\n}\r\nexport class CursorWordAccessibilityLeftSelect extends WordLeftCommand {\r\n    constructor() {\r\n        super({\r\n            inSelectionMode: true,\r\n            wordNavigationType: 3 /* WordAccessibility */,\r\n            id: 'cursorWordAccessibilityLeftSelect',\r\n            precondition: undefined,\r\n            kbOpts: {\r\n                kbExpr: ContextKeyExpr.and(EditorContextKeys.textInputFocus, CONTEXT_ACCESSIBILITY_MODE_ENABLED),\r\n                win: { primary: 2048 /* CtrlCmd */ | 1024 /* Shift */ | 15 /* LeftArrow */ },\r\n                weight: 100 /* EditorContrib */ + 1\r\n            }\r\n        });\r\n    }\r\n    _move(_, model, position, wordNavigationType) {\r\n        return super._move(getMapForWordSeparators(EditorOptions.wordSeparators.defaultValue), model, position, wordNavigationType);\r\n    }\r\n}\r\nexport class CursorWordStartRight extends WordRightCommand {\r\n    constructor() {\r\n        super({\r\n            inSelectionMode: false,\r\n            wordNavigationType: 0 /* WordStart */,\r\n            id: 'cursorWordStartRight',\r\n            precondition: undefined\r\n        });\r\n    }\r\n}\r\nexport class CursorWordEndRight extends WordRightCommand {\r\n    constructor() {\r\n        super({\r\n            inSelectionMode: false,\r\n            wordNavigationType: 2 /* WordEnd */,\r\n            id: 'cursorWordEndRight',\r\n            precondition: undefined,\r\n            kbOpts: {\r\n                kbExpr: EditorContextKeys.textInputFocus,\r\n                primary: 2048 /* CtrlCmd */ | 17 /* RightArrow */,\r\n                mac: { primary: 512 /* Alt */ | 17 /* RightArrow */ },\r\n                weight: 100 /* EditorContrib */\r\n            }\r\n        });\r\n    }\r\n}\r\nexport class CursorWordRight extends WordRightCommand {\r\n    constructor() {\r\n        super({\r\n            inSelectionMode: false,\r\n            wordNavigationType: 2 /* WordEnd */,\r\n            id: 'cursorWordRight',\r\n            precondition: undefined\r\n        });\r\n    }\r\n}\r\nexport class CursorWordStartRightSelect extends WordRightCommand {\r\n    constructor() {\r\n        super({\r\n            inSelectionMode: true,\r\n            wordNavigationType: 0 /* WordStart */,\r\n            id: 'cursorWordStartRightSelect',\r\n            precondition: undefined\r\n        });\r\n    }\r\n}\r\nexport class CursorWordEndRightSelect extends WordRightCommand {\r\n    constructor() {\r\n        super({\r\n            inSelectionMode: true,\r\n            wordNavigationType: 2 /* WordEnd */,\r\n            id: 'cursorWordEndRightSelect',\r\n            precondition: undefined,\r\n            kbOpts: {\r\n                kbExpr: EditorContextKeys.textInputFocus,\r\n                primary: 2048 /* CtrlCmd */ | 1024 /* Shift */ | 17 /* RightArrow */,\r\n                mac: { primary: 512 /* Alt */ | 1024 /* Shift */ | 17 /* RightArrow */ },\r\n                weight: 100 /* EditorContrib */\r\n            }\r\n        });\r\n    }\r\n}\r\nexport class CursorWordRightSelect extends WordRightCommand {\r\n    constructor() {\r\n        super({\r\n            inSelectionMode: true,\r\n            wordNavigationType: 2 /* WordEnd */,\r\n            id: 'cursorWordRightSelect',\r\n            precondition: undefined\r\n        });\r\n    }\r\n}\r\nexport class CursorWordAccessibilityRight extends WordRightCommand {\r\n    constructor() {\r\n        super({\r\n            inSelectionMode: false,\r\n            wordNavigationType: 3 /* WordAccessibility */,\r\n            id: 'cursorWordAccessibilityRight',\r\n            precondition: undefined,\r\n            kbOpts: {\r\n                kbExpr: ContextKeyExpr.and(EditorContextKeys.textInputFocus, CONTEXT_ACCESSIBILITY_MODE_ENABLED),\r\n                win: { primary: 2048 /* CtrlCmd */ | 17 /* RightArrow */ },\r\n                weight: 100 /* EditorContrib */ + 1\r\n            }\r\n        });\r\n    }\r\n    _move(_, model, position, wordNavigationType) {\r\n        return super._move(getMapForWordSeparators(EditorOptions.wordSeparators.defaultValue), model, position, wordNavigationType);\r\n    }\r\n}\r\nexport class CursorWordAccessibilityRightSelect extends WordRightCommand {\r\n    constructor() {\r\n        super({\r\n            inSelectionMode: true,\r\n            wordNavigationType: 3 /* WordAccessibility */,\r\n            id: 'cursorWordAccessibilityRightSelect',\r\n            precondition: undefined,\r\n            kbOpts: {\r\n                kbExpr: ContextKeyExpr.and(EditorContextKeys.textInputFocus, CONTEXT_ACCESSIBILITY_MODE_ENABLED),\r\n                win: { primary: 2048 /* CtrlCmd */ | 1024 /* Shift */ | 17 /* RightArrow */ },\r\n                weight: 100 /* EditorContrib */ + 1\r\n            }\r\n        });\r\n    }\r\n    _move(_, model, position, wordNavigationType) {\r\n        return super._move(getMapForWordSeparators(EditorOptions.wordSeparators.defaultValue), model, position, wordNavigationType);\r\n    }\r\n}\r\nexport class DeleteWordCommand extends EditorCommand {\r\n    constructor(opts) {\r\n        super(opts);\r\n        this._whitespaceHeuristics = opts.whitespaceHeuristics;\r\n        this._wordNavigationType = opts.wordNavigationType;\r\n    }\r\n    runEditorCommand(accessor, editor, args) {\r\n        if (!editor.hasModel()) {\r\n            return;\r\n        }\r\n        const wordSeparators = getMapForWordSeparators(editor.getOption(110 /* wordSeparators */));\r\n        const model = editor.getModel();\r\n        const selections = editor.getSelections();\r\n        const autoClosingBrackets = editor.getOption(5 /* autoClosingBrackets */);\r\n        const autoClosingQuotes = editor.getOption(7 /* autoClosingQuotes */);\r\n        const autoClosingPairs = LanguageConfigurationRegistry.getAutoClosingPairs(model.getLanguageIdentifier().id);\r\n        const commands = selections.map((sel) => {\r\n            const deleteRange = this._delete({\r\n                wordSeparators,\r\n                model,\r\n                selection: sel,\r\n                whitespaceHeuristics: this._whitespaceHeuristics,\r\n                autoClosingBrackets,\r\n                autoClosingQuotes,\r\n                autoClosingPairs,\r\n            }, this._wordNavigationType);\r\n            return new ReplaceCommand(deleteRange, '');\r\n        });\r\n        editor.pushUndoStop();\r\n        editor.executeCommands(this.id, commands);\r\n        editor.pushUndoStop();\r\n    }\r\n}\r\nexport class DeleteWordLeftCommand extends DeleteWordCommand {\r\n    _delete(ctx, wordNavigationType) {\r\n        let r = WordOperations.deleteWordLeft(ctx, wordNavigationType);\r\n        if (r) {\r\n            return r;\r\n        }\r\n        return new Range(1, 1, 1, 1);\r\n    }\r\n}\r\nexport class DeleteWordRightCommand extends DeleteWordCommand {\r\n    _delete(ctx, wordNavigationType) {\r\n        let r = WordOperations.deleteWordRight(ctx, wordNavigationType);\r\n        if (r) {\r\n            return r;\r\n        }\r\n        const lineCount = ctx.model.getLineCount();\r\n        const maxColumn = ctx.model.getLineMaxColumn(lineCount);\r\n        return new Range(lineCount, maxColumn, lineCount, maxColumn);\r\n    }\r\n}\r\nexport class DeleteWordStartLeft extends DeleteWordLeftCommand {\r\n    constructor() {\r\n        super({\r\n            whitespaceHeuristics: false,\r\n            wordNavigationType: 0 /* WordStart */,\r\n            id: 'deleteWordStartLeft',\r\n            precondition: EditorContextKeys.writable\r\n        });\r\n    }\r\n}\r\nexport class DeleteWordEndLeft extends DeleteWordLeftCommand {\r\n    constructor() {\r\n        super({\r\n            whitespaceHeuristics: false,\r\n            wordNavigationType: 2 /* WordEnd */,\r\n            id: 'deleteWordEndLeft',\r\n            precondition: EditorContextKeys.writable\r\n        });\r\n    }\r\n}\r\nexport class DeleteWordLeft extends DeleteWordLeftCommand {\r\n    constructor() {\r\n        super({\r\n            whitespaceHeuristics: true,\r\n            wordNavigationType: 0 /* WordStart */,\r\n            id: 'deleteWordLeft',\r\n            precondition: EditorContextKeys.writable,\r\n            kbOpts: {\r\n                kbExpr: EditorContextKeys.textInputFocus,\r\n                primary: 2048 /* CtrlCmd */ | 1 /* Backspace */,\r\n                mac: { primary: 512 /* Alt */ | 1 /* Backspace */ },\r\n                weight: 100 /* EditorContrib */\r\n            }\r\n        });\r\n    }\r\n}\r\nexport class DeleteWordStartRight extends DeleteWordRightCommand {\r\n    constructor() {\r\n        super({\r\n            whitespaceHeuristics: false,\r\n            wordNavigationType: 0 /* WordStart */,\r\n            id: 'deleteWordStartRight',\r\n            precondition: EditorContextKeys.writable\r\n        });\r\n    }\r\n}\r\nexport class DeleteWordEndRight extends DeleteWordRightCommand {\r\n    constructor() {\r\n        super({\r\n            whitespaceHeuristics: false,\r\n            wordNavigationType: 2 /* WordEnd */,\r\n            id: 'deleteWordEndRight',\r\n            precondition: EditorContextKeys.writable\r\n        });\r\n    }\r\n}\r\nexport class DeleteWordRight extends DeleteWordRightCommand {\r\n    constructor() {\r\n        super({\r\n            whitespaceHeuristics: true,\r\n            wordNavigationType: 2 /* WordEnd */,\r\n            id: 'deleteWordRight',\r\n            precondition: EditorContextKeys.writable,\r\n            kbOpts: {\r\n                kbExpr: EditorContextKeys.textInputFocus,\r\n                primary: 2048 /* CtrlCmd */ | 20 /* Delete */,\r\n                mac: { primary: 512 /* Alt */ | 20 /* Delete */ },\r\n                weight: 100 /* EditorContrib */\r\n            }\r\n        });\r\n    }\r\n}\r\nexport class DeleteInsideWord extends EditorAction {\r\n    constructor() {\r\n        super({\r\n            id: 'deleteInsideWord',\r\n            precondition: EditorContextKeys.writable,\r\n            label: nls.localize('deleteInsideWord', \"Delete Word\"),\r\n            alias: 'Delete Word'\r\n        });\r\n    }\r\n    run(accessor, editor, args) {\r\n        if (!editor.hasModel()) {\r\n            return;\r\n        }\r\n        const wordSeparators = getMapForWordSeparators(editor.getOption(110 /* wordSeparators */));\r\n        const model = editor.getModel();\r\n        const selections = editor.getSelections();\r\n        const commands = selections.map((sel) => {\r\n            const deleteRange = WordOperations.deleteInsideWord(wordSeparators, model, sel);\r\n            return new ReplaceCommand(deleteRange, '');\r\n        });\r\n        editor.pushUndoStop();\r\n        editor.executeCommands(this.id, commands);\r\n        editor.pushUndoStop();\r\n    }\r\n}\r\nregisterEditorCommand(new CursorWordStartLeft());\r\nregisterEditorCommand(new CursorWordEndLeft());\r\nregisterEditorCommand(new CursorWordLeft());\r\nregisterEditorCommand(new CursorWordStartLeftSelect());\r\nregisterEditorCommand(new CursorWordEndLeftSelect());\r\nregisterEditorCommand(new CursorWordLeftSelect());\r\nregisterEditorCommand(new CursorWordStartRight());\r\nregisterEditorCommand(new CursorWordEndRight());\r\nregisterEditorCommand(new CursorWordRight());\r\nregisterEditorCommand(new CursorWordStartRightSelect());\r\nregisterEditorCommand(new CursorWordEndRightSelect());\r\nregisterEditorCommand(new CursorWordRightSelect());\r\nregisterEditorCommand(new CursorWordAccessibilityLeft());\r\nregisterEditorCommand(new CursorWordAccessibilityLeftSelect());\r\nregisterEditorCommand(new CursorWordAccessibilityRight());\r\nregisterEditorCommand(new CursorWordAccessibilityRightSelect());\r\nregisterEditorCommand(new DeleteWordStartLeft());\r\nregisterEditorCommand(new DeleteWordEndLeft());\r\nregisterEditorCommand(new DeleteWordLeft());\r\nregisterEditorCommand(new DeleteWordStartRight());\r\nregisterEditorCommand(new DeleteWordEndRight());\r\nregisterEditorCommand(new DeleteWordRight());\r\nregisterEditorAction(DeleteInsideWord);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}