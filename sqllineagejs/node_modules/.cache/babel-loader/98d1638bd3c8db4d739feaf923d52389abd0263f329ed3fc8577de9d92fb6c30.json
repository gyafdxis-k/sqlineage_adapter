{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../base/common/strings.js';\nimport { CharacterClassifier } from '../core/characterClassifier.js';\nimport { LineBreakData } from './viewModel.js';\nclass WrappingCharacterClassifier extends CharacterClassifier {\n  constructor(BREAK_BEFORE, BREAK_AFTER) {\n    super(0 /* NONE */);\n    for (let i = 0; i < BREAK_BEFORE.length; i++) {\n      this.set(BREAK_BEFORE.charCodeAt(i), 1 /* BREAK_BEFORE */);\n    }\n\n    for (let i = 0; i < BREAK_AFTER.length; i++) {\n      this.set(BREAK_AFTER.charCodeAt(i), 2 /* BREAK_AFTER */);\n    }\n  }\n\n  get(charCode) {\n    if (charCode >= 0 && charCode < 256) {\n      return this._asciiMap[charCode];\n    } else {\n      // Initialize CharacterClass.BREAK_IDEOGRAPHIC for these Unicode ranges:\n      // 1. CJK Unified Ideographs (0x4E00 -- 0x9FFF)\n      // 2. CJK Unified Ideographs Extension A (0x3400 -- 0x4DBF)\n      // 3. Hiragana and Katakana (0x3040 -- 0x30FF)\n      if (charCode >= 0x3040 && charCode <= 0x30FF || charCode >= 0x3400 && charCode <= 0x4DBF || charCode >= 0x4E00 && charCode <= 0x9FFF) {\n        return 3 /* BREAK_IDEOGRAPHIC */;\n      }\n\n      return this._map.get(charCode) || this._defaultValue;\n    }\n  }\n}\nlet arrPool1 = [];\nlet arrPool2 = [];\nexport class MonospaceLineBreaksComputerFactory {\n  constructor(breakBeforeChars, breakAfterChars) {\n    this.classifier = new WrappingCharacterClassifier(breakBeforeChars, breakAfterChars);\n  }\n  static create(options) {\n    return new MonospaceLineBreaksComputerFactory(options.get(113 /* wordWrapBreakBeforeCharacters */), options.get(112 /* wordWrapBreakAfterCharacters */));\n  }\n\n  createLineBreaksComputer(fontInfo, tabSize, wrappingColumn, wrappingIndent) {\n    tabSize = tabSize | 0; //@perf\n    wrappingColumn = +wrappingColumn; //@perf\n    let requests = [];\n    let previousBreakingData = [];\n    return {\n      addRequest: (lineText, previousLineBreakData) => {\n        requests.push(lineText);\n        previousBreakingData.push(previousLineBreakData);\n      },\n      finalize: () => {\n        const columnsForFullWidthChar = fontInfo.typicalFullwidthCharacterWidth / fontInfo.typicalHalfwidthCharacterWidth; //@perf\n        let result = [];\n        for (let i = 0, len = requests.length; i < len; i++) {\n          const previousLineBreakData = previousBreakingData[i];\n          if (previousLineBreakData) {\n            result[i] = createLineBreaksFromPreviousLineBreaks(this.classifier, previousLineBreakData, requests[i], tabSize, wrappingColumn, columnsForFullWidthChar, wrappingIndent);\n          } else {\n            result[i] = createLineBreaks(this.classifier, requests[i], tabSize, wrappingColumn, columnsForFullWidthChar, wrappingIndent);\n          }\n        }\n        arrPool1.length = 0;\n        arrPool2.length = 0;\n        return result;\n      }\n    };\n  }\n}\nfunction createLineBreaksFromPreviousLineBreaks(classifier, previousBreakingData, lineText, tabSize, firstLineBreakColumn, columnsForFullWidthChar, wrappingIndent) {\n  if (firstLineBreakColumn === -1) {\n    return null;\n  }\n  const len = lineText.length;\n  if (len <= 1) {\n    return null;\n  }\n  const prevBreakingOffsets = previousBreakingData.breakOffsets;\n  const prevBreakingOffsetsVisibleColumn = previousBreakingData.breakOffsetsVisibleColumn;\n  const wrappedTextIndentLength = computeWrappedTextIndentLength(lineText, tabSize, firstLineBreakColumn, columnsForFullWidthChar, wrappingIndent);\n  const wrappedLineBreakColumn = firstLineBreakColumn - wrappedTextIndentLength;\n  let breakingOffsets = arrPool1;\n  let breakingOffsetsVisibleColumn = arrPool2;\n  let breakingOffsetsCount = 0;\n  let lastBreakingOffset = 0;\n  let lastBreakingOffsetVisibleColumn = 0;\n  let breakingColumn = firstLineBreakColumn;\n  const prevLen = prevBreakingOffsets.length;\n  let prevIndex = 0;\n  if (prevIndex >= 0) {\n    let bestDistance = Math.abs(prevBreakingOffsetsVisibleColumn[prevIndex] - breakingColumn);\n    while (prevIndex + 1 < prevLen) {\n      const distance = Math.abs(prevBreakingOffsetsVisibleColumn[prevIndex + 1] - breakingColumn);\n      if (distance >= bestDistance) {\n        break;\n      }\n      bestDistance = distance;\n      prevIndex++;\n    }\n  }\n  while (prevIndex < prevLen) {\n    // Allow for prevIndex to be -1 (for the case where we hit a tab when walking backwards from the first break)\n    let prevBreakOffset = prevIndex < 0 ? 0 : prevBreakingOffsets[prevIndex];\n    let prevBreakOffsetVisibleColumn = prevIndex < 0 ? 0 : prevBreakingOffsetsVisibleColumn[prevIndex];\n    if (lastBreakingOffset > prevBreakOffset) {\n      prevBreakOffset = lastBreakingOffset;\n      prevBreakOffsetVisibleColumn = lastBreakingOffsetVisibleColumn;\n    }\n    let breakOffset = 0;\n    let breakOffsetVisibleColumn = 0;\n    let forcedBreakOffset = 0;\n    let forcedBreakOffsetVisibleColumn = 0;\n    // initially, we search as much as possible to the right (if it fits)\n    if (prevBreakOffsetVisibleColumn <= breakingColumn) {\n      let visibleColumn = prevBreakOffsetVisibleColumn;\n      let prevCharCode = prevBreakOffset === 0 ? 0 /* Null */ : lineText.charCodeAt(prevBreakOffset - 1);\n      let prevCharCodeClass = prevBreakOffset === 0 ? 0 /* NONE */ : classifier.get(prevCharCode);\n      let entireLineFits = true;\n      for (let i = prevBreakOffset; i < len; i++) {\n        const charStartOffset = i;\n        const charCode = lineText.charCodeAt(i);\n        let charCodeClass;\n        let charWidth;\n        if (strings.isHighSurrogate(charCode)) {\n          // A surrogate pair must always be considered as a single unit, so it is never to be broken\n          i++;\n          charCodeClass = 0 /* NONE */;\n          charWidth = 2;\n        } else {\n          charCodeClass = classifier.get(charCode);\n          charWidth = computeCharWidth(charCode, visibleColumn, tabSize, columnsForFullWidthChar);\n        }\n        if (charStartOffset > lastBreakingOffset && canBreak(prevCharCode, prevCharCodeClass, charCode, charCodeClass)) {\n          breakOffset = charStartOffset;\n          breakOffsetVisibleColumn = visibleColumn;\n        }\n        visibleColumn += charWidth;\n        // check if adding character at `i` will go over the breaking column\n        if (visibleColumn > breakingColumn) {\n          // We need to break at least before character at `i`:\n          if (charStartOffset > lastBreakingOffset) {\n            forcedBreakOffset = charStartOffset;\n            forcedBreakOffsetVisibleColumn = visibleColumn - charWidth;\n          } else {\n            // we need to advance at least by one character\n            forcedBreakOffset = i + 1;\n            forcedBreakOffsetVisibleColumn = visibleColumn;\n          }\n          if (visibleColumn - breakOffsetVisibleColumn > wrappedLineBreakColumn) {\n            // Cannot break at `breakOffset` => reset it if it was set\n            breakOffset = 0;\n          }\n          entireLineFits = false;\n          break;\n        }\n        prevCharCode = charCode;\n        prevCharCodeClass = charCodeClass;\n      }\n      if (entireLineFits) {\n        // there is no more need to break => stop the outer loop!\n        if (breakingOffsetsCount > 0) {\n          // Add last segment, no need to assign to `lastBreakingOffset` and `lastBreakingOffsetVisibleColumn`\n          breakingOffsets[breakingOffsetsCount] = prevBreakingOffsets[prevBreakingOffsets.length - 1];\n          breakingOffsetsVisibleColumn[breakingOffsetsCount] = prevBreakingOffsetsVisibleColumn[prevBreakingOffsets.length - 1];\n          breakingOffsetsCount++;\n        }\n        break;\n      }\n    }\n    if (breakOffset === 0) {\n      // must search left\n      let visibleColumn = prevBreakOffsetVisibleColumn;\n      let charCode = lineText.charCodeAt(prevBreakOffset);\n      let charCodeClass = classifier.get(charCode);\n      let hitATabCharacter = false;\n      for (let i = prevBreakOffset - 1; i >= lastBreakingOffset; i--) {\n        const charStartOffset = i + 1;\n        const prevCharCode = lineText.charCodeAt(i);\n        if (prevCharCode === 9 /* Tab */) {\n          // cannot determine the width of a tab when going backwards, so we must go forwards\n          hitATabCharacter = true;\n          break;\n        }\n        let prevCharCodeClass;\n        let prevCharWidth;\n        if (strings.isLowSurrogate(prevCharCode)) {\n          // A surrogate pair must always be considered as a single unit, so it is never to be broken\n          i--;\n          prevCharCodeClass = 0 /* NONE */;\n          prevCharWidth = 2;\n        } else {\n          prevCharCodeClass = classifier.get(prevCharCode);\n          prevCharWidth = strings.isFullWidthCharacter(prevCharCode) ? columnsForFullWidthChar : 1;\n        }\n        if (visibleColumn <= breakingColumn) {\n          if (forcedBreakOffset === 0) {\n            forcedBreakOffset = charStartOffset;\n            forcedBreakOffsetVisibleColumn = visibleColumn;\n          }\n          if (visibleColumn <= breakingColumn - wrappedLineBreakColumn) {\n            // went too far!\n            break;\n          }\n          if (canBreak(prevCharCode, prevCharCodeClass, charCode, charCodeClass)) {\n            breakOffset = charStartOffset;\n            breakOffsetVisibleColumn = visibleColumn;\n            break;\n          }\n        }\n        visibleColumn -= prevCharWidth;\n        charCode = prevCharCode;\n        charCodeClass = prevCharCodeClass;\n      }\n      if (breakOffset !== 0) {\n        const remainingWidthOfNextLine = wrappedLineBreakColumn - (forcedBreakOffsetVisibleColumn - breakOffsetVisibleColumn);\n        if (remainingWidthOfNextLine <= tabSize) {\n          const charCodeAtForcedBreakOffset = lineText.charCodeAt(forcedBreakOffset);\n          let charWidth;\n          if (strings.isHighSurrogate(charCodeAtForcedBreakOffset)) {\n            // A surrogate pair must always be considered as a single unit, so it is never to be broken\n            charWidth = 2;\n          } else {\n            charWidth = computeCharWidth(charCodeAtForcedBreakOffset, forcedBreakOffsetVisibleColumn, tabSize, columnsForFullWidthChar);\n          }\n          if (remainingWidthOfNextLine - charWidth < 0) {\n            // it is not worth it to break at breakOffset, it just introduces an extra needless line!\n            breakOffset = 0;\n          }\n        }\n      }\n      if (hitATabCharacter) {\n        // cannot determine the width of a tab when going backwards, so we must go forwards from the previous break\n        prevIndex--;\n        continue;\n      }\n    }\n    if (breakOffset === 0) {\n      // Could not find a good breaking point\n      breakOffset = forcedBreakOffset;\n      breakOffsetVisibleColumn = forcedBreakOffsetVisibleColumn;\n    }\n    if (breakOffset <= lastBreakingOffset) {\n      // Make sure that we are advancing (at least one character)\n      const charCode = lineText.charCodeAt(lastBreakingOffset);\n      if (strings.isHighSurrogate(charCode)) {\n        // A surrogate pair must always be considered as a single unit, so it is never to be broken\n        breakOffset = lastBreakingOffset + 2;\n        breakOffsetVisibleColumn = lastBreakingOffsetVisibleColumn + 2;\n      } else {\n        breakOffset = lastBreakingOffset + 1;\n        breakOffsetVisibleColumn = lastBreakingOffsetVisibleColumn + computeCharWidth(charCode, lastBreakingOffsetVisibleColumn, tabSize, columnsForFullWidthChar);\n      }\n    }\n    lastBreakingOffset = breakOffset;\n    breakingOffsets[breakingOffsetsCount] = breakOffset;\n    lastBreakingOffsetVisibleColumn = breakOffsetVisibleColumn;\n    breakingOffsetsVisibleColumn[breakingOffsetsCount] = breakOffsetVisibleColumn;\n    breakingOffsetsCount++;\n    breakingColumn = breakOffsetVisibleColumn + wrappedLineBreakColumn;\n    while (prevIndex < 0 || prevIndex < prevLen && prevBreakingOffsetsVisibleColumn[prevIndex] < breakOffsetVisibleColumn) {\n      prevIndex++;\n    }\n    let bestDistance = Math.abs(prevBreakingOffsetsVisibleColumn[prevIndex] - breakingColumn);\n    while (prevIndex + 1 < prevLen) {\n      const distance = Math.abs(prevBreakingOffsetsVisibleColumn[prevIndex + 1] - breakingColumn);\n      if (distance >= bestDistance) {\n        break;\n      }\n      bestDistance = distance;\n      prevIndex++;\n    }\n  }\n  if (breakingOffsetsCount === 0) {\n    return null;\n  }\n  // Doing here some object reuse which ends up helping a huge deal with GC pauses!\n  breakingOffsets.length = breakingOffsetsCount;\n  breakingOffsetsVisibleColumn.length = breakingOffsetsCount;\n  arrPool1 = previousBreakingData.breakOffsets;\n  arrPool2 = previousBreakingData.breakOffsetsVisibleColumn;\n  previousBreakingData.breakOffsets = breakingOffsets;\n  previousBreakingData.breakOffsetsVisibleColumn = breakingOffsetsVisibleColumn;\n  previousBreakingData.wrappedTextIndentLength = wrappedTextIndentLength;\n  return previousBreakingData;\n}\nfunction createLineBreaks(classifier, lineText, tabSize, firstLineBreakColumn, columnsForFullWidthChar, wrappingIndent) {\n  if (firstLineBreakColumn === -1) {\n    return null;\n  }\n  const len = lineText.length;\n  if (len <= 1) {\n    return null;\n  }\n  const wrappedTextIndentLength = computeWrappedTextIndentLength(lineText, tabSize, firstLineBreakColumn, columnsForFullWidthChar, wrappingIndent);\n  const wrappedLineBreakColumn = firstLineBreakColumn - wrappedTextIndentLength;\n  let breakingOffsets = [];\n  let breakingOffsetsVisibleColumn = [];\n  let breakingOffsetsCount = 0;\n  let breakOffset = 0;\n  let breakOffsetVisibleColumn = 0;\n  let breakingColumn = firstLineBreakColumn;\n  let prevCharCode = lineText.charCodeAt(0);\n  let prevCharCodeClass = classifier.get(prevCharCode);\n  let visibleColumn = computeCharWidth(prevCharCode, 0, tabSize, columnsForFullWidthChar);\n  let startOffset = 1;\n  if (strings.isHighSurrogate(prevCharCode)) {\n    // A surrogate pair must always be considered as a single unit, so it is never to be broken\n    visibleColumn += 1;\n    prevCharCode = lineText.charCodeAt(1);\n    prevCharCodeClass = classifier.get(prevCharCode);\n    startOffset++;\n  }\n  for (let i = startOffset; i < len; i++) {\n    const charStartOffset = i;\n    const charCode = lineText.charCodeAt(i);\n    let charCodeClass;\n    let charWidth;\n    if (strings.isHighSurrogate(charCode)) {\n      // A surrogate pair must always be considered as a single unit, so it is never to be broken\n      i++;\n      charCodeClass = 0 /* NONE */;\n      charWidth = 2;\n    } else {\n      charCodeClass = classifier.get(charCode);\n      charWidth = computeCharWidth(charCode, visibleColumn, tabSize, columnsForFullWidthChar);\n    }\n    if (canBreak(prevCharCode, prevCharCodeClass, charCode, charCodeClass)) {\n      breakOffset = charStartOffset;\n      breakOffsetVisibleColumn = visibleColumn;\n    }\n    visibleColumn += charWidth;\n    // check if adding character at `i` will go over the breaking column\n    if (visibleColumn > breakingColumn) {\n      // We need to break at least before character at `i`:\n      if (breakOffset === 0 || visibleColumn - breakOffsetVisibleColumn > wrappedLineBreakColumn) {\n        // Cannot break at `breakOffset`, must break at `i`\n        breakOffset = charStartOffset;\n        breakOffsetVisibleColumn = visibleColumn - charWidth;\n      }\n      breakingOffsets[breakingOffsetsCount] = breakOffset;\n      breakingOffsetsVisibleColumn[breakingOffsetsCount] = breakOffsetVisibleColumn;\n      breakingOffsetsCount++;\n      breakingColumn = breakOffsetVisibleColumn + wrappedLineBreakColumn;\n      breakOffset = 0;\n    }\n    prevCharCode = charCode;\n    prevCharCodeClass = charCodeClass;\n  }\n  if (breakingOffsetsCount === 0) {\n    return null;\n  }\n  // Add last segment\n  breakingOffsets[breakingOffsetsCount] = len;\n  breakingOffsetsVisibleColumn[breakingOffsetsCount] = visibleColumn;\n  return new LineBreakData(breakingOffsets, breakingOffsetsVisibleColumn, wrappedTextIndentLength);\n}\nfunction computeCharWidth(charCode, visibleColumn, tabSize, columnsForFullWidthChar) {\n  if (charCode === 9 /* Tab */) {\n    return tabSize - visibleColumn % tabSize;\n  }\n  if (strings.isFullWidthCharacter(charCode)) {\n    return columnsForFullWidthChar;\n  }\n  if (charCode < 32) {\n    // when using `editor.renderControlCharacters`, the substitutions are often wide\n    return columnsForFullWidthChar;\n  }\n  return 1;\n}\nfunction tabCharacterWidth(visibleColumn, tabSize) {\n  return tabSize - visibleColumn % tabSize;\n}\n/**\r\n * Kinsoku Shori : Don't break after a leading character, like an open bracket\r\n * Kinsoku Shori : Don't break before a trailing character, like a period\r\n */\nfunction canBreak(prevCharCode, prevCharCodeClass, charCode, charCodeClass) {\n  return charCode !== 32 /* Space */ && (prevCharCodeClass === 2 /* BREAK_AFTER */ || prevCharCodeClass === 3 /* BREAK_IDEOGRAPHIC */ && charCodeClass !== 2 /* BREAK_AFTER */ || charCodeClass === 1 /* BREAK_BEFORE */ || charCodeClass === 3 /* BREAK_IDEOGRAPHIC */ && prevCharCodeClass !== 1 /* BREAK_BEFORE */);\n}\n\nfunction computeWrappedTextIndentLength(lineText, tabSize, firstLineBreakColumn, columnsForFullWidthChar, wrappingIndent) {\n  let wrappedTextIndentLength = 0;\n  if (wrappingIndent !== 0 /* None */) {\n    const firstNonWhitespaceIndex = strings.firstNonWhitespaceIndex(lineText);\n    if (firstNonWhitespaceIndex !== -1) {\n      // Track existing indent\n      for (let i = 0; i < firstNonWhitespaceIndex; i++) {\n        const charWidth = lineText.charCodeAt(i) === 9 /* Tab */ ? tabCharacterWidth(wrappedTextIndentLength, tabSize) : 1;\n        wrappedTextIndentLength += charWidth;\n      }\n      // Increase indent of continuation lines, if desired\n      const numberOfAdditionalTabs = wrappingIndent === 3 /* DeepIndent */ ? 2 : wrappingIndent === 2 /* Indent */ ? 1 : 0;\n      for (let i = 0; i < numberOfAdditionalTabs; i++) {\n        const charWidth = tabCharacterWidth(wrappedTextIndentLength, tabSize);\n        wrappedTextIndentLength += charWidth;\n      }\n      // Force sticking to beginning of line if no character would fit except for the indentation\n      if (wrappedTextIndentLength + columnsForFullWidthChar > firstLineBreakColumn) {\n        wrappedTextIndentLength = 0;\n      }\n    }\n  }\n  return wrappedTextIndentLength;\n}","map":{"version":3,"names":["strings","CharacterClassifier","LineBreakData","WrappingCharacterClassifier","constructor","BREAK_BEFORE","BREAK_AFTER","i","length","set","charCodeAt","get","charCode","_asciiMap","_map","_defaultValue","arrPool1","arrPool2","MonospaceLineBreaksComputerFactory","breakBeforeChars","breakAfterChars","classifier","create","options","createLineBreaksComputer","fontInfo","tabSize","wrappingColumn","wrappingIndent","requests","previousBreakingData","addRequest","lineText","previousLineBreakData","push","finalize","columnsForFullWidthChar","typicalFullwidthCharacterWidth","typicalHalfwidthCharacterWidth","result","len","createLineBreaksFromPreviousLineBreaks","createLineBreaks","firstLineBreakColumn","prevBreakingOffsets","breakOffsets","prevBreakingOffsetsVisibleColumn","breakOffsetsVisibleColumn","wrappedTextIndentLength","computeWrappedTextIndentLength","wrappedLineBreakColumn","breakingOffsets","breakingOffsetsVisibleColumn","breakingOffsetsCount","lastBreakingOffset","lastBreakingOffsetVisibleColumn","breakingColumn","prevLen","prevIndex","bestDistance","Math","abs","distance","prevBreakOffset","prevBreakOffsetVisibleColumn","breakOffset","breakOffsetVisibleColumn","forcedBreakOffset","forcedBreakOffsetVisibleColumn","visibleColumn","prevCharCode","prevCharCodeClass","entireLineFits","charStartOffset","charCodeClass","charWidth","isHighSurrogate","computeCharWidth","canBreak","hitATabCharacter","prevCharWidth","isLowSurrogate","isFullWidthCharacter","remainingWidthOfNextLine","charCodeAtForcedBreakOffset","startOffset","tabCharacterWidth","firstNonWhitespaceIndex","numberOfAdditionalTabs"],"sources":["C:/Users/Administrator/Desktop/sqllineage-master/sqllineagejs/node_modules/monaco-editor/esm/vs/editor/common/viewModel/monospaceLineBreaksComputer.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport * as strings from '../../../base/common/strings.js';\r\nimport { CharacterClassifier } from '../core/characterClassifier.js';\r\nimport { LineBreakData } from './viewModel.js';\r\nclass WrappingCharacterClassifier extends CharacterClassifier {\r\n    constructor(BREAK_BEFORE, BREAK_AFTER) {\r\n        super(0 /* NONE */);\r\n        for (let i = 0; i < BREAK_BEFORE.length; i++) {\r\n            this.set(BREAK_BEFORE.charCodeAt(i), 1 /* BREAK_BEFORE */);\r\n        }\r\n        for (let i = 0; i < BREAK_AFTER.length; i++) {\r\n            this.set(BREAK_AFTER.charCodeAt(i), 2 /* BREAK_AFTER */);\r\n        }\r\n    }\r\n    get(charCode) {\r\n        if (charCode >= 0 && charCode < 256) {\r\n            return this._asciiMap[charCode];\r\n        }\r\n        else {\r\n            // Initialize CharacterClass.BREAK_IDEOGRAPHIC for these Unicode ranges:\r\n            // 1. CJK Unified Ideographs (0x4E00 -- 0x9FFF)\r\n            // 2. CJK Unified Ideographs Extension A (0x3400 -- 0x4DBF)\r\n            // 3. Hiragana and Katakana (0x3040 -- 0x30FF)\r\n            if ((charCode >= 0x3040 && charCode <= 0x30FF)\r\n                || (charCode >= 0x3400 && charCode <= 0x4DBF)\r\n                || (charCode >= 0x4E00 && charCode <= 0x9FFF)) {\r\n                return 3 /* BREAK_IDEOGRAPHIC */;\r\n            }\r\n            return (this._map.get(charCode) || this._defaultValue);\r\n        }\r\n    }\r\n}\r\nlet arrPool1 = [];\r\nlet arrPool2 = [];\r\nexport class MonospaceLineBreaksComputerFactory {\r\n    constructor(breakBeforeChars, breakAfterChars) {\r\n        this.classifier = new WrappingCharacterClassifier(breakBeforeChars, breakAfterChars);\r\n    }\r\n    static create(options) {\r\n        return new MonospaceLineBreaksComputerFactory(options.get(113 /* wordWrapBreakBeforeCharacters */), options.get(112 /* wordWrapBreakAfterCharacters */));\r\n    }\r\n    createLineBreaksComputer(fontInfo, tabSize, wrappingColumn, wrappingIndent) {\r\n        tabSize = tabSize | 0; //@perf\r\n        wrappingColumn = +wrappingColumn; //@perf\r\n        let requests = [];\r\n        let previousBreakingData = [];\r\n        return {\r\n            addRequest: (lineText, previousLineBreakData) => {\r\n                requests.push(lineText);\r\n                previousBreakingData.push(previousLineBreakData);\r\n            },\r\n            finalize: () => {\r\n                const columnsForFullWidthChar = fontInfo.typicalFullwidthCharacterWidth / fontInfo.typicalHalfwidthCharacterWidth; //@perf\r\n                let result = [];\r\n                for (let i = 0, len = requests.length; i < len; i++) {\r\n                    const previousLineBreakData = previousBreakingData[i];\r\n                    if (previousLineBreakData) {\r\n                        result[i] = createLineBreaksFromPreviousLineBreaks(this.classifier, previousLineBreakData, requests[i], tabSize, wrappingColumn, columnsForFullWidthChar, wrappingIndent);\r\n                    }\r\n                    else {\r\n                        result[i] = createLineBreaks(this.classifier, requests[i], tabSize, wrappingColumn, columnsForFullWidthChar, wrappingIndent);\r\n                    }\r\n                }\r\n                arrPool1.length = 0;\r\n                arrPool2.length = 0;\r\n                return result;\r\n            }\r\n        };\r\n    }\r\n}\r\nfunction createLineBreaksFromPreviousLineBreaks(classifier, previousBreakingData, lineText, tabSize, firstLineBreakColumn, columnsForFullWidthChar, wrappingIndent) {\r\n    if (firstLineBreakColumn === -1) {\r\n        return null;\r\n    }\r\n    const len = lineText.length;\r\n    if (len <= 1) {\r\n        return null;\r\n    }\r\n    const prevBreakingOffsets = previousBreakingData.breakOffsets;\r\n    const prevBreakingOffsetsVisibleColumn = previousBreakingData.breakOffsetsVisibleColumn;\r\n    const wrappedTextIndentLength = computeWrappedTextIndentLength(lineText, tabSize, firstLineBreakColumn, columnsForFullWidthChar, wrappingIndent);\r\n    const wrappedLineBreakColumn = firstLineBreakColumn - wrappedTextIndentLength;\r\n    let breakingOffsets = arrPool1;\r\n    let breakingOffsetsVisibleColumn = arrPool2;\r\n    let breakingOffsetsCount = 0;\r\n    let lastBreakingOffset = 0;\r\n    let lastBreakingOffsetVisibleColumn = 0;\r\n    let breakingColumn = firstLineBreakColumn;\r\n    const prevLen = prevBreakingOffsets.length;\r\n    let prevIndex = 0;\r\n    if (prevIndex >= 0) {\r\n        let bestDistance = Math.abs(prevBreakingOffsetsVisibleColumn[prevIndex] - breakingColumn);\r\n        while (prevIndex + 1 < prevLen) {\r\n            const distance = Math.abs(prevBreakingOffsetsVisibleColumn[prevIndex + 1] - breakingColumn);\r\n            if (distance >= bestDistance) {\r\n                break;\r\n            }\r\n            bestDistance = distance;\r\n            prevIndex++;\r\n        }\r\n    }\r\n    while (prevIndex < prevLen) {\r\n        // Allow for prevIndex to be -1 (for the case where we hit a tab when walking backwards from the first break)\r\n        let prevBreakOffset = prevIndex < 0 ? 0 : prevBreakingOffsets[prevIndex];\r\n        let prevBreakOffsetVisibleColumn = prevIndex < 0 ? 0 : prevBreakingOffsetsVisibleColumn[prevIndex];\r\n        if (lastBreakingOffset > prevBreakOffset) {\r\n            prevBreakOffset = lastBreakingOffset;\r\n            prevBreakOffsetVisibleColumn = lastBreakingOffsetVisibleColumn;\r\n        }\r\n        let breakOffset = 0;\r\n        let breakOffsetVisibleColumn = 0;\r\n        let forcedBreakOffset = 0;\r\n        let forcedBreakOffsetVisibleColumn = 0;\r\n        // initially, we search as much as possible to the right (if it fits)\r\n        if (prevBreakOffsetVisibleColumn <= breakingColumn) {\r\n            let visibleColumn = prevBreakOffsetVisibleColumn;\r\n            let prevCharCode = prevBreakOffset === 0 ? 0 /* Null */ : lineText.charCodeAt(prevBreakOffset - 1);\r\n            let prevCharCodeClass = prevBreakOffset === 0 ? 0 /* NONE */ : classifier.get(prevCharCode);\r\n            let entireLineFits = true;\r\n            for (let i = prevBreakOffset; i < len; i++) {\r\n                const charStartOffset = i;\r\n                const charCode = lineText.charCodeAt(i);\r\n                let charCodeClass;\r\n                let charWidth;\r\n                if (strings.isHighSurrogate(charCode)) {\r\n                    // A surrogate pair must always be considered as a single unit, so it is never to be broken\r\n                    i++;\r\n                    charCodeClass = 0 /* NONE */;\r\n                    charWidth = 2;\r\n                }\r\n                else {\r\n                    charCodeClass = classifier.get(charCode);\r\n                    charWidth = computeCharWidth(charCode, visibleColumn, tabSize, columnsForFullWidthChar);\r\n                }\r\n                if (charStartOffset > lastBreakingOffset && canBreak(prevCharCode, prevCharCodeClass, charCode, charCodeClass)) {\r\n                    breakOffset = charStartOffset;\r\n                    breakOffsetVisibleColumn = visibleColumn;\r\n                }\r\n                visibleColumn += charWidth;\r\n                // check if adding character at `i` will go over the breaking column\r\n                if (visibleColumn > breakingColumn) {\r\n                    // We need to break at least before character at `i`:\r\n                    if (charStartOffset > lastBreakingOffset) {\r\n                        forcedBreakOffset = charStartOffset;\r\n                        forcedBreakOffsetVisibleColumn = visibleColumn - charWidth;\r\n                    }\r\n                    else {\r\n                        // we need to advance at least by one character\r\n                        forcedBreakOffset = i + 1;\r\n                        forcedBreakOffsetVisibleColumn = visibleColumn;\r\n                    }\r\n                    if (visibleColumn - breakOffsetVisibleColumn > wrappedLineBreakColumn) {\r\n                        // Cannot break at `breakOffset` => reset it if it was set\r\n                        breakOffset = 0;\r\n                    }\r\n                    entireLineFits = false;\r\n                    break;\r\n                }\r\n                prevCharCode = charCode;\r\n                prevCharCodeClass = charCodeClass;\r\n            }\r\n            if (entireLineFits) {\r\n                // there is no more need to break => stop the outer loop!\r\n                if (breakingOffsetsCount > 0) {\r\n                    // Add last segment, no need to assign to `lastBreakingOffset` and `lastBreakingOffsetVisibleColumn`\r\n                    breakingOffsets[breakingOffsetsCount] = prevBreakingOffsets[prevBreakingOffsets.length - 1];\r\n                    breakingOffsetsVisibleColumn[breakingOffsetsCount] = prevBreakingOffsetsVisibleColumn[prevBreakingOffsets.length - 1];\r\n                    breakingOffsetsCount++;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        if (breakOffset === 0) {\r\n            // must search left\r\n            let visibleColumn = prevBreakOffsetVisibleColumn;\r\n            let charCode = lineText.charCodeAt(prevBreakOffset);\r\n            let charCodeClass = classifier.get(charCode);\r\n            let hitATabCharacter = false;\r\n            for (let i = prevBreakOffset - 1; i >= lastBreakingOffset; i--) {\r\n                const charStartOffset = i + 1;\r\n                const prevCharCode = lineText.charCodeAt(i);\r\n                if (prevCharCode === 9 /* Tab */) {\r\n                    // cannot determine the width of a tab when going backwards, so we must go forwards\r\n                    hitATabCharacter = true;\r\n                    break;\r\n                }\r\n                let prevCharCodeClass;\r\n                let prevCharWidth;\r\n                if (strings.isLowSurrogate(prevCharCode)) {\r\n                    // A surrogate pair must always be considered as a single unit, so it is never to be broken\r\n                    i--;\r\n                    prevCharCodeClass = 0 /* NONE */;\r\n                    prevCharWidth = 2;\r\n                }\r\n                else {\r\n                    prevCharCodeClass = classifier.get(prevCharCode);\r\n                    prevCharWidth = (strings.isFullWidthCharacter(prevCharCode) ? columnsForFullWidthChar : 1);\r\n                }\r\n                if (visibleColumn <= breakingColumn) {\r\n                    if (forcedBreakOffset === 0) {\r\n                        forcedBreakOffset = charStartOffset;\r\n                        forcedBreakOffsetVisibleColumn = visibleColumn;\r\n                    }\r\n                    if (visibleColumn <= breakingColumn - wrappedLineBreakColumn) {\r\n                        // went too far!\r\n                        break;\r\n                    }\r\n                    if (canBreak(prevCharCode, prevCharCodeClass, charCode, charCodeClass)) {\r\n                        breakOffset = charStartOffset;\r\n                        breakOffsetVisibleColumn = visibleColumn;\r\n                        break;\r\n                    }\r\n                }\r\n                visibleColumn -= prevCharWidth;\r\n                charCode = prevCharCode;\r\n                charCodeClass = prevCharCodeClass;\r\n            }\r\n            if (breakOffset !== 0) {\r\n                const remainingWidthOfNextLine = wrappedLineBreakColumn - (forcedBreakOffsetVisibleColumn - breakOffsetVisibleColumn);\r\n                if (remainingWidthOfNextLine <= tabSize) {\r\n                    const charCodeAtForcedBreakOffset = lineText.charCodeAt(forcedBreakOffset);\r\n                    let charWidth;\r\n                    if (strings.isHighSurrogate(charCodeAtForcedBreakOffset)) {\r\n                        // A surrogate pair must always be considered as a single unit, so it is never to be broken\r\n                        charWidth = 2;\r\n                    }\r\n                    else {\r\n                        charWidth = computeCharWidth(charCodeAtForcedBreakOffset, forcedBreakOffsetVisibleColumn, tabSize, columnsForFullWidthChar);\r\n                    }\r\n                    if (remainingWidthOfNextLine - charWidth < 0) {\r\n                        // it is not worth it to break at breakOffset, it just introduces an extra needless line!\r\n                        breakOffset = 0;\r\n                    }\r\n                }\r\n            }\r\n            if (hitATabCharacter) {\r\n                // cannot determine the width of a tab when going backwards, so we must go forwards from the previous break\r\n                prevIndex--;\r\n                continue;\r\n            }\r\n        }\r\n        if (breakOffset === 0) {\r\n            // Could not find a good breaking point\r\n            breakOffset = forcedBreakOffset;\r\n            breakOffsetVisibleColumn = forcedBreakOffsetVisibleColumn;\r\n        }\r\n        if (breakOffset <= lastBreakingOffset) {\r\n            // Make sure that we are advancing (at least one character)\r\n            const charCode = lineText.charCodeAt(lastBreakingOffset);\r\n            if (strings.isHighSurrogate(charCode)) {\r\n                // A surrogate pair must always be considered as a single unit, so it is never to be broken\r\n                breakOffset = lastBreakingOffset + 2;\r\n                breakOffsetVisibleColumn = lastBreakingOffsetVisibleColumn + 2;\r\n            }\r\n            else {\r\n                breakOffset = lastBreakingOffset + 1;\r\n                breakOffsetVisibleColumn = lastBreakingOffsetVisibleColumn + computeCharWidth(charCode, lastBreakingOffsetVisibleColumn, tabSize, columnsForFullWidthChar);\r\n            }\r\n        }\r\n        lastBreakingOffset = breakOffset;\r\n        breakingOffsets[breakingOffsetsCount] = breakOffset;\r\n        lastBreakingOffsetVisibleColumn = breakOffsetVisibleColumn;\r\n        breakingOffsetsVisibleColumn[breakingOffsetsCount] = breakOffsetVisibleColumn;\r\n        breakingOffsetsCount++;\r\n        breakingColumn = breakOffsetVisibleColumn + wrappedLineBreakColumn;\r\n        while (prevIndex < 0 || (prevIndex < prevLen && prevBreakingOffsetsVisibleColumn[prevIndex] < breakOffsetVisibleColumn)) {\r\n            prevIndex++;\r\n        }\r\n        let bestDistance = Math.abs(prevBreakingOffsetsVisibleColumn[prevIndex] - breakingColumn);\r\n        while (prevIndex + 1 < prevLen) {\r\n            const distance = Math.abs(prevBreakingOffsetsVisibleColumn[prevIndex + 1] - breakingColumn);\r\n            if (distance >= bestDistance) {\r\n                break;\r\n            }\r\n            bestDistance = distance;\r\n            prevIndex++;\r\n        }\r\n    }\r\n    if (breakingOffsetsCount === 0) {\r\n        return null;\r\n    }\r\n    // Doing here some object reuse which ends up helping a huge deal with GC pauses!\r\n    breakingOffsets.length = breakingOffsetsCount;\r\n    breakingOffsetsVisibleColumn.length = breakingOffsetsCount;\r\n    arrPool1 = previousBreakingData.breakOffsets;\r\n    arrPool2 = previousBreakingData.breakOffsetsVisibleColumn;\r\n    previousBreakingData.breakOffsets = breakingOffsets;\r\n    previousBreakingData.breakOffsetsVisibleColumn = breakingOffsetsVisibleColumn;\r\n    previousBreakingData.wrappedTextIndentLength = wrappedTextIndentLength;\r\n    return previousBreakingData;\r\n}\r\nfunction createLineBreaks(classifier, lineText, tabSize, firstLineBreakColumn, columnsForFullWidthChar, wrappingIndent) {\r\n    if (firstLineBreakColumn === -1) {\r\n        return null;\r\n    }\r\n    const len = lineText.length;\r\n    if (len <= 1) {\r\n        return null;\r\n    }\r\n    const wrappedTextIndentLength = computeWrappedTextIndentLength(lineText, tabSize, firstLineBreakColumn, columnsForFullWidthChar, wrappingIndent);\r\n    const wrappedLineBreakColumn = firstLineBreakColumn - wrappedTextIndentLength;\r\n    let breakingOffsets = [];\r\n    let breakingOffsetsVisibleColumn = [];\r\n    let breakingOffsetsCount = 0;\r\n    let breakOffset = 0;\r\n    let breakOffsetVisibleColumn = 0;\r\n    let breakingColumn = firstLineBreakColumn;\r\n    let prevCharCode = lineText.charCodeAt(0);\r\n    let prevCharCodeClass = classifier.get(prevCharCode);\r\n    let visibleColumn = computeCharWidth(prevCharCode, 0, tabSize, columnsForFullWidthChar);\r\n    let startOffset = 1;\r\n    if (strings.isHighSurrogate(prevCharCode)) {\r\n        // A surrogate pair must always be considered as a single unit, so it is never to be broken\r\n        visibleColumn += 1;\r\n        prevCharCode = lineText.charCodeAt(1);\r\n        prevCharCodeClass = classifier.get(prevCharCode);\r\n        startOffset++;\r\n    }\r\n    for (let i = startOffset; i < len; i++) {\r\n        const charStartOffset = i;\r\n        const charCode = lineText.charCodeAt(i);\r\n        let charCodeClass;\r\n        let charWidth;\r\n        if (strings.isHighSurrogate(charCode)) {\r\n            // A surrogate pair must always be considered as a single unit, so it is never to be broken\r\n            i++;\r\n            charCodeClass = 0 /* NONE */;\r\n            charWidth = 2;\r\n        }\r\n        else {\r\n            charCodeClass = classifier.get(charCode);\r\n            charWidth = computeCharWidth(charCode, visibleColumn, tabSize, columnsForFullWidthChar);\r\n        }\r\n        if (canBreak(prevCharCode, prevCharCodeClass, charCode, charCodeClass)) {\r\n            breakOffset = charStartOffset;\r\n            breakOffsetVisibleColumn = visibleColumn;\r\n        }\r\n        visibleColumn += charWidth;\r\n        // check if adding character at `i` will go over the breaking column\r\n        if (visibleColumn > breakingColumn) {\r\n            // We need to break at least before character at `i`:\r\n            if (breakOffset === 0 || visibleColumn - breakOffsetVisibleColumn > wrappedLineBreakColumn) {\r\n                // Cannot break at `breakOffset`, must break at `i`\r\n                breakOffset = charStartOffset;\r\n                breakOffsetVisibleColumn = visibleColumn - charWidth;\r\n            }\r\n            breakingOffsets[breakingOffsetsCount] = breakOffset;\r\n            breakingOffsetsVisibleColumn[breakingOffsetsCount] = breakOffsetVisibleColumn;\r\n            breakingOffsetsCount++;\r\n            breakingColumn = breakOffsetVisibleColumn + wrappedLineBreakColumn;\r\n            breakOffset = 0;\r\n        }\r\n        prevCharCode = charCode;\r\n        prevCharCodeClass = charCodeClass;\r\n    }\r\n    if (breakingOffsetsCount === 0) {\r\n        return null;\r\n    }\r\n    // Add last segment\r\n    breakingOffsets[breakingOffsetsCount] = len;\r\n    breakingOffsetsVisibleColumn[breakingOffsetsCount] = visibleColumn;\r\n    return new LineBreakData(breakingOffsets, breakingOffsetsVisibleColumn, wrappedTextIndentLength);\r\n}\r\nfunction computeCharWidth(charCode, visibleColumn, tabSize, columnsForFullWidthChar) {\r\n    if (charCode === 9 /* Tab */) {\r\n        return (tabSize - (visibleColumn % tabSize));\r\n    }\r\n    if (strings.isFullWidthCharacter(charCode)) {\r\n        return columnsForFullWidthChar;\r\n    }\r\n    if (charCode < 32) {\r\n        // when using `editor.renderControlCharacters`, the substitutions are often wide\r\n        return columnsForFullWidthChar;\r\n    }\r\n    return 1;\r\n}\r\nfunction tabCharacterWidth(visibleColumn, tabSize) {\r\n    return (tabSize - (visibleColumn % tabSize));\r\n}\r\n/**\r\n * Kinsoku Shori : Don't break after a leading character, like an open bracket\r\n * Kinsoku Shori : Don't break before a trailing character, like a period\r\n */\r\nfunction canBreak(prevCharCode, prevCharCodeClass, charCode, charCodeClass) {\r\n    return (charCode !== 32 /* Space */\r\n        && ((prevCharCodeClass === 2 /* BREAK_AFTER */)\r\n            || (prevCharCodeClass === 3 /* BREAK_IDEOGRAPHIC */ && charCodeClass !== 2 /* BREAK_AFTER */)\r\n            || (charCodeClass === 1 /* BREAK_BEFORE */)\r\n            || (charCodeClass === 3 /* BREAK_IDEOGRAPHIC */ && prevCharCodeClass !== 1 /* BREAK_BEFORE */)));\r\n}\r\nfunction computeWrappedTextIndentLength(lineText, tabSize, firstLineBreakColumn, columnsForFullWidthChar, wrappingIndent) {\r\n    let wrappedTextIndentLength = 0;\r\n    if (wrappingIndent !== 0 /* None */) {\r\n        const firstNonWhitespaceIndex = strings.firstNonWhitespaceIndex(lineText);\r\n        if (firstNonWhitespaceIndex !== -1) {\r\n            // Track existing indent\r\n            for (let i = 0; i < firstNonWhitespaceIndex; i++) {\r\n                const charWidth = (lineText.charCodeAt(i) === 9 /* Tab */ ? tabCharacterWidth(wrappedTextIndentLength, tabSize) : 1);\r\n                wrappedTextIndentLength += charWidth;\r\n            }\r\n            // Increase indent of continuation lines, if desired\r\n            const numberOfAdditionalTabs = (wrappingIndent === 3 /* DeepIndent */ ? 2 : wrappingIndent === 2 /* Indent */ ? 1 : 0);\r\n            for (let i = 0; i < numberOfAdditionalTabs; i++) {\r\n                const charWidth = tabCharacterWidth(wrappedTextIndentLength, tabSize);\r\n                wrappedTextIndentLength += charWidth;\r\n            }\r\n            // Force sticking to beginning of line if no character would fit except for the indentation\r\n            if (wrappedTextIndentLength + columnsForFullWidthChar > firstLineBreakColumn) {\r\n                wrappedTextIndentLength = 0;\r\n            }\r\n        }\r\n    }\r\n    return wrappedTextIndentLength;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}