{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nfunction roundFloat(number, decimalPoints) {\n  const decimal = Math.pow(10, decimalPoints);\n  return Math.round(number * decimal) / decimal;\n}\nexport class RGBA {\n  constructor(r, g, b) {\n    let a = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n    this.r = Math.min(255, Math.max(0, r)) | 0;\n    this.g = Math.min(255, Math.max(0, g)) | 0;\n    this.b = Math.min(255, Math.max(0, b)) | 0;\n    this.a = roundFloat(Math.max(Math.min(1, a), 0), 3);\n  }\n  static equals(a, b) {\n    return a.r === b.r && a.g === b.g && a.b === b.b && a.a === b.a;\n  }\n}\nexport class HSLA {\n  constructor(h, s, l, a) {\n    this.h = Math.max(Math.min(360, h), 0) | 0;\n    this.s = roundFloat(Math.max(Math.min(1, s), 0), 3);\n    this.l = roundFloat(Math.max(Math.min(1, l), 0), 3);\n    this.a = roundFloat(Math.max(Math.min(1, a), 0), 3);\n  }\n  static equals(a, b) {\n    return a.h === b.h && a.s === b.s && a.l === b.l && a.a === b.a;\n  }\n  /**\r\n   * Converts an RGB color value to HSL. Conversion formula\r\n   * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\r\n   * Assumes r, g, and b are contained in the set [0, 255] and\r\n   * returns h in the set [0, 360], s, and l in the set [0, 1].\r\n   */\n  static fromRGBA(rgba) {\n    const r = rgba.r / 255;\n    const g = rgba.g / 255;\n    const b = rgba.b / 255;\n    const a = rgba.a;\n    const max = Math.max(r, g, b);\n    const min = Math.min(r, g, b);\n    let h = 0;\n    let s = 0;\n    const l = (min + max) / 2;\n    const chroma = max - min;\n    if (chroma > 0) {\n      s = Math.min(l <= 0.5 ? chroma / (2 * l) : chroma / (2 - 2 * l), 1);\n      switch (max) {\n        case r:\n          h = (g - b) / chroma + (g < b ? 6 : 0);\n          break;\n        case g:\n          h = (b - r) / chroma + 2;\n          break;\n        case b:\n          h = (r - g) / chroma + 4;\n          break;\n      }\n      h *= 60;\n      h = Math.round(h);\n    }\n    return new HSLA(h, s, l, a);\n  }\n  static _hue2rgb(p, q, t) {\n    if (t < 0) {\n      t += 1;\n    }\n    if (t > 1) {\n      t -= 1;\n    }\n    if (t < 1 / 6) {\n      return p + (q - p) * 6 * t;\n    }\n    if (t < 1 / 2) {\n      return q;\n    }\n    if (t < 2 / 3) {\n      return p + (q - p) * (2 / 3 - t) * 6;\n    }\n    return p;\n  }\n  /**\r\n   * Converts an HSL color value to RGB. Conversion formula\r\n   * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\r\n   * Assumes h in the set [0, 360] s, and l are contained in the set [0, 1] and\r\n   * returns r, g, and b in the set [0, 255].\r\n   */\n  static toRGBA(hsla) {\n    const h = hsla.h / 360;\n    const {\n      s,\n      l,\n      a\n    } = hsla;\n    let r, g, b;\n    if (s === 0) {\n      r = g = b = l; // achromatic\n    } else {\n      const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n      const p = 2 * l - q;\n      r = HSLA._hue2rgb(p, q, h + 1 / 3);\n      g = HSLA._hue2rgb(p, q, h);\n      b = HSLA._hue2rgb(p, q, h - 1 / 3);\n    }\n    return new RGBA(Math.round(r * 255), Math.round(g * 255), Math.round(b * 255), a);\n  }\n}\nexport class HSVA {\n  constructor(h, s, v, a) {\n    this.h = Math.max(Math.min(360, h), 0) | 0;\n    this.s = roundFloat(Math.max(Math.min(1, s), 0), 3);\n    this.v = roundFloat(Math.max(Math.min(1, v), 0), 3);\n    this.a = roundFloat(Math.max(Math.min(1, a), 0), 3);\n  }\n  static equals(a, b) {\n    return a.h === b.h && a.s === b.s && a.v === b.v && a.a === b.a;\n  }\n  // from http://www.rapidtables.com/convert/color/rgb-to-hsv.htm\n  static fromRGBA(rgba) {\n    const r = rgba.r / 255;\n    const g = rgba.g / 255;\n    const b = rgba.b / 255;\n    const cmax = Math.max(r, g, b);\n    const cmin = Math.min(r, g, b);\n    const delta = cmax - cmin;\n    const s = cmax === 0 ? 0 : delta / cmax;\n    let m;\n    if (delta === 0) {\n      m = 0;\n    } else if (cmax === r) {\n      m = ((g - b) / delta % 6 + 6) % 6;\n    } else if (cmax === g) {\n      m = (b - r) / delta + 2;\n    } else {\n      m = (r - g) / delta + 4;\n    }\n    return new HSVA(Math.round(m * 60), s, cmax, rgba.a);\n  }\n  // from http://www.rapidtables.com/convert/color/hsv-to-rgb.htm\n  static toRGBA(hsva) {\n    const {\n      h,\n      s,\n      v,\n      a\n    } = hsva;\n    const c = v * s;\n    const x = c * (1 - Math.abs(h / 60 % 2 - 1));\n    const m = v - c;\n    let [r, g, b] = [0, 0, 0];\n    if (h < 60) {\n      r = c;\n      g = x;\n    } else if (h < 120) {\n      r = x;\n      g = c;\n    } else if (h < 180) {\n      g = c;\n      b = x;\n    } else if (h < 240) {\n      g = x;\n      b = c;\n    } else if (h < 300) {\n      r = x;\n      b = c;\n    } else if (h <= 360) {\n      r = c;\n      b = x;\n    }\n    r = Math.round((r + m) * 255);\n    g = Math.round((g + m) * 255);\n    b = Math.round((b + m) * 255);\n    return new RGBA(r, g, b, a);\n  }\n}\nexport class Color {\n  constructor(arg) {\n    if (!arg) {\n      throw new Error('Color needs a value');\n    } else if (arg instanceof RGBA) {\n      this.rgba = arg;\n    } else if (arg instanceof HSLA) {\n      this._hsla = arg;\n      this.rgba = HSLA.toRGBA(arg);\n    } else if (arg instanceof HSVA) {\n      this._hsva = arg;\n      this.rgba = HSVA.toRGBA(arg);\n    } else {\n      throw new Error('Invalid color ctor argument');\n    }\n  }\n  static fromHex(hex) {\n    return Color.Format.CSS.parseHex(hex) || Color.red;\n  }\n  get hsla() {\n    if (this._hsla) {\n      return this._hsla;\n    } else {\n      return HSLA.fromRGBA(this.rgba);\n    }\n  }\n  get hsva() {\n    if (this._hsva) {\n      return this._hsva;\n    }\n    return HSVA.fromRGBA(this.rgba);\n  }\n  equals(other) {\n    return !!other && RGBA.equals(this.rgba, other.rgba) && HSLA.equals(this.hsla, other.hsla) && HSVA.equals(this.hsva, other.hsva);\n  }\n  /**\r\n   * http://www.w3.org/TR/WCAG20/#relativeluminancedef\r\n   * Returns the number in the set [0, 1]. O => Darkest Black. 1 => Lightest white.\r\n   */\n  getRelativeLuminance() {\n    const R = Color._relativeLuminanceForComponent(this.rgba.r);\n    const G = Color._relativeLuminanceForComponent(this.rgba.g);\n    const B = Color._relativeLuminanceForComponent(this.rgba.b);\n    const luminance = 0.2126 * R + 0.7152 * G + 0.0722 * B;\n    return roundFloat(luminance, 4);\n  }\n  static _relativeLuminanceForComponent(color) {\n    const c = color / 255;\n    return c <= 0.03928 ? c / 12.92 : Math.pow((c + 0.055) / 1.055, 2.4);\n  }\n  /**\r\n   *\thttp://24ways.org/2010/calculating-color-contrast\r\n   *  Return 'true' if lighter color otherwise 'false'\r\n   */\n  isLighter() {\n    const yiq = (this.rgba.r * 299 + this.rgba.g * 587 + this.rgba.b * 114) / 1000;\n    return yiq >= 128;\n  }\n  isLighterThan(another) {\n    const lum1 = this.getRelativeLuminance();\n    const lum2 = another.getRelativeLuminance();\n    return lum1 > lum2;\n  }\n  isDarkerThan(another) {\n    const lum1 = this.getRelativeLuminance();\n    const lum2 = another.getRelativeLuminance();\n    return lum1 < lum2;\n  }\n  lighten(factor) {\n    return new Color(new HSLA(this.hsla.h, this.hsla.s, this.hsla.l + this.hsla.l * factor, this.hsla.a));\n  }\n  darken(factor) {\n    return new Color(new HSLA(this.hsla.h, this.hsla.s, this.hsla.l - this.hsla.l * factor, this.hsla.a));\n  }\n  transparent(factor) {\n    const {\n      r,\n      g,\n      b,\n      a\n    } = this.rgba;\n    return new Color(new RGBA(r, g, b, a * factor));\n  }\n  isTransparent() {\n    return this.rgba.a === 0;\n  }\n  isOpaque() {\n    return this.rgba.a === 1;\n  }\n  opposite() {\n    return new Color(new RGBA(255 - this.rgba.r, 255 - this.rgba.g, 255 - this.rgba.b, this.rgba.a));\n  }\n  toString() {\n    return '' + Color.Format.CSS.format(this);\n  }\n  static getLighterColor(of, relative, factor) {\n    if (of.isLighterThan(relative)) {\n      return of;\n    }\n    factor = factor ? factor : 0.5;\n    const lum1 = of.getRelativeLuminance();\n    const lum2 = relative.getRelativeLuminance();\n    factor = factor * (lum2 - lum1) / lum2;\n    return of.lighten(factor);\n  }\n  static getDarkerColor(of, relative, factor) {\n    if (of.isDarkerThan(relative)) {\n      return of;\n    }\n    factor = factor ? factor : 0.5;\n    const lum1 = of.getRelativeLuminance();\n    const lum2 = relative.getRelativeLuminance();\n    factor = factor * (lum1 - lum2) / lum1;\n    return of.darken(factor);\n  }\n}\nColor.white = new Color(new RGBA(255, 255, 255, 1));\nColor.black = new Color(new RGBA(0, 0, 0, 1));\nColor.red = new Color(new RGBA(255, 0, 0, 1));\nColor.blue = new Color(new RGBA(0, 0, 255, 1));\nColor.cyan = new Color(new RGBA(0, 255, 255, 1));\nColor.lightgrey = new Color(new RGBA(211, 211, 211, 1));\nColor.transparent = new Color(new RGBA(0, 0, 0, 0));\n(function (Color) {\n  let Format;\n  (function (Format) {\n    let CSS;\n    (function (CSS) {\n      function formatRGB(color) {\n        if (color.rgba.a === 1) {\n          return \"rgb(\".concat(color.rgba.r, \", \").concat(color.rgba.g, \", \").concat(color.rgba.b, \")\");\n        }\n        return Color.Format.CSS.formatRGBA(color);\n      }\n      CSS.formatRGB = formatRGB;\n      function formatRGBA(color) {\n        return \"rgba(\".concat(color.rgba.r, \", \").concat(color.rgba.g, \", \").concat(color.rgba.b, \", \").concat(+color.rgba.a.toFixed(2), \")\");\n      }\n      CSS.formatRGBA = formatRGBA;\n      function formatHSL(color) {\n        if (color.hsla.a === 1) {\n          return \"hsl(\".concat(color.hsla.h, \", \").concat((color.hsla.s * 100).toFixed(2), \"%, \").concat((color.hsla.l * 100).toFixed(2), \"%)\");\n        }\n        return Color.Format.CSS.formatHSLA(color);\n      }\n      CSS.formatHSL = formatHSL;\n      function formatHSLA(color) {\n        return \"hsla(\".concat(color.hsla.h, \", \").concat((color.hsla.s * 100).toFixed(2), \"%, \").concat((color.hsla.l * 100).toFixed(2), \"%, \").concat(color.hsla.a.toFixed(2), \")\");\n      }\n      CSS.formatHSLA = formatHSLA;\n      function _toTwoDigitHex(n) {\n        const r = n.toString(16);\n        return r.length !== 2 ? '0' + r : r;\n      }\n      /**\r\n       * Formats the color as #RRGGBB\r\n       */\n      function formatHex(color) {\n        return \"#\".concat(_toTwoDigitHex(color.rgba.r)).concat(_toTwoDigitHex(color.rgba.g)).concat(_toTwoDigitHex(color.rgba.b));\n      }\n      CSS.formatHex = formatHex;\n      /**\r\n       * Formats the color as #RRGGBBAA\r\n       * If 'compact' is set, colors without transparancy will be printed as #RRGGBB\r\n       */\n      function formatHexA(color) {\n        let compact = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        if (compact && color.rgba.a === 1) {\n          return Color.Format.CSS.formatHex(color);\n        }\n        return \"#\".concat(_toTwoDigitHex(color.rgba.r)).concat(_toTwoDigitHex(color.rgba.g)).concat(_toTwoDigitHex(color.rgba.b)).concat(_toTwoDigitHex(Math.round(color.rgba.a * 255)));\n      }\n      CSS.formatHexA = formatHexA;\n      /**\r\n       * The default format will use HEX if opaque and RGBA otherwise.\r\n       */\n      function format(color) {\n        if (color.isOpaque()) {\n          return Color.Format.CSS.formatHex(color);\n        }\n        return Color.Format.CSS.formatRGBA(color);\n      }\n      CSS.format = format;\n      /**\r\n       * Converts an Hex color value to a Color.\r\n       * returns r, g, and b are contained in the set [0, 255]\r\n       * @param hex string (#RGB, #RGBA, #RRGGBB or #RRGGBBAA).\r\n       */\n      function parseHex(hex) {\n        const length = hex.length;\n        if (length === 0) {\n          // Invalid color\n          return null;\n        }\n        if (hex.charCodeAt(0) !== 35 /* Hash */) {\n          // Does not begin with a #\n          return null;\n        }\n        if (length === 7) {\n          // #RRGGBB format\n          const r = 16 * _parseHexDigit(hex.charCodeAt(1)) + _parseHexDigit(hex.charCodeAt(2));\n          const g = 16 * _parseHexDigit(hex.charCodeAt(3)) + _parseHexDigit(hex.charCodeAt(4));\n          const b = 16 * _parseHexDigit(hex.charCodeAt(5)) + _parseHexDigit(hex.charCodeAt(6));\n          return new Color(new RGBA(r, g, b, 1));\n        }\n        if (length === 9) {\n          // #RRGGBBAA format\n          const r = 16 * _parseHexDigit(hex.charCodeAt(1)) + _parseHexDigit(hex.charCodeAt(2));\n          const g = 16 * _parseHexDigit(hex.charCodeAt(3)) + _parseHexDigit(hex.charCodeAt(4));\n          const b = 16 * _parseHexDigit(hex.charCodeAt(5)) + _parseHexDigit(hex.charCodeAt(6));\n          const a = 16 * _parseHexDigit(hex.charCodeAt(7)) + _parseHexDigit(hex.charCodeAt(8));\n          return new Color(new RGBA(r, g, b, a / 255));\n        }\n        if (length === 4) {\n          // #RGB format\n          const r = _parseHexDigit(hex.charCodeAt(1));\n          const g = _parseHexDigit(hex.charCodeAt(2));\n          const b = _parseHexDigit(hex.charCodeAt(3));\n          return new Color(new RGBA(16 * r + r, 16 * g + g, 16 * b + b));\n        }\n        if (length === 5) {\n          // #RGBA format\n          const r = _parseHexDigit(hex.charCodeAt(1));\n          const g = _parseHexDigit(hex.charCodeAt(2));\n          const b = _parseHexDigit(hex.charCodeAt(3));\n          const a = _parseHexDigit(hex.charCodeAt(4));\n          return new Color(new RGBA(16 * r + r, 16 * g + g, 16 * b + b, (16 * a + a) / 255));\n        }\n        // Invalid color\n        return null;\n      }\n      CSS.parseHex = parseHex;\n      function _parseHexDigit(charCode) {\n        switch (charCode) {\n          case 48 /* Digit0 */:\n            return 0;\n          case 49 /* Digit1 */:\n            return 1;\n          case 50 /* Digit2 */:\n            return 2;\n          case 51 /* Digit3 */:\n            return 3;\n          case 52 /* Digit4 */:\n            return 4;\n          case 53 /* Digit5 */:\n            return 5;\n          case 54 /* Digit6 */:\n            return 6;\n          case 55 /* Digit7 */:\n            return 7;\n          case 56 /* Digit8 */:\n            return 8;\n          case 57 /* Digit9 */:\n            return 9;\n          case 97 /* a */:\n            return 10;\n          case 65 /* A */:\n            return 10;\n          case 98 /* b */:\n            return 11;\n          case 66 /* B */:\n            return 11;\n          case 99 /* c */:\n            return 12;\n          case 67 /* C */:\n            return 12;\n          case 100 /* d */:\n            return 13;\n          case 68 /* D */:\n            return 13;\n          case 101 /* e */:\n            return 14;\n          case 69 /* E */:\n            return 14;\n          case 102 /* f */:\n            return 15;\n          case 70 /* F */:\n            return 15;\n        }\n        return 0;\n      }\n    })(CSS = Format.CSS || (Format.CSS = {}));\n  })(Format = Color.Format || (Color.Format = {}));\n})(Color || (Color = {}));","map":{"version":3,"names":["roundFloat","number","decimalPoints","decimal","Math","pow","round","RGBA","constructor","r","g","b","a","arguments","length","undefined","min","max","equals","HSLA","h","s","l","fromRGBA","rgba","chroma","_hue2rgb","p","q","t","toRGBA","hsla","HSVA","v","cmax","cmin","delta","m","hsva","c","x","abs","Color","arg","Error","_hsla","_hsva","fromHex","hex","Format","CSS","parseHex","red","other","getRelativeLuminance","R","_relativeLuminanceForComponent","G","B","luminance","color","isLighter","yiq","isLighterThan","another","lum1","lum2","isDarkerThan","lighten","factor","darken","transparent","isTransparent","isOpaque","opposite","toString","format","getLighterColor","of","relative","getDarkerColor","white","black","blue","cyan","lightgrey","formatRGB","concat","formatRGBA","toFixed","formatHSL","formatHSLA","_toTwoDigitHex","n","formatHex","formatHexA","compact","charCodeAt","_parseHexDigit","charCode"],"sources":["C:/Users/Administrator/Desktop/sqllineage-master/sqllineagejs/node_modules/monaco-editor/esm/vs/base/common/color.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nfunction roundFloat(number, decimalPoints) {\r\n    const decimal = Math.pow(10, decimalPoints);\r\n    return Math.round(number * decimal) / decimal;\r\n}\r\nexport class RGBA {\r\n    constructor(r, g, b, a = 1) {\r\n        this.r = Math.min(255, Math.max(0, r)) | 0;\r\n        this.g = Math.min(255, Math.max(0, g)) | 0;\r\n        this.b = Math.min(255, Math.max(0, b)) | 0;\r\n        this.a = roundFloat(Math.max(Math.min(1, a), 0), 3);\r\n    }\r\n    static equals(a, b) {\r\n        return a.r === b.r && a.g === b.g && a.b === b.b && a.a === b.a;\r\n    }\r\n}\r\nexport class HSLA {\r\n    constructor(h, s, l, a) {\r\n        this.h = Math.max(Math.min(360, h), 0) | 0;\r\n        this.s = roundFloat(Math.max(Math.min(1, s), 0), 3);\r\n        this.l = roundFloat(Math.max(Math.min(1, l), 0), 3);\r\n        this.a = roundFloat(Math.max(Math.min(1, a), 0), 3);\r\n    }\r\n    static equals(a, b) {\r\n        return a.h === b.h && a.s === b.s && a.l === b.l && a.a === b.a;\r\n    }\r\n    /**\r\n     * Converts an RGB color value to HSL. Conversion formula\r\n     * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\r\n     * Assumes r, g, and b are contained in the set [0, 255] and\r\n     * returns h in the set [0, 360], s, and l in the set [0, 1].\r\n     */\r\n    static fromRGBA(rgba) {\r\n        const r = rgba.r / 255;\r\n        const g = rgba.g / 255;\r\n        const b = rgba.b / 255;\r\n        const a = rgba.a;\r\n        const max = Math.max(r, g, b);\r\n        const min = Math.min(r, g, b);\r\n        let h = 0;\r\n        let s = 0;\r\n        const l = (min + max) / 2;\r\n        const chroma = max - min;\r\n        if (chroma > 0) {\r\n            s = Math.min((l <= 0.5 ? chroma / (2 * l) : chroma / (2 - (2 * l))), 1);\r\n            switch (max) {\r\n                case r:\r\n                    h = (g - b) / chroma + (g < b ? 6 : 0);\r\n                    break;\r\n                case g:\r\n                    h = (b - r) / chroma + 2;\r\n                    break;\r\n                case b:\r\n                    h = (r - g) / chroma + 4;\r\n                    break;\r\n            }\r\n            h *= 60;\r\n            h = Math.round(h);\r\n        }\r\n        return new HSLA(h, s, l, a);\r\n    }\r\n    static _hue2rgb(p, q, t) {\r\n        if (t < 0) {\r\n            t += 1;\r\n        }\r\n        if (t > 1) {\r\n            t -= 1;\r\n        }\r\n        if (t < 1 / 6) {\r\n            return p + (q - p) * 6 * t;\r\n        }\r\n        if (t < 1 / 2) {\r\n            return q;\r\n        }\r\n        if (t < 2 / 3) {\r\n            return p + (q - p) * (2 / 3 - t) * 6;\r\n        }\r\n        return p;\r\n    }\r\n    /**\r\n     * Converts an HSL color value to RGB. Conversion formula\r\n     * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\r\n     * Assumes h in the set [0, 360] s, and l are contained in the set [0, 1] and\r\n     * returns r, g, and b in the set [0, 255].\r\n     */\r\n    static toRGBA(hsla) {\r\n        const h = hsla.h / 360;\r\n        const { s, l, a } = hsla;\r\n        let r, g, b;\r\n        if (s === 0) {\r\n            r = g = b = l; // achromatic\r\n        }\r\n        else {\r\n            const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\r\n            const p = 2 * l - q;\r\n            r = HSLA._hue2rgb(p, q, h + 1 / 3);\r\n            g = HSLA._hue2rgb(p, q, h);\r\n            b = HSLA._hue2rgb(p, q, h - 1 / 3);\r\n        }\r\n        return new RGBA(Math.round(r * 255), Math.round(g * 255), Math.round(b * 255), a);\r\n    }\r\n}\r\nexport class HSVA {\r\n    constructor(h, s, v, a) {\r\n        this.h = Math.max(Math.min(360, h), 0) | 0;\r\n        this.s = roundFloat(Math.max(Math.min(1, s), 0), 3);\r\n        this.v = roundFloat(Math.max(Math.min(1, v), 0), 3);\r\n        this.a = roundFloat(Math.max(Math.min(1, a), 0), 3);\r\n    }\r\n    static equals(a, b) {\r\n        return a.h === b.h && a.s === b.s && a.v === b.v && a.a === b.a;\r\n    }\r\n    // from http://www.rapidtables.com/convert/color/rgb-to-hsv.htm\r\n    static fromRGBA(rgba) {\r\n        const r = rgba.r / 255;\r\n        const g = rgba.g / 255;\r\n        const b = rgba.b / 255;\r\n        const cmax = Math.max(r, g, b);\r\n        const cmin = Math.min(r, g, b);\r\n        const delta = cmax - cmin;\r\n        const s = cmax === 0 ? 0 : (delta / cmax);\r\n        let m;\r\n        if (delta === 0) {\r\n            m = 0;\r\n        }\r\n        else if (cmax === r) {\r\n            m = ((((g - b) / delta) % 6) + 6) % 6;\r\n        }\r\n        else if (cmax === g) {\r\n            m = ((b - r) / delta) + 2;\r\n        }\r\n        else {\r\n            m = ((r - g) / delta) + 4;\r\n        }\r\n        return new HSVA(Math.round(m * 60), s, cmax, rgba.a);\r\n    }\r\n    // from http://www.rapidtables.com/convert/color/hsv-to-rgb.htm\r\n    static toRGBA(hsva) {\r\n        const { h, s, v, a } = hsva;\r\n        const c = v * s;\r\n        const x = c * (1 - Math.abs((h / 60) % 2 - 1));\r\n        const m = v - c;\r\n        let [r, g, b] = [0, 0, 0];\r\n        if (h < 60) {\r\n            r = c;\r\n            g = x;\r\n        }\r\n        else if (h < 120) {\r\n            r = x;\r\n            g = c;\r\n        }\r\n        else if (h < 180) {\r\n            g = c;\r\n            b = x;\r\n        }\r\n        else if (h < 240) {\r\n            g = x;\r\n            b = c;\r\n        }\r\n        else if (h < 300) {\r\n            r = x;\r\n            b = c;\r\n        }\r\n        else if (h <= 360) {\r\n            r = c;\r\n            b = x;\r\n        }\r\n        r = Math.round((r + m) * 255);\r\n        g = Math.round((g + m) * 255);\r\n        b = Math.round((b + m) * 255);\r\n        return new RGBA(r, g, b, a);\r\n    }\r\n}\r\nexport class Color {\r\n    constructor(arg) {\r\n        if (!arg) {\r\n            throw new Error('Color needs a value');\r\n        }\r\n        else if (arg instanceof RGBA) {\r\n            this.rgba = arg;\r\n        }\r\n        else if (arg instanceof HSLA) {\r\n            this._hsla = arg;\r\n            this.rgba = HSLA.toRGBA(arg);\r\n        }\r\n        else if (arg instanceof HSVA) {\r\n            this._hsva = arg;\r\n            this.rgba = HSVA.toRGBA(arg);\r\n        }\r\n        else {\r\n            throw new Error('Invalid color ctor argument');\r\n        }\r\n    }\r\n    static fromHex(hex) {\r\n        return Color.Format.CSS.parseHex(hex) || Color.red;\r\n    }\r\n    get hsla() {\r\n        if (this._hsla) {\r\n            return this._hsla;\r\n        }\r\n        else {\r\n            return HSLA.fromRGBA(this.rgba);\r\n        }\r\n    }\r\n    get hsva() {\r\n        if (this._hsva) {\r\n            return this._hsva;\r\n        }\r\n        return HSVA.fromRGBA(this.rgba);\r\n    }\r\n    equals(other) {\r\n        return !!other && RGBA.equals(this.rgba, other.rgba) && HSLA.equals(this.hsla, other.hsla) && HSVA.equals(this.hsva, other.hsva);\r\n    }\r\n    /**\r\n     * http://www.w3.org/TR/WCAG20/#relativeluminancedef\r\n     * Returns the number in the set [0, 1]. O => Darkest Black. 1 => Lightest white.\r\n     */\r\n    getRelativeLuminance() {\r\n        const R = Color._relativeLuminanceForComponent(this.rgba.r);\r\n        const G = Color._relativeLuminanceForComponent(this.rgba.g);\r\n        const B = Color._relativeLuminanceForComponent(this.rgba.b);\r\n        const luminance = 0.2126 * R + 0.7152 * G + 0.0722 * B;\r\n        return roundFloat(luminance, 4);\r\n    }\r\n    static _relativeLuminanceForComponent(color) {\r\n        const c = color / 255;\r\n        return (c <= 0.03928) ? c / 12.92 : Math.pow(((c + 0.055) / 1.055), 2.4);\r\n    }\r\n    /**\r\n     *\thttp://24ways.org/2010/calculating-color-contrast\r\n     *  Return 'true' if lighter color otherwise 'false'\r\n     */\r\n    isLighter() {\r\n        const yiq = (this.rgba.r * 299 + this.rgba.g * 587 + this.rgba.b * 114) / 1000;\r\n        return yiq >= 128;\r\n    }\r\n    isLighterThan(another) {\r\n        const lum1 = this.getRelativeLuminance();\r\n        const lum2 = another.getRelativeLuminance();\r\n        return lum1 > lum2;\r\n    }\r\n    isDarkerThan(another) {\r\n        const lum1 = this.getRelativeLuminance();\r\n        const lum2 = another.getRelativeLuminance();\r\n        return lum1 < lum2;\r\n    }\r\n    lighten(factor) {\r\n        return new Color(new HSLA(this.hsla.h, this.hsla.s, this.hsla.l + this.hsla.l * factor, this.hsla.a));\r\n    }\r\n    darken(factor) {\r\n        return new Color(new HSLA(this.hsla.h, this.hsla.s, this.hsla.l - this.hsla.l * factor, this.hsla.a));\r\n    }\r\n    transparent(factor) {\r\n        const { r, g, b, a } = this.rgba;\r\n        return new Color(new RGBA(r, g, b, a * factor));\r\n    }\r\n    isTransparent() {\r\n        return this.rgba.a === 0;\r\n    }\r\n    isOpaque() {\r\n        return this.rgba.a === 1;\r\n    }\r\n    opposite() {\r\n        return new Color(new RGBA(255 - this.rgba.r, 255 - this.rgba.g, 255 - this.rgba.b, this.rgba.a));\r\n    }\r\n    toString() {\r\n        return '' + Color.Format.CSS.format(this);\r\n    }\r\n    static getLighterColor(of, relative, factor) {\r\n        if (of.isLighterThan(relative)) {\r\n            return of;\r\n        }\r\n        factor = factor ? factor : 0.5;\r\n        const lum1 = of.getRelativeLuminance();\r\n        const lum2 = relative.getRelativeLuminance();\r\n        factor = factor * (lum2 - lum1) / lum2;\r\n        return of.lighten(factor);\r\n    }\r\n    static getDarkerColor(of, relative, factor) {\r\n        if (of.isDarkerThan(relative)) {\r\n            return of;\r\n        }\r\n        factor = factor ? factor : 0.5;\r\n        const lum1 = of.getRelativeLuminance();\r\n        const lum2 = relative.getRelativeLuminance();\r\n        factor = factor * (lum1 - lum2) / lum1;\r\n        return of.darken(factor);\r\n    }\r\n}\r\nColor.white = new Color(new RGBA(255, 255, 255, 1));\r\nColor.black = new Color(new RGBA(0, 0, 0, 1));\r\nColor.red = new Color(new RGBA(255, 0, 0, 1));\r\nColor.blue = new Color(new RGBA(0, 0, 255, 1));\r\nColor.cyan = new Color(new RGBA(0, 255, 255, 1));\r\nColor.lightgrey = new Color(new RGBA(211, 211, 211, 1));\r\nColor.transparent = new Color(new RGBA(0, 0, 0, 0));\r\n(function (Color) {\r\n    let Format;\r\n    (function (Format) {\r\n        let CSS;\r\n        (function (CSS) {\r\n            function formatRGB(color) {\r\n                if (color.rgba.a === 1) {\r\n                    return `rgb(${color.rgba.r}, ${color.rgba.g}, ${color.rgba.b})`;\r\n                }\r\n                return Color.Format.CSS.formatRGBA(color);\r\n            }\r\n            CSS.formatRGB = formatRGB;\r\n            function formatRGBA(color) {\r\n                return `rgba(${color.rgba.r}, ${color.rgba.g}, ${color.rgba.b}, ${+(color.rgba.a).toFixed(2)})`;\r\n            }\r\n            CSS.formatRGBA = formatRGBA;\r\n            function formatHSL(color) {\r\n                if (color.hsla.a === 1) {\r\n                    return `hsl(${color.hsla.h}, ${(color.hsla.s * 100).toFixed(2)}%, ${(color.hsla.l * 100).toFixed(2)}%)`;\r\n                }\r\n                return Color.Format.CSS.formatHSLA(color);\r\n            }\r\n            CSS.formatHSL = formatHSL;\r\n            function formatHSLA(color) {\r\n                return `hsla(${color.hsla.h}, ${(color.hsla.s * 100).toFixed(2)}%, ${(color.hsla.l * 100).toFixed(2)}%, ${color.hsla.a.toFixed(2)})`;\r\n            }\r\n            CSS.formatHSLA = formatHSLA;\r\n            function _toTwoDigitHex(n) {\r\n                const r = n.toString(16);\r\n                return r.length !== 2 ? '0' + r : r;\r\n            }\r\n            /**\r\n             * Formats the color as #RRGGBB\r\n             */\r\n            function formatHex(color) {\r\n                return `#${_toTwoDigitHex(color.rgba.r)}${_toTwoDigitHex(color.rgba.g)}${_toTwoDigitHex(color.rgba.b)}`;\r\n            }\r\n            CSS.formatHex = formatHex;\r\n            /**\r\n             * Formats the color as #RRGGBBAA\r\n             * If 'compact' is set, colors without transparancy will be printed as #RRGGBB\r\n             */\r\n            function formatHexA(color, compact = false) {\r\n                if (compact && color.rgba.a === 1) {\r\n                    return Color.Format.CSS.formatHex(color);\r\n                }\r\n                return `#${_toTwoDigitHex(color.rgba.r)}${_toTwoDigitHex(color.rgba.g)}${_toTwoDigitHex(color.rgba.b)}${_toTwoDigitHex(Math.round(color.rgba.a * 255))}`;\r\n            }\r\n            CSS.formatHexA = formatHexA;\r\n            /**\r\n             * The default format will use HEX if opaque and RGBA otherwise.\r\n             */\r\n            function format(color) {\r\n                if (color.isOpaque()) {\r\n                    return Color.Format.CSS.formatHex(color);\r\n                }\r\n                return Color.Format.CSS.formatRGBA(color);\r\n            }\r\n            CSS.format = format;\r\n            /**\r\n             * Converts an Hex color value to a Color.\r\n             * returns r, g, and b are contained in the set [0, 255]\r\n             * @param hex string (#RGB, #RGBA, #RRGGBB or #RRGGBBAA).\r\n             */\r\n            function parseHex(hex) {\r\n                const length = hex.length;\r\n                if (length === 0) {\r\n                    // Invalid color\r\n                    return null;\r\n                }\r\n                if (hex.charCodeAt(0) !== 35 /* Hash */) {\r\n                    // Does not begin with a #\r\n                    return null;\r\n                }\r\n                if (length === 7) {\r\n                    // #RRGGBB format\r\n                    const r = 16 * _parseHexDigit(hex.charCodeAt(1)) + _parseHexDigit(hex.charCodeAt(2));\r\n                    const g = 16 * _parseHexDigit(hex.charCodeAt(3)) + _parseHexDigit(hex.charCodeAt(4));\r\n                    const b = 16 * _parseHexDigit(hex.charCodeAt(5)) + _parseHexDigit(hex.charCodeAt(6));\r\n                    return new Color(new RGBA(r, g, b, 1));\r\n                }\r\n                if (length === 9) {\r\n                    // #RRGGBBAA format\r\n                    const r = 16 * _parseHexDigit(hex.charCodeAt(1)) + _parseHexDigit(hex.charCodeAt(2));\r\n                    const g = 16 * _parseHexDigit(hex.charCodeAt(3)) + _parseHexDigit(hex.charCodeAt(4));\r\n                    const b = 16 * _parseHexDigit(hex.charCodeAt(5)) + _parseHexDigit(hex.charCodeAt(6));\r\n                    const a = 16 * _parseHexDigit(hex.charCodeAt(7)) + _parseHexDigit(hex.charCodeAt(8));\r\n                    return new Color(new RGBA(r, g, b, a / 255));\r\n                }\r\n                if (length === 4) {\r\n                    // #RGB format\r\n                    const r = _parseHexDigit(hex.charCodeAt(1));\r\n                    const g = _parseHexDigit(hex.charCodeAt(2));\r\n                    const b = _parseHexDigit(hex.charCodeAt(3));\r\n                    return new Color(new RGBA(16 * r + r, 16 * g + g, 16 * b + b));\r\n                }\r\n                if (length === 5) {\r\n                    // #RGBA format\r\n                    const r = _parseHexDigit(hex.charCodeAt(1));\r\n                    const g = _parseHexDigit(hex.charCodeAt(2));\r\n                    const b = _parseHexDigit(hex.charCodeAt(3));\r\n                    const a = _parseHexDigit(hex.charCodeAt(4));\r\n                    return new Color(new RGBA(16 * r + r, 16 * g + g, 16 * b + b, (16 * a + a) / 255));\r\n                }\r\n                // Invalid color\r\n                return null;\r\n            }\r\n            CSS.parseHex = parseHex;\r\n            function _parseHexDigit(charCode) {\r\n                switch (charCode) {\r\n                    case 48 /* Digit0 */: return 0;\r\n                    case 49 /* Digit1 */: return 1;\r\n                    case 50 /* Digit2 */: return 2;\r\n                    case 51 /* Digit3 */: return 3;\r\n                    case 52 /* Digit4 */: return 4;\r\n                    case 53 /* Digit5 */: return 5;\r\n                    case 54 /* Digit6 */: return 6;\r\n                    case 55 /* Digit7 */: return 7;\r\n                    case 56 /* Digit8 */: return 8;\r\n                    case 57 /* Digit9 */: return 9;\r\n                    case 97 /* a */: return 10;\r\n                    case 65 /* A */: return 10;\r\n                    case 98 /* b */: return 11;\r\n                    case 66 /* B */: return 11;\r\n                    case 99 /* c */: return 12;\r\n                    case 67 /* C */: return 12;\r\n                    case 100 /* d */: return 13;\r\n                    case 68 /* D */: return 13;\r\n                    case 101 /* e */: return 14;\r\n                    case 69 /* E */: return 14;\r\n                    case 102 /* f */: return 15;\r\n                    case 70 /* F */: return 15;\r\n                }\r\n                return 0;\r\n            }\r\n        })(CSS = Format.CSS || (Format.CSS = {}));\r\n    })(Format = Color.Format || (Color.Format = {}));\r\n})(Color || (Color = {}));\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}