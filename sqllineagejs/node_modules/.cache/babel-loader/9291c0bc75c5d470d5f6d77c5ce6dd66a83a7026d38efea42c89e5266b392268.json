{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../nls.js';\nimport { onUnexpectedError } from '../../../base/common/errors.js';\nimport { Selection } from '../core/selection.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { TextChange, compressConsecutiveTextChanges } from './textChange.js';\nimport * as buffer from '../../../base/common/buffer.js';\nimport { basename } from '../../../base/common/resources.js';\nfunction uriGetComparisonKey(resource) {\n  return resource.toString();\n}\nclass SingleModelEditStackData {\n  constructor(beforeVersionId, afterVersionId, beforeEOL, afterEOL, beforeCursorState, afterCursorState, changes) {\n    this.beforeVersionId = beforeVersionId;\n    this.afterVersionId = afterVersionId;\n    this.beforeEOL = beforeEOL;\n    this.afterEOL = afterEOL;\n    this.beforeCursorState = beforeCursorState;\n    this.afterCursorState = afterCursorState;\n    this.changes = changes;\n  }\n  static create(model, beforeCursorState) {\n    const alternativeVersionId = model.getAlternativeVersionId();\n    const eol = getModelEOL(model);\n    return new SingleModelEditStackData(alternativeVersionId, alternativeVersionId, eol, eol, beforeCursorState, beforeCursorState, []);\n  }\n  append(model, textChanges, afterEOL, afterVersionId, afterCursorState) {\n    if (textChanges.length > 0) {\n      this.changes = compressConsecutiveTextChanges(this.changes, textChanges);\n    }\n    this.afterEOL = afterEOL;\n    this.afterVersionId = afterVersionId;\n    this.afterCursorState = afterCursorState;\n  }\n  static _writeSelectionsSize(selections) {\n    return 4 + 4 * 4 * (selections ? selections.length : 0);\n  }\n  static _writeSelections(b, selections, offset) {\n    buffer.writeUInt32BE(b, selections ? selections.length : 0, offset);\n    offset += 4;\n    if (selections) {\n      for (const selection of selections) {\n        buffer.writeUInt32BE(b, selection.selectionStartLineNumber, offset);\n        offset += 4;\n        buffer.writeUInt32BE(b, selection.selectionStartColumn, offset);\n        offset += 4;\n        buffer.writeUInt32BE(b, selection.positionLineNumber, offset);\n        offset += 4;\n        buffer.writeUInt32BE(b, selection.positionColumn, offset);\n        offset += 4;\n      }\n    }\n    return offset;\n  }\n  static _readSelections(b, offset, dest) {\n    const count = buffer.readUInt32BE(b, offset);\n    offset += 4;\n    for (let i = 0; i < count; i++) {\n      const selectionStartLineNumber = buffer.readUInt32BE(b, offset);\n      offset += 4;\n      const selectionStartColumn = buffer.readUInt32BE(b, offset);\n      offset += 4;\n      const positionLineNumber = buffer.readUInt32BE(b, offset);\n      offset += 4;\n      const positionColumn = buffer.readUInt32BE(b, offset);\n      offset += 4;\n      dest.push(new Selection(selectionStartLineNumber, selectionStartColumn, positionLineNumber, positionColumn));\n    }\n    return offset;\n  }\n  serialize() {\n    let necessarySize = +4 // beforeVersionId\n    + 4 // afterVersionId\n    + 1 // beforeEOL\n    + 1 // afterEOL\n    + SingleModelEditStackData._writeSelectionsSize(this.beforeCursorState) + SingleModelEditStackData._writeSelectionsSize(this.afterCursorState) + 4 // change count\n    ;\n\n    for (const change of this.changes) {\n      necessarySize += change.writeSize();\n    }\n    const b = new Uint8Array(necessarySize);\n    let offset = 0;\n    buffer.writeUInt32BE(b, this.beforeVersionId, offset);\n    offset += 4;\n    buffer.writeUInt32BE(b, this.afterVersionId, offset);\n    offset += 4;\n    buffer.writeUInt8(b, this.beforeEOL, offset);\n    offset += 1;\n    buffer.writeUInt8(b, this.afterEOL, offset);\n    offset += 1;\n    offset = SingleModelEditStackData._writeSelections(b, this.beforeCursorState, offset);\n    offset = SingleModelEditStackData._writeSelections(b, this.afterCursorState, offset);\n    buffer.writeUInt32BE(b, this.changes.length, offset);\n    offset += 4;\n    for (const change of this.changes) {\n      offset = change.write(b, offset);\n    }\n    return b.buffer;\n  }\n  static deserialize(source) {\n    const b = new Uint8Array(source);\n    let offset = 0;\n    const beforeVersionId = buffer.readUInt32BE(b, offset);\n    offset += 4;\n    const afterVersionId = buffer.readUInt32BE(b, offset);\n    offset += 4;\n    const beforeEOL = buffer.readUInt8(b, offset);\n    offset += 1;\n    const afterEOL = buffer.readUInt8(b, offset);\n    offset += 1;\n    const beforeCursorState = [];\n    offset = SingleModelEditStackData._readSelections(b, offset, beforeCursorState);\n    const afterCursorState = [];\n    offset = SingleModelEditStackData._readSelections(b, offset, afterCursorState);\n    const changeCount = buffer.readUInt32BE(b, offset);\n    offset += 4;\n    const changes = [];\n    for (let i = 0; i < changeCount; i++) {\n      offset = TextChange.read(b, offset, changes);\n    }\n    return new SingleModelEditStackData(beforeVersionId, afterVersionId, beforeEOL, afterEOL, beforeCursorState, afterCursorState, changes);\n  }\n}\nexport class SingleModelEditStackElement {\n  constructor(model, beforeCursorState) {\n    this.model = model;\n    this._data = SingleModelEditStackData.create(model, beforeCursorState);\n  }\n  get type() {\n    return 0 /* Resource */;\n  }\n\n  get resource() {\n    if (URI.isUri(this.model)) {\n      return this.model;\n    }\n    return this.model.uri;\n  }\n  get label() {\n    return nls.localize('edit', \"Typing\");\n  }\n  toString() {\n    const data = this._data instanceof SingleModelEditStackData ? this._data : SingleModelEditStackData.deserialize(this._data);\n    return data.changes.map(change => change.toString()).join(', ');\n  }\n  matchesResource(resource) {\n    const uri = URI.isUri(this.model) ? this.model : this.model.uri;\n    return uri.toString() === resource.toString();\n  }\n  setModel(model) {\n    this.model = model;\n  }\n  canAppend(model) {\n    return this.model === model && this._data instanceof SingleModelEditStackData;\n  }\n  append(model, textChanges, afterEOL, afterVersionId, afterCursorState) {\n    if (this._data instanceof SingleModelEditStackData) {\n      this._data.append(model, textChanges, afterEOL, afterVersionId, afterCursorState);\n    }\n  }\n  close() {\n    if (this._data instanceof SingleModelEditStackData) {\n      this._data = this._data.serialize();\n    }\n  }\n  open() {\n    if (!(this._data instanceof SingleModelEditStackData)) {\n      this._data = SingleModelEditStackData.deserialize(this._data);\n    }\n  }\n  undo() {\n    if (URI.isUri(this.model)) {\n      // don't have a model\n      throw new Error(\"Invalid SingleModelEditStackElement\");\n    }\n    if (this._data instanceof SingleModelEditStackData) {\n      this._data = this._data.serialize();\n    }\n    const data = SingleModelEditStackData.deserialize(this._data);\n    this.model._applyUndo(data.changes, data.beforeEOL, data.beforeVersionId, data.beforeCursorState);\n  }\n  redo() {\n    if (URI.isUri(this.model)) {\n      // don't have a model\n      throw new Error(\"Invalid SingleModelEditStackElement\");\n    }\n    if (this._data instanceof SingleModelEditStackData) {\n      this._data = this._data.serialize();\n    }\n    const data = SingleModelEditStackData.deserialize(this._data);\n    this.model._applyRedo(data.changes, data.afterEOL, data.afterVersionId, data.afterCursorState);\n  }\n  heapSize() {\n    if (this._data instanceof SingleModelEditStackData) {\n      this._data = this._data.serialize();\n    }\n    return this._data.byteLength + 168 /*heap overhead*/;\n  }\n}\n\nexport class MultiModelEditStackElement {\n  constructor(label, editStackElements) {\n    this.type = 1 /* Workspace */;\n    this.label = label;\n    this._isOpen = true;\n    this._editStackElementsArr = editStackElements.slice(0);\n    this._editStackElementsMap = new Map();\n    for (const editStackElement of this._editStackElementsArr) {\n      const key = uriGetComparisonKey(editStackElement.resource);\n      this._editStackElementsMap.set(key, editStackElement);\n    }\n    this._delegate = null;\n  }\n  get resources() {\n    return this._editStackElementsArr.map(editStackElement => editStackElement.resource);\n  }\n  prepareUndoRedo() {\n    if (this._delegate) {\n      return this._delegate.prepareUndoRedo(this);\n    }\n  }\n  matchesResource(resource) {\n    const key = uriGetComparisonKey(resource);\n    return this._editStackElementsMap.has(key);\n  }\n  setModel(model) {\n    const key = uriGetComparisonKey(URI.isUri(model) ? model : model.uri);\n    if (this._editStackElementsMap.has(key)) {\n      this._editStackElementsMap.get(key).setModel(model);\n    }\n  }\n  canAppend(model) {\n    if (!this._isOpen) {\n      return false;\n    }\n    const key = uriGetComparisonKey(model.uri);\n    if (this._editStackElementsMap.has(key)) {\n      const editStackElement = this._editStackElementsMap.get(key);\n      return editStackElement.canAppend(model);\n    }\n    return false;\n  }\n  append(model, textChanges, afterEOL, afterVersionId, afterCursorState) {\n    const key = uriGetComparisonKey(model.uri);\n    const editStackElement = this._editStackElementsMap.get(key);\n    editStackElement.append(model, textChanges, afterEOL, afterVersionId, afterCursorState);\n  }\n  close() {\n    this._isOpen = false;\n  }\n  open() {\n    // cannot reopen\n  }\n  undo() {\n    this._isOpen = false;\n    for (const editStackElement of this._editStackElementsArr) {\n      editStackElement.undo();\n    }\n  }\n  redo() {\n    for (const editStackElement of this._editStackElementsArr) {\n      editStackElement.redo();\n    }\n  }\n  heapSize(resource) {\n    const key = uriGetComparisonKey(resource);\n    if (this._editStackElementsMap.has(key)) {\n      const editStackElement = this._editStackElementsMap.get(key);\n      return editStackElement.heapSize();\n    }\n    return 0;\n  }\n  split() {\n    return this._editStackElementsArr;\n  }\n  toString() {\n    let result = [];\n    for (const editStackElement of this._editStackElementsArr) {\n      result.push(\"\".concat(basename(editStackElement.resource), \": \").concat(editStackElement));\n    }\n    return \"{\".concat(result.join(', '), \"}\");\n  }\n}\nfunction getModelEOL(model) {\n  const eol = model.getEOL();\n  if (eol === '\\n') {\n    return 0 /* LF */;\n  } else {\n    return 1 /* CRLF */;\n  }\n}\n\nexport function isEditStackElement(element) {\n  if (!element) {\n    return false;\n  }\n  return element instanceof SingleModelEditStackElement || element instanceof MultiModelEditStackElement;\n}\nexport class EditStack {\n  constructor(model, undoRedoService) {\n    this._model = model;\n    this._undoRedoService = undoRedoService;\n  }\n  pushStackElement() {\n    const lastElement = this._undoRedoService.getLastElement(this._model.uri);\n    if (isEditStackElement(lastElement)) {\n      lastElement.close();\n    }\n  }\n  popStackElement() {\n    const lastElement = this._undoRedoService.getLastElement(this._model.uri);\n    if (isEditStackElement(lastElement)) {\n      lastElement.open();\n    }\n  }\n  clear() {\n    this._undoRedoService.removeElements(this._model.uri);\n  }\n  _getOrCreateEditStackElement(beforeCursorState) {\n    const lastElement = this._undoRedoService.getLastElement(this._model.uri);\n    if (isEditStackElement(lastElement) && lastElement.canAppend(this._model)) {\n      return lastElement;\n    }\n    const newElement = new SingleModelEditStackElement(this._model, beforeCursorState);\n    this._undoRedoService.pushElement(newElement);\n    return newElement;\n  }\n  pushEOL(eol) {\n    const editStackElement = this._getOrCreateEditStackElement(null);\n    this._model.setEOL(eol);\n    editStackElement.append(this._model, [], getModelEOL(this._model), this._model.getAlternativeVersionId(), null);\n  }\n  pushEditOperation(beforeCursorState, editOperations, cursorStateComputer) {\n    const editStackElement = this._getOrCreateEditStackElement(beforeCursorState);\n    const inverseEditOperations = this._model.applyEdits(editOperations, true);\n    const afterCursorState = EditStack._computeCursorState(cursorStateComputer, inverseEditOperations);\n    const textChanges = inverseEditOperations.map((op, index) => ({\n      index: index,\n      textChange: op.textChange\n    }));\n    textChanges.sort((a, b) => {\n      if (a.textChange.oldPosition === b.textChange.oldPosition) {\n        return a.index - b.index;\n      }\n      return a.textChange.oldPosition - b.textChange.oldPosition;\n    });\n    editStackElement.append(this._model, textChanges.map(op => op.textChange), getModelEOL(this._model), this._model.getAlternativeVersionId(), afterCursorState);\n    return afterCursorState;\n  }\n  static _computeCursorState(cursorStateComputer, inverseEditOperations) {\n    try {\n      return cursorStateComputer ? cursorStateComputer(inverseEditOperations) : null;\n    } catch (e) {\n      onUnexpectedError(e);\n      return null;\n    }\n  }\n}","map":{"version":3,"names":["nls","onUnexpectedError","Selection","URI","TextChange","compressConsecutiveTextChanges","buffer","basename","uriGetComparisonKey","resource","toString","SingleModelEditStackData","constructor","beforeVersionId","afterVersionId","beforeEOL","afterEOL","beforeCursorState","afterCursorState","changes","create","model","alternativeVersionId","getAlternativeVersionId","eol","getModelEOL","append","textChanges","length","_writeSelectionsSize","selections","_writeSelections","b","offset","writeUInt32BE","selection","selectionStartLineNumber","selectionStartColumn","positionLineNumber","positionColumn","_readSelections","dest","count","readUInt32BE","i","push","serialize","necessarySize","change","writeSize","Uint8Array","writeUInt8","write","deserialize","source","readUInt8","changeCount","read","SingleModelEditStackElement","_data","type","isUri","uri","label","localize","data","map","join","matchesResource","setModel","canAppend","close","open","undo","Error","_applyUndo","redo","_applyRedo","heapSize","byteLength","MultiModelEditStackElement","editStackElements","_isOpen","_editStackElementsArr","slice","_editStackElementsMap","Map","editStackElement","key","set","_delegate","resources","prepareUndoRedo","has","get","split","result","concat","getEOL","isEditStackElement","element","EditStack","undoRedoService","_model","_undoRedoService","pushStackElement","lastElement","getLastElement","popStackElement","clear","removeElements","_getOrCreateEditStackElement","newElement","pushElement","pushEOL","setEOL","pushEditOperation","editOperations","cursorStateComputer","inverseEditOperations","applyEdits","_computeCursorState","op","index","textChange","sort","a","oldPosition","e"],"sources":["C:/Users/Administrator/Desktop/sqllineage-master/sqllineagejs/node_modules/monaco-editor/esm/vs/editor/common/model/editStack.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport * as nls from '../../../nls.js';\r\nimport { onUnexpectedError } from '../../../base/common/errors.js';\r\nimport { Selection } from '../core/selection.js';\r\nimport { URI } from '../../../base/common/uri.js';\r\nimport { TextChange, compressConsecutiveTextChanges } from './textChange.js';\r\nimport * as buffer from '../../../base/common/buffer.js';\r\nimport { basename } from '../../../base/common/resources.js';\r\nfunction uriGetComparisonKey(resource) {\r\n    return resource.toString();\r\n}\r\nclass SingleModelEditStackData {\r\n    constructor(beforeVersionId, afterVersionId, beforeEOL, afterEOL, beforeCursorState, afterCursorState, changes) {\r\n        this.beforeVersionId = beforeVersionId;\r\n        this.afterVersionId = afterVersionId;\r\n        this.beforeEOL = beforeEOL;\r\n        this.afterEOL = afterEOL;\r\n        this.beforeCursorState = beforeCursorState;\r\n        this.afterCursorState = afterCursorState;\r\n        this.changes = changes;\r\n    }\r\n    static create(model, beforeCursorState) {\r\n        const alternativeVersionId = model.getAlternativeVersionId();\r\n        const eol = getModelEOL(model);\r\n        return new SingleModelEditStackData(alternativeVersionId, alternativeVersionId, eol, eol, beforeCursorState, beforeCursorState, []);\r\n    }\r\n    append(model, textChanges, afterEOL, afterVersionId, afterCursorState) {\r\n        if (textChanges.length > 0) {\r\n            this.changes = compressConsecutiveTextChanges(this.changes, textChanges);\r\n        }\r\n        this.afterEOL = afterEOL;\r\n        this.afterVersionId = afterVersionId;\r\n        this.afterCursorState = afterCursorState;\r\n    }\r\n    static _writeSelectionsSize(selections) {\r\n        return 4 + 4 * 4 * (selections ? selections.length : 0);\r\n    }\r\n    static _writeSelections(b, selections, offset) {\r\n        buffer.writeUInt32BE(b, (selections ? selections.length : 0), offset);\r\n        offset += 4;\r\n        if (selections) {\r\n            for (const selection of selections) {\r\n                buffer.writeUInt32BE(b, selection.selectionStartLineNumber, offset);\r\n                offset += 4;\r\n                buffer.writeUInt32BE(b, selection.selectionStartColumn, offset);\r\n                offset += 4;\r\n                buffer.writeUInt32BE(b, selection.positionLineNumber, offset);\r\n                offset += 4;\r\n                buffer.writeUInt32BE(b, selection.positionColumn, offset);\r\n                offset += 4;\r\n            }\r\n        }\r\n        return offset;\r\n    }\r\n    static _readSelections(b, offset, dest) {\r\n        const count = buffer.readUInt32BE(b, offset);\r\n        offset += 4;\r\n        for (let i = 0; i < count; i++) {\r\n            const selectionStartLineNumber = buffer.readUInt32BE(b, offset);\r\n            offset += 4;\r\n            const selectionStartColumn = buffer.readUInt32BE(b, offset);\r\n            offset += 4;\r\n            const positionLineNumber = buffer.readUInt32BE(b, offset);\r\n            offset += 4;\r\n            const positionColumn = buffer.readUInt32BE(b, offset);\r\n            offset += 4;\r\n            dest.push(new Selection(selectionStartLineNumber, selectionStartColumn, positionLineNumber, positionColumn));\r\n        }\r\n        return offset;\r\n    }\r\n    serialize() {\r\n        let necessarySize = (+4 // beforeVersionId\r\n            + 4 // afterVersionId\r\n            + 1 // beforeEOL\r\n            + 1 // afterEOL\r\n            + SingleModelEditStackData._writeSelectionsSize(this.beforeCursorState)\r\n            + SingleModelEditStackData._writeSelectionsSize(this.afterCursorState)\r\n            + 4 // change count\r\n        );\r\n        for (const change of this.changes) {\r\n            necessarySize += change.writeSize();\r\n        }\r\n        const b = new Uint8Array(necessarySize);\r\n        let offset = 0;\r\n        buffer.writeUInt32BE(b, this.beforeVersionId, offset);\r\n        offset += 4;\r\n        buffer.writeUInt32BE(b, this.afterVersionId, offset);\r\n        offset += 4;\r\n        buffer.writeUInt8(b, this.beforeEOL, offset);\r\n        offset += 1;\r\n        buffer.writeUInt8(b, this.afterEOL, offset);\r\n        offset += 1;\r\n        offset = SingleModelEditStackData._writeSelections(b, this.beforeCursorState, offset);\r\n        offset = SingleModelEditStackData._writeSelections(b, this.afterCursorState, offset);\r\n        buffer.writeUInt32BE(b, this.changes.length, offset);\r\n        offset += 4;\r\n        for (const change of this.changes) {\r\n            offset = change.write(b, offset);\r\n        }\r\n        return b.buffer;\r\n    }\r\n    static deserialize(source) {\r\n        const b = new Uint8Array(source);\r\n        let offset = 0;\r\n        const beforeVersionId = buffer.readUInt32BE(b, offset);\r\n        offset += 4;\r\n        const afterVersionId = buffer.readUInt32BE(b, offset);\r\n        offset += 4;\r\n        const beforeEOL = buffer.readUInt8(b, offset);\r\n        offset += 1;\r\n        const afterEOL = buffer.readUInt8(b, offset);\r\n        offset += 1;\r\n        const beforeCursorState = [];\r\n        offset = SingleModelEditStackData._readSelections(b, offset, beforeCursorState);\r\n        const afterCursorState = [];\r\n        offset = SingleModelEditStackData._readSelections(b, offset, afterCursorState);\r\n        const changeCount = buffer.readUInt32BE(b, offset);\r\n        offset += 4;\r\n        const changes = [];\r\n        for (let i = 0; i < changeCount; i++) {\r\n            offset = TextChange.read(b, offset, changes);\r\n        }\r\n        return new SingleModelEditStackData(beforeVersionId, afterVersionId, beforeEOL, afterEOL, beforeCursorState, afterCursorState, changes);\r\n    }\r\n}\r\nexport class SingleModelEditStackElement {\r\n    constructor(model, beforeCursorState) {\r\n        this.model = model;\r\n        this._data = SingleModelEditStackData.create(model, beforeCursorState);\r\n    }\r\n    get type() {\r\n        return 0 /* Resource */;\r\n    }\r\n    get resource() {\r\n        if (URI.isUri(this.model)) {\r\n            return this.model;\r\n        }\r\n        return this.model.uri;\r\n    }\r\n    get label() {\r\n        return nls.localize('edit', \"Typing\");\r\n    }\r\n    toString() {\r\n        const data = (this._data instanceof SingleModelEditStackData ? this._data : SingleModelEditStackData.deserialize(this._data));\r\n        return data.changes.map(change => change.toString()).join(', ');\r\n    }\r\n    matchesResource(resource) {\r\n        const uri = (URI.isUri(this.model) ? this.model : this.model.uri);\r\n        return (uri.toString() === resource.toString());\r\n    }\r\n    setModel(model) {\r\n        this.model = model;\r\n    }\r\n    canAppend(model) {\r\n        return (this.model === model && this._data instanceof SingleModelEditStackData);\r\n    }\r\n    append(model, textChanges, afterEOL, afterVersionId, afterCursorState) {\r\n        if (this._data instanceof SingleModelEditStackData) {\r\n            this._data.append(model, textChanges, afterEOL, afterVersionId, afterCursorState);\r\n        }\r\n    }\r\n    close() {\r\n        if (this._data instanceof SingleModelEditStackData) {\r\n            this._data = this._data.serialize();\r\n        }\r\n    }\r\n    open() {\r\n        if (!(this._data instanceof SingleModelEditStackData)) {\r\n            this._data = SingleModelEditStackData.deserialize(this._data);\r\n        }\r\n    }\r\n    undo() {\r\n        if (URI.isUri(this.model)) {\r\n            // don't have a model\r\n            throw new Error(`Invalid SingleModelEditStackElement`);\r\n        }\r\n        if (this._data instanceof SingleModelEditStackData) {\r\n            this._data = this._data.serialize();\r\n        }\r\n        const data = SingleModelEditStackData.deserialize(this._data);\r\n        this.model._applyUndo(data.changes, data.beforeEOL, data.beforeVersionId, data.beforeCursorState);\r\n    }\r\n    redo() {\r\n        if (URI.isUri(this.model)) {\r\n            // don't have a model\r\n            throw new Error(`Invalid SingleModelEditStackElement`);\r\n        }\r\n        if (this._data instanceof SingleModelEditStackData) {\r\n            this._data = this._data.serialize();\r\n        }\r\n        const data = SingleModelEditStackData.deserialize(this._data);\r\n        this.model._applyRedo(data.changes, data.afterEOL, data.afterVersionId, data.afterCursorState);\r\n    }\r\n    heapSize() {\r\n        if (this._data instanceof SingleModelEditStackData) {\r\n            this._data = this._data.serialize();\r\n        }\r\n        return this._data.byteLength + 168 /*heap overhead*/;\r\n    }\r\n}\r\nexport class MultiModelEditStackElement {\r\n    constructor(label, editStackElements) {\r\n        this.type = 1 /* Workspace */;\r\n        this.label = label;\r\n        this._isOpen = true;\r\n        this._editStackElementsArr = editStackElements.slice(0);\r\n        this._editStackElementsMap = new Map();\r\n        for (const editStackElement of this._editStackElementsArr) {\r\n            const key = uriGetComparisonKey(editStackElement.resource);\r\n            this._editStackElementsMap.set(key, editStackElement);\r\n        }\r\n        this._delegate = null;\r\n    }\r\n    get resources() {\r\n        return this._editStackElementsArr.map(editStackElement => editStackElement.resource);\r\n    }\r\n    prepareUndoRedo() {\r\n        if (this._delegate) {\r\n            return this._delegate.prepareUndoRedo(this);\r\n        }\r\n    }\r\n    matchesResource(resource) {\r\n        const key = uriGetComparisonKey(resource);\r\n        return (this._editStackElementsMap.has(key));\r\n    }\r\n    setModel(model) {\r\n        const key = uriGetComparisonKey(URI.isUri(model) ? model : model.uri);\r\n        if (this._editStackElementsMap.has(key)) {\r\n            this._editStackElementsMap.get(key).setModel(model);\r\n        }\r\n    }\r\n    canAppend(model) {\r\n        if (!this._isOpen) {\r\n            return false;\r\n        }\r\n        const key = uriGetComparisonKey(model.uri);\r\n        if (this._editStackElementsMap.has(key)) {\r\n            const editStackElement = this._editStackElementsMap.get(key);\r\n            return editStackElement.canAppend(model);\r\n        }\r\n        return false;\r\n    }\r\n    append(model, textChanges, afterEOL, afterVersionId, afterCursorState) {\r\n        const key = uriGetComparisonKey(model.uri);\r\n        const editStackElement = this._editStackElementsMap.get(key);\r\n        editStackElement.append(model, textChanges, afterEOL, afterVersionId, afterCursorState);\r\n    }\r\n    close() {\r\n        this._isOpen = false;\r\n    }\r\n    open() {\r\n        // cannot reopen\r\n    }\r\n    undo() {\r\n        this._isOpen = false;\r\n        for (const editStackElement of this._editStackElementsArr) {\r\n            editStackElement.undo();\r\n        }\r\n    }\r\n    redo() {\r\n        for (const editStackElement of this._editStackElementsArr) {\r\n            editStackElement.redo();\r\n        }\r\n    }\r\n    heapSize(resource) {\r\n        const key = uriGetComparisonKey(resource);\r\n        if (this._editStackElementsMap.has(key)) {\r\n            const editStackElement = this._editStackElementsMap.get(key);\r\n            return editStackElement.heapSize();\r\n        }\r\n        return 0;\r\n    }\r\n    split() {\r\n        return this._editStackElementsArr;\r\n    }\r\n    toString() {\r\n        let result = [];\r\n        for (const editStackElement of this._editStackElementsArr) {\r\n            result.push(`${basename(editStackElement.resource)}: ${editStackElement}`);\r\n        }\r\n        return `{${result.join(', ')}}`;\r\n    }\r\n}\r\nfunction getModelEOL(model) {\r\n    const eol = model.getEOL();\r\n    if (eol === '\\n') {\r\n        return 0 /* LF */;\r\n    }\r\n    else {\r\n        return 1 /* CRLF */;\r\n    }\r\n}\r\nexport function isEditStackElement(element) {\r\n    if (!element) {\r\n        return false;\r\n    }\r\n    return ((element instanceof SingleModelEditStackElement) || (element instanceof MultiModelEditStackElement));\r\n}\r\nexport class EditStack {\r\n    constructor(model, undoRedoService) {\r\n        this._model = model;\r\n        this._undoRedoService = undoRedoService;\r\n    }\r\n    pushStackElement() {\r\n        const lastElement = this._undoRedoService.getLastElement(this._model.uri);\r\n        if (isEditStackElement(lastElement)) {\r\n            lastElement.close();\r\n        }\r\n    }\r\n    popStackElement() {\r\n        const lastElement = this._undoRedoService.getLastElement(this._model.uri);\r\n        if (isEditStackElement(lastElement)) {\r\n            lastElement.open();\r\n        }\r\n    }\r\n    clear() {\r\n        this._undoRedoService.removeElements(this._model.uri);\r\n    }\r\n    _getOrCreateEditStackElement(beforeCursorState) {\r\n        const lastElement = this._undoRedoService.getLastElement(this._model.uri);\r\n        if (isEditStackElement(lastElement) && lastElement.canAppend(this._model)) {\r\n            return lastElement;\r\n        }\r\n        const newElement = new SingleModelEditStackElement(this._model, beforeCursorState);\r\n        this._undoRedoService.pushElement(newElement);\r\n        return newElement;\r\n    }\r\n    pushEOL(eol) {\r\n        const editStackElement = this._getOrCreateEditStackElement(null);\r\n        this._model.setEOL(eol);\r\n        editStackElement.append(this._model, [], getModelEOL(this._model), this._model.getAlternativeVersionId(), null);\r\n    }\r\n    pushEditOperation(beforeCursorState, editOperations, cursorStateComputer) {\r\n        const editStackElement = this._getOrCreateEditStackElement(beforeCursorState);\r\n        const inverseEditOperations = this._model.applyEdits(editOperations, true);\r\n        const afterCursorState = EditStack._computeCursorState(cursorStateComputer, inverseEditOperations);\r\n        const textChanges = inverseEditOperations.map((op, index) => ({ index: index, textChange: op.textChange }));\r\n        textChanges.sort((a, b) => {\r\n            if (a.textChange.oldPosition === b.textChange.oldPosition) {\r\n                return a.index - b.index;\r\n            }\r\n            return a.textChange.oldPosition - b.textChange.oldPosition;\r\n        });\r\n        editStackElement.append(this._model, textChanges.map(op => op.textChange), getModelEOL(this._model), this._model.getAlternativeVersionId(), afterCursorState);\r\n        return afterCursorState;\r\n    }\r\n    static _computeCursorState(cursorStateComputer, inverseEditOperations) {\r\n        try {\r\n            return cursorStateComputer ? cursorStateComputer(inverseEditOperations) : null;\r\n        }\r\n        catch (e) {\r\n            onUnexpectedError(e);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}