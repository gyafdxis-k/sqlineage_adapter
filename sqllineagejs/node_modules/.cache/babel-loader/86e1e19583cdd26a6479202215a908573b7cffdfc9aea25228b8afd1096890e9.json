{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { TokenMetadata } from '../modes.js';\nexport class LineTokens {\n  constructor(tokens, text) {\n    this._tokens = tokens;\n    this._tokensCount = this._tokens.length >>> 1;\n    this._text = text;\n  }\n  equals(other) {\n    if (other instanceof LineTokens) {\n      return this.slicedEquals(other, 0, this._tokensCount);\n    }\n    return false;\n  }\n  slicedEquals(other, sliceFromTokenIndex, sliceTokenCount) {\n    if (this._text !== other._text) {\n      return false;\n    }\n    if (this._tokensCount !== other._tokensCount) {\n      return false;\n    }\n    const from = sliceFromTokenIndex << 1;\n    const to = from + (sliceTokenCount << 1);\n    for (let i = from; i < to; i++) {\n      if (this._tokens[i] !== other._tokens[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  getLineContent() {\n    return this._text;\n  }\n  getCount() {\n    return this._tokensCount;\n  }\n  getStartOffset(tokenIndex) {\n    if (tokenIndex > 0) {\n      return this._tokens[tokenIndex - 1 << 1];\n    }\n    return 0;\n  }\n  getMetadata(tokenIndex) {\n    const metadata = this._tokens[(tokenIndex << 1) + 1];\n    return metadata;\n  }\n  getLanguageId(tokenIndex) {\n    const metadata = this._tokens[(tokenIndex << 1) + 1];\n    return TokenMetadata.getLanguageId(metadata);\n  }\n  getStandardTokenType(tokenIndex) {\n    const metadata = this._tokens[(tokenIndex << 1) + 1];\n    return TokenMetadata.getTokenType(metadata);\n  }\n  getForeground(tokenIndex) {\n    const metadata = this._tokens[(tokenIndex << 1) + 1];\n    return TokenMetadata.getForeground(metadata);\n  }\n  getClassName(tokenIndex) {\n    const metadata = this._tokens[(tokenIndex << 1) + 1];\n    return TokenMetadata.getClassNameFromMetadata(metadata);\n  }\n  getInlineStyle(tokenIndex, colorMap) {\n    const metadata = this._tokens[(tokenIndex << 1) + 1];\n    return TokenMetadata.getInlineStyleFromMetadata(metadata, colorMap);\n  }\n  getEndOffset(tokenIndex) {\n    return this._tokens[tokenIndex << 1];\n  }\n  /**\r\n   * Find the token containing offset `offset`.\r\n   * @param offset The search offset\r\n   * @return The index of the token containing the offset.\r\n   */\n  findTokenIndexAtOffset(offset) {\n    return LineTokens.findIndexInTokensArray(this._tokens, offset);\n  }\n  inflate() {\n    return this;\n  }\n  sliceAndInflate(startOffset, endOffset, deltaOffset) {\n    return new SlicedLineTokens(this, startOffset, endOffset, deltaOffset);\n  }\n  static convertToEndOffset(tokens, lineTextLength) {\n    const tokenCount = tokens.length >>> 1;\n    const lastTokenIndex = tokenCount - 1;\n    for (let tokenIndex = 0; tokenIndex < lastTokenIndex; tokenIndex++) {\n      tokens[tokenIndex << 1] = tokens[tokenIndex + 1 << 1];\n    }\n    tokens[lastTokenIndex << 1] = lineTextLength;\n  }\n  static findIndexInTokensArray(tokens, desiredIndex) {\n    if (tokens.length <= 2) {\n      return 0;\n    }\n    let low = 0;\n    let high = (tokens.length >>> 1) - 1;\n    while (low < high) {\n      const mid = low + Math.floor((high - low) / 2);\n      const endOffset = tokens[mid << 1];\n      if (endOffset === desiredIndex) {\n        return mid + 1;\n      } else if (endOffset < desiredIndex) {\n        low = mid + 1;\n      } else if (endOffset > desiredIndex) {\n        high = mid;\n      }\n    }\n    return low;\n  }\n}\nexport class SlicedLineTokens {\n  constructor(source, startOffset, endOffset, deltaOffset) {\n    this._source = source;\n    this._startOffset = startOffset;\n    this._endOffset = endOffset;\n    this._deltaOffset = deltaOffset;\n    this._firstTokenIndex = source.findTokenIndexAtOffset(startOffset);\n    this._tokensCount = 0;\n    for (let i = this._firstTokenIndex, len = source.getCount(); i < len; i++) {\n      const tokenStartOffset = source.getStartOffset(i);\n      if (tokenStartOffset >= endOffset) {\n        break;\n      }\n      this._tokensCount++;\n    }\n  }\n  equals(other) {\n    if (other instanceof SlicedLineTokens) {\n      return this._startOffset === other._startOffset && this._endOffset === other._endOffset && this._deltaOffset === other._deltaOffset && this._source.slicedEquals(other._source, this._firstTokenIndex, this._tokensCount);\n    }\n    return false;\n  }\n  getCount() {\n    return this._tokensCount;\n  }\n  getForeground(tokenIndex) {\n    return this._source.getForeground(this._firstTokenIndex + tokenIndex);\n  }\n  getEndOffset(tokenIndex) {\n    const tokenEndOffset = this._source.getEndOffset(this._firstTokenIndex + tokenIndex);\n    return Math.min(this._endOffset, tokenEndOffset) - this._startOffset + this._deltaOffset;\n  }\n  getClassName(tokenIndex) {\n    return this._source.getClassName(this._firstTokenIndex + tokenIndex);\n  }\n  getInlineStyle(tokenIndex, colorMap) {\n    return this._source.getInlineStyle(this._firstTokenIndex + tokenIndex, colorMap);\n  }\n  findTokenIndexAtOffset(offset) {\n    return this._source.findTokenIndexAtOffset(offset + this._startOffset - this._deltaOffset) - this._firstTokenIndex;\n  }\n}","map":{"version":3,"names":["TokenMetadata","LineTokens","constructor","tokens","text","_tokens","_tokensCount","length","_text","equals","other","slicedEquals","sliceFromTokenIndex","sliceTokenCount","from","to","i","getLineContent","getCount","getStartOffset","tokenIndex","getMetadata","metadata","getLanguageId","getStandardTokenType","getTokenType","getForeground","getClassName","getClassNameFromMetadata","getInlineStyle","colorMap","getInlineStyleFromMetadata","getEndOffset","findTokenIndexAtOffset","offset","findIndexInTokensArray","inflate","sliceAndInflate","startOffset","endOffset","deltaOffset","SlicedLineTokens","convertToEndOffset","lineTextLength","tokenCount","lastTokenIndex","desiredIndex","low","high","mid","Math","floor","source","_source","_startOffset","_endOffset","_deltaOffset","_firstTokenIndex","len","tokenStartOffset","tokenEndOffset","min"],"sources":["C:/Users/Administrator/Desktop/sqllineage-master/sqllineagejs/node_modules/monaco-editor/esm/vs/editor/common/core/lineTokens.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { TokenMetadata } from '../modes.js';\r\nexport class LineTokens {\r\n    constructor(tokens, text) {\r\n        this._tokens = tokens;\r\n        this._tokensCount = (this._tokens.length >>> 1);\r\n        this._text = text;\r\n    }\r\n    equals(other) {\r\n        if (other instanceof LineTokens) {\r\n            return this.slicedEquals(other, 0, this._tokensCount);\r\n        }\r\n        return false;\r\n    }\r\n    slicedEquals(other, sliceFromTokenIndex, sliceTokenCount) {\r\n        if (this._text !== other._text) {\r\n            return false;\r\n        }\r\n        if (this._tokensCount !== other._tokensCount) {\r\n            return false;\r\n        }\r\n        const from = (sliceFromTokenIndex << 1);\r\n        const to = from + (sliceTokenCount << 1);\r\n        for (let i = from; i < to; i++) {\r\n            if (this._tokens[i] !== other._tokens[i]) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    getLineContent() {\r\n        return this._text;\r\n    }\r\n    getCount() {\r\n        return this._tokensCount;\r\n    }\r\n    getStartOffset(tokenIndex) {\r\n        if (tokenIndex > 0) {\r\n            return this._tokens[(tokenIndex - 1) << 1];\r\n        }\r\n        return 0;\r\n    }\r\n    getMetadata(tokenIndex) {\r\n        const metadata = this._tokens[(tokenIndex << 1) + 1];\r\n        return metadata;\r\n    }\r\n    getLanguageId(tokenIndex) {\r\n        const metadata = this._tokens[(tokenIndex << 1) + 1];\r\n        return TokenMetadata.getLanguageId(metadata);\r\n    }\r\n    getStandardTokenType(tokenIndex) {\r\n        const metadata = this._tokens[(tokenIndex << 1) + 1];\r\n        return TokenMetadata.getTokenType(metadata);\r\n    }\r\n    getForeground(tokenIndex) {\r\n        const metadata = this._tokens[(tokenIndex << 1) + 1];\r\n        return TokenMetadata.getForeground(metadata);\r\n    }\r\n    getClassName(tokenIndex) {\r\n        const metadata = this._tokens[(tokenIndex << 1) + 1];\r\n        return TokenMetadata.getClassNameFromMetadata(metadata);\r\n    }\r\n    getInlineStyle(tokenIndex, colorMap) {\r\n        const metadata = this._tokens[(tokenIndex << 1) + 1];\r\n        return TokenMetadata.getInlineStyleFromMetadata(metadata, colorMap);\r\n    }\r\n    getEndOffset(tokenIndex) {\r\n        return this._tokens[tokenIndex << 1];\r\n    }\r\n    /**\r\n     * Find the token containing offset `offset`.\r\n     * @param offset The search offset\r\n     * @return The index of the token containing the offset.\r\n     */\r\n    findTokenIndexAtOffset(offset) {\r\n        return LineTokens.findIndexInTokensArray(this._tokens, offset);\r\n    }\r\n    inflate() {\r\n        return this;\r\n    }\r\n    sliceAndInflate(startOffset, endOffset, deltaOffset) {\r\n        return new SlicedLineTokens(this, startOffset, endOffset, deltaOffset);\r\n    }\r\n    static convertToEndOffset(tokens, lineTextLength) {\r\n        const tokenCount = (tokens.length >>> 1);\r\n        const lastTokenIndex = tokenCount - 1;\r\n        for (let tokenIndex = 0; tokenIndex < lastTokenIndex; tokenIndex++) {\r\n            tokens[tokenIndex << 1] = tokens[(tokenIndex + 1) << 1];\r\n        }\r\n        tokens[lastTokenIndex << 1] = lineTextLength;\r\n    }\r\n    static findIndexInTokensArray(tokens, desiredIndex) {\r\n        if (tokens.length <= 2) {\r\n            return 0;\r\n        }\r\n        let low = 0;\r\n        let high = (tokens.length >>> 1) - 1;\r\n        while (low < high) {\r\n            const mid = low + Math.floor((high - low) / 2);\r\n            const endOffset = tokens[(mid << 1)];\r\n            if (endOffset === desiredIndex) {\r\n                return mid + 1;\r\n            }\r\n            else if (endOffset < desiredIndex) {\r\n                low = mid + 1;\r\n            }\r\n            else if (endOffset > desiredIndex) {\r\n                high = mid;\r\n            }\r\n        }\r\n        return low;\r\n    }\r\n}\r\nexport class SlicedLineTokens {\r\n    constructor(source, startOffset, endOffset, deltaOffset) {\r\n        this._source = source;\r\n        this._startOffset = startOffset;\r\n        this._endOffset = endOffset;\r\n        this._deltaOffset = deltaOffset;\r\n        this._firstTokenIndex = source.findTokenIndexAtOffset(startOffset);\r\n        this._tokensCount = 0;\r\n        for (let i = this._firstTokenIndex, len = source.getCount(); i < len; i++) {\r\n            const tokenStartOffset = source.getStartOffset(i);\r\n            if (tokenStartOffset >= endOffset) {\r\n                break;\r\n            }\r\n            this._tokensCount++;\r\n        }\r\n    }\r\n    equals(other) {\r\n        if (other instanceof SlicedLineTokens) {\r\n            return (this._startOffset === other._startOffset\r\n                && this._endOffset === other._endOffset\r\n                && this._deltaOffset === other._deltaOffset\r\n                && this._source.slicedEquals(other._source, this._firstTokenIndex, this._tokensCount));\r\n        }\r\n        return false;\r\n    }\r\n    getCount() {\r\n        return this._tokensCount;\r\n    }\r\n    getForeground(tokenIndex) {\r\n        return this._source.getForeground(this._firstTokenIndex + tokenIndex);\r\n    }\r\n    getEndOffset(tokenIndex) {\r\n        const tokenEndOffset = this._source.getEndOffset(this._firstTokenIndex + tokenIndex);\r\n        return Math.min(this._endOffset, tokenEndOffset) - this._startOffset + this._deltaOffset;\r\n    }\r\n    getClassName(tokenIndex) {\r\n        return this._source.getClassName(this._firstTokenIndex + tokenIndex);\r\n    }\r\n    getInlineStyle(tokenIndex, colorMap) {\r\n        return this._source.getInlineStyle(this._firstTokenIndex + tokenIndex, colorMap);\r\n    }\r\n    findTokenIndexAtOffset(offset) {\r\n        return this._source.findTokenIndexAtOffset(offset + this._startOffset - this._deltaOffset) - this._firstTokenIndex;\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}