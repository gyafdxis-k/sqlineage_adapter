{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { toUint8 } from '../../../base/common/uint.js';\n/**\r\n * A fast character classifier that uses a compact array for ASCII values.\r\n */\nexport class CharacterClassifier {\n  constructor(_defaultValue) {\n    let defaultValue = toUint8(_defaultValue);\n    this._defaultValue = defaultValue;\n    this._asciiMap = CharacterClassifier._createAsciiMap(defaultValue);\n    this._map = new Map();\n  }\n  static _createAsciiMap(defaultValue) {\n    let asciiMap = new Uint8Array(256);\n    for (let i = 0; i < 256; i++) {\n      asciiMap[i] = defaultValue;\n    }\n    return asciiMap;\n  }\n  set(charCode, _value) {\n    let value = toUint8(_value);\n    if (charCode >= 0 && charCode < 256) {\n      this._asciiMap[charCode] = value;\n    } else {\n      this._map.set(charCode, value);\n    }\n  }\n  get(charCode) {\n    if (charCode >= 0 && charCode < 256) {\n      return this._asciiMap[charCode];\n    } else {\n      return this._map.get(charCode) || this._defaultValue;\n    }\n  }\n}\nexport class CharacterSet {\n  constructor() {\n    this._actual = new CharacterClassifier(0 /* False */);\n  }\n\n  add(charCode) {\n    this._actual.set(charCode, 1 /* True */);\n  }\n\n  has(charCode) {\n    return this._actual.get(charCode) === 1 /* True */;\n  }\n}","map":{"version":3,"names":["toUint8","CharacterClassifier","constructor","_defaultValue","defaultValue","_asciiMap","_createAsciiMap","_map","Map","asciiMap","Uint8Array","i","set","charCode","_value","value","get","CharacterSet","_actual","add","has"],"sources":["C:/Users/Administrator/Desktop/sqllineage-master/sqllineagejs/node_modules/monaco-editor/esm/vs/editor/common/core/characterClassifier.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { toUint8 } from '../../../base/common/uint.js';\r\n/**\r\n * A fast character classifier that uses a compact array for ASCII values.\r\n */\r\nexport class CharacterClassifier {\r\n    constructor(_defaultValue) {\r\n        let defaultValue = toUint8(_defaultValue);\r\n        this._defaultValue = defaultValue;\r\n        this._asciiMap = CharacterClassifier._createAsciiMap(defaultValue);\r\n        this._map = new Map();\r\n    }\r\n    static _createAsciiMap(defaultValue) {\r\n        let asciiMap = new Uint8Array(256);\r\n        for (let i = 0; i < 256; i++) {\r\n            asciiMap[i] = defaultValue;\r\n        }\r\n        return asciiMap;\r\n    }\r\n    set(charCode, _value) {\r\n        let value = toUint8(_value);\r\n        if (charCode >= 0 && charCode < 256) {\r\n            this._asciiMap[charCode] = value;\r\n        }\r\n        else {\r\n            this._map.set(charCode, value);\r\n        }\r\n    }\r\n    get(charCode) {\r\n        if (charCode >= 0 && charCode < 256) {\r\n            return this._asciiMap[charCode];\r\n        }\r\n        else {\r\n            return (this._map.get(charCode) || this._defaultValue);\r\n        }\r\n    }\r\n}\r\nexport class CharacterSet {\r\n    constructor() {\r\n        this._actual = new CharacterClassifier(0 /* False */);\r\n    }\r\n    add(charCode) {\r\n        this._actual.set(charCode, 1 /* True */);\r\n    }\r\n    has(charCode) {\r\n        return (this._actual.get(charCode) === 1 /* True */);\r\n    }\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,OAAO,QAAQ,8BAA8B;AACtD;AACA;AACA;AACA,OAAO,MAAMC,mBAAmB,CAAC;EAC7BC,WAAWA,CAACC,aAAa,EAAE;IACvB,IAAIC,YAAY,GAAGJ,OAAO,CAACG,aAAa,CAAC;IACzC,IAAI,CAACA,aAAa,GAAGC,YAAY;IACjC,IAAI,CAACC,SAAS,GAAGJ,mBAAmB,CAACK,eAAe,CAACF,YAAY,CAAC;IAClE,IAAI,CAACG,IAAI,GAAG,IAAIC,GAAG,CAAC,CAAC;EACzB;EACA,OAAOF,eAAeA,CAACF,YAAY,EAAE;IACjC,IAAIK,QAAQ,GAAG,IAAIC,UAAU,CAAC,GAAG,CAAC;IAClC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,GAAG,EAAEA,CAAC,EAAE,EAAE;MAC1BF,QAAQ,CAACE,CAAC,CAAC,GAAGP,YAAY;IAC9B;IACA,OAAOK,QAAQ;EACnB;EACAG,GAAGA,CAACC,QAAQ,EAAEC,MAAM,EAAE;IAClB,IAAIC,KAAK,GAAGf,OAAO,CAACc,MAAM,CAAC;IAC3B,IAAID,QAAQ,IAAI,CAAC,IAAIA,QAAQ,GAAG,GAAG,EAAE;MACjC,IAAI,CAACR,SAAS,CAACQ,QAAQ,CAAC,GAAGE,KAAK;IACpC,CAAC,MACI;MACD,IAAI,CAACR,IAAI,CAACK,GAAG,CAACC,QAAQ,EAAEE,KAAK,CAAC;IAClC;EACJ;EACAC,GAAGA,CAACH,QAAQ,EAAE;IACV,IAAIA,QAAQ,IAAI,CAAC,IAAIA,QAAQ,GAAG,GAAG,EAAE;MACjC,OAAO,IAAI,CAACR,SAAS,CAACQ,QAAQ,CAAC;IACnC,CAAC,MACI;MACD,OAAQ,IAAI,CAACN,IAAI,CAACS,GAAG,CAACH,QAAQ,CAAC,IAAI,IAAI,CAACV,aAAa;IACzD;EACJ;AACJ;AACA,OAAO,MAAMc,YAAY,CAAC;EACtBf,WAAWA,CAAA,EAAG;IACV,IAAI,CAACgB,OAAO,GAAG,IAAIjB,mBAAmB,CAAC,CAAC,CAAC,WAAW,CAAC;EACzD;;EACAkB,GAAGA,CAACN,QAAQ,EAAE;IACV,IAAI,CAACK,OAAO,CAACN,GAAG,CAACC,QAAQ,EAAE,CAAC,CAAC,UAAU,CAAC;EAC5C;;EACAO,GAAGA,CAACP,QAAQ,EAAE;IACV,OAAQ,IAAI,CAACK,OAAO,CAACF,GAAG,CAACH,QAAQ,CAAC,KAAK,CAAC,CAAC;EAC7C;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}