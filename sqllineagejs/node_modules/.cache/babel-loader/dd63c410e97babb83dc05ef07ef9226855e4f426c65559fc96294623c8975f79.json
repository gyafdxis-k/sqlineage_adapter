{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\n/**\r\n * The minimal size of the slider (such that it can still be clickable) -- it is artificially enlarged.\r\n */\nconst MINIMUM_SLIDER_SIZE = 20;\nexport class ScrollbarState {\n  constructor(arrowSize, scrollbarSize, oppositeScrollbarSize, visibleSize, scrollSize, scrollPosition) {\n    this._scrollbarSize = Math.round(scrollbarSize);\n    this._oppositeScrollbarSize = Math.round(oppositeScrollbarSize);\n    this._arrowSize = Math.round(arrowSize);\n    this._visibleSize = visibleSize;\n    this._scrollSize = scrollSize;\n    this._scrollPosition = scrollPosition;\n    this._computedAvailableSize = 0;\n    this._computedIsNeeded = false;\n    this._computedSliderSize = 0;\n    this._computedSliderRatio = 0;\n    this._computedSliderPosition = 0;\n    this._refreshComputedValues();\n  }\n  clone() {\n    return new ScrollbarState(this._arrowSize, this._scrollbarSize, this._oppositeScrollbarSize, this._visibleSize, this._scrollSize, this._scrollPosition);\n  }\n  setVisibleSize(visibleSize) {\n    const iVisibleSize = Math.round(visibleSize);\n    if (this._visibleSize !== iVisibleSize) {\n      this._visibleSize = iVisibleSize;\n      this._refreshComputedValues();\n      return true;\n    }\n    return false;\n  }\n  setScrollSize(scrollSize) {\n    const iScrollSize = Math.round(scrollSize);\n    if (this._scrollSize !== iScrollSize) {\n      this._scrollSize = iScrollSize;\n      this._refreshComputedValues();\n      return true;\n    }\n    return false;\n  }\n  setScrollPosition(scrollPosition) {\n    const iScrollPosition = Math.round(scrollPosition);\n    if (this._scrollPosition !== iScrollPosition) {\n      this._scrollPosition = iScrollPosition;\n      this._refreshComputedValues();\n      return true;\n    }\n    return false;\n  }\n  setScrollbarSize(scrollbarSize) {\n    this._scrollbarSize = scrollbarSize;\n  }\n  static _computeValues(oppositeScrollbarSize, arrowSize, visibleSize, scrollSize, scrollPosition) {\n    const computedAvailableSize = Math.max(0, visibleSize - oppositeScrollbarSize);\n    const computedRepresentableSize = Math.max(0, computedAvailableSize - 2 * arrowSize);\n    const computedIsNeeded = scrollSize > 0 && scrollSize > visibleSize;\n    if (!computedIsNeeded) {\n      // There is no need for a slider\n      return {\n        computedAvailableSize: Math.round(computedAvailableSize),\n        computedIsNeeded: computedIsNeeded,\n        computedSliderSize: Math.round(computedRepresentableSize),\n        computedSliderRatio: 0,\n        computedSliderPosition: 0\n      };\n    }\n    // We must artificially increase the size of the slider if needed, since the slider would be too small to grab with the mouse otherwise\n    const computedSliderSize = Math.round(Math.max(MINIMUM_SLIDER_SIZE, Math.floor(visibleSize * computedRepresentableSize / scrollSize)));\n    // The slider can move from 0 to `computedRepresentableSize` - `computedSliderSize`\n    // in the same way `scrollPosition` can move from 0 to `scrollSize` - `visibleSize`.\n    const computedSliderRatio = (computedRepresentableSize - computedSliderSize) / (scrollSize - visibleSize);\n    const computedSliderPosition = scrollPosition * computedSliderRatio;\n    return {\n      computedAvailableSize: Math.round(computedAvailableSize),\n      computedIsNeeded: computedIsNeeded,\n      computedSliderSize: Math.round(computedSliderSize),\n      computedSliderRatio: computedSliderRatio,\n      computedSliderPosition: Math.round(computedSliderPosition)\n    };\n  }\n  _refreshComputedValues() {\n    const r = ScrollbarState._computeValues(this._oppositeScrollbarSize, this._arrowSize, this._visibleSize, this._scrollSize, this._scrollPosition);\n    this._computedAvailableSize = r.computedAvailableSize;\n    this._computedIsNeeded = r.computedIsNeeded;\n    this._computedSliderSize = r.computedSliderSize;\n    this._computedSliderRatio = r.computedSliderRatio;\n    this._computedSliderPosition = r.computedSliderPosition;\n  }\n  getArrowSize() {\n    return this._arrowSize;\n  }\n  getScrollPosition() {\n    return this._scrollPosition;\n  }\n  getRectangleLargeSize() {\n    return this._computedAvailableSize;\n  }\n  getRectangleSmallSize() {\n    return this._scrollbarSize;\n  }\n  isNeeded() {\n    return this._computedIsNeeded;\n  }\n  getSliderSize() {\n    return this._computedSliderSize;\n  }\n  getSliderPosition() {\n    return this._computedSliderPosition;\n  }\n  /**\r\n   * Compute a desired `scrollPosition` such that `offset` ends up in the center of the slider.\r\n   * `offset` is based on the same coordinate system as the `sliderPosition`.\r\n   */\n  getDesiredScrollPositionFromOffset(offset) {\n    if (!this._computedIsNeeded) {\n      // no need for a slider\n      return 0;\n    }\n    const desiredSliderPosition = offset - this._arrowSize - this._computedSliderSize / 2;\n    return Math.round(desiredSliderPosition / this._computedSliderRatio);\n  }\n  /**\r\n   * Compute a desired `scrollPosition` from if offset is before or after the slider position.\r\n   * If offset is before slider, treat as a page up (or left).  If after, page down (or right).\r\n   * `offset` and `_computedSliderPosition` are based on the same coordinate system.\r\n   * `_visibleSize` corresponds to a \"page\" of lines in the returned coordinate system.\r\n   */\n  getDesiredScrollPositionFromOffsetPaged(offset) {\n    if (!this._computedIsNeeded) {\n      // no need for a slider\n      return 0;\n    }\n    const correctedOffset = offset - this._arrowSize; // compensate if has arrows\n    let desiredScrollPosition = this._scrollPosition;\n    if (correctedOffset < this._computedSliderPosition) {\n      desiredScrollPosition -= this._visibleSize; // page up/left\n    } else {\n      desiredScrollPosition += this._visibleSize; // page down/right\n    }\n\n    return desiredScrollPosition;\n  }\n  /**\r\n   * Compute a desired `scrollPosition` such that the slider moves by `delta`.\r\n   */\n  getDesiredScrollPositionFromDelta(delta) {\n    if (!this._computedIsNeeded) {\n      // no need for a slider\n      return 0;\n    }\n    const desiredSliderPosition = this._computedSliderPosition + delta;\n    return Math.round(desiredSliderPosition / this._computedSliderRatio);\n  }\n}","map":{"version":3,"names":["MINIMUM_SLIDER_SIZE","ScrollbarState","constructor","arrowSize","scrollbarSize","oppositeScrollbarSize","visibleSize","scrollSize","scrollPosition","_scrollbarSize","Math","round","_oppositeScrollbarSize","_arrowSize","_visibleSize","_scrollSize","_scrollPosition","_computedAvailableSize","_computedIsNeeded","_computedSliderSize","_computedSliderRatio","_computedSliderPosition","_refreshComputedValues","clone","setVisibleSize","iVisibleSize","setScrollSize","iScrollSize","setScrollPosition","iScrollPosition","setScrollbarSize","_computeValues","computedAvailableSize","max","computedRepresentableSize","computedIsNeeded","computedSliderSize","computedSliderRatio","computedSliderPosition","floor","r","getArrowSize","getScrollPosition","getRectangleLargeSize","getRectangleSmallSize","isNeeded","getSliderSize","getSliderPosition","getDesiredScrollPositionFromOffset","offset","desiredSliderPosition","getDesiredScrollPositionFromOffsetPaged","correctedOffset","desiredScrollPosition","getDesiredScrollPositionFromDelta","delta"],"sources":["C:/Users/Administrator/Desktop/sqllineage-master/sqllineagejs/node_modules/monaco-editor/esm/vs/base/browser/ui/scrollbar/scrollbarState.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n/**\r\n * The minimal size of the slider (such that it can still be clickable) -- it is artificially enlarged.\r\n */\r\nconst MINIMUM_SLIDER_SIZE = 20;\r\nexport class ScrollbarState {\r\n    constructor(arrowSize, scrollbarSize, oppositeScrollbarSize, visibleSize, scrollSize, scrollPosition) {\r\n        this._scrollbarSize = Math.round(scrollbarSize);\r\n        this._oppositeScrollbarSize = Math.round(oppositeScrollbarSize);\r\n        this._arrowSize = Math.round(arrowSize);\r\n        this._visibleSize = visibleSize;\r\n        this._scrollSize = scrollSize;\r\n        this._scrollPosition = scrollPosition;\r\n        this._computedAvailableSize = 0;\r\n        this._computedIsNeeded = false;\r\n        this._computedSliderSize = 0;\r\n        this._computedSliderRatio = 0;\r\n        this._computedSliderPosition = 0;\r\n        this._refreshComputedValues();\r\n    }\r\n    clone() {\r\n        return new ScrollbarState(this._arrowSize, this._scrollbarSize, this._oppositeScrollbarSize, this._visibleSize, this._scrollSize, this._scrollPosition);\r\n    }\r\n    setVisibleSize(visibleSize) {\r\n        const iVisibleSize = Math.round(visibleSize);\r\n        if (this._visibleSize !== iVisibleSize) {\r\n            this._visibleSize = iVisibleSize;\r\n            this._refreshComputedValues();\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    setScrollSize(scrollSize) {\r\n        const iScrollSize = Math.round(scrollSize);\r\n        if (this._scrollSize !== iScrollSize) {\r\n            this._scrollSize = iScrollSize;\r\n            this._refreshComputedValues();\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    setScrollPosition(scrollPosition) {\r\n        const iScrollPosition = Math.round(scrollPosition);\r\n        if (this._scrollPosition !== iScrollPosition) {\r\n            this._scrollPosition = iScrollPosition;\r\n            this._refreshComputedValues();\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    setScrollbarSize(scrollbarSize) {\r\n        this._scrollbarSize = scrollbarSize;\r\n    }\r\n    static _computeValues(oppositeScrollbarSize, arrowSize, visibleSize, scrollSize, scrollPosition) {\r\n        const computedAvailableSize = Math.max(0, visibleSize - oppositeScrollbarSize);\r\n        const computedRepresentableSize = Math.max(0, computedAvailableSize - 2 * arrowSize);\r\n        const computedIsNeeded = (scrollSize > 0 && scrollSize > visibleSize);\r\n        if (!computedIsNeeded) {\r\n            // There is no need for a slider\r\n            return {\r\n                computedAvailableSize: Math.round(computedAvailableSize),\r\n                computedIsNeeded: computedIsNeeded,\r\n                computedSliderSize: Math.round(computedRepresentableSize),\r\n                computedSliderRatio: 0,\r\n                computedSliderPosition: 0,\r\n            };\r\n        }\r\n        // We must artificially increase the size of the slider if needed, since the slider would be too small to grab with the mouse otherwise\r\n        const computedSliderSize = Math.round(Math.max(MINIMUM_SLIDER_SIZE, Math.floor(visibleSize * computedRepresentableSize / scrollSize)));\r\n        // The slider can move from 0 to `computedRepresentableSize` - `computedSliderSize`\r\n        // in the same way `scrollPosition` can move from 0 to `scrollSize` - `visibleSize`.\r\n        const computedSliderRatio = (computedRepresentableSize - computedSliderSize) / (scrollSize - visibleSize);\r\n        const computedSliderPosition = (scrollPosition * computedSliderRatio);\r\n        return {\r\n            computedAvailableSize: Math.round(computedAvailableSize),\r\n            computedIsNeeded: computedIsNeeded,\r\n            computedSliderSize: Math.round(computedSliderSize),\r\n            computedSliderRatio: computedSliderRatio,\r\n            computedSliderPosition: Math.round(computedSliderPosition),\r\n        };\r\n    }\r\n    _refreshComputedValues() {\r\n        const r = ScrollbarState._computeValues(this._oppositeScrollbarSize, this._arrowSize, this._visibleSize, this._scrollSize, this._scrollPosition);\r\n        this._computedAvailableSize = r.computedAvailableSize;\r\n        this._computedIsNeeded = r.computedIsNeeded;\r\n        this._computedSliderSize = r.computedSliderSize;\r\n        this._computedSliderRatio = r.computedSliderRatio;\r\n        this._computedSliderPosition = r.computedSliderPosition;\r\n    }\r\n    getArrowSize() {\r\n        return this._arrowSize;\r\n    }\r\n    getScrollPosition() {\r\n        return this._scrollPosition;\r\n    }\r\n    getRectangleLargeSize() {\r\n        return this._computedAvailableSize;\r\n    }\r\n    getRectangleSmallSize() {\r\n        return this._scrollbarSize;\r\n    }\r\n    isNeeded() {\r\n        return this._computedIsNeeded;\r\n    }\r\n    getSliderSize() {\r\n        return this._computedSliderSize;\r\n    }\r\n    getSliderPosition() {\r\n        return this._computedSliderPosition;\r\n    }\r\n    /**\r\n     * Compute a desired `scrollPosition` such that `offset` ends up in the center of the slider.\r\n     * `offset` is based on the same coordinate system as the `sliderPosition`.\r\n     */\r\n    getDesiredScrollPositionFromOffset(offset) {\r\n        if (!this._computedIsNeeded) {\r\n            // no need for a slider\r\n            return 0;\r\n        }\r\n        const desiredSliderPosition = offset - this._arrowSize - this._computedSliderSize / 2;\r\n        return Math.round(desiredSliderPosition / this._computedSliderRatio);\r\n    }\r\n    /**\r\n     * Compute a desired `scrollPosition` from if offset is before or after the slider position.\r\n     * If offset is before slider, treat as a page up (or left).  If after, page down (or right).\r\n     * `offset` and `_computedSliderPosition` are based on the same coordinate system.\r\n     * `_visibleSize` corresponds to a \"page\" of lines in the returned coordinate system.\r\n     */\r\n    getDesiredScrollPositionFromOffsetPaged(offset) {\r\n        if (!this._computedIsNeeded) {\r\n            // no need for a slider\r\n            return 0;\r\n        }\r\n        const correctedOffset = offset - this._arrowSize; // compensate if has arrows\r\n        let desiredScrollPosition = this._scrollPosition;\r\n        if (correctedOffset < this._computedSliderPosition) {\r\n            desiredScrollPosition -= this._visibleSize; // page up/left\r\n        }\r\n        else {\r\n            desiredScrollPosition += this._visibleSize; // page down/right\r\n        }\r\n        return desiredScrollPosition;\r\n    }\r\n    /**\r\n     * Compute a desired `scrollPosition` such that the slider moves by `delta`.\r\n     */\r\n    getDesiredScrollPositionFromDelta(delta) {\r\n        if (!this._computedIsNeeded) {\r\n            // no need for a slider\r\n            return 0;\r\n        }\r\n        const desiredSliderPosition = this._computedSliderPosition + delta;\r\n        return Math.round(desiredSliderPosition / this._computedSliderRatio);\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}