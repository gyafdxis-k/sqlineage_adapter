{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\nimport './folding.css';\nimport * as nls from '../../../nls.js';\nimport * as types from '../../../base/common/types.js';\nimport { escapeRegExpCharacters } from '../../../base/common/strings.js';\nimport { RunOnceScheduler, Delayer, createCancelablePromise } from '../../../base/common/async.js';\nimport { KeyChord } from '../../../base/common/keyCodes.js';\nimport { Disposable, DisposableStore } from '../../../base/common/lifecycle.js';\nimport { registerEditorAction, registerEditorContribution, EditorAction, registerInstantiatedEditorAction } from '../../browser/editorExtensions.js';\nimport { FoldingModel, setCollapseStateAtLevel, setCollapseStateLevelsDown, setCollapseStateLevelsUp, setCollapseStateForMatchingLines, setCollapseStateForType, toggleCollapseState, setCollapseStateUp } from './foldingModel.js';\nimport { FoldingDecorationProvider, foldingCollapsedIcon, foldingExpandedIcon } from './foldingDecorations.js';\nimport { EditorContextKeys } from '../../common/editorContextKeys.js';\nimport { HiddenRangeModel } from './hiddenRangeModel.js';\nimport { LanguageConfigurationRegistry } from '../../common/modes/languageConfigurationRegistry.js';\nimport { IndentRangeProvider } from './indentRangeProvider.js';\nimport { FoldingRangeProviderRegistry, FoldingRangeKind } from '../../common/modes.js';\nimport { SyntaxRangeProvider, ID_SYNTAX_PROVIDER } from './syntaxRangeProvider.js';\nimport { InitializingRangeProvider, ID_INIT_PROVIDER } from './intializingRangeProvider.js';\nimport { onUnexpectedError } from '../../../base/common/errors.js';\nimport { RawContextKey, IContextKeyService } from '../../../platform/contextkey/common/contextkey.js';\nimport { registerThemingParticipant, ThemeIcon } from '../../../platform/theme/common/themeService.js';\nimport { registerColor, editorSelectionBackground, transparent, iconForeground } from '../../../platform/theme/common/colorRegistry.js';\nconst CONTEXT_FOLDING_ENABLED = new RawContextKey('foldingEnabled', false);\nlet FoldingController = class FoldingController extends Disposable {\n  constructor(editor, contextKeyService) {\n    super();\n    this.contextKeyService = contextKeyService;\n    this.localToDispose = this._register(new DisposableStore());\n    this.editor = editor;\n    const options = this.editor.getOptions();\n    this._isEnabled = options.get(33 /* folding */);\n    this._useFoldingProviders = options.get(34 /* foldingStrategy */) !== 'indentation';\n    this._unfoldOnClickAfterEndOfLine = options.get(36 /* unfoldOnClickAfterEndOfLine */);\n    this._restoringViewState = false;\n    this.foldingModel = null;\n    this.hiddenRangeModel = null;\n    this.rangeProvider = null;\n    this.foldingRegionPromise = null;\n    this.foldingStateMemento = null;\n    this.foldingModelPromise = null;\n    this.updateScheduler = null;\n    this.cursorChangedScheduler = null;\n    this.mouseDownInfo = null;\n    this.foldingDecorationProvider = new FoldingDecorationProvider(editor);\n    this.foldingDecorationProvider.autoHideFoldingControls = options.get(94 /* showFoldingControls */) === 'mouseover';\n    this.foldingDecorationProvider.showFoldingHighlights = options.get(35 /* foldingHighlight */);\n    this.foldingEnabled = CONTEXT_FOLDING_ENABLED.bindTo(this.contextKeyService);\n    this.foldingEnabled.set(this._isEnabled);\n    this._register(this.editor.onDidChangeModel(() => this.onModelChanged()));\n    this._register(this.editor.onDidChangeConfiguration(e => {\n      if (e.hasChanged(33 /* folding */)) {\n        this._isEnabled = this.editor.getOptions().get(33 /* folding */);\n        this.foldingEnabled.set(this._isEnabled);\n        this.onModelChanged();\n      }\n      if (e.hasChanged(94 /* showFoldingControls */) || e.hasChanged(35 /* foldingHighlight */)) {\n        const options = this.editor.getOptions();\n        this.foldingDecorationProvider.autoHideFoldingControls = options.get(94 /* showFoldingControls */) === 'mouseover';\n        this.foldingDecorationProvider.showFoldingHighlights = options.get(35 /* foldingHighlight */);\n        this.onModelContentChanged();\n      }\n      if (e.hasChanged(34 /* foldingStrategy */)) {\n        this._useFoldingProviders = this.editor.getOptions().get(34 /* foldingStrategy */) !== 'indentation';\n        this.onFoldingStrategyChanged();\n      }\n      if (e.hasChanged(36 /* unfoldOnClickAfterEndOfLine */)) {\n        this._unfoldOnClickAfterEndOfLine = this.editor.getOptions().get(36 /* unfoldOnClickAfterEndOfLine */);\n      }\n    }));\n\n    this.onModelChanged();\n  }\n  static get(editor) {\n    return editor.getContribution(FoldingController.ID);\n  }\n  /**\r\n   * Store view state.\r\n   */\n  saveViewState() {\n    let model = this.editor.getModel();\n    if (!model || !this._isEnabled || model.isTooLargeForTokenization()) {\n      return {};\n    }\n    if (this.foldingModel) {\n      // disposed ?\n      let collapsedRegions = this.foldingModel.isInitialized ? this.foldingModel.getMemento() : this.hiddenRangeModel.getMemento();\n      let provider = this.rangeProvider ? this.rangeProvider.id : undefined;\n      return {\n        collapsedRegions,\n        lineCount: model.getLineCount(),\n        provider\n      };\n    }\n    return undefined;\n  }\n  /**\r\n   * Restore view state.\r\n   */\n  restoreViewState(state) {\n    let model = this.editor.getModel();\n    if (!model || !this._isEnabled || model.isTooLargeForTokenization() || !this.hiddenRangeModel) {\n      return;\n    }\n    if (!state || !state.collapsedRegions || state.lineCount !== model.getLineCount()) {\n      return;\n    }\n    if (state.provider === ID_SYNTAX_PROVIDER || state.provider === ID_INIT_PROVIDER) {\n      this.foldingStateMemento = state;\n    }\n    const collapsedRegions = state.collapsedRegions;\n    // set the hidden ranges right away, before waiting for the folding model.\n    if (this.hiddenRangeModel.applyMemento(collapsedRegions)) {\n      const foldingModel = this.getFoldingModel();\n      if (foldingModel) {\n        foldingModel.then(foldingModel => {\n          if (foldingModel) {\n            this._restoringViewState = true;\n            try {\n              foldingModel.applyMemento(collapsedRegions);\n            } finally {\n              this._restoringViewState = false;\n            }\n          }\n        }).then(undefined, onUnexpectedError);\n      }\n    }\n  }\n  onModelChanged() {\n    this.localToDispose.clear();\n    let model = this.editor.getModel();\n    if (!this._isEnabled || !model || model.isTooLargeForTokenization()) {\n      // huge files get no view model, so they cannot support hidden areas\n      return;\n    }\n    this.foldingModel = new FoldingModel(model, this.foldingDecorationProvider);\n    this.localToDispose.add(this.foldingModel);\n    this.hiddenRangeModel = new HiddenRangeModel(this.foldingModel);\n    this.localToDispose.add(this.hiddenRangeModel);\n    this.localToDispose.add(this.hiddenRangeModel.onDidChange(hr => this.onHiddenRangesChanges(hr)));\n    this.updateScheduler = new Delayer(200);\n    this.cursorChangedScheduler = new RunOnceScheduler(() => this.revealCursor(), 200);\n    this.localToDispose.add(this.cursorChangedScheduler);\n    this.localToDispose.add(FoldingRangeProviderRegistry.onDidChange(() => this.onFoldingStrategyChanged()));\n    this.localToDispose.add(this.editor.onDidChangeModelLanguageConfiguration(() => this.onFoldingStrategyChanged())); // covers model language changes as well\n    this.localToDispose.add(this.editor.onDidChangeModelContent(() => this.onModelContentChanged()));\n    this.localToDispose.add(this.editor.onDidChangeCursorPosition(() => this.onCursorPositionChanged()));\n    this.localToDispose.add(this.editor.onMouseDown(e => this.onEditorMouseDown(e)));\n    this.localToDispose.add(this.editor.onMouseUp(e => this.onEditorMouseUp(e)));\n    this.localToDispose.add({\n      dispose: () => {\n        if (this.foldingRegionPromise) {\n          this.foldingRegionPromise.cancel();\n          this.foldingRegionPromise = null;\n        }\n        if (this.updateScheduler) {\n          this.updateScheduler.cancel();\n        }\n        this.updateScheduler = null;\n        this.foldingModel = null;\n        this.foldingModelPromise = null;\n        this.hiddenRangeModel = null;\n        this.cursorChangedScheduler = null;\n        this.foldingStateMemento = null;\n        if (this.rangeProvider) {\n          this.rangeProvider.dispose();\n        }\n        this.rangeProvider = null;\n      }\n    });\n    this.onModelContentChanged();\n  }\n  onFoldingStrategyChanged() {\n    if (this.rangeProvider) {\n      this.rangeProvider.dispose();\n    }\n    this.rangeProvider = null;\n    this.onModelContentChanged();\n  }\n  getRangeProvider(editorModel) {\n    if (this.rangeProvider) {\n      return this.rangeProvider;\n    }\n    this.rangeProvider = new IndentRangeProvider(editorModel); // fallback\n    if (this._useFoldingProviders && this.foldingModel) {\n      let foldingProviders = FoldingRangeProviderRegistry.ordered(this.foldingModel.textModel);\n      if (foldingProviders.length === 0 && this.foldingStateMemento && this.foldingStateMemento.collapsedRegions) {\n        const rangeProvider = this.rangeProvider = new InitializingRangeProvider(editorModel, this.foldingStateMemento.collapsedRegions, () => {\n          // if after 30 the InitializingRangeProvider is still not replaced, force a refresh\n          this.foldingStateMemento = null;\n          this.onFoldingStrategyChanged();\n        }, 30000);\n        return rangeProvider; // keep memento in case there are still no foldingProviders on the next request.\n      } else if (foldingProviders.length > 0) {\n        this.rangeProvider = new SyntaxRangeProvider(editorModel, foldingProviders, () => this.onModelContentChanged());\n      }\n    }\n    this.foldingStateMemento = null;\n    return this.rangeProvider;\n  }\n  getFoldingModel() {\n    return this.foldingModelPromise;\n  }\n  onModelContentChanged() {\n    if (this.updateScheduler) {\n      if (this.foldingRegionPromise) {\n        this.foldingRegionPromise.cancel();\n        this.foldingRegionPromise = null;\n      }\n      this.foldingModelPromise = this.updateScheduler.trigger(() => {\n        const foldingModel = this.foldingModel;\n        if (!foldingModel) {\n          // null if editor has been disposed, or folding turned off\n          return null;\n        }\n        let foldingRegionPromise = this.foldingRegionPromise = createCancelablePromise(token => this.getRangeProvider(foldingModel.textModel).compute(token));\n        return foldingRegionPromise.then(foldingRanges => {\n          if (foldingRanges && foldingRegionPromise === this.foldingRegionPromise) {\n            // new request or cancelled in the meantime?\n            // some cursors might have moved into hidden regions, make sure they are in expanded regions\n            let selections = this.editor.getSelections();\n            let selectionLineNumbers = selections ? selections.map(s => s.startLineNumber) : [];\n            foldingModel.update(foldingRanges, selectionLineNumbers);\n          }\n          return foldingModel;\n        });\n      }).then(undefined, err => {\n        onUnexpectedError(err);\n        return null;\n      });\n    }\n  }\n  onHiddenRangesChanges(hiddenRanges) {\n    if (this.hiddenRangeModel && hiddenRanges.length && !this._restoringViewState) {\n      let selections = this.editor.getSelections();\n      if (selections) {\n        if (this.hiddenRangeModel.adjustSelections(selections)) {\n          this.editor.setSelections(selections);\n        }\n      }\n    }\n    this.editor.setHiddenAreas(hiddenRanges);\n  }\n  onCursorPositionChanged() {\n    if (this.hiddenRangeModel && this.hiddenRangeModel.hasRanges()) {\n      this.cursorChangedScheduler.schedule();\n    }\n  }\n  revealCursor() {\n    const foldingModel = this.getFoldingModel();\n    if (!foldingModel) {\n      return;\n    }\n    foldingModel.then(foldingModel => {\n      if (foldingModel) {\n        let selections = this.editor.getSelections();\n        if (selections && selections.length > 0) {\n          let toToggle = [];\n          for (let selection of selections) {\n            let lineNumber = selection.selectionStartLineNumber;\n            if (this.hiddenRangeModel && this.hiddenRangeModel.isHidden(lineNumber)) {\n              toToggle.push(...foldingModel.getAllRegionsAtLine(lineNumber, r => r.isCollapsed && lineNumber > r.startLineNumber));\n            }\n          }\n          if (toToggle.length) {\n            foldingModel.toggleCollapseState(toToggle);\n            this.reveal(selections[0].getPosition());\n          }\n        }\n      }\n    }).then(undefined, onUnexpectedError);\n  }\n  onEditorMouseDown(e) {\n    this.mouseDownInfo = null;\n    if (!this.hiddenRangeModel || !e.target || !e.target.range) {\n      return;\n    }\n    if (!e.event.leftButton && !e.event.middleButton) {\n      return;\n    }\n    const range = e.target.range;\n    let iconClicked = false;\n    switch (e.target.type) {\n      case 4 /* GUTTER_LINE_DECORATIONS */:\n        const data = e.target.detail;\n        const offsetLeftInGutter = e.target.element.offsetLeft;\n        const gutterOffsetX = data.offsetX - offsetLeftInGutter;\n        // const gutterOffsetX = data.offsetX - data.glyphMarginWidth - data.lineNumbersWidth - data.glyphMarginLeft;\n        // TODO@joao TODO@alex TODO@martin this is such that we don't collide with dirty diff\n        if (gutterOffsetX < 5) {\n          // the whitespace between the border and the real folding icon border is 5px\n          return;\n        }\n        iconClicked = true;\n        break;\n      case 7 /* CONTENT_EMPTY */:\n        {\n          if (this._unfoldOnClickAfterEndOfLine && this.hiddenRangeModel.hasRanges()) {\n            const data = e.target.detail;\n            if (!data.isAfterLines) {\n              break;\n            }\n          }\n          return;\n        }\n      case 6 /* CONTENT_TEXT */:\n        {\n          if (this.hiddenRangeModel.hasRanges()) {\n            let model = this.editor.getModel();\n            if (model && range.startColumn === model.getLineMaxColumn(range.startLineNumber)) {\n              break;\n            }\n          }\n          return;\n        }\n      default:\n        return;\n    }\n    this.mouseDownInfo = {\n      lineNumber: range.startLineNumber,\n      iconClicked\n    };\n  }\n  onEditorMouseUp(e) {\n    const foldingModel = this.getFoldingModel();\n    if (!foldingModel || !this.mouseDownInfo || !e.target) {\n      return;\n    }\n    let lineNumber = this.mouseDownInfo.lineNumber;\n    let iconClicked = this.mouseDownInfo.iconClicked;\n    let range = e.target.range;\n    if (!range || range.startLineNumber !== lineNumber) {\n      return;\n    }\n    if (iconClicked) {\n      if (e.target.type !== 4 /* GUTTER_LINE_DECORATIONS */) {\n        return;\n      }\n    } else {\n      let model = this.editor.getModel();\n      if (!model || range.startColumn !== model.getLineMaxColumn(lineNumber)) {\n        return;\n      }\n    }\n    foldingModel.then(foldingModel => {\n      if (foldingModel) {\n        let region = foldingModel.getRegionAtLine(lineNumber);\n        if (region && region.startLineNumber === lineNumber) {\n          let isCollapsed = region.isCollapsed;\n          if (iconClicked || isCollapsed) {\n            let toToggle = [];\n            let recursive = e.event.middleButton || e.event.shiftKey;\n            if (recursive) {\n              for (const r of foldingModel.getRegionsInside(region)) {\n                if (r.isCollapsed === isCollapsed) {\n                  toToggle.push(r);\n                }\n              }\n            }\n            // when recursive, first only collapse all children. If all are already folded or there are no children, also fold parent.\n            if (isCollapsed || !recursive || toToggle.length === 0) {\n              toToggle.push(region);\n            }\n            foldingModel.toggleCollapseState(toToggle);\n            this.reveal({\n              lineNumber,\n              column: 1\n            });\n          }\n        }\n      }\n    }).then(undefined, onUnexpectedError);\n  }\n  reveal(position) {\n    this.editor.revealPositionInCenterIfOutsideViewport(position, 0 /* Smooth */);\n  }\n};\n\nFoldingController.ID = 'editor.contrib.folding';\nFoldingController = __decorate([__param(1, IContextKeyService)], FoldingController);\nexport { FoldingController };\nclass FoldingAction extends EditorAction {\n  runEditorCommand(accessor, editor, args) {\n    let foldingController = FoldingController.get(editor);\n    if (!foldingController) {\n      return;\n    }\n    let foldingModelPromise = foldingController.getFoldingModel();\n    if (foldingModelPromise) {\n      this.reportTelemetry(accessor, editor);\n      return foldingModelPromise.then(foldingModel => {\n        if (foldingModel) {\n          this.invoke(foldingController, foldingModel, editor, args);\n          const selection = editor.getSelection();\n          if (selection) {\n            foldingController.reveal(selection.getStartPosition());\n          }\n        }\n      });\n    }\n  }\n  getSelectedLines(editor) {\n    let selections = editor.getSelections();\n    return selections ? selections.map(s => s.startLineNumber) : [];\n  }\n  getLineNumbers(args, editor) {\n    if (args && args.selectionLines) {\n      return args.selectionLines.map(l => l + 1); // to 0-bases line numbers\n    }\n\n    return this.getSelectedLines(editor);\n  }\n  run(_accessor, _editor) {}\n}\nfunction foldingArgumentsConstraint(args) {\n  if (!types.isUndefined(args)) {\n    if (!types.isObject(args)) {\n      return false;\n    }\n    const foldingArgs = args;\n    if (!types.isUndefined(foldingArgs.levels) && !types.isNumber(foldingArgs.levels)) {\n      return false;\n    }\n    if (!types.isUndefined(foldingArgs.direction) && !types.isString(foldingArgs.direction)) {\n      return false;\n    }\n    if (!types.isUndefined(foldingArgs.selectionLines) && (!types.isArray(foldingArgs.selectionLines) || !foldingArgs.selectionLines.every(types.isNumber))) {\n      return false;\n    }\n  }\n  return true;\n}\nclass UnfoldAction extends FoldingAction {\n  constructor() {\n    super({\n      id: 'editor.unfold',\n      label: nls.localize('unfoldAction.label', \"Unfold\"),\n      alias: 'Unfold',\n      precondition: CONTEXT_FOLDING_ENABLED,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: 2048 /* CtrlCmd */ | 1024 /* Shift */ | 89 /* US_CLOSE_SQUARE_BRACKET */,\n        mac: {\n          primary: 2048 /* CtrlCmd */ | 512 /* Alt */ | 89 /* US_CLOSE_SQUARE_BRACKET */\n        },\n\n        weight: 100 /* EditorContrib */\n      },\n\n      description: {\n        description: 'Unfold the content in the editor',\n        args: [{\n          name: 'Unfold editor argument',\n          description: \"Property-value pairs that can be passed through this argument:\\n\\t\\t\\t\\t\\t\\t* 'levels': Number of levels to unfold. If not set, defaults to 1.\\n\\t\\t\\t\\t\\t\\t* 'direction': If 'up', unfold given number of levels up otherwise unfolds down.\\n\\t\\t\\t\\t\\t\\t* 'selectionLines': The start lines (0-based) of the editor selections to apply the unfold action to. If not set, the active selection(s) will be used.\\n\\t\\t\\t\\t\\t\\t\",\n          constraint: foldingArgumentsConstraint,\n          schema: {\n            'type': 'object',\n            'properties': {\n              'levels': {\n                'type': 'number',\n                'default': 1\n              },\n              'direction': {\n                'type': 'string',\n                'enum': ['up', 'down'],\n                'default': 'down'\n              },\n              'selectionLines': {\n                'type': 'array',\n                'items': {\n                  'type': 'number'\n                }\n              }\n            }\n          }\n        }]\n      }\n    });\n  }\n  invoke(_foldingController, foldingModel, editor, args) {\n    let levels = args && args.levels || 1;\n    let lineNumbers = this.getLineNumbers(args, editor);\n    if (args && args.direction === 'up') {\n      setCollapseStateLevelsUp(foldingModel, false, levels, lineNumbers);\n    } else {\n      setCollapseStateLevelsDown(foldingModel, false, levels, lineNumbers);\n    }\n  }\n}\nclass UnFoldRecursivelyAction extends FoldingAction {\n  constructor() {\n    super({\n      id: 'editor.unfoldRecursively',\n      label: nls.localize('unFoldRecursivelyAction.label', \"Unfold Recursively\"),\n      alias: 'Unfold Recursively',\n      precondition: CONTEXT_FOLDING_ENABLED,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: KeyChord(2048 /* CtrlCmd */ | 41 /* KEY_K */, 2048 /* CtrlCmd */ | 89 /* US_CLOSE_SQUARE_BRACKET */),\n        weight: 100 /* EditorContrib */\n      }\n    });\n  }\n\n  invoke(_foldingController, foldingModel, editor, _args) {\n    setCollapseStateLevelsDown(foldingModel, false, Number.MAX_VALUE, this.getSelectedLines(editor));\n  }\n}\nclass FoldAction extends FoldingAction {\n  constructor() {\n    super({\n      id: 'editor.fold',\n      label: nls.localize('foldAction.label', \"Fold\"),\n      alias: 'Fold',\n      precondition: CONTEXT_FOLDING_ENABLED,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: 2048 /* CtrlCmd */ | 1024 /* Shift */ | 87 /* US_OPEN_SQUARE_BRACKET */,\n        mac: {\n          primary: 2048 /* CtrlCmd */ | 512 /* Alt */ | 87 /* US_OPEN_SQUARE_BRACKET */\n        },\n\n        weight: 100 /* EditorContrib */\n      },\n\n      description: {\n        description: 'Fold the content in the editor',\n        args: [{\n          name: 'Fold editor argument',\n          description: \"Property-value pairs that can be passed through this argument:\\n\\t\\t\\t\\t\\t\\t\\t* 'levels': Number of levels to fold.\\n\\t\\t\\t\\t\\t\\t\\t* 'direction': If 'up', folds given number of levels up otherwise folds down.\\n\\t\\t\\t\\t\\t\\t\\t* 'selectionLines': The start lines (0-based) of the editor selections to apply the fold action to. If not set, the active selection(s) will be used.\\n\\t\\t\\t\\t\\t\\t\\tIf no levels or direction is set, folds the region at the locations or if already collapsed, the first uncollapsed parent instead.\\n\\t\\t\\t\\t\\t\\t\",\n          constraint: foldingArgumentsConstraint,\n          schema: {\n            'type': 'object',\n            'properties': {\n              'levels': {\n                'type': 'number'\n              },\n              'direction': {\n                'type': 'string',\n                'enum': ['up', 'down']\n              },\n              'selectionLines': {\n                'type': 'array',\n                'items': {\n                  'type': 'number'\n                }\n              }\n            }\n          }\n        }]\n      }\n    });\n  }\n  invoke(_foldingController, foldingModel, editor, args) {\n    let lineNumbers = this.getLineNumbers(args, editor);\n    const levels = args && args.levels;\n    const direction = args && args.direction;\n    if (typeof levels !== 'number' && typeof direction !== 'string') {\n      // fold the region at the location or if already collapsed, the first uncollapsed parent instead.\n      setCollapseStateUp(foldingModel, true, lineNumbers);\n    } else {\n      if (direction === 'up') {\n        setCollapseStateLevelsUp(foldingModel, true, levels || 1, lineNumbers);\n      } else {\n        setCollapseStateLevelsDown(foldingModel, true, levels || 1, lineNumbers);\n      }\n    }\n  }\n}\nclass ToggleFoldAction extends FoldingAction {\n  constructor() {\n    super({\n      id: 'editor.toggleFold',\n      label: nls.localize('toggleFoldAction.label', \"Toggle Fold\"),\n      alias: 'Toggle Fold',\n      precondition: CONTEXT_FOLDING_ENABLED,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: KeyChord(2048 /* CtrlCmd */ | 41 /* KEY_K */, 2048 /* CtrlCmd */ | 42 /* KEY_L */),\n        weight: 100 /* EditorContrib */\n      }\n    });\n  }\n\n  invoke(_foldingController, foldingModel, editor) {\n    let selectedLines = this.getSelectedLines(editor);\n    toggleCollapseState(foldingModel, 1, selectedLines);\n  }\n}\nclass FoldRecursivelyAction extends FoldingAction {\n  constructor() {\n    super({\n      id: 'editor.foldRecursively',\n      label: nls.localize('foldRecursivelyAction.label', \"Fold Recursively\"),\n      alias: 'Fold Recursively',\n      precondition: CONTEXT_FOLDING_ENABLED,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: KeyChord(2048 /* CtrlCmd */ | 41 /* KEY_K */, 2048 /* CtrlCmd */ | 87 /* US_OPEN_SQUARE_BRACKET */),\n        weight: 100 /* EditorContrib */\n      }\n    });\n  }\n\n  invoke(_foldingController, foldingModel, editor) {\n    let selectedLines = this.getSelectedLines(editor);\n    setCollapseStateLevelsDown(foldingModel, true, Number.MAX_VALUE, selectedLines);\n  }\n}\nclass FoldAllBlockCommentsAction extends FoldingAction {\n  constructor() {\n    super({\n      id: 'editor.foldAllBlockComments',\n      label: nls.localize('foldAllBlockComments.label', \"Fold All Block Comments\"),\n      alias: 'Fold All Block Comments',\n      precondition: CONTEXT_FOLDING_ENABLED,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: KeyChord(2048 /* CtrlCmd */ | 41 /* KEY_K */, 2048 /* CtrlCmd */ | 85 /* US_SLASH */),\n        weight: 100 /* EditorContrib */\n      }\n    });\n  }\n\n  invoke(_foldingController, foldingModel, editor) {\n    if (foldingModel.regions.hasTypes()) {\n      setCollapseStateForType(foldingModel, FoldingRangeKind.Comment.value, true);\n    } else {\n      const editorModel = editor.getModel();\n      if (!editorModel) {\n        return;\n      }\n      let comments = LanguageConfigurationRegistry.getComments(editorModel.getLanguageIdentifier().id);\n      if (comments && comments.blockCommentStartToken) {\n        let regExp = new RegExp('^\\\\s*' + escapeRegExpCharacters(comments.blockCommentStartToken));\n        setCollapseStateForMatchingLines(foldingModel, regExp, true);\n      }\n    }\n  }\n}\nclass FoldAllRegionsAction extends FoldingAction {\n  constructor() {\n    super({\n      id: 'editor.foldAllMarkerRegions',\n      label: nls.localize('foldAllMarkerRegions.label', \"Fold All Regions\"),\n      alias: 'Fold All Regions',\n      precondition: CONTEXT_FOLDING_ENABLED,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: KeyChord(2048 /* CtrlCmd */ | 41 /* KEY_K */, 2048 /* CtrlCmd */ | 29 /* KEY_8 */),\n        weight: 100 /* EditorContrib */\n      }\n    });\n  }\n\n  invoke(_foldingController, foldingModel, editor) {\n    if (foldingModel.regions.hasTypes()) {\n      setCollapseStateForType(foldingModel, FoldingRangeKind.Region.value, true);\n    } else {\n      const editorModel = editor.getModel();\n      if (!editorModel) {\n        return;\n      }\n      let foldingRules = LanguageConfigurationRegistry.getFoldingRules(editorModel.getLanguageIdentifier().id);\n      if (foldingRules && foldingRules.markers && foldingRules.markers.start) {\n        let regExp = new RegExp(foldingRules.markers.start);\n        setCollapseStateForMatchingLines(foldingModel, regExp, true);\n      }\n    }\n  }\n}\nclass UnfoldAllRegionsAction extends FoldingAction {\n  constructor() {\n    super({\n      id: 'editor.unfoldAllMarkerRegions',\n      label: nls.localize('unfoldAllMarkerRegions.label', \"Unfold All Regions\"),\n      alias: 'Unfold All Regions',\n      precondition: CONTEXT_FOLDING_ENABLED,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: KeyChord(2048 /* CtrlCmd */ | 41 /* KEY_K */, 2048 /* CtrlCmd */ | 30 /* KEY_9 */),\n        weight: 100 /* EditorContrib */\n      }\n    });\n  }\n\n  invoke(_foldingController, foldingModel, editor) {\n    if (foldingModel.regions.hasTypes()) {\n      setCollapseStateForType(foldingModel, FoldingRangeKind.Region.value, false);\n    } else {\n      const editorModel = editor.getModel();\n      if (!editorModel) {\n        return;\n      }\n      let foldingRules = LanguageConfigurationRegistry.getFoldingRules(editorModel.getLanguageIdentifier().id);\n      if (foldingRules && foldingRules.markers && foldingRules.markers.start) {\n        let regExp = new RegExp(foldingRules.markers.start);\n        setCollapseStateForMatchingLines(foldingModel, regExp, false);\n      }\n    }\n  }\n}\nclass FoldAllAction extends FoldingAction {\n  constructor() {\n    super({\n      id: 'editor.foldAll',\n      label: nls.localize('foldAllAction.label', \"Fold All\"),\n      alias: 'Fold All',\n      precondition: CONTEXT_FOLDING_ENABLED,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: KeyChord(2048 /* CtrlCmd */ | 41 /* KEY_K */, 2048 /* CtrlCmd */ | 21 /* KEY_0 */),\n        weight: 100 /* EditorContrib */\n      }\n    });\n  }\n\n  invoke(_foldingController, foldingModel, _editor) {\n    setCollapseStateLevelsDown(foldingModel, true);\n  }\n}\nclass UnfoldAllAction extends FoldingAction {\n  constructor() {\n    super({\n      id: 'editor.unfoldAll',\n      label: nls.localize('unfoldAllAction.label', \"Unfold All\"),\n      alias: 'Unfold All',\n      precondition: CONTEXT_FOLDING_ENABLED,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: KeyChord(2048 /* CtrlCmd */ | 41 /* KEY_K */, 2048 /* CtrlCmd */ | 40 /* KEY_J */),\n        weight: 100 /* EditorContrib */\n      }\n    });\n  }\n\n  invoke(_foldingController, foldingModel, _editor) {\n    setCollapseStateLevelsDown(foldingModel, false);\n  }\n}\nclass FoldLevelAction extends FoldingAction {\n  getFoldingLevel() {\n    return parseInt(this.id.substr(FoldLevelAction.ID_PREFIX.length));\n  }\n  invoke(_foldingController, foldingModel, editor) {\n    setCollapseStateAtLevel(foldingModel, this.getFoldingLevel(), true, this.getSelectedLines(editor));\n  }\n}\nFoldLevelAction.ID_PREFIX = 'editor.foldLevel';\nFoldLevelAction.ID = level => FoldLevelAction.ID_PREFIX + level;\nregisterEditorContribution(FoldingController.ID, FoldingController);\nregisterEditorAction(UnfoldAction);\nregisterEditorAction(UnFoldRecursivelyAction);\nregisterEditorAction(FoldAction);\nregisterEditorAction(FoldRecursivelyAction);\nregisterEditorAction(FoldAllAction);\nregisterEditorAction(UnfoldAllAction);\nregisterEditorAction(FoldAllBlockCommentsAction);\nregisterEditorAction(FoldAllRegionsAction);\nregisterEditorAction(UnfoldAllRegionsAction);\nregisterEditorAction(ToggleFoldAction);\nfor (let i = 1; i <= 7; i++) {\n  registerInstantiatedEditorAction(new FoldLevelAction({\n    id: FoldLevelAction.ID(i),\n    label: nls.localize('foldLevelAction.label', \"Fold Level {0}\", i),\n    alias: \"Fold Level \".concat(i),\n    precondition: CONTEXT_FOLDING_ENABLED,\n    kbOpts: {\n      kbExpr: EditorContextKeys.editorTextFocus,\n      primary: KeyChord(2048 /* CtrlCmd */ | 41 /* KEY_K */, 2048 /* CtrlCmd */ | 21 /* KEY_0 */ + i),\n      weight: 100 /* EditorContrib */\n    }\n  }));\n}\n\nexport const foldBackgroundBackground = registerColor('editor.foldBackground', {\n  light: transparent(editorSelectionBackground, 0.3),\n  dark: transparent(editorSelectionBackground, 0.3),\n  hc: null\n}, nls.localize('foldBackgroundBackground', \"Background color behind folded ranges. The color must not be opaque so as not to hide underlying decorations.\"), true);\nexport const editorFoldForeground = registerColor('editorGutter.foldingControlForeground', {\n  dark: iconForeground,\n  light: iconForeground,\n  hc: iconForeground\n}, nls.localize('editorGutter.foldingControlForeground', 'Color of the folding control in the editor gutter.'));\nregisterThemingParticipant((theme, collector) => {\n  const foldBackground = theme.getColor(foldBackgroundBackground);\n  if (foldBackground) {\n    collector.addRule(\".monaco-editor .folded-background { background-color: \".concat(foldBackground, \"; }\"));\n  }\n  const editorFoldColor = theme.getColor(editorFoldForeground);\n  if (editorFoldColor) {\n    collector.addRule(\"\\n\\t\\t.monaco-editor .cldr\".concat(ThemeIcon.asCSSSelector(foldingExpandedIcon), \",\\n\\t\\t.monaco-editor .cldr\").concat(ThemeIcon.asCSSSelector(foldingCollapsedIcon), \" {\\n\\t\\t\\tcolor: \").concat(editorFoldColor, \" !important;\\n\\t\\t}\\n\\t\\t\"));\n  }\n});","map":{"version":3,"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","nls","types","escapeRegExpCharacters","RunOnceScheduler","Delayer","createCancelablePromise","KeyChord","Disposable","DisposableStore","registerEditorAction","registerEditorContribution","EditorAction","registerInstantiatedEditorAction","FoldingModel","setCollapseStateAtLevel","setCollapseStateLevelsDown","setCollapseStateLevelsUp","setCollapseStateForMatchingLines","setCollapseStateForType","toggleCollapseState","setCollapseStateUp","FoldingDecorationProvider","foldingCollapsedIcon","foldingExpandedIcon","EditorContextKeys","HiddenRangeModel","LanguageConfigurationRegistry","IndentRangeProvider","FoldingRangeProviderRegistry","FoldingRangeKind","SyntaxRangeProvider","ID_SYNTAX_PROVIDER","InitializingRangeProvider","ID_INIT_PROVIDER","onUnexpectedError","RawContextKey","IContextKeyService","registerThemingParticipant","ThemeIcon","registerColor","editorSelectionBackground","transparent","iconForeground","CONTEXT_FOLDING_ENABLED","FoldingController","constructor","editor","contextKeyService","localToDispose","_register","options","getOptions","_isEnabled","get","_useFoldingProviders","_unfoldOnClickAfterEndOfLine","_restoringViewState","foldingModel","hiddenRangeModel","rangeProvider","foldingRegionPromise","foldingStateMemento","foldingModelPromise","updateScheduler","cursorChangedScheduler","mouseDownInfo","foldingDecorationProvider","autoHideFoldingControls","showFoldingHighlights","foldingEnabled","bindTo","set","onDidChangeModel","onModelChanged","onDidChangeConfiguration","e","hasChanged","onModelContentChanged","onFoldingStrategyChanged","getContribution","ID","saveViewState","model","getModel","isTooLargeForTokenization","collapsedRegions","isInitialized","getMemento","provider","id","undefined","lineCount","getLineCount","restoreViewState","state","applyMemento","getFoldingModel","then","clear","add","onDidChange","hr","onHiddenRangesChanges","revealCursor","onDidChangeModelLanguageConfiguration","onDidChangeModelContent","onDidChangeCursorPosition","onCursorPositionChanged","onMouseDown","onEditorMouseDown","onMouseUp","onEditorMouseUp","dispose","cancel","getRangeProvider","editorModel","foldingProviders","ordered","textModel","trigger","token","compute","foldingRanges","selections","getSelections","selectionLineNumbers","map","s","startLineNumber","update","err","hiddenRanges","adjustSelections","setSelections","setHiddenAreas","hasRanges","schedule","toToggle","selection","lineNumber","selectionStartLineNumber","isHidden","push","getAllRegionsAtLine","isCollapsed","reveal","getPosition","range","event","leftButton","middleButton","iconClicked","type","data","detail","offsetLeftInGutter","element","offsetLeft","gutterOffsetX","offsetX","isAfterLines","startColumn","getLineMaxColumn","region","getRegionAtLine","recursive","shiftKey","getRegionsInside","column","position","revealPositionInCenterIfOutsideViewport","FoldingAction","runEditorCommand","accessor","args","foldingController","reportTelemetry","invoke","getSelection","getStartPosition","getSelectedLines","getLineNumbers","selectionLines","l","run","_accessor","_editor","foldingArgumentsConstraint","isUndefined","isObject","foldingArgs","levels","isNumber","direction","isString","isArray","every","UnfoldAction","label","localize","alias","precondition","kbOpts","kbExpr","editorTextFocus","primary","mac","weight","description","name","constraint","schema","_foldingController","lineNumbers","UnFoldRecursivelyAction","_args","Number","MAX_VALUE","FoldAction","ToggleFoldAction","selectedLines","FoldRecursivelyAction","FoldAllBlockCommentsAction","regions","hasTypes","Comment","value","comments","getComments","getLanguageIdentifier","blockCommentStartToken","regExp","RegExp","FoldAllRegionsAction","Region","foldingRules","getFoldingRules","markers","start","UnfoldAllRegionsAction","FoldAllAction","UnfoldAllAction","FoldLevelAction","getFoldingLevel","parseInt","substr","ID_PREFIX","level","concat","foldBackgroundBackground","light","dark","hc","editorFoldForeground","theme","collector","foldBackground","getColor","addRule","editorFoldColor","asCSSSelector"],"sources":["C:/Users/Administrator/Desktop/sqllineage-master/sqllineagejs/node_modules/monaco-editor/esm/vs/editor/contrib/folding/folding.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n};\r\nimport './folding.css';\r\nimport * as nls from '../../../nls.js';\r\nimport * as types from '../../../base/common/types.js';\r\nimport { escapeRegExpCharacters } from '../../../base/common/strings.js';\r\nimport { RunOnceScheduler, Delayer, createCancelablePromise } from '../../../base/common/async.js';\r\nimport { KeyChord } from '../../../base/common/keyCodes.js';\r\nimport { Disposable, DisposableStore } from '../../../base/common/lifecycle.js';\r\nimport { registerEditorAction, registerEditorContribution, EditorAction, registerInstantiatedEditorAction } from '../../browser/editorExtensions.js';\r\nimport { FoldingModel, setCollapseStateAtLevel, setCollapseStateLevelsDown, setCollapseStateLevelsUp, setCollapseStateForMatchingLines, setCollapseStateForType, toggleCollapseState, setCollapseStateUp } from './foldingModel.js';\r\nimport { FoldingDecorationProvider, foldingCollapsedIcon, foldingExpandedIcon } from './foldingDecorations.js';\r\nimport { EditorContextKeys } from '../../common/editorContextKeys.js';\r\nimport { HiddenRangeModel } from './hiddenRangeModel.js';\r\nimport { LanguageConfigurationRegistry } from '../../common/modes/languageConfigurationRegistry.js';\r\nimport { IndentRangeProvider } from './indentRangeProvider.js';\r\nimport { FoldingRangeProviderRegistry, FoldingRangeKind } from '../../common/modes.js';\r\nimport { SyntaxRangeProvider, ID_SYNTAX_PROVIDER } from './syntaxRangeProvider.js';\r\nimport { InitializingRangeProvider, ID_INIT_PROVIDER } from './intializingRangeProvider.js';\r\nimport { onUnexpectedError } from '../../../base/common/errors.js';\r\nimport { RawContextKey, IContextKeyService } from '../../../platform/contextkey/common/contextkey.js';\r\nimport { registerThemingParticipant, ThemeIcon } from '../../../platform/theme/common/themeService.js';\r\nimport { registerColor, editorSelectionBackground, transparent, iconForeground } from '../../../platform/theme/common/colorRegistry.js';\r\nconst CONTEXT_FOLDING_ENABLED = new RawContextKey('foldingEnabled', false);\r\nlet FoldingController = class FoldingController extends Disposable {\r\n    constructor(editor, contextKeyService) {\r\n        super();\r\n        this.contextKeyService = contextKeyService;\r\n        this.localToDispose = this._register(new DisposableStore());\r\n        this.editor = editor;\r\n        const options = this.editor.getOptions();\r\n        this._isEnabled = options.get(33 /* folding */);\r\n        this._useFoldingProviders = options.get(34 /* foldingStrategy */) !== 'indentation';\r\n        this._unfoldOnClickAfterEndOfLine = options.get(36 /* unfoldOnClickAfterEndOfLine */);\r\n        this._restoringViewState = false;\r\n        this.foldingModel = null;\r\n        this.hiddenRangeModel = null;\r\n        this.rangeProvider = null;\r\n        this.foldingRegionPromise = null;\r\n        this.foldingStateMemento = null;\r\n        this.foldingModelPromise = null;\r\n        this.updateScheduler = null;\r\n        this.cursorChangedScheduler = null;\r\n        this.mouseDownInfo = null;\r\n        this.foldingDecorationProvider = new FoldingDecorationProvider(editor);\r\n        this.foldingDecorationProvider.autoHideFoldingControls = options.get(94 /* showFoldingControls */) === 'mouseover';\r\n        this.foldingDecorationProvider.showFoldingHighlights = options.get(35 /* foldingHighlight */);\r\n        this.foldingEnabled = CONTEXT_FOLDING_ENABLED.bindTo(this.contextKeyService);\r\n        this.foldingEnabled.set(this._isEnabled);\r\n        this._register(this.editor.onDidChangeModel(() => this.onModelChanged()));\r\n        this._register(this.editor.onDidChangeConfiguration((e) => {\r\n            if (e.hasChanged(33 /* folding */)) {\r\n                this._isEnabled = this.editor.getOptions().get(33 /* folding */);\r\n                this.foldingEnabled.set(this._isEnabled);\r\n                this.onModelChanged();\r\n            }\r\n            if (e.hasChanged(94 /* showFoldingControls */) || e.hasChanged(35 /* foldingHighlight */)) {\r\n                const options = this.editor.getOptions();\r\n                this.foldingDecorationProvider.autoHideFoldingControls = options.get(94 /* showFoldingControls */) === 'mouseover';\r\n                this.foldingDecorationProvider.showFoldingHighlights = options.get(35 /* foldingHighlight */);\r\n                this.onModelContentChanged();\r\n            }\r\n            if (e.hasChanged(34 /* foldingStrategy */)) {\r\n                this._useFoldingProviders = this.editor.getOptions().get(34 /* foldingStrategy */) !== 'indentation';\r\n                this.onFoldingStrategyChanged();\r\n            }\r\n            if (e.hasChanged(36 /* unfoldOnClickAfterEndOfLine */)) {\r\n                this._unfoldOnClickAfterEndOfLine = this.editor.getOptions().get(36 /* unfoldOnClickAfterEndOfLine */);\r\n            }\r\n        }));\r\n        this.onModelChanged();\r\n    }\r\n    static get(editor) {\r\n        return editor.getContribution(FoldingController.ID);\r\n    }\r\n    /**\r\n     * Store view state.\r\n     */\r\n    saveViewState() {\r\n        let model = this.editor.getModel();\r\n        if (!model || !this._isEnabled || model.isTooLargeForTokenization()) {\r\n            return {};\r\n        }\r\n        if (this.foldingModel) { // disposed ?\r\n            let collapsedRegions = this.foldingModel.isInitialized ? this.foldingModel.getMemento() : this.hiddenRangeModel.getMemento();\r\n            let provider = this.rangeProvider ? this.rangeProvider.id : undefined;\r\n            return { collapsedRegions, lineCount: model.getLineCount(), provider };\r\n        }\r\n        return undefined;\r\n    }\r\n    /**\r\n     * Restore view state.\r\n     */\r\n    restoreViewState(state) {\r\n        let model = this.editor.getModel();\r\n        if (!model || !this._isEnabled || model.isTooLargeForTokenization() || !this.hiddenRangeModel) {\r\n            return;\r\n        }\r\n        if (!state || !state.collapsedRegions || state.lineCount !== model.getLineCount()) {\r\n            return;\r\n        }\r\n        if (state.provider === ID_SYNTAX_PROVIDER || state.provider === ID_INIT_PROVIDER) {\r\n            this.foldingStateMemento = state;\r\n        }\r\n        const collapsedRegions = state.collapsedRegions;\r\n        // set the hidden ranges right away, before waiting for the folding model.\r\n        if (this.hiddenRangeModel.applyMemento(collapsedRegions)) {\r\n            const foldingModel = this.getFoldingModel();\r\n            if (foldingModel) {\r\n                foldingModel.then(foldingModel => {\r\n                    if (foldingModel) {\r\n                        this._restoringViewState = true;\r\n                        try {\r\n                            foldingModel.applyMemento(collapsedRegions);\r\n                        }\r\n                        finally {\r\n                            this._restoringViewState = false;\r\n                        }\r\n                    }\r\n                }).then(undefined, onUnexpectedError);\r\n            }\r\n        }\r\n    }\r\n    onModelChanged() {\r\n        this.localToDispose.clear();\r\n        let model = this.editor.getModel();\r\n        if (!this._isEnabled || !model || model.isTooLargeForTokenization()) {\r\n            // huge files get no view model, so they cannot support hidden areas\r\n            return;\r\n        }\r\n        this.foldingModel = new FoldingModel(model, this.foldingDecorationProvider);\r\n        this.localToDispose.add(this.foldingModel);\r\n        this.hiddenRangeModel = new HiddenRangeModel(this.foldingModel);\r\n        this.localToDispose.add(this.hiddenRangeModel);\r\n        this.localToDispose.add(this.hiddenRangeModel.onDidChange(hr => this.onHiddenRangesChanges(hr)));\r\n        this.updateScheduler = new Delayer(200);\r\n        this.cursorChangedScheduler = new RunOnceScheduler(() => this.revealCursor(), 200);\r\n        this.localToDispose.add(this.cursorChangedScheduler);\r\n        this.localToDispose.add(FoldingRangeProviderRegistry.onDidChange(() => this.onFoldingStrategyChanged()));\r\n        this.localToDispose.add(this.editor.onDidChangeModelLanguageConfiguration(() => this.onFoldingStrategyChanged())); // covers model language changes as well\r\n        this.localToDispose.add(this.editor.onDidChangeModelContent(() => this.onModelContentChanged()));\r\n        this.localToDispose.add(this.editor.onDidChangeCursorPosition(() => this.onCursorPositionChanged()));\r\n        this.localToDispose.add(this.editor.onMouseDown(e => this.onEditorMouseDown(e)));\r\n        this.localToDispose.add(this.editor.onMouseUp(e => this.onEditorMouseUp(e)));\r\n        this.localToDispose.add({\r\n            dispose: () => {\r\n                if (this.foldingRegionPromise) {\r\n                    this.foldingRegionPromise.cancel();\r\n                    this.foldingRegionPromise = null;\r\n                }\r\n                if (this.updateScheduler) {\r\n                    this.updateScheduler.cancel();\r\n                }\r\n                this.updateScheduler = null;\r\n                this.foldingModel = null;\r\n                this.foldingModelPromise = null;\r\n                this.hiddenRangeModel = null;\r\n                this.cursorChangedScheduler = null;\r\n                this.foldingStateMemento = null;\r\n                if (this.rangeProvider) {\r\n                    this.rangeProvider.dispose();\r\n                }\r\n                this.rangeProvider = null;\r\n            }\r\n        });\r\n        this.onModelContentChanged();\r\n    }\r\n    onFoldingStrategyChanged() {\r\n        if (this.rangeProvider) {\r\n            this.rangeProvider.dispose();\r\n        }\r\n        this.rangeProvider = null;\r\n        this.onModelContentChanged();\r\n    }\r\n    getRangeProvider(editorModel) {\r\n        if (this.rangeProvider) {\r\n            return this.rangeProvider;\r\n        }\r\n        this.rangeProvider = new IndentRangeProvider(editorModel); // fallback\r\n        if (this._useFoldingProviders && this.foldingModel) {\r\n            let foldingProviders = FoldingRangeProviderRegistry.ordered(this.foldingModel.textModel);\r\n            if (foldingProviders.length === 0 && this.foldingStateMemento && this.foldingStateMemento.collapsedRegions) {\r\n                const rangeProvider = this.rangeProvider = new InitializingRangeProvider(editorModel, this.foldingStateMemento.collapsedRegions, () => {\r\n                    // if after 30 the InitializingRangeProvider is still not replaced, force a refresh\r\n                    this.foldingStateMemento = null;\r\n                    this.onFoldingStrategyChanged();\r\n                }, 30000);\r\n                return rangeProvider; // keep memento in case there are still no foldingProviders on the next request.\r\n            }\r\n            else if (foldingProviders.length > 0) {\r\n                this.rangeProvider = new SyntaxRangeProvider(editorModel, foldingProviders, () => this.onModelContentChanged());\r\n            }\r\n        }\r\n        this.foldingStateMemento = null;\r\n        return this.rangeProvider;\r\n    }\r\n    getFoldingModel() {\r\n        return this.foldingModelPromise;\r\n    }\r\n    onModelContentChanged() {\r\n        if (this.updateScheduler) {\r\n            if (this.foldingRegionPromise) {\r\n                this.foldingRegionPromise.cancel();\r\n                this.foldingRegionPromise = null;\r\n            }\r\n            this.foldingModelPromise = this.updateScheduler.trigger(() => {\r\n                const foldingModel = this.foldingModel;\r\n                if (!foldingModel) { // null if editor has been disposed, or folding turned off\r\n                    return null;\r\n                }\r\n                let foldingRegionPromise = this.foldingRegionPromise = createCancelablePromise(token => this.getRangeProvider(foldingModel.textModel).compute(token));\r\n                return foldingRegionPromise.then(foldingRanges => {\r\n                    if (foldingRanges && foldingRegionPromise === this.foldingRegionPromise) { // new request or cancelled in the meantime?\r\n                        // some cursors might have moved into hidden regions, make sure they are in expanded regions\r\n                        let selections = this.editor.getSelections();\r\n                        let selectionLineNumbers = selections ? selections.map(s => s.startLineNumber) : [];\r\n                        foldingModel.update(foldingRanges, selectionLineNumbers);\r\n                    }\r\n                    return foldingModel;\r\n                });\r\n            }).then(undefined, (err) => {\r\n                onUnexpectedError(err);\r\n                return null;\r\n            });\r\n        }\r\n    }\r\n    onHiddenRangesChanges(hiddenRanges) {\r\n        if (this.hiddenRangeModel && hiddenRanges.length && !this._restoringViewState) {\r\n            let selections = this.editor.getSelections();\r\n            if (selections) {\r\n                if (this.hiddenRangeModel.adjustSelections(selections)) {\r\n                    this.editor.setSelections(selections);\r\n                }\r\n            }\r\n        }\r\n        this.editor.setHiddenAreas(hiddenRanges);\r\n    }\r\n    onCursorPositionChanged() {\r\n        if (this.hiddenRangeModel && this.hiddenRangeModel.hasRanges()) {\r\n            this.cursorChangedScheduler.schedule();\r\n        }\r\n    }\r\n    revealCursor() {\r\n        const foldingModel = this.getFoldingModel();\r\n        if (!foldingModel) {\r\n            return;\r\n        }\r\n        foldingModel.then(foldingModel => {\r\n            if (foldingModel) {\r\n                let selections = this.editor.getSelections();\r\n                if (selections && selections.length > 0) {\r\n                    let toToggle = [];\r\n                    for (let selection of selections) {\r\n                        let lineNumber = selection.selectionStartLineNumber;\r\n                        if (this.hiddenRangeModel && this.hiddenRangeModel.isHidden(lineNumber)) {\r\n                            toToggle.push(...foldingModel.getAllRegionsAtLine(lineNumber, r => r.isCollapsed && lineNumber > r.startLineNumber));\r\n                        }\r\n                    }\r\n                    if (toToggle.length) {\r\n                        foldingModel.toggleCollapseState(toToggle);\r\n                        this.reveal(selections[0].getPosition());\r\n                    }\r\n                }\r\n            }\r\n        }).then(undefined, onUnexpectedError);\r\n    }\r\n    onEditorMouseDown(e) {\r\n        this.mouseDownInfo = null;\r\n        if (!this.hiddenRangeModel || !e.target || !e.target.range) {\r\n            return;\r\n        }\r\n        if (!e.event.leftButton && !e.event.middleButton) {\r\n            return;\r\n        }\r\n        const range = e.target.range;\r\n        let iconClicked = false;\r\n        switch (e.target.type) {\r\n            case 4 /* GUTTER_LINE_DECORATIONS */:\r\n                const data = e.target.detail;\r\n                const offsetLeftInGutter = e.target.element.offsetLeft;\r\n                const gutterOffsetX = data.offsetX - offsetLeftInGutter;\r\n                // const gutterOffsetX = data.offsetX - data.glyphMarginWidth - data.lineNumbersWidth - data.glyphMarginLeft;\r\n                // TODO@joao TODO@alex TODO@martin this is such that we don't collide with dirty diff\r\n                if (gutterOffsetX < 5) { // the whitespace between the border and the real folding icon border is 5px\r\n                    return;\r\n                }\r\n                iconClicked = true;\r\n                break;\r\n            case 7 /* CONTENT_EMPTY */: {\r\n                if (this._unfoldOnClickAfterEndOfLine && this.hiddenRangeModel.hasRanges()) {\r\n                    const data = e.target.detail;\r\n                    if (!data.isAfterLines) {\r\n                        break;\r\n                    }\r\n                }\r\n                return;\r\n            }\r\n            case 6 /* CONTENT_TEXT */: {\r\n                if (this.hiddenRangeModel.hasRanges()) {\r\n                    let model = this.editor.getModel();\r\n                    if (model && range.startColumn === model.getLineMaxColumn(range.startLineNumber)) {\r\n                        break;\r\n                    }\r\n                }\r\n                return;\r\n            }\r\n            default:\r\n                return;\r\n        }\r\n        this.mouseDownInfo = { lineNumber: range.startLineNumber, iconClicked };\r\n    }\r\n    onEditorMouseUp(e) {\r\n        const foldingModel = this.getFoldingModel();\r\n        if (!foldingModel || !this.mouseDownInfo || !e.target) {\r\n            return;\r\n        }\r\n        let lineNumber = this.mouseDownInfo.lineNumber;\r\n        let iconClicked = this.mouseDownInfo.iconClicked;\r\n        let range = e.target.range;\r\n        if (!range || range.startLineNumber !== lineNumber) {\r\n            return;\r\n        }\r\n        if (iconClicked) {\r\n            if (e.target.type !== 4 /* GUTTER_LINE_DECORATIONS */) {\r\n                return;\r\n            }\r\n        }\r\n        else {\r\n            let model = this.editor.getModel();\r\n            if (!model || range.startColumn !== model.getLineMaxColumn(lineNumber)) {\r\n                return;\r\n            }\r\n        }\r\n        foldingModel.then(foldingModel => {\r\n            if (foldingModel) {\r\n                let region = foldingModel.getRegionAtLine(lineNumber);\r\n                if (region && region.startLineNumber === lineNumber) {\r\n                    let isCollapsed = region.isCollapsed;\r\n                    if (iconClicked || isCollapsed) {\r\n                        let toToggle = [];\r\n                        let recursive = e.event.middleButton || e.event.shiftKey;\r\n                        if (recursive) {\r\n                            for (const r of foldingModel.getRegionsInside(region)) {\r\n                                if (r.isCollapsed === isCollapsed) {\r\n                                    toToggle.push(r);\r\n                                }\r\n                            }\r\n                        }\r\n                        // when recursive, first only collapse all children. If all are already folded or there are no children, also fold parent.\r\n                        if (isCollapsed || !recursive || toToggle.length === 0) {\r\n                            toToggle.push(region);\r\n                        }\r\n                        foldingModel.toggleCollapseState(toToggle);\r\n                        this.reveal({ lineNumber, column: 1 });\r\n                    }\r\n                }\r\n            }\r\n        }).then(undefined, onUnexpectedError);\r\n    }\r\n    reveal(position) {\r\n        this.editor.revealPositionInCenterIfOutsideViewport(position, 0 /* Smooth */);\r\n    }\r\n};\r\nFoldingController.ID = 'editor.contrib.folding';\r\nFoldingController = __decorate([\r\n    __param(1, IContextKeyService)\r\n], FoldingController);\r\nexport { FoldingController };\r\nclass FoldingAction extends EditorAction {\r\n    runEditorCommand(accessor, editor, args) {\r\n        let foldingController = FoldingController.get(editor);\r\n        if (!foldingController) {\r\n            return;\r\n        }\r\n        let foldingModelPromise = foldingController.getFoldingModel();\r\n        if (foldingModelPromise) {\r\n            this.reportTelemetry(accessor, editor);\r\n            return foldingModelPromise.then(foldingModel => {\r\n                if (foldingModel) {\r\n                    this.invoke(foldingController, foldingModel, editor, args);\r\n                    const selection = editor.getSelection();\r\n                    if (selection) {\r\n                        foldingController.reveal(selection.getStartPosition());\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n    getSelectedLines(editor) {\r\n        let selections = editor.getSelections();\r\n        return selections ? selections.map(s => s.startLineNumber) : [];\r\n    }\r\n    getLineNumbers(args, editor) {\r\n        if (args && args.selectionLines) {\r\n            return args.selectionLines.map(l => l + 1); // to 0-bases line numbers\r\n        }\r\n        return this.getSelectedLines(editor);\r\n    }\r\n    run(_accessor, _editor) {\r\n    }\r\n}\r\nfunction foldingArgumentsConstraint(args) {\r\n    if (!types.isUndefined(args)) {\r\n        if (!types.isObject(args)) {\r\n            return false;\r\n        }\r\n        const foldingArgs = args;\r\n        if (!types.isUndefined(foldingArgs.levels) && !types.isNumber(foldingArgs.levels)) {\r\n            return false;\r\n        }\r\n        if (!types.isUndefined(foldingArgs.direction) && !types.isString(foldingArgs.direction)) {\r\n            return false;\r\n        }\r\n        if (!types.isUndefined(foldingArgs.selectionLines) && (!types.isArray(foldingArgs.selectionLines) || !foldingArgs.selectionLines.every(types.isNumber))) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nclass UnfoldAction extends FoldingAction {\r\n    constructor() {\r\n        super({\r\n            id: 'editor.unfold',\r\n            label: nls.localize('unfoldAction.label', \"Unfold\"),\r\n            alias: 'Unfold',\r\n            precondition: CONTEXT_FOLDING_ENABLED,\r\n            kbOpts: {\r\n                kbExpr: EditorContextKeys.editorTextFocus,\r\n                primary: 2048 /* CtrlCmd */ | 1024 /* Shift */ | 89 /* US_CLOSE_SQUARE_BRACKET */,\r\n                mac: {\r\n                    primary: 2048 /* CtrlCmd */ | 512 /* Alt */ | 89 /* US_CLOSE_SQUARE_BRACKET */\r\n                },\r\n                weight: 100 /* EditorContrib */\r\n            },\r\n            description: {\r\n                description: 'Unfold the content in the editor',\r\n                args: [\r\n                    {\r\n                        name: 'Unfold editor argument',\r\n                        description: `Property-value pairs that can be passed through this argument:\n\t\t\t\t\t\t* 'levels': Number of levels to unfold. If not set, defaults to 1.\n\t\t\t\t\t\t* 'direction': If 'up', unfold given number of levels up otherwise unfolds down.\n\t\t\t\t\t\t* 'selectionLines': The start lines (0-based) of the editor selections to apply the unfold action to. If not set, the active selection(s) will be used.\n\t\t\t\t\t\t`,\r\n                        constraint: foldingArgumentsConstraint,\r\n                        schema: {\r\n                            'type': 'object',\r\n                            'properties': {\r\n                                'levels': {\r\n                                    'type': 'number',\r\n                                    'default': 1\r\n                                },\r\n                                'direction': {\r\n                                    'type': 'string',\r\n                                    'enum': ['up', 'down'],\r\n                                    'default': 'down'\r\n                                },\r\n                                'selectionLines': {\r\n                                    'type': 'array',\r\n                                    'items': {\r\n                                        'type': 'number'\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                ]\r\n            }\r\n        });\r\n    }\r\n    invoke(_foldingController, foldingModel, editor, args) {\r\n        let levels = args && args.levels || 1;\r\n        let lineNumbers = this.getLineNumbers(args, editor);\r\n        if (args && args.direction === 'up') {\r\n            setCollapseStateLevelsUp(foldingModel, false, levels, lineNumbers);\r\n        }\r\n        else {\r\n            setCollapseStateLevelsDown(foldingModel, false, levels, lineNumbers);\r\n        }\r\n    }\r\n}\r\nclass UnFoldRecursivelyAction extends FoldingAction {\r\n    constructor() {\r\n        super({\r\n            id: 'editor.unfoldRecursively',\r\n            label: nls.localize('unFoldRecursivelyAction.label', \"Unfold Recursively\"),\r\n            alias: 'Unfold Recursively',\r\n            precondition: CONTEXT_FOLDING_ENABLED,\r\n            kbOpts: {\r\n                kbExpr: EditorContextKeys.editorTextFocus,\r\n                primary: KeyChord(2048 /* CtrlCmd */ | 41 /* KEY_K */, 2048 /* CtrlCmd */ | 89 /* US_CLOSE_SQUARE_BRACKET */),\r\n                weight: 100 /* EditorContrib */\r\n            }\r\n        });\r\n    }\r\n    invoke(_foldingController, foldingModel, editor, _args) {\r\n        setCollapseStateLevelsDown(foldingModel, false, Number.MAX_VALUE, this.getSelectedLines(editor));\r\n    }\r\n}\r\nclass FoldAction extends FoldingAction {\r\n    constructor() {\r\n        super({\r\n            id: 'editor.fold',\r\n            label: nls.localize('foldAction.label', \"Fold\"),\r\n            alias: 'Fold',\r\n            precondition: CONTEXT_FOLDING_ENABLED,\r\n            kbOpts: {\r\n                kbExpr: EditorContextKeys.editorTextFocus,\r\n                primary: 2048 /* CtrlCmd */ | 1024 /* Shift */ | 87 /* US_OPEN_SQUARE_BRACKET */,\r\n                mac: {\r\n                    primary: 2048 /* CtrlCmd */ | 512 /* Alt */ | 87 /* US_OPEN_SQUARE_BRACKET */\r\n                },\r\n                weight: 100 /* EditorContrib */\r\n            },\r\n            description: {\r\n                description: 'Fold the content in the editor',\r\n                args: [\r\n                    {\r\n                        name: 'Fold editor argument',\r\n                        description: `Property-value pairs that can be passed through this argument:\n\t\t\t\t\t\t\t* 'levels': Number of levels to fold.\n\t\t\t\t\t\t\t* 'direction': If 'up', folds given number of levels up otherwise folds down.\n\t\t\t\t\t\t\t* 'selectionLines': The start lines (0-based) of the editor selections to apply the fold action to. If not set, the active selection(s) will be used.\n\t\t\t\t\t\t\tIf no levels or direction is set, folds the region at the locations or if already collapsed, the first uncollapsed parent instead.\n\t\t\t\t\t\t`,\r\n                        constraint: foldingArgumentsConstraint,\r\n                        schema: {\r\n                            'type': 'object',\r\n                            'properties': {\r\n                                'levels': {\r\n                                    'type': 'number',\r\n                                },\r\n                                'direction': {\r\n                                    'type': 'string',\r\n                                    'enum': ['up', 'down'],\r\n                                },\r\n                                'selectionLines': {\r\n                                    'type': 'array',\r\n                                    'items': {\r\n                                        'type': 'number'\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                ]\r\n            }\r\n        });\r\n    }\r\n    invoke(_foldingController, foldingModel, editor, args) {\r\n        let lineNumbers = this.getLineNumbers(args, editor);\r\n        const levels = args && args.levels;\r\n        const direction = args && args.direction;\r\n        if (typeof levels !== 'number' && typeof direction !== 'string') {\r\n            // fold the region at the location or if already collapsed, the first uncollapsed parent instead.\r\n            setCollapseStateUp(foldingModel, true, lineNumbers);\r\n        }\r\n        else {\r\n            if (direction === 'up') {\r\n                setCollapseStateLevelsUp(foldingModel, true, levels || 1, lineNumbers);\r\n            }\r\n            else {\r\n                setCollapseStateLevelsDown(foldingModel, true, levels || 1, lineNumbers);\r\n            }\r\n        }\r\n    }\r\n}\r\nclass ToggleFoldAction extends FoldingAction {\r\n    constructor() {\r\n        super({\r\n            id: 'editor.toggleFold',\r\n            label: nls.localize('toggleFoldAction.label', \"Toggle Fold\"),\r\n            alias: 'Toggle Fold',\r\n            precondition: CONTEXT_FOLDING_ENABLED,\r\n            kbOpts: {\r\n                kbExpr: EditorContextKeys.editorTextFocus,\r\n                primary: KeyChord(2048 /* CtrlCmd */ | 41 /* KEY_K */, 2048 /* CtrlCmd */ | 42 /* KEY_L */),\r\n                weight: 100 /* EditorContrib */\r\n            }\r\n        });\r\n    }\r\n    invoke(_foldingController, foldingModel, editor) {\r\n        let selectedLines = this.getSelectedLines(editor);\r\n        toggleCollapseState(foldingModel, 1, selectedLines);\r\n    }\r\n}\r\nclass FoldRecursivelyAction extends FoldingAction {\r\n    constructor() {\r\n        super({\r\n            id: 'editor.foldRecursively',\r\n            label: nls.localize('foldRecursivelyAction.label', \"Fold Recursively\"),\r\n            alias: 'Fold Recursively',\r\n            precondition: CONTEXT_FOLDING_ENABLED,\r\n            kbOpts: {\r\n                kbExpr: EditorContextKeys.editorTextFocus,\r\n                primary: KeyChord(2048 /* CtrlCmd */ | 41 /* KEY_K */, 2048 /* CtrlCmd */ | 87 /* US_OPEN_SQUARE_BRACKET */),\r\n                weight: 100 /* EditorContrib */\r\n            }\r\n        });\r\n    }\r\n    invoke(_foldingController, foldingModel, editor) {\r\n        let selectedLines = this.getSelectedLines(editor);\r\n        setCollapseStateLevelsDown(foldingModel, true, Number.MAX_VALUE, selectedLines);\r\n    }\r\n}\r\nclass FoldAllBlockCommentsAction extends FoldingAction {\r\n    constructor() {\r\n        super({\r\n            id: 'editor.foldAllBlockComments',\r\n            label: nls.localize('foldAllBlockComments.label', \"Fold All Block Comments\"),\r\n            alias: 'Fold All Block Comments',\r\n            precondition: CONTEXT_FOLDING_ENABLED,\r\n            kbOpts: {\r\n                kbExpr: EditorContextKeys.editorTextFocus,\r\n                primary: KeyChord(2048 /* CtrlCmd */ | 41 /* KEY_K */, 2048 /* CtrlCmd */ | 85 /* US_SLASH */),\r\n                weight: 100 /* EditorContrib */\r\n            }\r\n        });\r\n    }\r\n    invoke(_foldingController, foldingModel, editor) {\r\n        if (foldingModel.regions.hasTypes()) {\r\n            setCollapseStateForType(foldingModel, FoldingRangeKind.Comment.value, true);\r\n        }\r\n        else {\r\n            const editorModel = editor.getModel();\r\n            if (!editorModel) {\r\n                return;\r\n            }\r\n            let comments = LanguageConfigurationRegistry.getComments(editorModel.getLanguageIdentifier().id);\r\n            if (comments && comments.blockCommentStartToken) {\r\n                let regExp = new RegExp('^\\\\s*' + escapeRegExpCharacters(comments.blockCommentStartToken));\r\n                setCollapseStateForMatchingLines(foldingModel, regExp, true);\r\n            }\r\n        }\r\n    }\r\n}\r\nclass FoldAllRegionsAction extends FoldingAction {\r\n    constructor() {\r\n        super({\r\n            id: 'editor.foldAllMarkerRegions',\r\n            label: nls.localize('foldAllMarkerRegions.label', \"Fold All Regions\"),\r\n            alias: 'Fold All Regions',\r\n            precondition: CONTEXT_FOLDING_ENABLED,\r\n            kbOpts: {\r\n                kbExpr: EditorContextKeys.editorTextFocus,\r\n                primary: KeyChord(2048 /* CtrlCmd */ | 41 /* KEY_K */, 2048 /* CtrlCmd */ | 29 /* KEY_8 */),\r\n                weight: 100 /* EditorContrib */\r\n            }\r\n        });\r\n    }\r\n    invoke(_foldingController, foldingModel, editor) {\r\n        if (foldingModel.regions.hasTypes()) {\r\n            setCollapseStateForType(foldingModel, FoldingRangeKind.Region.value, true);\r\n        }\r\n        else {\r\n            const editorModel = editor.getModel();\r\n            if (!editorModel) {\r\n                return;\r\n            }\r\n            let foldingRules = LanguageConfigurationRegistry.getFoldingRules(editorModel.getLanguageIdentifier().id);\r\n            if (foldingRules && foldingRules.markers && foldingRules.markers.start) {\r\n                let regExp = new RegExp(foldingRules.markers.start);\r\n                setCollapseStateForMatchingLines(foldingModel, regExp, true);\r\n            }\r\n        }\r\n    }\r\n}\r\nclass UnfoldAllRegionsAction extends FoldingAction {\r\n    constructor() {\r\n        super({\r\n            id: 'editor.unfoldAllMarkerRegions',\r\n            label: nls.localize('unfoldAllMarkerRegions.label', \"Unfold All Regions\"),\r\n            alias: 'Unfold All Regions',\r\n            precondition: CONTEXT_FOLDING_ENABLED,\r\n            kbOpts: {\r\n                kbExpr: EditorContextKeys.editorTextFocus,\r\n                primary: KeyChord(2048 /* CtrlCmd */ | 41 /* KEY_K */, 2048 /* CtrlCmd */ | 30 /* KEY_9 */),\r\n                weight: 100 /* EditorContrib */\r\n            }\r\n        });\r\n    }\r\n    invoke(_foldingController, foldingModel, editor) {\r\n        if (foldingModel.regions.hasTypes()) {\r\n            setCollapseStateForType(foldingModel, FoldingRangeKind.Region.value, false);\r\n        }\r\n        else {\r\n            const editorModel = editor.getModel();\r\n            if (!editorModel) {\r\n                return;\r\n            }\r\n            let foldingRules = LanguageConfigurationRegistry.getFoldingRules(editorModel.getLanguageIdentifier().id);\r\n            if (foldingRules && foldingRules.markers && foldingRules.markers.start) {\r\n                let regExp = new RegExp(foldingRules.markers.start);\r\n                setCollapseStateForMatchingLines(foldingModel, regExp, false);\r\n            }\r\n        }\r\n    }\r\n}\r\nclass FoldAllAction extends FoldingAction {\r\n    constructor() {\r\n        super({\r\n            id: 'editor.foldAll',\r\n            label: nls.localize('foldAllAction.label', \"Fold All\"),\r\n            alias: 'Fold All',\r\n            precondition: CONTEXT_FOLDING_ENABLED,\r\n            kbOpts: {\r\n                kbExpr: EditorContextKeys.editorTextFocus,\r\n                primary: KeyChord(2048 /* CtrlCmd */ | 41 /* KEY_K */, 2048 /* CtrlCmd */ | 21 /* KEY_0 */),\r\n                weight: 100 /* EditorContrib */\r\n            }\r\n        });\r\n    }\r\n    invoke(_foldingController, foldingModel, _editor) {\r\n        setCollapseStateLevelsDown(foldingModel, true);\r\n    }\r\n}\r\nclass UnfoldAllAction extends FoldingAction {\r\n    constructor() {\r\n        super({\r\n            id: 'editor.unfoldAll',\r\n            label: nls.localize('unfoldAllAction.label', \"Unfold All\"),\r\n            alias: 'Unfold All',\r\n            precondition: CONTEXT_FOLDING_ENABLED,\r\n            kbOpts: {\r\n                kbExpr: EditorContextKeys.editorTextFocus,\r\n                primary: KeyChord(2048 /* CtrlCmd */ | 41 /* KEY_K */, 2048 /* CtrlCmd */ | 40 /* KEY_J */),\r\n                weight: 100 /* EditorContrib */\r\n            }\r\n        });\r\n    }\r\n    invoke(_foldingController, foldingModel, _editor) {\r\n        setCollapseStateLevelsDown(foldingModel, false);\r\n    }\r\n}\r\nclass FoldLevelAction extends FoldingAction {\r\n    getFoldingLevel() {\r\n        return parseInt(this.id.substr(FoldLevelAction.ID_PREFIX.length));\r\n    }\r\n    invoke(_foldingController, foldingModel, editor) {\r\n        setCollapseStateAtLevel(foldingModel, this.getFoldingLevel(), true, this.getSelectedLines(editor));\r\n    }\r\n}\r\nFoldLevelAction.ID_PREFIX = 'editor.foldLevel';\r\nFoldLevelAction.ID = (level) => FoldLevelAction.ID_PREFIX + level;\r\nregisterEditorContribution(FoldingController.ID, FoldingController);\r\nregisterEditorAction(UnfoldAction);\r\nregisterEditorAction(UnFoldRecursivelyAction);\r\nregisterEditorAction(FoldAction);\r\nregisterEditorAction(FoldRecursivelyAction);\r\nregisterEditorAction(FoldAllAction);\r\nregisterEditorAction(UnfoldAllAction);\r\nregisterEditorAction(FoldAllBlockCommentsAction);\r\nregisterEditorAction(FoldAllRegionsAction);\r\nregisterEditorAction(UnfoldAllRegionsAction);\r\nregisterEditorAction(ToggleFoldAction);\r\nfor (let i = 1; i <= 7; i++) {\r\n    registerInstantiatedEditorAction(new FoldLevelAction({\r\n        id: FoldLevelAction.ID(i),\r\n        label: nls.localize('foldLevelAction.label', \"Fold Level {0}\", i),\r\n        alias: `Fold Level ${i}`,\r\n        precondition: CONTEXT_FOLDING_ENABLED,\r\n        kbOpts: {\r\n            kbExpr: EditorContextKeys.editorTextFocus,\r\n            primary: KeyChord(2048 /* CtrlCmd */ | 41 /* KEY_K */, 2048 /* CtrlCmd */ | (21 /* KEY_0 */ + i)),\r\n            weight: 100 /* EditorContrib */\r\n        }\r\n    }));\r\n}\r\nexport const foldBackgroundBackground = registerColor('editor.foldBackground', { light: transparent(editorSelectionBackground, 0.3), dark: transparent(editorSelectionBackground, 0.3), hc: null }, nls.localize('foldBackgroundBackground', \"Background color behind folded ranges. The color must not be opaque so as not to hide underlying decorations.\"), true);\r\nexport const editorFoldForeground = registerColor('editorGutter.foldingControlForeground', { dark: iconForeground, light: iconForeground, hc: iconForeground }, nls.localize('editorGutter.foldingControlForeground', 'Color of the folding control in the editor gutter.'));\r\nregisterThemingParticipant((theme, collector) => {\r\n    const foldBackground = theme.getColor(foldBackgroundBackground);\r\n    if (foldBackground) {\r\n        collector.addRule(`.monaco-editor .folded-background { background-color: ${foldBackground}; }`);\r\n    }\r\n    const editorFoldColor = theme.getColor(editorFoldForeground);\r\n    if (editorFoldColor) {\r\n        collector.addRule(`\n\t\t.monaco-editor .cldr${ThemeIcon.asCSSSelector(foldingExpandedIcon)},\n\t\t.monaco-editor .cldr${ThemeIcon.asCSSSelector(foldingCollapsedIcon)} {\n\t\t\tcolor: ${editorFoldColor} !important;\n\t\t}\n\t\t`);\r\n    }\r\n});\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}