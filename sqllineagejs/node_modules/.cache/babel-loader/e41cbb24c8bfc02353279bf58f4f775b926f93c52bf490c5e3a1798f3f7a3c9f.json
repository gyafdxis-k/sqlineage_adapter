{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { match as matchGlobPattern } from '../../../base/common/glob.js';\nimport { normalize } from '../../../base/common/path.js';\nexport function score(selector, candidateUri, candidateLanguage, candidateIsSynchronized) {\n  if (Array.isArray(selector)) {\n    // array -> take max individual value\n    let ret = 0;\n    for (const filter of selector) {\n      const value = score(filter, candidateUri, candidateLanguage, candidateIsSynchronized);\n      if (value === 10) {\n        return value; // already at the highest\n      }\n\n      if (value > ret) {\n        ret = value;\n      }\n    }\n    return ret;\n  } else if (typeof selector === 'string') {\n    if (!candidateIsSynchronized) {\n      return 0;\n    }\n    // short-hand notion, desugars to\n    // 'fooLang' -> { language: 'fooLang'}\n    // '*' -> { language: '*' }\n    if (selector === '*') {\n      return 5;\n    } else if (selector === candidateLanguage) {\n      return 10;\n    } else {\n      return 0;\n    }\n  } else if (selector) {\n    // filter -> select accordingly, use defaults for scheme\n    const {\n      language,\n      pattern,\n      scheme,\n      hasAccessToAllModels\n    } = selector;\n    if (!candidateIsSynchronized && !hasAccessToAllModels) {\n      return 0;\n    }\n    let ret = 0;\n    if (scheme) {\n      if (scheme === candidateUri.scheme) {\n        ret = 10;\n      } else if (scheme === '*') {\n        ret = 5;\n      } else {\n        return 0;\n      }\n    }\n    if (language) {\n      if (language === candidateLanguage) {\n        ret = 10;\n      } else if (language === '*') {\n        ret = Math.max(ret, 5);\n      } else {\n        return 0;\n      }\n    }\n    if (pattern) {\n      let normalizedPattern;\n      if (typeof pattern === 'string') {\n        normalizedPattern = pattern;\n      } else {\n        // Since this pattern has a `base` property, we need\n        // to normalize this path first before passing it on\n        // because we will compare it against `Uri.fsPath`\n        // which uses platform specific separators.\n        // Refs: https://github.com/microsoft/vscode/issues/99938\n        normalizedPattern = Object.assign(Object.assign({}, pattern), {\n          base: normalize(pattern.base)\n        });\n      }\n      if (normalizedPattern === candidateUri.fsPath || matchGlobPattern(normalizedPattern, candidateUri.fsPath)) {\n        ret = 10;\n      } else {\n        return 0;\n      }\n    }\n    return ret;\n  } else {\n    return 0;\n  }\n}","map":{"version":3,"names":["match","matchGlobPattern","normalize","score","selector","candidateUri","candidateLanguage","candidateIsSynchronized","Array","isArray","ret","filter","value","language","pattern","scheme","hasAccessToAllModels","Math","max","normalizedPattern","Object","assign","base","fsPath"],"sources":["C:/Users/Administrator/Desktop/sqllineage-master/sqllineagejs/node_modules/monaco-editor/esm/vs/editor/common/modes/languageSelector.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { match as matchGlobPattern } from '../../../base/common/glob.js';\r\nimport { normalize } from '../../../base/common/path.js';\r\nexport function score(selector, candidateUri, candidateLanguage, candidateIsSynchronized) {\r\n    if (Array.isArray(selector)) {\r\n        // array -> take max individual value\r\n        let ret = 0;\r\n        for (const filter of selector) {\r\n            const value = score(filter, candidateUri, candidateLanguage, candidateIsSynchronized);\r\n            if (value === 10) {\r\n                return value; // already at the highest\r\n            }\r\n            if (value > ret) {\r\n                ret = value;\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n    else if (typeof selector === 'string') {\r\n        if (!candidateIsSynchronized) {\r\n            return 0;\r\n        }\r\n        // short-hand notion, desugars to\r\n        // 'fooLang' -> { language: 'fooLang'}\r\n        // '*' -> { language: '*' }\r\n        if (selector === '*') {\r\n            return 5;\r\n        }\r\n        else if (selector === candidateLanguage) {\r\n            return 10;\r\n        }\r\n        else {\r\n            return 0;\r\n        }\r\n    }\r\n    else if (selector) {\r\n        // filter -> select accordingly, use defaults for scheme\r\n        const { language, pattern, scheme, hasAccessToAllModels } = selector;\r\n        if (!candidateIsSynchronized && !hasAccessToAllModels) {\r\n            return 0;\r\n        }\r\n        let ret = 0;\r\n        if (scheme) {\r\n            if (scheme === candidateUri.scheme) {\r\n                ret = 10;\r\n            }\r\n            else if (scheme === '*') {\r\n                ret = 5;\r\n            }\r\n            else {\r\n                return 0;\r\n            }\r\n        }\r\n        if (language) {\r\n            if (language === candidateLanguage) {\r\n                ret = 10;\r\n            }\r\n            else if (language === '*') {\r\n                ret = Math.max(ret, 5);\r\n            }\r\n            else {\r\n                return 0;\r\n            }\r\n        }\r\n        if (pattern) {\r\n            let normalizedPattern;\r\n            if (typeof pattern === 'string') {\r\n                normalizedPattern = pattern;\r\n            }\r\n            else {\r\n                // Since this pattern has a `base` property, we need\r\n                // to normalize this path first before passing it on\r\n                // because we will compare it against `Uri.fsPath`\r\n                // which uses platform specific separators.\r\n                // Refs: https://github.com/microsoft/vscode/issues/99938\r\n                normalizedPattern = Object.assign(Object.assign({}, pattern), { base: normalize(pattern.base) });\r\n            }\r\n            if (normalizedPattern === candidateUri.fsPath || matchGlobPattern(normalizedPattern, candidateUri.fsPath)) {\r\n                ret = 10;\r\n            }\r\n            else {\r\n                return 0;\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n    else {\r\n        return 0;\r\n    }\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,KAAK,IAAIC,gBAAgB,QAAQ,8BAA8B;AACxE,SAASC,SAAS,QAAQ,8BAA8B;AACxD,OAAO,SAASC,KAAKA,CAACC,QAAQ,EAAEC,YAAY,EAAEC,iBAAiB,EAAEC,uBAAuB,EAAE;EACtF,IAAIC,KAAK,CAACC,OAAO,CAACL,QAAQ,CAAC,EAAE;IACzB;IACA,IAAIM,GAAG,GAAG,CAAC;IACX,KAAK,MAAMC,MAAM,IAAIP,QAAQ,EAAE;MAC3B,MAAMQ,KAAK,GAAGT,KAAK,CAACQ,MAAM,EAAEN,YAAY,EAAEC,iBAAiB,EAAEC,uBAAuB,CAAC;MACrF,IAAIK,KAAK,KAAK,EAAE,EAAE;QACd,OAAOA,KAAK,CAAC,CAAC;MAClB;;MACA,IAAIA,KAAK,GAAGF,GAAG,EAAE;QACbA,GAAG,GAAGE,KAAK;MACf;IACJ;IACA,OAAOF,GAAG;EACd,CAAC,MACI,IAAI,OAAON,QAAQ,KAAK,QAAQ,EAAE;IACnC,IAAI,CAACG,uBAAuB,EAAE;MAC1B,OAAO,CAAC;IACZ;IACA;IACA;IACA;IACA,IAAIH,QAAQ,KAAK,GAAG,EAAE;MAClB,OAAO,CAAC;IACZ,CAAC,MACI,IAAIA,QAAQ,KAAKE,iBAAiB,EAAE;MACrC,OAAO,EAAE;IACb,CAAC,MACI;MACD,OAAO,CAAC;IACZ;EACJ,CAAC,MACI,IAAIF,QAAQ,EAAE;IACf;IACA,MAAM;MAAES,QAAQ;MAAEC,OAAO;MAAEC,MAAM;MAAEC;IAAqB,CAAC,GAAGZ,QAAQ;IACpE,IAAI,CAACG,uBAAuB,IAAI,CAACS,oBAAoB,EAAE;MACnD,OAAO,CAAC;IACZ;IACA,IAAIN,GAAG,GAAG,CAAC;IACX,IAAIK,MAAM,EAAE;MACR,IAAIA,MAAM,KAAKV,YAAY,CAACU,MAAM,EAAE;QAChCL,GAAG,GAAG,EAAE;MACZ,CAAC,MACI,IAAIK,MAAM,KAAK,GAAG,EAAE;QACrBL,GAAG,GAAG,CAAC;MACX,CAAC,MACI;QACD,OAAO,CAAC;MACZ;IACJ;IACA,IAAIG,QAAQ,EAAE;MACV,IAAIA,QAAQ,KAAKP,iBAAiB,EAAE;QAChCI,GAAG,GAAG,EAAE;MACZ,CAAC,MACI,IAAIG,QAAQ,KAAK,GAAG,EAAE;QACvBH,GAAG,GAAGO,IAAI,CAACC,GAAG,CAACR,GAAG,EAAE,CAAC,CAAC;MAC1B,CAAC,MACI;QACD,OAAO,CAAC;MACZ;IACJ;IACA,IAAII,OAAO,EAAE;MACT,IAAIK,iBAAiB;MACrB,IAAI,OAAOL,OAAO,KAAK,QAAQ,EAAE;QAC7BK,iBAAiB,GAAGL,OAAO;MAC/B,CAAC,MACI;QACD;QACA;QACA;QACA;QACA;QACAK,iBAAiB,GAAGC,MAAM,CAACC,MAAM,CAACD,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEP,OAAO,CAAC,EAAE;UAAEQ,IAAI,EAAEpB,SAAS,CAACY,OAAO,CAACQ,IAAI;QAAE,CAAC,CAAC;MACpG;MACA,IAAIH,iBAAiB,KAAKd,YAAY,CAACkB,MAAM,IAAItB,gBAAgB,CAACkB,iBAAiB,EAAEd,YAAY,CAACkB,MAAM,CAAC,EAAE;QACvGb,GAAG,GAAG,EAAE;MACZ,CAAC,MACI;QACD,OAAO,CAAC;MACZ;IACJ;IACA,OAAOA,GAAG;EACd,CAAC,MACI;IACD,OAAO,CAAC;EACZ;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}