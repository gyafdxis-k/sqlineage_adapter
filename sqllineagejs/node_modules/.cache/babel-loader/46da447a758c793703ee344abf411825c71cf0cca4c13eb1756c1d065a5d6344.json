{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nvar _a;\nimport './media/diffReview.css';\nimport * as nls from '../../../nls.js';\nimport * as dom from '../../../base/browser/dom.js';\nimport { createFastDomNode } from '../../../base/browser/fastDomNode.js';\nimport { ActionBar } from '../../../base/browser/ui/actionbar/actionbar.js';\nimport { DomScrollableElement } from '../../../base/browser/ui/scrollbar/scrollableElement.js';\nimport { Action } from '../../../base/common/actions.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { Configuration } from '../config/configuration.js';\nimport { EditorAction, registerEditorAction } from '../editorExtensions.js';\nimport { ICodeEditorService } from '../services/codeEditorService.js';\nimport { EditorFontLigatures } from '../../common/config/editorOptions.js';\nimport { LineTokens } from '../../common/core/lineTokens.js';\nimport { Position } from '../../common/core/position.js';\nimport { editorLineNumbers } from '../../common/view/editorColorRegistry.js';\nimport { RenderLineInput, renderViewLine2 as renderViewLine } from '../../common/viewLayout/viewLineRenderer.js';\nimport { ViewLineRenderingData } from '../../common/viewModel/viewModel.js';\nimport { ContextKeyExpr } from '../../../platform/contextkey/common/contextkey.js';\nimport { scrollbarShadow } from '../../../platform/theme/common/colorRegistry.js';\nimport { registerThemingParticipant, ThemeIcon } from '../../../platform/theme/common/themeService.js';\nimport { Codicon } from '../../../base/common/codicons.js';\nimport { registerIcon } from '../../../platform/theme/common/iconRegistry.js';\nconst DIFF_LINES_PADDING = 3;\nclass DiffEntry {\n  constructor(originalLineStart, originalLineEnd, modifiedLineStart, modifiedLineEnd) {\n    this.originalLineStart = originalLineStart;\n    this.originalLineEnd = originalLineEnd;\n    this.modifiedLineStart = modifiedLineStart;\n    this.modifiedLineEnd = modifiedLineEnd;\n  }\n  getType() {\n    if (this.originalLineStart === 0) {\n      return 1 /* Insert */;\n    }\n\n    if (this.modifiedLineStart === 0) {\n      return 2 /* Delete */;\n    }\n\n    return 0 /* Equal */;\n  }\n}\n\nclass Diff {\n  constructor(entries) {\n    this.entries = entries;\n  }\n}\nconst diffReviewInsertIcon = registerIcon('diff-review-insert', Codicon.add, nls.localize('diffReviewInsertIcon', 'Icon for \\'Insert\\' in diff review.'));\nconst diffReviewRemoveIcon = registerIcon('diff-review-remove', Codicon.remove, nls.localize('diffReviewRemoveIcon', 'Icon for \\'Remove\\' in diff review.'));\nconst diffReviewCloseIcon = registerIcon('diff-review-close', Codicon.close, nls.localize('diffReviewCloseIcon', 'Icon for \\'Close\\' in diff review.'));\nexport class DiffReview extends Disposable {\n  constructor(diffEditor) {\n    super();\n    this._width = 0;\n    this._diffEditor = diffEditor;\n    this._isVisible = false;\n    this.shadow = createFastDomNode(document.createElement('div'));\n    this.shadow.setClassName('diff-review-shadow');\n    this.actionBarContainer = createFastDomNode(document.createElement('div'));\n    this.actionBarContainer.setClassName('diff-review-actions');\n    this._actionBar = this._register(new ActionBar(this.actionBarContainer.domNode));\n    this._actionBar.push(new Action('diffreview.close', nls.localize('label.close', \"Close\"), 'close-diff-review ' + ThemeIcon.asClassName(diffReviewCloseIcon), true, () => {\n      this.hide();\n      return Promise.resolve(null);\n    }), {\n      label: false,\n      icon: true\n    });\n    this.domNode = createFastDomNode(document.createElement('div'));\n    this.domNode.setClassName('diff-review monaco-editor-background');\n    this._content = createFastDomNode(document.createElement('div'));\n    this._content.setClassName('diff-review-content');\n    this._content.setAttribute('role', 'code');\n    this.scrollbar = this._register(new DomScrollableElement(this._content.domNode, {}));\n    this.domNode.domNode.appendChild(this.scrollbar.getDomNode());\n    this._register(diffEditor.onDidUpdateDiff(() => {\n      if (!this._isVisible) {\n        return;\n      }\n      this._diffs = this._compute();\n      this._render();\n    }));\n    this._register(diffEditor.getModifiedEditor().onDidChangeCursorPosition(() => {\n      if (!this._isVisible) {\n        return;\n      }\n      this._render();\n    }));\n    this._register(dom.addStandardDisposableListener(this.domNode.domNode, 'click', e => {\n      e.preventDefault();\n      let row = dom.findParentWithClass(e.target, 'diff-review-row');\n      if (row) {\n        this._goToRow(row);\n      }\n    }));\n    this._register(dom.addStandardDisposableListener(this.domNode.domNode, 'keydown', e => {\n      if (e.equals(18 /* DownArrow */) || e.equals(2048 /* CtrlCmd */ | 18 /* DownArrow */) || e.equals(512 /* Alt */ | 18 /* DownArrow */)) {\n        e.preventDefault();\n        this._goToRow(this._getNextRow());\n      }\n      if (e.equals(16 /* UpArrow */) || e.equals(2048 /* CtrlCmd */ | 16 /* UpArrow */) || e.equals(512 /* Alt */ | 16 /* UpArrow */)) {\n        e.preventDefault();\n        this._goToRow(this._getPrevRow());\n      }\n      if (e.equals(9 /* Escape */) || e.equals(2048 /* CtrlCmd */ | 9 /* Escape */) || e.equals(512 /* Alt */ | 9 /* Escape */) || e.equals(1024 /* Shift */ | 9 /* Escape */)) {\n        e.preventDefault();\n        this.hide();\n      }\n      if (e.equals(10 /* Space */) || e.equals(3 /* Enter */)) {\n        e.preventDefault();\n        this.accept();\n      }\n    }));\n    this._diffs = [];\n    this._currentDiff = null;\n  }\n  prev() {\n    let index = 0;\n    if (!this._isVisible) {\n      this._diffs = this._compute();\n    }\n    if (this._isVisible) {\n      let currentIndex = -1;\n      for (let i = 0, len = this._diffs.length; i < len; i++) {\n        if (this._diffs[i] === this._currentDiff) {\n          currentIndex = i;\n          break;\n        }\n      }\n      index = this._diffs.length + currentIndex - 1;\n    } else {\n      index = this._findDiffIndex(this._diffEditor.getPosition());\n    }\n    if (this._diffs.length === 0) {\n      // Nothing to do\n      return;\n    }\n    index = index % this._diffs.length;\n    const entries = this._diffs[index].entries;\n    this._diffEditor.setPosition(new Position(entries[0].modifiedLineStart, 1));\n    this._diffEditor.setSelection({\n      startColumn: 1,\n      startLineNumber: entries[0].modifiedLineStart,\n      endColumn: 1073741824 /* MAX_SAFE_SMALL_INTEGER */,\n      endLineNumber: entries[entries.length - 1].modifiedLineEnd\n    });\n    this._isVisible = true;\n    this._diffEditor.doLayout();\n    this._render();\n    this._goToRow(this._getNextRow());\n  }\n  next() {\n    let index = 0;\n    if (!this._isVisible) {\n      this._diffs = this._compute();\n    }\n    if (this._isVisible) {\n      let currentIndex = -1;\n      for (let i = 0, len = this._diffs.length; i < len; i++) {\n        if (this._diffs[i] === this._currentDiff) {\n          currentIndex = i;\n          break;\n        }\n      }\n      index = currentIndex + 1;\n    } else {\n      index = this._findDiffIndex(this._diffEditor.getPosition());\n    }\n    if (this._diffs.length === 0) {\n      // Nothing to do\n      return;\n    }\n    index = index % this._diffs.length;\n    const entries = this._diffs[index].entries;\n    this._diffEditor.setPosition(new Position(entries[0].modifiedLineStart, 1));\n    this._diffEditor.setSelection({\n      startColumn: 1,\n      startLineNumber: entries[0].modifiedLineStart,\n      endColumn: 1073741824 /* MAX_SAFE_SMALL_INTEGER */,\n      endLineNumber: entries[entries.length - 1].modifiedLineEnd\n    });\n    this._isVisible = true;\n    this._diffEditor.doLayout();\n    this._render();\n    this._goToRow(this._getNextRow());\n  }\n  accept() {\n    let jumpToLineNumber = -1;\n    let current = this._getCurrentFocusedRow();\n    if (current) {\n      let lineNumber = parseInt(current.getAttribute('data-line'), 10);\n      if (!isNaN(lineNumber)) {\n        jumpToLineNumber = lineNumber;\n      }\n    }\n    this.hide();\n    if (jumpToLineNumber !== -1) {\n      this._diffEditor.setPosition(new Position(jumpToLineNumber, 1));\n      this._diffEditor.revealPosition(new Position(jumpToLineNumber, 1), 1 /* Immediate */);\n    }\n  }\n\n  hide() {\n    this._isVisible = false;\n    this._diffEditor.updateOptions({\n      readOnly: false\n    });\n    this._diffEditor.focus();\n    this._diffEditor.doLayout();\n    this._render();\n  }\n  _getPrevRow() {\n    let current = this._getCurrentFocusedRow();\n    if (!current) {\n      return this._getFirstRow();\n    }\n    if (current.previousElementSibling) {\n      return current.previousElementSibling;\n    }\n    return current;\n  }\n  _getNextRow() {\n    let current = this._getCurrentFocusedRow();\n    if (!current) {\n      return this._getFirstRow();\n    }\n    if (current.nextElementSibling) {\n      return current.nextElementSibling;\n    }\n    return current;\n  }\n  _getFirstRow() {\n    return this.domNode.domNode.querySelector('.diff-review-row');\n  }\n  _getCurrentFocusedRow() {\n    let result = document.activeElement;\n    if (result && /diff-review-row/.test(result.className)) {\n      return result;\n    }\n    return null;\n  }\n  _goToRow(row) {\n    let prev = this._getCurrentFocusedRow();\n    row.tabIndex = 0;\n    row.focus();\n    if (prev && prev !== row) {\n      prev.tabIndex = -1;\n    }\n    this.scrollbar.scanDomNode();\n  }\n  isVisible() {\n    return this._isVisible;\n  }\n  layout(top, width, height) {\n    this._width = width;\n    this.shadow.setTop(top - 6);\n    this.shadow.setWidth(width);\n    this.shadow.setHeight(this._isVisible ? 6 : 0);\n    this.domNode.setTop(top);\n    this.domNode.setWidth(width);\n    this.domNode.setHeight(height);\n    this._content.setHeight(height);\n    this._content.setWidth(width);\n    if (this._isVisible) {\n      this.actionBarContainer.setAttribute('aria-hidden', 'false');\n      this.actionBarContainer.setDisplay('block');\n    } else {\n      this.actionBarContainer.setAttribute('aria-hidden', 'true');\n      this.actionBarContainer.setDisplay('none');\n    }\n  }\n  _compute() {\n    const lineChanges = this._diffEditor.getLineChanges();\n    if (!lineChanges || lineChanges.length === 0) {\n      return [];\n    }\n    const originalModel = this._diffEditor.getOriginalEditor().getModel();\n    const modifiedModel = this._diffEditor.getModifiedEditor().getModel();\n    if (!originalModel || !modifiedModel) {\n      return [];\n    }\n    return DiffReview._mergeAdjacent(lineChanges, originalModel.getLineCount(), modifiedModel.getLineCount());\n  }\n  static _mergeAdjacent(lineChanges, originalLineCount, modifiedLineCount) {\n    if (!lineChanges || lineChanges.length === 0) {\n      return [];\n    }\n    let diffs = [],\n      diffsLength = 0;\n    for (let i = 0, len = lineChanges.length; i < len; i++) {\n      const lineChange = lineChanges[i];\n      const originalStart = lineChange.originalStartLineNumber;\n      const originalEnd = lineChange.originalEndLineNumber;\n      const modifiedStart = lineChange.modifiedStartLineNumber;\n      const modifiedEnd = lineChange.modifiedEndLineNumber;\n      let r = [],\n        rLength = 0;\n      // Emit before anchors\n      {\n        const originalEqualAbove = originalEnd === 0 ? originalStart : originalStart - 1;\n        const modifiedEqualAbove = modifiedEnd === 0 ? modifiedStart : modifiedStart - 1;\n        // Make sure we don't step into the previous diff\n        let minOriginal = 1;\n        let minModified = 1;\n        if (i > 0) {\n          const prevLineChange = lineChanges[i - 1];\n          if (prevLineChange.originalEndLineNumber === 0) {\n            minOriginal = prevLineChange.originalStartLineNumber + 1;\n          } else {\n            minOriginal = prevLineChange.originalEndLineNumber + 1;\n          }\n          if (prevLineChange.modifiedEndLineNumber === 0) {\n            minModified = prevLineChange.modifiedStartLineNumber + 1;\n          } else {\n            minModified = prevLineChange.modifiedEndLineNumber + 1;\n          }\n        }\n        let fromOriginal = originalEqualAbove - DIFF_LINES_PADDING + 1;\n        let fromModified = modifiedEqualAbove - DIFF_LINES_PADDING + 1;\n        if (fromOriginal < minOriginal) {\n          const delta = minOriginal - fromOriginal;\n          fromOriginal = fromOriginal + delta;\n          fromModified = fromModified + delta;\n        }\n        if (fromModified < minModified) {\n          const delta = minModified - fromModified;\n          fromOriginal = fromOriginal + delta;\n          fromModified = fromModified + delta;\n        }\n        r[rLength++] = new DiffEntry(fromOriginal, originalEqualAbove, fromModified, modifiedEqualAbove);\n      }\n      // Emit deleted lines\n      {\n        if (originalEnd !== 0) {\n          r[rLength++] = new DiffEntry(originalStart, originalEnd, 0, 0);\n        }\n      }\n      // Emit inserted lines\n      {\n        if (modifiedEnd !== 0) {\n          r[rLength++] = new DiffEntry(0, 0, modifiedStart, modifiedEnd);\n        }\n      }\n      // Emit after anchors\n      {\n        const originalEqualBelow = originalEnd === 0 ? originalStart + 1 : originalEnd + 1;\n        const modifiedEqualBelow = modifiedEnd === 0 ? modifiedStart + 1 : modifiedEnd + 1;\n        // Make sure we don't step into the next diff\n        let maxOriginal = originalLineCount;\n        let maxModified = modifiedLineCount;\n        if (i + 1 < len) {\n          const nextLineChange = lineChanges[i + 1];\n          if (nextLineChange.originalEndLineNumber === 0) {\n            maxOriginal = nextLineChange.originalStartLineNumber;\n          } else {\n            maxOriginal = nextLineChange.originalStartLineNumber - 1;\n          }\n          if (nextLineChange.modifiedEndLineNumber === 0) {\n            maxModified = nextLineChange.modifiedStartLineNumber;\n          } else {\n            maxModified = nextLineChange.modifiedStartLineNumber - 1;\n          }\n        }\n        let toOriginal = originalEqualBelow + DIFF_LINES_PADDING - 1;\n        let toModified = modifiedEqualBelow + DIFF_LINES_PADDING - 1;\n        if (toOriginal > maxOriginal) {\n          const delta = maxOriginal - toOriginal;\n          toOriginal = toOriginal + delta;\n          toModified = toModified + delta;\n        }\n        if (toModified > maxModified) {\n          const delta = maxModified - toModified;\n          toOriginal = toOriginal + delta;\n          toModified = toModified + delta;\n        }\n        r[rLength++] = new DiffEntry(originalEqualBelow, toOriginal, modifiedEqualBelow, toModified);\n      }\n      diffs[diffsLength++] = new Diff(r);\n    }\n    // Merge adjacent diffs\n    let curr = diffs[0].entries;\n    let r = [],\n      rLength = 0;\n    for (let i = 1, len = diffs.length; i < len; i++) {\n      const thisDiff = diffs[i].entries;\n      const currLast = curr[curr.length - 1];\n      const thisFirst = thisDiff[0];\n      if (currLast.getType() === 0 /* Equal */ && thisFirst.getType() === 0 /* Equal */ && thisFirst.originalLineStart <= currLast.originalLineEnd) {\n        // We are dealing with equal lines that overlap\n        curr[curr.length - 1] = new DiffEntry(currLast.originalLineStart, thisFirst.originalLineEnd, currLast.modifiedLineStart, thisFirst.modifiedLineEnd);\n        curr = curr.concat(thisDiff.slice(1));\n        continue;\n      }\n      r[rLength++] = new Diff(curr);\n      curr = thisDiff;\n    }\n    r[rLength++] = new Diff(curr);\n    return r;\n  }\n  _findDiffIndex(pos) {\n    const lineNumber = pos.lineNumber;\n    for (let i = 0, len = this._diffs.length; i < len; i++) {\n      const diff = this._diffs[i].entries;\n      const lastModifiedLine = diff[diff.length - 1].modifiedLineEnd;\n      if (lineNumber <= lastModifiedLine) {\n        return i;\n      }\n    }\n    return 0;\n  }\n  _render() {\n    const originalOptions = this._diffEditor.getOriginalEditor().getOptions();\n    const modifiedOptions = this._diffEditor.getModifiedEditor().getOptions();\n    const originalModel = this._diffEditor.getOriginalEditor().getModel();\n    const modifiedModel = this._diffEditor.getModifiedEditor().getModel();\n    const originalModelOpts = originalModel.getOptions();\n    const modifiedModelOpts = modifiedModel.getOptions();\n    if (!this._isVisible || !originalModel || !modifiedModel) {\n      dom.clearNode(this._content.domNode);\n      this._currentDiff = null;\n      this.scrollbar.scanDomNode();\n      return;\n    }\n    this._diffEditor.updateOptions({\n      readOnly: true\n    });\n    const diffIndex = this._findDiffIndex(this._diffEditor.getPosition());\n    if (this._diffs[diffIndex] === this._currentDiff) {\n      return;\n    }\n    this._currentDiff = this._diffs[diffIndex];\n    const diffs = this._diffs[diffIndex].entries;\n    let container = document.createElement('div');\n    container.className = 'diff-review-table';\n    container.setAttribute('role', 'list');\n    container.setAttribute('aria-label', 'Difference review. Use \"Stage | Unstage | Revert Selected Ranges\" commands');\n    Configuration.applyFontInfoSlow(container, modifiedOptions.get(38 /* fontInfo */));\n    let minOriginalLine = 0;\n    let maxOriginalLine = 0;\n    let minModifiedLine = 0;\n    let maxModifiedLine = 0;\n    for (let i = 0, len = diffs.length; i < len; i++) {\n      const diffEntry = diffs[i];\n      const originalLineStart = diffEntry.originalLineStart;\n      const originalLineEnd = diffEntry.originalLineEnd;\n      const modifiedLineStart = diffEntry.modifiedLineStart;\n      const modifiedLineEnd = diffEntry.modifiedLineEnd;\n      if (originalLineStart !== 0 && (minOriginalLine === 0 || originalLineStart < minOriginalLine)) {\n        minOriginalLine = originalLineStart;\n      }\n      if (originalLineEnd !== 0 && (maxOriginalLine === 0 || originalLineEnd > maxOriginalLine)) {\n        maxOriginalLine = originalLineEnd;\n      }\n      if (modifiedLineStart !== 0 && (minModifiedLine === 0 || modifiedLineStart < minModifiedLine)) {\n        minModifiedLine = modifiedLineStart;\n      }\n      if (modifiedLineEnd !== 0 && (maxModifiedLine === 0 || modifiedLineEnd > maxModifiedLine)) {\n        maxModifiedLine = modifiedLineEnd;\n      }\n    }\n    let header = document.createElement('div');\n    header.className = 'diff-review-row';\n    let cell = document.createElement('div');\n    cell.className = 'diff-review-cell diff-review-summary';\n    const originalChangedLinesCnt = maxOriginalLine - minOriginalLine + 1;\n    const modifiedChangedLinesCnt = maxModifiedLine - minModifiedLine + 1;\n    cell.appendChild(document.createTextNode(\"\".concat(diffIndex + 1, \"/\").concat(this._diffs.length, \": @@ -\").concat(minOriginalLine, \",\").concat(originalChangedLinesCnt, \" +\").concat(minModifiedLine, \",\").concat(modifiedChangedLinesCnt, \" @@\")));\n    header.setAttribute('data-line', String(minModifiedLine));\n    const getAriaLines = lines => {\n      if (lines === 0) {\n        return nls.localize('no_lines_changed', \"no lines changed\");\n      } else if (lines === 1) {\n        return nls.localize('one_line_changed', \"1 line changed\");\n      } else {\n        return nls.localize('more_lines_changed', \"{0} lines changed\", lines);\n      }\n    };\n    const originalChangedLinesCntAria = getAriaLines(originalChangedLinesCnt);\n    const modifiedChangedLinesCntAria = getAriaLines(modifiedChangedLinesCnt);\n    header.setAttribute('aria-label', nls.localize({\n      key: 'header',\n      comment: ['This is the ARIA label for a git diff header.', 'A git diff header looks like this: @@ -154,12 +159,39 @@.', 'That encodes that at original line 154 (which is now line 159), 12 lines were removed/changed with 39 lines.', 'Variables 0 and 1 refer to the diff index out of total number of diffs.', 'Variables 2 and 4 will be numbers (a line number).', 'Variables 3 and 5 will be \"no lines changed\", \"1 line changed\" or \"X lines changed\", localized separately.']\n    }, \"Difference {0} of {1}: original line {2}, {3}, modified line {4}, {5}\", diffIndex + 1, this._diffs.length, minOriginalLine, originalChangedLinesCntAria, minModifiedLine, modifiedChangedLinesCntAria));\n    header.appendChild(cell);\n    // @@ -504,7 +517,7 @@\n    header.setAttribute('role', 'listitem');\n    container.appendChild(header);\n    const lineHeight = modifiedOptions.get(53 /* lineHeight */);\n    let modLine = minModifiedLine;\n    for (let i = 0, len = diffs.length; i < len; i++) {\n      const diffEntry = diffs[i];\n      DiffReview._renderSection(container, diffEntry, modLine, lineHeight, this._width, originalOptions, originalModel, originalModelOpts, modifiedOptions, modifiedModel, modifiedModelOpts);\n      if (diffEntry.modifiedLineStart !== 0) {\n        modLine = diffEntry.modifiedLineEnd;\n      }\n    }\n    dom.clearNode(this._content.domNode);\n    this._content.domNode.appendChild(container);\n    this.scrollbar.scanDomNode();\n  }\n  static _renderSection(dest, diffEntry, modLine, lineHeight, width, originalOptions, originalModel, originalModelOpts, modifiedOptions, modifiedModel, modifiedModelOpts) {\n    const type = diffEntry.getType();\n    let rowClassName = 'diff-review-row';\n    let lineNumbersExtraClassName = '';\n    const spacerClassName = 'diff-review-spacer';\n    let spacerIcon = null;\n    switch (type) {\n      case 1 /* Insert */:\n        rowClassName = 'diff-review-row line-insert';\n        lineNumbersExtraClassName = ' char-insert';\n        spacerIcon = diffReviewInsertIcon;\n        break;\n      case 2 /* Delete */:\n        rowClassName = 'diff-review-row line-delete';\n        lineNumbersExtraClassName = ' char-delete';\n        spacerIcon = diffReviewRemoveIcon;\n        break;\n    }\n    const originalLineStart = diffEntry.originalLineStart;\n    const originalLineEnd = diffEntry.originalLineEnd;\n    const modifiedLineStart = diffEntry.modifiedLineStart;\n    const modifiedLineEnd = diffEntry.modifiedLineEnd;\n    const cnt = Math.max(modifiedLineEnd - modifiedLineStart, originalLineEnd - originalLineStart);\n    const originalLayoutInfo = originalOptions.get(124 /* layoutInfo */);\n    const originalLineNumbersWidth = originalLayoutInfo.glyphMarginWidth + originalLayoutInfo.lineNumbersWidth;\n    const modifiedLayoutInfo = modifiedOptions.get(124 /* layoutInfo */);\n    const modifiedLineNumbersWidth = 10 + modifiedLayoutInfo.glyphMarginWidth + modifiedLayoutInfo.lineNumbersWidth;\n    for (let i = 0; i <= cnt; i++) {\n      const originalLine = originalLineStart === 0 ? 0 : originalLineStart + i;\n      const modifiedLine = modifiedLineStart === 0 ? 0 : modifiedLineStart + i;\n      const row = document.createElement('div');\n      row.style.minWidth = width + 'px';\n      row.className = rowClassName;\n      row.setAttribute('role', 'listitem');\n      if (modifiedLine !== 0) {\n        modLine = modifiedLine;\n      }\n      row.setAttribute('data-line', String(modLine));\n      let cell = document.createElement('div');\n      cell.className = 'diff-review-cell';\n      cell.style.height = \"\".concat(lineHeight, \"px\");\n      row.appendChild(cell);\n      const originalLineNumber = document.createElement('span');\n      originalLineNumber.style.width = originalLineNumbersWidth + 'px';\n      originalLineNumber.style.minWidth = originalLineNumbersWidth + 'px';\n      originalLineNumber.className = 'diff-review-line-number' + lineNumbersExtraClassName;\n      if (originalLine !== 0) {\n        originalLineNumber.appendChild(document.createTextNode(String(originalLine)));\n      } else {\n        originalLineNumber.innerText = '\\u00a0';\n      }\n      cell.appendChild(originalLineNumber);\n      const modifiedLineNumber = document.createElement('span');\n      modifiedLineNumber.style.width = modifiedLineNumbersWidth + 'px';\n      modifiedLineNumber.style.minWidth = modifiedLineNumbersWidth + 'px';\n      modifiedLineNumber.style.paddingRight = '10px';\n      modifiedLineNumber.className = 'diff-review-line-number' + lineNumbersExtraClassName;\n      if (modifiedLine !== 0) {\n        modifiedLineNumber.appendChild(document.createTextNode(String(modifiedLine)));\n      } else {\n        modifiedLineNumber.innerText = '\\u00a0';\n      }\n      cell.appendChild(modifiedLineNumber);\n      const spacer = document.createElement('span');\n      spacer.className = spacerClassName;\n      if (spacerIcon) {\n        const spacerCodicon = document.createElement('span');\n        spacerCodicon.className = ThemeIcon.asClassName(spacerIcon);\n        spacerCodicon.innerText = '\\u00a0\\u00a0';\n        spacer.appendChild(spacerCodicon);\n      } else {\n        spacer.innerText = '\\u00a0\\u00a0';\n      }\n      cell.appendChild(spacer);\n      let lineContent;\n      if (modifiedLine !== 0) {\n        let html = this._renderLine(modifiedModel, modifiedOptions, modifiedModelOpts.tabSize, modifiedLine);\n        if (DiffReview._ttPolicy) {\n          html = DiffReview._ttPolicy.createHTML(html);\n        }\n        cell.insertAdjacentHTML('beforeend', html);\n        lineContent = modifiedModel.getLineContent(modifiedLine);\n      } else {\n        let html = this._renderLine(originalModel, originalOptions, originalModelOpts.tabSize, originalLine);\n        if (DiffReview._ttPolicy) {\n          html = DiffReview._ttPolicy.createHTML(html);\n        }\n        cell.insertAdjacentHTML('beforeend', html);\n        lineContent = originalModel.getLineContent(originalLine);\n      }\n      if (lineContent.length === 0) {\n        lineContent = nls.localize('blankLine', \"blank\");\n      }\n      let ariaLabel = '';\n      switch (type) {\n        case 0 /* Equal */:\n          if (originalLine === modifiedLine) {\n            ariaLabel = nls.localize({\n              key: 'unchangedLine',\n              comment: ['The placeholders are contents of the line and should not be translated.']\n            }, \"{0} unchanged line {1}\", lineContent, originalLine);\n          } else {\n            ariaLabel = nls.localize('equalLine', \"{0} original line {1} modified line {2}\", lineContent, originalLine, modifiedLine);\n          }\n          break;\n        case 1 /* Insert */:\n          ariaLabel = nls.localize('insertLine', \"+ {0} modified line {1}\", lineContent, modifiedLine);\n          break;\n        case 2 /* Delete */:\n          ariaLabel = nls.localize('deleteLine', \"- {0} original line {1}\", lineContent, originalLine);\n          break;\n      }\n      row.setAttribute('aria-label', ariaLabel);\n      dest.appendChild(row);\n    }\n  }\n  static _renderLine(model, options, tabSize, lineNumber) {\n    const lineContent = model.getLineContent(lineNumber);\n    const fontInfo = options.get(38 /* fontInfo */);\n    const defaultMetadata = (0 /* None */ << 11 /* FONT_STYLE_OFFSET */ | 1 /* DefaultForeground */ << 14 /* FOREGROUND_OFFSET */ | 2 /* DefaultBackground */ << 23 /* BACKGROUND_OFFSET */) >>> 0;\n    const tokens = new Uint32Array(2);\n    tokens[0] = lineContent.length;\n    tokens[1] = defaultMetadata;\n    const lineTokens = new LineTokens(tokens, lineContent);\n    const isBasicASCII = ViewLineRenderingData.isBasicASCII(lineContent, model.mightContainNonBasicASCII());\n    const containsRTL = ViewLineRenderingData.containsRTL(lineContent, isBasicASCII, model.mightContainRTL());\n    const r = renderViewLine(new RenderLineInput(fontInfo.isMonospace && !options.get(26 /* disableMonospaceOptimizations */), fontInfo.canUseHalfwidthRightwardsArrow, lineContent, false, isBasicASCII, containsRTL, 0, lineTokens, [], tabSize, 0, fontInfo.spaceWidth, fontInfo.middotWidth, fontInfo.wsmiddotWidth, options.get(100 /* stopRenderingLineAfter */), options.get(83 /* renderWhitespace */), options.get(77 /* renderControlCharacters */), options.get(39 /* fontLigatures */) !== EditorFontLigatures.OFF, null));\n    return r.html;\n  }\n}\nDiffReview._ttPolicy = (_a = window.trustedTypes) === null || _a === void 0 ? void 0 : _a.createPolicy('diffReview', {\n  createHTML: value => value\n});\n// theming\nregisterThemingParticipant((theme, collector) => {\n  const lineNumbers = theme.getColor(editorLineNumbers);\n  if (lineNumbers) {\n    collector.addRule(\".monaco-diff-editor .diff-review-line-number { color: \".concat(lineNumbers, \"; }\"));\n  }\n  const shadow = theme.getColor(scrollbarShadow);\n  if (shadow) {\n    collector.addRule(\".monaco-diff-editor .diff-review-shadow { box-shadow: \".concat(shadow, \" 0 -6px 6px -6px inset; }\"));\n  }\n});\nclass DiffReviewNext extends EditorAction {\n  constructor() {\n    super({\n      id: 'editor.action.diffReview.next',\n      label: nls.localize('editor.action.diffReview.next', \"Go to Next Difference\"),\n      alias: 'Go to Next Difference',\n      precondition: ContextKeyExpr.has('isInDiffEditor'),\n      kbOpts: {\n        kbExpr: null,\n        primary: 65 /* F7 */,\n        weight: 100 /* EditorContrib */\n      }\n    });\n  }\n\n  run(accessor, editor) {\n    const diffEditor = findFocusedDiffEditor(accessor);\n    if (diffEditor) {\n      diffEditor.diffReviewNext();\n    }\n  }\n}\nclass DiffReviewPrev extends EditorAction {\n  constructor() {\n    super({\n      id: 'editor.action.diffReview.prev',\n      label: nls.localize('editor.action.diffReview.prev', \"Go to Previous Difference\"),\n      alias: 'Go to Previous Difference',\n      precondition: ContextKeyExpr.has('isInDiffEditor'),\n      kbOpts: {\n        kbExpr: null,\n        primary: 1024 /* Shift */ | 65 /* F7 */,\n        weight: 100 /* EditorContrib */\n      }\n    });\n  }\n\n  run(accessor, editor) {\n    const diffEditor = findFocusedDiffEditor(accessor);\n    if (diffEditor) {\n      diffEditor.diffReviewPrev();\n    }\n  }\n}\nfunction findFocusedDiffEditor(accessor) {\n  const codeEditorService = accessor.get(ICodeEditorService);\n  const diffEditors = codeEditorService.listDiffEditors();\n  const activeCodeEditor = codeEditorService.getActiveCodeEditor();\n  if (!activeCodeEditor) {\n    return null;\n  }\n  for (let i = 0, len = diffEditors.length; i < len; i++) {\n    const diffEditor = diffEditors[i];\n    if (diffEditor.getModifiedEditor().getId() === activeCodeEditor.getId() || diffEditor.getOriginalEditor().getId() === activeCodeEditor.getId()) {\n      return diffEditor;\n    }\n  }\n  return null;\n}\nregisterEditorAction(DiffReviewNext);\nregisterEditorAction(DiffReviewPrev);","map":{"version":3,"names":["_a","nls","dom","createFastDomNode","ActionBar","DomScrollableElement","Action","Disposable","Configuration","EditorAction","registerEditorAction","ICodeEditorService","EditorFontLigatures","LineTokens","Position","editorLineNumbers","RenderLineInput","renderViewLine2","renderViewLine","ViewLineRenderingData","ContextKeyExpr","scrollbarShadow","registerThemingParticipant","ThemeIcon","Codicon","registerIcon","DIFF_LINES_PADDING","DiffEntry","constructor","originalLineStart","originalLineEnd","modifiedLineStart","modifiedLineEnd","getType","Diff","entries","diffReviewInsertIcon","add","localize","diffReviewRemoveIcon","remove","diffReviewCloseIcon","close","DiffReview","diffEditor","_width","_diffEditor","_isVisible","shadow","document","createElement","setClassName","actionBarContainer","_actionBar","_register","domNode","push","asClassName","hide","Promise","resolve","label","icon","_content","setAttribute","scrollbar","appendChild","getDomNode","onDidUpdateDiff","_diffs","_compute","_render","getModifiedEditor","onDidChangeCursorPosition","addStandardDisposableListener","e","preventDefault","row","findParentWithClass","target","_goToRow","equals","_getNextRow","_getPrevRow","accept","_currentDiff","prev","index","currentIndex","i","len","length","_findDiffIndex","getPosition","setPosition","setSelection","startColumn","startLineNumber","endColumn","endLineNumber","doLayout","next","jumpToLineNumber","current","_getCurrentFocusedRow","lineNumber","parseInt","getAttribute","isNaN","revealPosition","updateOptions","readOnly","focus","_getFirstRow","previousElementSibling","nextElementSibling","querySelector","result","activeElement","test","className","tabIndex","scanDomNode","isVisible","layout","top","width","height","setTop","setWidth","setHeight","setDisplay","lineChanges","getLineChanges","originalModel","getOriginalEditor","getModel","modifiedModel","_mergeAdjacent","getLineCount","originalLineCount","modifiedLineCount","diffs","diffsLength","lineChange","originalStart","originalStartLineNumber","originalEnd","originalEndLineNumber","modifiedStart","modifiedStartLineNumber","modifiedEnd","modifiedEndLineNumber","r","rLength","originalEqualAbove","modifiedEqualAbove","minOriginal","minModified","prevLineChange","fromOriginal","fromModified","delta","originalEqualBelow","modifiedEqualBelow","maxOriginal","maxModified","nextLineChange","toOriginal","toModified","curr","thisDiff","currLast","thisFirst","concat","slice","pos","diff","lastModifiedLine","originalOptions","getOptions","modifiedOptions","originalModelOpts","modifiedModelOpts","clearNode","diffIndex","container","applyFontInfoSlow","get","minOriginalLine","maxOriginalLine","minModifiedLine","maxModifiedLine","diffEntry","header","cell","originalChangedLinesCnt","modifiedChangedLinesCnt","createTextNode","String","getAriaLines","lines","originalChangedLinesCntAria","modifiedChangedLinesCntAria","key","comment","lineHeight","modLine","_renderSection","dest","type","rowClassName","lineNumbersExtraClassName","spacerClassName","spacerIcon","cnt","Math","max","originalLayoutInfo","originalLineNumbersWidth","glyphMarginWidth","lineNumbersWidth","modifiedLayoutInfo","modifiedLineNumbersWidth","originalLine","modifiedLine","style","minWidth","originalLineNumber","innerText","modifiedLineNumber","paddingRight","spacer","spacerCodicon","lineContent","html","_renderLine","tabSize","_ttPolicy","createHTML","insertAdjacentHTML","getLineContent","ariaLabel","model","options","fontInfo","defaultMetadata","tokens","Uint32Array","lineTokens","isBasicASCII","mightContainNonBasicASCII","containsRTL","mightContainRTL","isMonospace","canUseHalfwidthRightwardsArrow","spaceWidth","middotWidth","wsmiddotWidth","OFF","window","trustedTypes","createPolicy","value","theme","collector","lineNumbers","getColor","addRule","DiffReviewNext","id","alias","precondition","has","kbOpts","kbExpr","primary","weight","run","accessor","editor","findFocusedDiffEditor","diffReviewNext","DiffReviewPrev","diffReviewPrev","codeEditorService","diffEditors","listDiffEditors","activeCodeEditor","getActiveCodeEditor","getId"],"sources":["C:/Users/Administrator/Desktop/sqllineage-master/sqllineagejs/node_modules/monaco-editor/esm/vs/editor/browser/widget/diffReview.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nvar _a;\r\nimport './media/diffReview.css';\r\nimport * as nls from '../../../nls.js';\r\nimport * as dom from '../../../base/browser/dom.js';\r\nimport { createFastDomNode } from '../../../base/browser/fastDomNode.js';\r\nimport { ActionBar } from '../../../base/browser/ui/actionbar/actionbar.js';\r\nimport { DomScrollableElement } from '../../../base/browser/ui/scrollbar/scrollableElement.js';\r\nimport { Action } from '../../../base/common/actions.js';\r\nimport { Disposable } from '../../../base/common/lifecycle.js';\r\nimport { Configuration } from '../config/configuration.js';\r\nimport { EditorAction, registerEditorAction } from '../editorExtensions.js';\r\nimport { ICodeEditorService } from '../services/codeEditorService.js';\r\nimport { EditorFontLigatures } from '../../common/config/editorOptions.js';\r\nimport { LineTokens } from '../../common/core/lineTokens.js';\r\nimport { Position } from '../../common/core/position.js';\r\nimport { editorLineNumbers } from '../../common/view/editorColorRegistry.js';\r\nimport { RenderLineInput, renderViewLine2 as renderViewLine } from '../../common/viewLayout/viewLineRenderer.js';\r\nimport { ViewLineRenderingData } from '../../common/viewModel/viewModel.js';\r\nimport { ContextKeyExpr } from '../../../platform/contextkey/common/contextkey.js';\r\nimport { scrollbarShadow } from '../../../platform/theme/common/colorRegistry.js';\r\nimport { registerThemingParticipant, ThemeIcon } from '../../../platform/theme/common/themeService.js';\r\nimport { Codicon } from '../../../base/common/codicons.js';\r\nimport { registerIcon } from '../../../platform/theme/common/iconRegistry.js';\r\nconst DIFF_LINES_PADDING = 3;\r\nclass DiffEntry {\r\n    constructor(originalLineStart, originalLineEnd, modifiedLineStart, modifiedLineEnd) {\r\n        this.originalLineStart = originalLineStart;\r\n        this.originalLineEnd = originalLineEnd;\r\n        this.modifiedLineStart = modifiedLineStart;\r\n        this.modifiedLineEnd = modifiedLineEnd;\r\n    }\r\n    getType() {\r\n        if (this.originalLineStart === 0) {\r\n            return 1 /* Insert */;\r\n        }\r\n        if (this.modifiedLineStart === 0) {\r\n            return 2 /* Delete */;\r\n        }\r\n        return 0 /* Equal */;\r\n    }\r\n}\r\nclass Diff {\r\n    constructor(entries) {\r\n        this.entries = entries;\r\n    }\r\n}\r\nconst diffReviewInsertIcon = registerIcon('diff-review-insert', Codicon.add, nls.localize('diffReviewInsertIcon', 'Icon for \\'Insert\\' in diff review.'));\r\nconst diffReviewRemoveIcon = registerIcon('diff-review-remove', Codicon.remove, nls.localize('diffReviewRemoveIcon', 'Icon for \\'Remove\\' in diff review.'));\r\nconst diffReviewCloseIcon = registerIcon('diff-review-close', Codicon.close, nls.localize('diffReviewCloseIcon', 'Icon for \\'Close\\' in diff review.'));\r\nexport class DiffReview extends Disposable {\r\n    constructor(diffEditor) {\r\n        super();\r\n        this._width = 0;\r\n        this._diffEditor = diffEditor;\r\n        this._isVisible = false;\r\n        this.shadow = createFastDomNode(document.createElement('div'));\r\n        this.shadow.setClassName('diff-review-shadow');\r\n        this.actionBarContainer = createFastDomNode(document.createElement('div'));\r\n        this.actionBarContainer.setClassName('diff-review-actions');\r\n        this._actionBar = this._register(new ActionBar(this.actionBarContainer.domNode));\r\n        this._actionBar.push(new Action('diffreview.close', nls.localize('label.close', \"Close\"), 'close-diff-review ' + ThemeIcon.asClassName(diffReviewCloseIcon), true, () => {\r\n            this.hide();\r\n            return Promise.resolve(null);\r\n        }), { label: false, icon: true });\r\n        this.domNode = createFastDomNode(document.createElement('div'));\r\n        this.domNode.setClassName('diff-review monaco-editor-background');\r\n        this._content = createFastDomNode(document.createElement('div'));\r\n        this._content.setClassName('diff-review-content');\r\n        this._content.setAttribute('role', 'code');\r\n        this.scrollbar = this._register(new DomScrollableElement(this._content.domNode, {}));\r\n        this.domNode.domNode.appendChild(this.scrollbar.getDomNode());\r\n        this._register(diffEditor.onDidUpdateDiff(() => {\r\n            if (!this._isVisible) {\r\n                return;\r\n            }\r\n            this._diffs = this._compute();\r\n            this._render();\r\n        }));\r\n        this._register(diffEditor.getModifiedEditor().onDidChangeCursorPosition(() => {\r\n            if (!this._isVisible) {\r\n                return;\r\n            }\r\n            this._render();\r\n        }));\r\n        this._register(dom.addStandardDisposableListener(this.domNode.domNode, 'click', (e) => {\r\n            e.preventDefault();\r\n            let row = dom.findParentWithClass(e.target, 'diff-review-row');\r\n            if (row) {\r\n                this._goToRow(row);\r\n            }\r\n        }));\r\n        this._register(dom.addStandardDisposableListener(this.domNode.domNode, 'keydown', (e) => {\r\n            if (e.equals(18 /* DownArrow */)\r\n                || e.equals(2048 /* CtrlCmd */ | 18 /* DownArrow */)\r\n                || e.equals(512 /* Alt */ | 18 /* DownArrow */)) {\r\n                e.preventDefault();\r\n                this._goToRow(this._getNextRow());\r\n            }\r\n            if (e.equals(16 /* UpArrow */)\r\n                || e.equals(2048 /* CtrlCmd */ | 16 /* UpArrow */)\r\n                || e.equals(512 /* Alt */ | 16 /* UpArrow */)) {\r\n                e.preventDefault();\r\n                this._goToRow(this._getPrevRow());\r\n            }\r\n            if (e.equals(9 /* Escape */)\r\n                || e.equals(2048 /* CtrlCmd */ | 9 /* Escape */)\r\n                || e.equals(512 /* Alt */ | 9 /* Escape */)\r\n                || e.equals(1024 /* Shift */ | 9 /* Escape */)) {\r\n                e.preventDefault();\r\n                this.hide();\r\n            }\r\n            if (e.equals(10 /* Space */)\r\n                || e.equals(3 /* Enter */)) {\r\n                e.preventDefault();\r\n                this.accept();\r\n            }\r\n        }));\r\n        this._diffs = [];\r\n        this._currentDiff = null;\r\n    }\r\n    prev() {\r\n        let index = 0;\r\n        if (!this._isVisible) {\r\n            this._diffs = this._compute();\r\n        }\r\n        if (this._isVisible) {\r\n            let currentIndex = -1;\r\n            for (let i = 0, len = this._diffs.length; i < len; i++) {\r\n                if (this._diffs[i] === this._currentDiff) {\r\n                    currentIndex = i;\r\n                    break;\r\n                }\r\n            }\r\n            index = (this._diffs.length + currentIndex - 1);\r\n        }\r\n        else {\r\n            index = this._findDiffIndex(this._diffEditor.getPosition());\r\n        }\r\n        if (this._diffs.length === 0) {\r\n            // Nothing to do\r\n            return;\r\n        }\r\n        index = index % this._diffs.length;\r\n        const entries = this._diffs[index].entries;\r\n        this._diffEditor.setPosition(new Position(entries[0].modifiedLineStart, 1));\r\n        this._diffEditor.setSelection({ startColumn: 1, startLineNumber: entries[0].modifiedLineStart, endColumn: 1073741824 /* MAX_SAFE_SMALL_INTEGER */, endLineNumber: entries[entries.length - 1].modifiedLineEnd });\r\n        this._isVisible = true;\r\n        this._diffEditor.doLayout();\r\n        this._render();\r\n        this._goToRow(this._getNextRow());\r\n    }\r\n    next() {\r\n        let index = 0;\r\n        if (!this._isVisible) {\r\n            this._diffs = this._compute();\r\n        }\r\n        if (this._isVisible) {\r\n            let currentIndex = -1;\r\n            for (let i = 0, len = this._diffs.length; i < len; i++) {\r\n                if (this._diffs[i] === this._currentDiff) {\r\n                    currentIndex = i;\r\n                    break;\r\n                }\r\n            }\r\n            index = (currentIndex + 1);\r\n        }\r\n        else {\r\n            index = this._findDiffIndex(this._diffEditor.getPosition());\r\n        }\r\n        if (this._diffs.length === 0) {\r\n            // Nothing to do\r\n            return;\r\n        }\r\n        index = index % this._diffs.length;\r\n        const entries = this._diffs[index].entries;\r\n        this._diffEditor.setPosition(new Position(entries[0].modifiedLineStart, 1));\r\n        this._diffEditor.setSelection({ startColumn: 1, startLineNumber: entries[0].modifiedLineStart, endColumn: 1073741824 /* MAX_SAFE_SMALL_INTEGER */, endLineNumber: entries[entries.length - 1].modifiedLineEnd });\r\n        this._isVisible = true;\r\n        this._diffEditor.doLayout();\r\n        this._render();\r\n        this._goToRow(this._getNextRow());\r\n    }\r\n    accept() {\r\n        let jumpToLineNumber = -1;\r\n        let current = this._getCurrentFocusedRow();\r\n        if (current) {\r\n            let lineNumber = parseInt(current.getAttribute('data-line'), 10);\r\n            if (!isNaN(lineNumber)) {\r\n                jumpToLineNumber = lineNumber;\r\n            }\r\n        }\r\n        this.hide();\r\n        if (jumpToLineNumber !== -1) {\r\n            this._diffEditor.setPosition(new Position(jumpToLineNumber, 1));\r\n            this._diffEditor.revealPosition(new Position(jumpToLineNumber, 1), 1 /* Immediate */);\r\n        }\r\n    }\r\n    hide() {\r\n        this._isVisible = false;\r\n        this._diffEditor.updateOptions({ readOnly: false });\r\n        this._diffEditor.focus();\r\n        this._diffEditor.doLayout();\r\n        this._render();\r\n    }\r\n    _getPrevRow() {\r\n        let current = this._getCurrentFocusedRow();\r\n        if (!current) {\r\n            return this._getFirstRow();\r\n        }\r\n        if (current.previousElementSibling) {\r\n            return current.previousElementSibling;\r\n        }\r\n        return current;\r\n    }\r\n    _getNextRow() {\r\n        let current = this._getCurrentFocusedRow();\r\n        if (!current) {\r\n            return this._getFirstRow();\r\n        }\r\n        if (current.nextElementSibling) {\r\n            return current.nextElementSibling;\r\n        }\r\n        return current;\r\n    }\r\n    _getFirstRow() {\r\n        return this.domNode.domNode.querySelector('.diff-review-row');\r\n    }\r\n    _getCurrentFocusedRow() {\r\n        let result = document.activeElement;\r\n        if (result && /diff-review-row/.test(result.className)) {\r\n            return result;\r\n        }\r\n        return null;\r\n    }\r\n    _goToRow(row) {\r\n        let prev = this._getCurrentFocusedRow();\r\n        row.tabIndex = 0;\r\n        row.focus();\r\n        if (prev && prev !== row) {\r\n            prev.tabIndex = -1;\r\n        }\r\n        this.scrollbar.scanDomNode();\r\n    }\r\n    isVisible() {\r\n        return this._isVisible;\r\n    }\r\n    layout(top, width, height) {\r\n        this._width = width;\r\n        this.shadow.setTop(top - 6);\r\n        this.shadow.setWidth(width);\r\n        this.shadow.setHeight(this._isVisible ? 6 : 0);\r\n        this.domNode.setTop(top);\r\n        this.domNode.setWidth(width);\r\n        this.domNode.setHeight(height);\r\n        this._content.setHeight(height);\r\n        this._content.setWidth(width);\r\n        if (this._isVisible) {\r\n            this.actionBarContainer.setAttribute('aria-hidden', 'false');\r\n            this.actionBarContainer.setDisplay('block');\r\n        }\r\n        else {\r\n            this.actionBarContainer.setAttribute('aria-hidden', 'true');\r\n            this.actionBarContainer.setDisplay('none');\r\n        }\r\n    }\r\n    _compute() {\r\n        const lineChanges = this._diffEditor.getLineChanges();\r\n        if (!lineChanges || lineChanges.length === 0) {\r\n            return [];\r\n        }\r\n        const originalModel = this._diffEditor.getOriginalEditor().getModel();\r\n        const modifiedModel = this._diffEditor.getModifiedEditor().getModel();\r\n        if (!originalModel || !modifiedModel) {\r\n            return [];\r\n        }\r\n        return DiffReview._mergeAdjacent(lineChanges, originalModel.getLineCount(), modifiedModel.getLineCount());\r\n    }\r\n    static _mergeAdjacent(lineChanges, originalLineCount, modifiedLineCount) {\r\n        if (!lineChanges || lineChanges.length === 0) {\r\n            return [];\r\n        }\r\n        let diffs = [], diffsLength = 0;\r\n        for (let i = 0, len = lineChanges.length; i < len; i++) {\r\n            const lineChange = lineChanges[i];\r\n            const originalStart = lineChange.originalStartLineNumber;\r\n            const originalEnd = lineChange.originalEndLineNumber;\r\n            const modifiedStart = lineChange.modifiedStartLineNumber;\r\n            const modifiedEnd = lineChange.modifiedEndLineNumber;\r\n            let r = [], rLength = 0;\r\n            // Emit before anchors\r\n            {\r\n                const originalEqualAbove = (originalEnd === 0 ? originalStart : originalStart - 1);\r\n                const modifiedEqualAbove = (modifiedEnd === 0 ? modifiedStart : modifiedStart - 1);\r\n                // Make sure we don't step into the previous diff\r\n                let minOriginal = 1;\r\n                let minModified = 1;\r\n                if (i > 0) {\r\n                    const prevLineChange = lineChanges[i - 1];\r\n                    if (prevLineChange.originalEndLineNumber === 0) {\r\n                        minOriginal = prevLineChange.originalStartLineNumber + 1;\r\n                    }\r\n                    else {\r\n                        minOriginal = prevLineChange.originalEndLineNumber + 1;\r\n                    }\r\n                    if (prevLineChange.modifiedEndLineNumber === 0) {\r\n                        minModified = prevLineChange.modifiedStartLineNumber + 1;\r\n                    }\r\n                    else {\r\n                        minModified = prevLineChange.modifiedEndLineNumber + 1;\r\n                    }\r\n                }\r\n                let fromOriginal = originalEqualAbove - DIFF_LINES_PADDING + 1;\r\n                let fromModified = modifiedEqualAbove - DIFF_LINES_PADDING + 1;\r\n                if (fromOriginal < minOriginal) {\r\n                    const delta = minOriginal - fromOriginal;\r\n                    fromOriginal = fromOriginal + delta;\r\n                    fromModified = fromModified + delta;\r\n                }\r\n                if (fromModified < minModified) {\r\n                    const delta = minModified - fromModified;\r\n                    fromOriginal = fromOriginal + delta;\r\n                    fromModified = fromModified + delta;\r\n                }\r\n                r[rLength++] = new DiffEntry(fromOriginal, originalEqualAbove, fromModified, modifiedEqualAbove);\r\n            }\r\n            // Emit deleted lines\r\n            {\r\n                if (originalEnd !== 0) {\r\n                    r[rLength++] = new DiffEntry(originalStart, originalEnd, 0, 0);\r\n                }\r\n            }\r\n            // Emit inserted lines\r\n            {\r\n                if (modifiedEnd !== 0) {\r\n                    r[rLength++] = new DiffEntry(0, 0, modifiedStart, modifiedEnd);\r\n                }\r\n            }\r\n            // Emit after anchors\r\n            {\r\n                const originalEqualBelow = (originalEnd === 0 ? originalStart + 1 : originalEnd + 1);\r\n                const modifiedEqualBelow = (modifiedEnd === 0 ? modifiedStart + 1 : modifiedEnd + 1);\r\n                // Make sure we don't step into the next diff\r\n                let maxOriginal = originalLineCount;\r\n                let maxModified = modifiedLineCount;\r\n                if (i + 1 < len) {\r\n                    const nextLineChange = lineChanges[i + 1];\r\n                    if (nextLineChange.originalEndLineNumber === 0) {\r\n                        maxOriginal = nextLineChange.originalStartLineNumber;\r\n                    }\r\n                    else {\r\n                        maxOriginal = nextLineChange.originalStartLineNumber - 1;\r\n                    }\r\n                    if (nextLineChange.modifiedEndLineNumber === 0) {\r\n                        maxModified = nextLineChange.modifiedStartLineNumber;\r\n                    }\r\n                    else {\r\n                        maxModified = nextLineChange.modifiedStartLineNumber - 1;\r\n                    }\r\n                }\r\n                let toOriginal = originalEqualBelow + DIFF_LINES_PADDING - 1;\r\n                let toModified = modifiedEqualBelow + DIFF_LINES_PADDING - 1;\r\n                if (toOriginal > maxOriginal) {\r\n                    const delta = maxOriginal - toOriginal;\r\n                    toOriginal = toOriginal + delta;\r\n                    toModified = toModified + delta;\r\n                }\r\n                if (toModified > maxModified) {\r\n                    const delta = maxModified - toModified;\r\n                    toOriginal = toOriginal + delta;\r\n                    toModified = toModified + delta;\r\n                }\r\n                r[rLength++] = new DiffEntry(originalEqualBelow, toOriginal, modifiedEqualBelow, toModified);\r\n            }\r\n            diffs[diffsLength++] = new Diff(r);\r\n        }\r\n        // Merge adjacent diffs\r\n        let curr = diffs[0].entries;\r\n        let r = [], rLength = 0;\r\n        for (let i = 1, len = diffs.length; i < len; i++) {\r\n            const thisDiff = diffs[i].entries;\r\n            const currLast = curr[curr.length - 1];\r\n            const thisFirst = thisDiff[0];\r\n            if (currLast.getType() === 0 /* Equal */\r\n                && thisFirst.getType() === 0 /* Equal */\r\n                && thisFirst.originalLineStart <= currLast.originalLineEnd) {\r\n                // We are dealing with equal lines that overlap\r\n                curr[curr.length - 1] = new DiffEntry(currLast.originalLineStart, thisFirst.originalLineEnd, currLast.modifiedLineStart, thisFirst.modifiedLineEnd);\r\n                curr = curr.concat(thisDiff.slice(1));\r\n                continue;\r\n            }\r\n            r[rLength++] = new Diff(curr);\r\n            curr = thisDiff;\r\n        }\r\n        r[rLength++] = new Diff(curr);\r\n        return r;\r\n    }\r\n    _findDiffIndex(pos) {\r\n        const lineNumber = pos.lineNumber;\r\n        for (let i = 0, len = this._diffs.length; i < len; i++) {\r\n            const diff = this._diffs[i].entries;\r\n            const lastModifiedLine = diff[diff.length - 1].modifiedLineEnd;\r\n            if (lineNumber <= lastModifiedLine) {\r\n                return i;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n    _render() {\r\n        const originalOptions = this._diffEditor.getOriginalEditor().getOptions();\r\n        const modifiedOptions = this._diffEditor.getModifiedEditor().getOptions();\r\n        const originalModel = this._diffEditor.getOriginalEditor().getModel();\r\n        const modifiedModel = this._diffEditor.getModifiedEditor().getModel();\r\n        const originalModelOpts = originalModel.getOptions();\r\n        const modifiedModelOpts = modifiedModel.getOptions();\r\n        if (!this._isVisible || !originalModel || !modifiedModel) {\r\n            dom.clearNode(this._content.domNode);\r\n            this._currentDiff = null;\r\n            this.scrollbar.scanDomNode();\r\n            return;\r\n        }\r\n        this._diffEditor.updateOptions({ readOnly: true });\r\n        const diffIndex = this._findDiffIndex(this._diffEditor.getPosition());\r\n        if (this._diffs[diffIndex] === this._currentDiff) {\r\n            return;\r\n        }\r\n        this._currentDiff = this._diffs[diffIndex];\r\n        const diffs = this._diffs[diffIndex].entries;\r\n        let container = document.createElement('div');\r\n        container.className = 'diff-review-table';\r\n        container.setAttribute('role', 'list');\r\n        container.setAttribute('aria-label', 'Difference review. Use \"Stage | Unstage | Revert Selected Ranges\" commands');\r\n        Configuration.applyFontInfoSlow(container, modifiedOptions.get(38 /* fontInfo */));\r\n        let minOriginalLine = 0;\r\n        let maxOriginalLine = 0;\r\n        let minModifiedLine = 0;\r\n        let maxModifiedLine = 0;\r\n        for (let i = 0, len = diffs.length; i < len; i++) {\r\n            const diffEntry = diffs[i];\r\n            const originalLineStart = diffEntry.originalLineStart;\r\n            const originalLineEnd = diffEntry.originalLineEnd;\r\n            const modifiedLineStart = diffEntry.modifiedLineStart;\r\n            const modifiedLineEnd = diffEntry.modifiedLineEnd;\r\n            if (originalLineStart !== 0 && ((minOriginalLine === 0 || originalLineStart < minOriginalLine))) {\r\n                minOriginalLine = originalLineStart;\r\n            }\r\n            if (originalLineEnd !== 0 && ((maxOriginalLine === 0 || originalLineEnd > maxOriginalLine))) {\r\n                maxOriginalLine = originalLineEnd;\r\n            }\r\n            if (modifiedLineStart !== 0 && ((minModifiedLine === 0 || modifiedLineStart < minModifiedLine))) {\r\n                minModifiedLine = modifiedLineStart;\r\n            }\r\n            if (modifiedLineEnd !== 0 && ((maxModifiedLine === 0 || modifiedLineEnd > maxModifiedLine))) {\r\n                maxModifiedLine = modifiedLineEnd;\r\n            }\r\n        }\r\n        let header = document.createElement('div');\r\n        header.className = 'diff-review-row';\r\n        let cell = document.createElement('div');\r\n        cell.className = 'diff-review-cell diff-review-summary';\r\n        const originalChangedLinesCnt = maxOriginalLine - minOriginalLine + 1;\r\n        const modifiedChangedLinesCnt = maxModifiedLine - minModifiedLine + 1;\r\n        cell.appendChild(document.createTextNode(`${diffIndex + 1}/${this._diffs.length}: @@ -${minOriginalLine},${originalChangedLinesCnt} +${minModifiedLine},${modifiedChangedLinesCnt} @@`));\r\n        header.setAttribute('data-line', String(minModifiedLine));\r\n        const getAriaLines = (lines) => {\r\n            if (lines === 0) {\r\n                return nls.localize('no_lines_changed', \"no lines changed\");\r\n            }\r\n            else if (lines === 1) {\r\n                return nls.localize('one_line_changed', \"1 line changed\");\r\n            }\r\n            else {\r\n                return nls.localize('more_lines_changed', \"{0} lines changed\", lines);\r\n            }\r\n        };\r\n        const originalChangedLinesCntAria = getAriaLines(originalChangedLinesCnt);\r\n        const modifiedChangedLinesCntAria = getAriaLines(modifiedChangedLinesCnt);\r\n        header.setAttribute('aria-label', nls.localize({\r\n            key: 'header',\r\n            comment: [\r\n                'This is the ARIA label for a git diff header.',\r\n                'A git diff header looks like this: @@ -154,12 +159,39 @@.',\r\n                'That encodes that at original line 154 (which is now line 159), 12 lines were removed/changed with 39 lines.',\r\n                'Variables 0 and 1 refer to the diff index out of total number of diffs.',\r\n                'Variables 2 and 4 will be numbers (a line number).',\r\n                'Variables 3 and 5 will be \"no lines changed\", \"1 line changed\" or \"X lines changed\", localized separately.'\r\n            ]\r\n        }, \"Difference {0} of {1}: original line {2}, {3}, modified line {4}, {5}\", (diffIndex + 1), this._diffs.length, minOriginalLine, originalChangedLinesCntAria, minModifiedLine, modifiedChangedLinesCntAria));\r\n        header.appendChild(cell);\r\n        // @@ -504,7 +517,7 @@\r\n        header.setAttribute('role', 'listitem');\r\n        container.appendChild(header);\r\n        const lineHeight = modifiedOptions.get(53 /* lineHeight */);\r\n        let modLine = minModifiedLine;\r\n        for (let i = 0, len = diffs.length; i < len; i++) {\r\n            const diffEntry = diffs[i];\r\n            DiffReview._renderSection(container, diffEntry, modLine, lineHeight, this._width, originalOptions, originalModel, originalModelOpts, modifiedOptions, modifiedModel, modifiedModelOpts);\r\n            if (diffEntry.modifiedLineStart !== 0) {\r\n                modLine = diffEntry.modifiedLineEnd;\r\n            }\r\n        }\r\n        dom.clearNode(this._content.domNode);\r\n        this._content.domNode.appendChild(container);\r\n        this.scrollbar.scanDomNode();\r\n    }\r\n    static _renderSection(dest, diffEntry, modLine, lineHeight, width, originalOptions, originalModel, originalModelOpts, modifiedOptions, modifiedModel, modifiedModelOpts) {\r\n        const type = diffEntry.getType();\r\n        let rowClassName = 'diff-review-row';\r\n        let lineNumbersExtraClassName = '';\r\n        const spacerClassName = 'diff-review-spacer';\r\n        let spacerIcon = null;\r\n        switch (type) {\r\n            case 1 /* Insert */:\r\n                rowClassName = 'diff-review-row line-insert';\r\n                lineNumbersExtraClassName = ' char-insert';\r\n                spacerIcon = diffReviewInsertIcon;\r\n                break;\r\n            case 2 /* Delete */:\r\n                rowClassName = 'diff-review-row line-delete';\r\n                lineNumbersExtraClassName = ' char-delete';\r\n                spacerIcon = diffReviewRemoveIcon;\r\n                break;\r\n        }\r\n        const originalLineStart = diffEntry.originalLineStart;\r\n        const originalLineEnd = diffEntry.originalLineEnd;\r\n        const modifiedLineStart = diffEntry.modifiedLineStart;\r\n        const modifiedLineEnd = diffEntry.modifiedLineEnd;\r\n        const cnt = Math.max(modifiedLineEnd - modifiedLineStart, originalLineEnd - originalLineStart);\r\n        const originalLayoutInfo = originalOptions.get(124 /* layoutInfo */);\r\n        const originalLineNumbersWidth = originalLayoutInfo.glyphMarginWidth + originalLayoutInfo.lineNumbersWidth;\r\n        const modifiedLayoutInfo = modifiedOptions.get(124 /* layoutInfo */);\r\n        const modifiedLineNumbersWidth = 10 + modifiedLayoutInfo.glyphMarginWidth + modifiedLayoutInfo.lineNumbersWidth;\r\n        for (let i = 0; i <= cnt; i++) {\r\n            const originalLine = (originalLineStart === 0 ? 0 : originalLineStart + i);\r\n            const modifiedLine = (modifiedLineStart === 0 ? 0 : modifiedLineStart + i);\r\n            const row = document.createElement('div');\r\n            row.style.minWidth = width + 'px';\r\n            row.className = rowClassName;\r\n            row.setAttribute('role', 'listitem');\r\n            if (modifiedLine !== 0) {\r\n                modLine = modifiedLine;\r\n            }\r\n            row.setAttribute('data-line', String(modLine));\r\n            let cell = document.createElement('div');\r\n            cell.className = 'diff-review-cell';\r\n            cell.style.height = `${lineHeight}px`;\r\n            row.appendChild(cell);\r\n            const originalLineNumber = document.createElement('span');\r\n            originalLineNumber.style.width = (originalLineNumbersWidth + 'px');\r\n            originalLineNumber.style.minWidth = (originalLineNumbersWidth + 'px');\r\n            originalLineNumber.className = 'diff-review-line-number' + lineNumbersExtraClassName;\r\n            if (originalLine !== 0) {\r\n                originalLineNumber.appendChild(document.createTextNode(String(originalLine)));\r\n            }\r\n            else {\r\n                originalLineNumber.innerText = '\\u00a0';\r\n            }\r\n            cell.appendChild(originalLineNumber);\r\n            const modifiedLineNumber = document.createElement('span');\r\n            modifiedLineNumber.style.width = (modifiedLineNumbersWidth + 'px');\r\n            modifiedLineNumber.style.minWidth = (modifiedLineNumbersWidth + 'px');\r\n            modifiedLineNumber.style.paddingRight = '10px';\r\n            modifiedLineNumber.className = 'diff-review-line-number' + lineNumbersExtraClassName;\r\n            if (modifiedLine !== 0) {\r\n                modifiedLineNumber.appendChild(document.createTextNode(String(modifiedLine)));\r\n            }\r\n            else {\r\n                modifiedLineNumber.innerText = '\\u00a0';\r\n            }\r\n            cell.appendChild(modifiedLineNumber);\r\n            const spacer = document.createElement('span');\r\n            spacer.className = spacerClassName;\r\n            if (spacerIcon) {\r\n                const spacerCodicon = document.createElement('span');\r\n                spacerCodicon.className = ThemeIcon.asClassName(spacerIcon);\r\n                spacerCodicon.innerText = '\\u00a0\\u00a0';\r\n                spacer.appendChild(spacerCodicon);\r\n            }\r\n            else {\r\n                spacer.innerText = '\\u00a0\\u00a0';\r\n            }\r\n            cell.appendChild(spacer);\r\n            let lineContent;\r\n            if (modifiedLine !== 0) {\r\n                let html = this._renderLine(modifiedModel, modifiedOptions, modifiedModelOpts.tabSize, modifiedLine);\r\n                if (DiffReview._ttPolicy) {\r\n                    html = DiffReview._ttPolicy.createHTML(html);\r\n                }\r\n                cell.insertAdjacentHTML('beforeend', html);\r\n                lineContent = modifiedModel.getLineContent(modifiedLine);\r\n            }\r\n            else {\r\n                let html = this._renderLine(originalModel, originalOptions, originalModelOpts.tabSize, originalLine);\r\n                if (DiffReview._ttPolicy) {\r\n                    html = DiffReview._ttPolicy.createHTML(html);\r\n                }\r\n                cell.insertAdjacentHTML('beforeend', html);\r\n                lineContent = originalModel.getLineContent(originalLine);\r\n            }\r\n            if (lineContent.length === 0) {\r\n                lineContent = nls.localize('blankLine', \"blank\");\r\n            }\r\n            let ariaLabel = '';\r\n            switch (type) {\r\n                case 0 /* Equal */:\r\n                    if (originalLine === modifiedLine) {\r\n                        ariaLabel = nls.localize({ key: 'unchangedLine', comment: ['The placeholders are contents of the line and should not be translated.'] }, \"{0} unchanged line {1}\", lineContent, originalLine);\r\n                    }\r\n                    else {\r\n                        ariaLabel = nls.localize('equalLine', \"{0} original line {1} modified line {2}\", lineContent, originalLine, modifiedLine);\r\n                    }\r\n                    break;\r\n                case 1 /* Insert */:\r\n                    ariaLabel = nls.localize('insertLine', \"+ {0} modified line {1}\", lineContent, modifiedLine);\r\n                    break;\r\n                case 2 /* Delete */:\r\n                    ariaLabel = nls.localize('deleteLine', \"- {0} original line {1}\", lineContent, originalLine);\r\n                    break;\r\n            }\r\n            row.setAttribute('aria-label', ariaLabel);\r\n            dest.appendChild(row);\r\n        }\r\n    }\r\n    static _renderLine(model, options, tabSize, lineNumber) {\r\n        const lineContent = model.getLineContent(lineNumber);\r\n        const fontInfo = options.get(38 /* fontInfo */);\r\n        const defaultMetadata = ((0 /* None */ << 11 /* FONT_STYLE_OFFSET */)\r\n            | (1 /* DefaultForeground */ << 14 /* FOREGROUND_OFFSET */)\r\n            | (2 /* DefaultBackground */ << 23 /* BACKGROUND_OFFSET */)) >>> 0;\r\n        const tokens = new Uint32Array(2);\r\n        tokens[0] = lineContent.length;\r\n        tokens[1] = defaultMetadata;\r\n        const lineTokens = new LineTokens(tokens, lineContent);\r\n        const isBasicASCII = ViewLineRenderingData.isBasicASCII(lineContent, model.mightContainNonBasicASCII());\r\n        const containsRTL = ViewLineRenderingData.containsRTL(lineContent, isBasicASCII, model.mightContainRTL());\r\n        const r = renderViewLine(new RenderLineInput((fontInfo.isMonospace && !options.get(26 /* disableMonospaceOptimizations */)), fontInfo.canUseHalfwidthRightwardsArrow, lineContent, false, isBasicASCII, containsRTL, 0, lineTokens, [], tabSize, 0, fontInfo.spaceWidth, fontInfo.middotWidth, fontInfo.wsmiddotWidth, options.get(100 /* stopRenderingLineAfter */), options.get(83 /* renderWhitespace */), options.get(77 /* renderControlCharacters */), options.get(39 /* fontLigatures */) !== EditorFontLigatures.OFF, null));\r\n        return r.html;\r\n    }\r\n}\r\nDiffReview._ttPolicy = (_a = window.trustedTypes) === null || _a === void 0 ? void 0 : _a.createPolicy('diffReview', { createHTML: value => value });\r\n// theming\r\nregisterThemingParticipant((theme, collector) => {\r\n    const lineNumbers = theme.getColor(editorLineNumbers);\r\n    if (lineNumbers) {\r\n        collector.addRule(`.monaco-diff-editor .diff-review-line-number { color: ${lineNumbers}; }`);\r\n    }\r\n    const shadow = theme.getColor(scrollbarShadow);\r\n    if (shadow) {\r\n        collector.addRule(`.monaco-diff-editor .diff-review-shadow { box-shadow: ${shadow} 0 -6px 6px -6px inset; }`);\r\n    }\r\n});\r\nclass DiffReviewNext extends EditorAction {\r\n    constructor() {\r\n        super({\r\n            id: 'editor.action.diffReview.next',\r\n            label: nls.localize('editor.action.diffReview.next', \"Go to Next Difference\"),\r\n            alias: 'Go to Next Difference',\r\n            precondition: ContextKeyExpr.has('isInDiffEditor'),\r\n            kbOpts: {\r\n                kbExpr: null,\r\n                primary: 65 /* F7 */,\r\n                weight: 100 /* EditorContrib */\r\n            }\r\n        });\r\n    }\r\n    run(accessor, editor) {\r\n        const diffEditor = findFocusedDiffEditor(accessor);\r\n        if (diffEditor) {\r\n            diffEditor.diffReviewNext();\r\n        }\r\n    }\r\n}\r\nclass DiffReviewPrev extends EditorAction {\r\n    constructor() {\r\n        super({\r\n            id: 'editor.action.diffReview.prev',\r\n            label: nls.localize('editor.action.diffReview.prev', \"Go to Previous Difference\"),\r\n            alias: 'Go to Previous Difference',\r\n            precondition: ContextKeyExpr.has('isInDiffEditor'),\r\n            kbOpts: {\r\n                kbExpr: null,\r\n                primary: 1024 /* Shift */ | 65 /* F7 */,\r\n                weight: 100 /* EditorContrib */\r\n            }\r\n        });\r\n    }\r\n    run(accessor, editor) {\r\n        const diffEditor = findFocusedDiffEditor(accessor);\r\n        if (diffEditor) {\r\n            diffEditor.diffReviewPrev();\r\n        }\r\n    }\r\n}\r\nfunction findFocusedDiffEditor(accessor) {\r\n    const codeEditorService = accessor.get(ICodeEditorService);\r\n    const diffEditors = codeEditorService.listDiffEditors();\r\n    const activeCodeEditor = codeEditorService.getActiveCodeEditor();\r\n    if (!activeCodeEditor) {\r\n        return null;\r\n    }\r\n    for (let i = 0, len = diffEditors.length; i < len; i++) {\r\n        const diffEditor = diffEditors[i];\r\n        if (diffEditor.getModifiedEditor().getId() === activeCodeEditor.getId() || diffEditor.getOriginalEditor().getId() === activeCodeEditor.getId()) {\r\n            return diffEditor;\r\n        }\r\n    }\r\n    return null;\r\n}\r\nregisterEditorAction(DiffReviewNext);\r\nregisterEditorAction(DiffReviewPrev);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}