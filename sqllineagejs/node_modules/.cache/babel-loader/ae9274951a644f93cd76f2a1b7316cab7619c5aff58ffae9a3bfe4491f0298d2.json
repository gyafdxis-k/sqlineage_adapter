{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { Position } from './position.js';\nimport { Range } from './range.js';\n/**\r\n * A selection in the editor.\r\n * The selection is a range that has an orientation.\r\n */\nexport class Selection extends Range {\n  constructor(selectionStartLineNumber, selectionStartColumn, positionLineNumber, positionColumn) {\n    super(selectionStartLineNumber, selectionStartColumn, positionLineNumber, positionColumn);\n    this.selectionStartLineNumber = selectionStartLineNumber;\n    this.selectionStartColumn = selectionStartColumn;\n    this.positionLineNumber = positionLineNumber;\n    this.positionColumn = positionColumn;\n  }\n  /**\r\n   * Transform to a human-readable representation.\r\n   */\n  toString() {\n    return '[' + this.selectionStartLineNumber + ',' + this.selectionStartColumn + ' -> ' + this.positionLineNumber + ',' + this.positionColumn + ']';\n  }\n  /**\r\n   * Test if equals other selection.\r\n   */\n  equalsSelection(other) {\n    return Selection.selectionsEqual(this, other);\n  }\n  /**\r\n   * Test if the two selections are equal.\r\n   */\n  static selectionsEqual(a, b) {\n    return a.selectionStartLineNumber === b.selectionStartLineNumber && a.selectionStartColumn === b.selectionStartColumn && a.positionLineNumber === b.positionLineNumber && a.positionColumn === b.positionColumn;\n  }\n  /**\r\n   * Get directions (LTR or RTL).\r\n   */\n  getDirection() {\n    if (this.selectionStartLineNumber === this.startLineNumber && this.selectionStartColumn === this.startColumn) {\n      return 0 /* LTR */;\n    }\n\n    return 1 /* RTL */;\n  }\n  /**\r\n   * Create a new selection with a different `positionLineNumber` and `positionColumn`.\r\n   */\n  setEndPosition(endLineNumber, endColumn) {\n    if (this.getDirection() === 0 /* LTR */) {\n      return new Selection(this.startLineNumber, this.startColumn, endLineNumber, endColumn);\n    }\n    return new Selection(endLineNumber, endColumn, this.startLineNumber, this.startColumn);\n  }\n  /**\r\n   * Get the position at `positionLineNumber` and `positionColumn`.\r\n   */\n  getPosition() {\n    return new Position(this.positionLineNumber, this.positionColumn);\n  }\n  /**\r\n   * Create a new selection with a different `selectionStartLineNumber` and `selectionStartColumn`.\r\n   */\n  setStartPosition(startLineNumber, startColumn) {\n    if (this.getDirection() === 0 /* LTR */) {\n      return new Selection(startLineNumber, startColumn, this.endLineNumber, this.endColumn);\n    }\n    return new Selection(this.endLineNumber, this.endColumn, startLineNumber, startColumn);\n  }\n  // ----\n  /**\r\n   * Create a `Selection` from one or two positions\r\n   */\n  static fromPositions(start) {\n    let end = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : start;\n    return new Selection(start.lineNumber, start.column, end.lineNumber, end.column);\n  }\n  /**\r\n   * Create a `Selection` from an `ISelection`.\r\n   */\n  static liftSelection(sel) {\n    return new Selection(sel.selectionStartLineNumber, sel.selectionStartColumn, sel.positionLineNumber, sel.positionColumn);\n  }\n  /**\r\n   * `a` equals `b`.\r\n   */\n  static selectionsArrEqual(a, b) {\n    if (a && !b || !a && b) {\n      return false;\n    }\n    if (!a && !b) {\n      return true;\n    }\n    if (a.length !== b.length) {\n      return false;\n    }\n    for (let i = 0, len = a.length; i < len; i++) {\n      if (!this.selectionsEqual(a[i], b[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n  /**\r\n   * Test if `obj` is an `ISelection`.\r\n   */\n  static isISelection(obj) {\n    return obj && typeof obj.selectionStartLineNumber === 'number' && typeof obj.selectionStartColumn === 'number' && typeof obj.positionLineNumber === 'number' && typeof obj.positionColumn === 'number';\n  }\n  /**\r\n   * Create with a direction.\r\n   */\n  static createWithDirection(startLineNumber, startColumn, endLineNumber, endColumn, direction) {\n    if (direction === 0 /* LTR */) {\n      return new Selection(startLineNumber, startColumn, endLineNumber, endColumn);\n    }\n    return new Selection(endLineNumber, endColumn, startLineNumber, startColumn);\n  }\n}","map":{"version":3,"names":["Position","Range","Selection","constructor","selectionStartLineNumber","selectionStartColumn","positionLineNumber","positionColumn","toString","equalsSelection","other","selectionsEqual","a","b","getDirection","startLineNumber","startColumn","setEndPosition","endLineNumber","endColumn","getPosition","setStartPosition","fromPositions","start","end","arguments","length","undefined","lineNumber","column","liftSelection","sel","selectionsArrEqual","i","len","isISelection","obj","createWithDirection","direction"],"sources":["C:/Users/Administrator/Desktop/sqllineage-master/sqllineagejs/node_modules/monaco-editor/esm/vs/editor/common/core/selection.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { Position } from './position.js';\r\nimport { Range } from './range.js';\r\n/**\r\n * A selection in the editor.\r\n * The selection is a range that has an orientation.\r\n */\r\nexport class Selection extends Range {\r\n    constructor(selectionStartLineNumber, selectionStartColumn, positionLineNumber, positionColumn) {\r\n        super(selectionStartLineNumber, selectionStartColumn, positionLineNumber, positionColumn);\r\n        this.selectionStartLineNumber = selectionStartLineNumber;\r\n        this.selectionStartColumn = selectionStartColumn;\r\n        this.positionLineNumber = positionLineNumber;\r\n        this.positionColumn = positionColumn;\r\n    }\r\n    /**\r\n     * Transform to a human-readable representation.\r\n     */\r\n    toString() {\r\n        return '[' + this.selectionStartLineNumber + ',' + this.selectionStartColumn + ' -> ' + this.positionLineNumber + ',' + this.positionColumn + ']';\r\n    }\r\n    /**\r\n     * Test if equals other selection.\r\n     */\r\n    equalsSelection(other) {\r\n        return (Selection.selectionsEqual(this, other));\r\n    }\r\n    /**\r\n     * Test if the two selections are equal.\r\n     */\r\n    static selectionsEqual(a, b) {\r\n        return (a.selectionStartLineNumber === b.selectionStartLineNumber &&\r\n            a.selectionStartColumn === b.selectionStartColumn &&\r\n            a.positionLineNumber === b.positionLineNumber &&\r\n            a.positionColumn === b.positionColumn);\r\n    }\r\n    /**\r\n     * Get directions (LTR or RTL).\r\n     */\r\n    getDirection() {\r\n        if (this.selectionStartLineNumber === this.startLineNumber && this.selectionStartColumn === this.startColumn) {\r\n            return 0 /* LTR */;\r\n        }\r\n        return 1 /* RTL */;\r\n    }\r\n    /**\r\n     * Create a new selection with a different `positionLineNumber` and `positionColumn`.\r\n     */\r\n    setEndPosition(endLineNumber, endColumn) {\r\n        if (this.getDirection() === 0 /* LTR */) {\r\n            return new Selection(this.startLineNumber, this.startColumn, endLineNumber, endColumn);\r\n        }\r\n        return new Selection(endLineNumber, endColumn, this.startLineNumber, this.startColumn);\r\n    }\r\n    /**\r\n     * Get the position at `positionLineNumber` and `positionColumn`.\r\n     */\r\n    getPosition() {\r\n        return new Position(this.positionLineNumber, this.positionColumn);\r\n    }\r\n    /**\r\n     * Create a new selection with a different `selectionStartLineNumber` and `selectionStartColumn`.\r\n     */\r\n    setStartPosition(startLineNumber, startColumn) {\r\n        if (this.getDirection() === 0 /* LTR */) {\r\n            return new Selection(startLineNumber, startColumn, this.endLineNumber, this.endColumn);\r\n        }\r\n        return new Selection(this.endLineNumber, this.endColumn, startLineNumber, startColumn);\r\n    }\r\n    // ----\r\n    /**\r\n     * Create a `Selection` from one or two positions\r\n     */\r\n    static fromPositions(start, end = start) {\r\n        return new Selection(start.lineNumber, start.column, end.lineNumber, end.column);\r\n    }\r\n    /**\r\n     * Create a `Selection` from an `ISelection`.\r\n     */\r\n    static liftSelection(sel) {\r\n        return new Selection(sel.selectionStartLineNumber, sel.selectionStartColumn, sel.positionLineNumber, sel.positionColumn);\r\n    }\r\n    /**\r\n     * `a` equals `b`.\r\n     */\r\n    static selectionsArrEqual(a, b) {\r\n        if (a && !b || !a && b) {\r\n            return false;\r\n        }\r\n        if (!a && !b) {\r\n            return true;\r\n        }\r\n        if (a.length !== b.length) {\r\n            return false;\r\n        }\r\n        for (let i = 0, len = a.length; i < len; i++) {\r\n            if (!this.selectionsEqual(a[i], b[i])) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * Test if `obj` is an `ISelection`.\r\n     */\r\n    static isISelection(obj) {\r\n        return (obj\r\n            && (typeof obj.selectionStartLineNumber === 'number')\r\n            && (typeof obj.selectionStartColumn === 'number')\r\n            && (typeof obj.positionLineNumber === 'number')\r\n            && (typeof obj.positionColumn === 'number'));\r\n    }\r\n    /**\r\n     * Create with a direction.\r\n     */\r\n    static createWithDirection(startLineNumber, startColumn, endLineNumber, endColumn, direction) {\r\n        if (direction === 0 /* LTR */) {\r\n            return new Selection(startLineNumber, startColumn, endLineNumber, endColumn);\r\n        }\r\n        return new Selection(endLineNumber, endColumn, startLineNumber, startColumn);\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}