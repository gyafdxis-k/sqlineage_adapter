{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { getCharIndex } from './minimapCharSheet.js';\nimport { toUint8 } from '../../../../base/common/uint.js';\nexport class MinimapCharRenderer {\n  constructor(charData, scale) {\n    this.scale = scale;\n    this.charDataNormal = MinimapCharRenderer.soften(charData, 12 / 15);\n    this.charDataLight = MinimapCharRenderer.soften(charData, 50 / 60);\n  }\n  static soften(input, ratio) {\n    let result = new Uint8ClampedArray(input.length);\n    for (let i = 0, len = input.length; i < len; i++) {\n      result[i] = toUint8(input[i] * ratio);\n    }\n    return result;\n  }\n  renderChar(target, dx, dy, chCode, color, backgroundColor, fontScale, useLighterFont, force1pxHeight) {\n    const charWidth = 1 /* BASE_CHAR_WIDTH */ * this.scale;\n    const charHeight = 2 /* BASE_CHAR_HEIGHT */ * this.scale;\n    const renderHeight = force1pxHeight ? 1 : charHeight;\n    if (dx + charWidth > target.width || dy + renderHeight > target.height) {\n      console.warn('bad render request outside image data');\n      return;\n    }\n    const charData = useLighterFont ? this.charDataLight : this.charDataNormal;\n    const charIndex = getCharIndex(chCode, fontScale);\n    const destWidth = target.width * 4 /* RGBA_CHANNELS_CNT */;\n    const backgroundR = backgroundColor.r;\n    const backgroundG = backgroundColor.g;\n    const backgroundB = backgroundColor.b;\n    const deltaR = color.r - backgroundR;\n    const deltaG = color.g - backgroundG;\n    const deltaB = color.b - backgroundB;\n    const dest = target.data;\n    let sourceOffset = charIndex * charWidth * charHeight;\n    let row = dy * destWidth + dx * 4 /* RGBA_CHANNELS_CNT */;\n    for (let y = 0; y < renderHeight; y++) {\n      let column = row;\n      for (let x = 0; x < charWidth; x++) {\n        const c = charData[sourceOffset++] / 255;\n        dest[column++] = backgroundR + deltaR * c;\n        dest[column++] = backgroundG + deltaG * c;\n        dest[column++] = backgroundB + deltaB * c;\n        column++;\n      }\n      row += destWidth;\n    }\n  }\n  blockRenderChar(target, dx, dy, color, backgroundColor, useLighterFont, force1pxHeight) {\n    const charWidth = 1 /* BASE_CHAR_WIDTH */ * this.scale;\n    const charHeight = 2 /* BASE_CHAR_HEIGHT */ * this.scale;\n    const renderHeight = force1pxHeight ? 1 : charHeight;\n    if (dx + charWidth > target.width || dy + renderHeight > target.height) {\n      console.warn('bad render request outside image data');\n      return;\n    }\n    const destWidth = target.width * 4 /* RGBA_CHANNELS_CNT */;\n    const c = 0.5;\n    const backgroundR = backgroundColor.r;\n    const backgroundG = backgroundColor.g;\n    const backgroundB = backgroundColor.b;\n    const deltaR = color.r - backgroundR;\n    const deltaG = color.g - backgroundG;\n    const deltaB = color.b - backgroundB;\n    const colorR = backgroundR + deltaR * c;\n    const colorG = backgroundG + deltaG * c;\n    const colorB = backgroundB + deltaB * c;\n    const dest = target.data;\n    let row = dy * destWidth + dx * 4 /* RGBA_CHANNELS_CNT */;\n    for (let y = 0; y < renderHeight; y++) {\n      let column = row;\n      for (let x = 0; x < charWidth; x++) {\n        dest[column++] = colorR;\n        dest[column++] = colorG;\n        dest[column++] = colorB;\n        column++;\n      }\n      row += destWidth;\n    }\n  }\n}","map":{"version":3,"names":["getCharIndex","toUint8","MinimapCharRenderer","constructor","charData","scale","charDataNormal","soften","charDataLight","input","ratio","result","Uint8ClampedArray","length","i","len","renderChar","target","dx","dy","chCode","color","backgroundColor","fontScale","useLighterFont","force1pxHeight","charWidth","charHeight","renderHeight","width","height","console","warn","charIndex","destWidth","backgroundR","r","backgroundG","g","backgroundB","b","deltaR","deltaG","deltaB","dest","data","sourceOffset","row","y","column","x","c","blockRenderChar","colorR","colorG","colorB"],"sources":["C:/Users/Administrator/Desktop/sqllineage-master/sqllineagejs/node_modules/monaco-editor/esm/vs/editor/browser/viewParts/minimap/minimapCharRenderer.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { getCharIndex } from './minimapCharSheet.js';\r\nimport { toUint8 } from '../../../../base/common/uint.js';\r\nexport class MinimapCharRenderer {\r\n    constructor(charData, scale) {\r\n        this.scale = scale;\r\n        this.charDataNormal = MinimapCharRenderer.soften(charData, 12 / 15);\r\n        this.charDataLight = MinimapCharRenderer.soften(charData, 50 / 60);\r\n    }\r\n    static soften(input, ratio) {\r\n        let result = new Uint8ClampedArray(input.length);\r\n        for (let i = 0, len = input.length; i < len; i++) {\r\n            result[i] = toUint8(input[i] * ratio);\r\n        }\r\n        return result;\r\n    }\r\n    renderChar(target, dx, dy, chCode, color, backgroundColor, fontScale, useLighterFont, force1pxHeight) {\r\n        const charWidth = 1 /* BASE_CHAR_WIDTH */ * this.scale;\r\n        const charHeight = 2 /* BASE_CHAR_HEIGHT */ * this.scale;\r\n        const renderHeight = (force1pxHeight ? 1 : charHeight);\r\n        if (dx + charWidth > target.width || dy + renderHeight > target.height) {\r\n            console.warn('bad render request outside image data');\r\n            return;\r\n        }\r\n        const charData = useLighterFont ? this.charDataLight : this.charDataNormal;\r\n        const charIndex = getCharIndex(chCode, fontScale);\r\n        const destWidth = target.width * 4 /* RGBA_CHANNELS_CNT */;\r\n        const backgroundR = backgroundColor.r;\r\n        const backgroundG = backgroundColor.g;\r\n        const backgroundB = backgroundColor.b;\r\n        const deltaR = color.r - backgroundR;\r\n        const deltaG = color.g - backgroundG;\r\n        const deltaB = color.b - backgroundB;\r\n        const dest = target.data;\r\n        let sourceOffset = charIndex * charWidth * charHeight;\r\n        let row = dy * destWidth + dx * 4 /* RGBA_CHANNELS_CNT */;\r\n        for (let y = 0; y < renderHeight; y++) {\r\n            let column = row;\r\n            for (let x = 0; x < charWidth; x++) {\r\n                const c = charData[sourceOffset++] / 255;\r\n                dest[column++] = backgroundR + deltaR * c;\r\n                dest[column++] = backgroundG + deltaG * c;\r\n                dest[column++] = backgroundB + deltaB * c;\r\n                column++;\r\n            }\r\n            row += destWidth;\r\n        }\r\n    }\r\n    blockRenderChar(target, dx, dy, color, backgroundColor, useLighterFont, force1pxHeight) {\r\n        const charWidth = 1 /* BASE_CHAR_WIDTH */ * this.scale;\r\n        const charHeight = 2 /* BASE_CHAR_HEIGHT */ * this.scale;\r\n        const renderHeight = (force1pxHeight ? 1 : charHeight);\r\n        if (dx + charWidth > target.width || dy + renderHeight > target.height) {\r\n            console.warn('bad render request outside image data');\r\n            return;\r\n        }\r\n        const destWidth = target.width * 4 /* RGBA_CHANNELS_CNT */;\r\n        const c = 0.5;\r\n        const backgroundR = backgroundColor.r;\r\n        const backgroundG = backgroundColor.g;\r\n        const backgroundB = backgroundColor.b;\r\n        const deltaR = color.r - backgroundR;\r\n        const deltaG = color.g - backgroundG;\r\n        const deltaB = color.b - backgroundB;\r\n        const colorR = backgroundR + deltaR * c;\r\n        const colorG = backgroundG + deltaG * c;\r\n        const colorB = backgroundB + deltaB * c;\r\n        const dest = target.data;\r\n        let row = dy * destWidth + dx * 4 /* RGBA_CHANNELS_CNT */;\r\n        for (let y = 0; y < renderHeight; y++) {\r\n            let column = row;\r\n            for (let x = 0; x < charWidth; x++) {\r\n                dest[column++] = colorR;\r\n                dest[column++] = colorG;\r\n                dest[column++] = colorB;\r\n                column++;\r\n            }\r\n            row += destWidth;\r\n        }\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}