{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { onUnexpectedError } from '../../../base/common/errors.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport * as mime from '../../../base/common/mime.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { LanguageIdentifier } from '../modes.js';\nimport { ModesRegistry } from '../modes/modesRegistry.js';\nimport { NULL_LANGUAGE_IDENTIFIER, NULL_MODE_ID } from '../modes/nullMode.js';\nimport { Extensions } from '../../../platform/configuration/common/configurationRegistry.js';\nimport { Registry } from '../../../platform/registry/common/platform.js';\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\nexport class LanguagesRegistry extends Disposable {\n  constructor() {\n    let useModesRegistry = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    let warnOnOverwrite = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    super();\n    this._onDidChange = this._register(new Emitter());\n    this.onDidChange = this._onDidChange.event;\n    this._warnOnOverwrite = warnOnOverwrite;\n    this._nextLanguageId2 = 1;\n    this._languageIdToLanguage = [];\n    this._languageToLanguageId = Object.create(null);\n    this._languages = {};\n    this._mimeTypesMap = {};\n    this._nameMap = {};\n    this._lowercaseNameMap = {};\n    if (useModesRegistry) {\n      this._initializeFromRegistry();\n      this._register(ModesRegistry.onDidChangeLanguages(m => this._initializeFromRegistry()));\n    }\n  }\n  _initializeFromRegistry() {\n    this._languages = {};\n    this._mimeTypesMap = {};\n    this._nameMap = {};\n    this._lowercaseNameMap = {};\n    const desc = ModesRegistry.getLanguages();\n    this._registerLanguages(desc);\n  }\n  _registerLanguages(desc) {\n    for (const d of desc) {\n      this._registerLanguage(d);\n    }\n    // Rebuild fast path maps\n    this._mimeTypesMap = {};\n    this._nameMap = {};\n    this._lowercaseNameMap = {};\n    Object.keys(this._languages).forEach(langId => {\n      let language = this._languages[langId];\n      if (language.name) {\n        this._nameMap[language.name] = language.identifier;\n      }\n      language.aliases.forEach(alias => {\n        this._lowercaseNameMap[alias.toLowerCase()] = language.identifier;\n      });\n      language.mimetypes.forEach(mimetype => {\n        this._mimeTypesMap[mimetype] = language.identifier;\n      });\n    });\n    Registry.as(Extensions.Configuration).registerOverrideIdentifiers(ModesRegistry.getLanguages().map(language => language.id));\n    this._onDidChange.fire();\n  }\n  _getLanguageId(language) {\n    if (this._languageToLanguageId[language]) {\n      return this._languageToLanguageId[language];\n    }\n    const languageId = this._nextLanguageId2++;\n    this._languageIdToLanguage[languageId] = language;\n    this._languageToLanguageId[language] = languageId;\n    return languageId;\n  }\n  _registerLanguage(lang) {\n    const langId = lang.id;\n    let resolvedLanguage;\n    if (hasOwnProperty.call(this._languages, langId)) {\n      resolvedLanguage = this._languages[langId];\n    } else {\n      const languageId = this._getLanguageId(langId);\n      resolvedLanguage = {\n        identifier: new LanguageIdentifier(langId, languageId),\n        name: null,\n        mimetypes: [],\n        aliases: [],\n        extensions: [],\n        filenames: [],\n        configurationFiles: []\n      };\n      this._languages[langId] = resolvedLanguage;\n    }\n    this._mergeLanguage(resolvedLanguage, lang);\n  }\n  _mergeLanguage(resolvedLanguage, lang) {\n    const langId = lang.id;\n    let primaryMime = null;\n    if (Array.isArray(lang.mimetypes) && lang.mimetypes.length > 0) {\n      resolvedLanguage.mimetypes.push(...lang.mimetypes);\n      primaryMime = lang.mimetypes[0];\n    }\n    if (!primaryMime) {\n      primaryMime = \"text/x-\".concat(langId);\n      resolvedLanguage.mimetypes.push(primaryMime);\n    }\n    if (Array.isArray(lang.extensions)) {\n      if (lang.configuration) {\n        // insert first as this appears to be the 'primary' language definition\n        resolvedLanguage.extensions = lang.extensions.concat(resolvedLanguage.extensions);\n      } else {\n        resolvedLanguage.extensions = resolvedLanguage.extensions.concat(lang.extensions);\n      }\n      for (let extension of lang.extensions) {\n        mime.registerTextMime({\n          id: langId,\n          mime: primaryMime,\n          extension: extension\n        }, this._warnOnOverwrite);\n      }\n    }\n    if (Array.isArray(lang.filenames)) {\n      for (let filename of lang.filenames) {\n        mime.registerTextMime({\n          id: langId,\n          mime: primaryMime,\n          filename: filename\n        }, this._warnOnOverwrite);\n        resolvedLanguage.filenames.push(filename);\n      }\n    }\n    if (Array.isArray(lang.filenamePatterns)) {\n      for (let filenamePattern of lang.filenamePatterns) {\n        mime.registerTextMime({\n          id: langId,\n          mime: primaryMime,\n          filepattern: filenamePattern\n        }, this._warnOnOverwrite);\n      }\n    }\n    if (typeof lang.firstLine === 'string' && lang.firstLine.length > 0) {\n      let firstLineRegexStr = lang.firstLine;\n      if (firstLineRegexStr.charAt(0) !== '^') {\n        firstLineRegexStr = '^' + firstLineRegexStr;\n      }\n      try {\n        let firstLineRegex = new RegExp(firstLineRegexStr);\n        if (!strings.regExpLeadsToEndlessLoop(firstLineRegex)) {\n          mime.registerTextMime({\n            id: langId,\n            mime: primaryMime,\n            firstline: firstLineRegex\n          }, this._warnOnOverwrite);\n        }\n      } catch (err) {\n        // Most likely, the regex was bad\n        onUnexpectedError(err);\n      }\n    }\n    resolvedLanguage.aliases.push(langId);\n    let langAliases = null;\n    if (typeof lang.aliases !== 'undefined' && Array.isArray(lang.aliases)) {\n      if (lang.aliases.length === 0) {\n        // signal that this language should not get a name\n        langAliases = [null];\n      } else {\n        langAliases = lang.aliases;\n      }\n    }\n    if (langAliases !== null) {\n      for (const langAlias of langAliases) {\n        if (!langAlias || langAlias.length === 0) {\n          continue;\n        }\n        resolvedLanguage.aliases.push(langAlias);\n      }\n    }\n    let containsAliases = langAliases !== null && langAliases.length > 0;\n    if (containsAliases && langAliases[0] === null) {\n      // signal that this language should not get a name\n    } else {\n      let bestName = (containsAliases ? langAliases[0] : null) || langId;\n      if (containsAliases || !resolvedLanguage.name) {\n        resolvedLanguage.name = bestName;\n      }\n    }\n    if (lang.configuration) {\n      resolvedLanguage.configurationFiles.push(lang.configuration);\n    }\n  }\n  isRegisteredMode(mimetypeOrModeId) {\n    // Is this a known mime type ?\n    if (hasOwnProperty.call(this._mimeTypesMap, mimetypeOrModeId)) {\n      return true;\n    }\n    // Is this a known mode id ?\n    return hasOwnProperty.call(this._languages, mimetypeOrModeId);\n  }\n  getModeIdForLanguageNameLowercase(languageNameLower) {\n    if (!hasOwnProperty.call(this._lowercaseNameMap, languageNameLower)) {\n      return null;\n    }\n    return this._lowercaseNameMap[languageNameLower].language;\n  }\n  extractModeIds(commaSeparatedMimetypesOrCommaSeparatedIds) {\n    if (!commaSeparatedMimetypesOrCommaSeparatedIds) {\n      return [];\n    }\n    return commaSeparatedMimetypesOrCommaSeparatedIds.split(',').map(mimeTypeOrId => mimeTypeOrId.trim()).map(mimeTypeOrId => {\n      if (hasOwnProperty.call(this._mimeTypesMap, mimeTypeOrId)) {\n        return this._mimeTypesMap[mimeTypeOrId].language;\n      }\n      return mimeTypeOrId;\n    }).filter(modeId => {\n      return hasOwnProperty.call(this._languages, modeId);\n    });\n  }\n  getLanguageIdentifier(_modeId) {\n    if (_modeId === NULL_MODE_ID || _modeId === 0 /* Null */) {\n      return NULL_LANGUAGE_IDENTIFIER;\n    }\n    let modeId;\n    if (typeof _modeId === 'string') {\n      modeId = _modeId;\n    } else {\n      modeId = this._languageIdToLanguage[_modeId];\n      if (!modeId) {\n        return null;\n      }\n    }\n    if (!hasOwnProperty.call(this._languages, modeId)) {\n      return null;\n    }\n    return this._languages[modeId].identifier;\n  }\n  getModeIdsFromFilepathOrFirstLine(resource, firstLine) {\n    if (!resource && !firstLine) {\n      return [];\n    }\n    let mimeTypes = mime.guessMimeTypes(resource, firstLine);\n    return this.extractModeIds(mimeTypes.join(','));\n  }\n}","map":{"version":3,"names":["onUnexpectedError","Emitter","Disposable","mime","strings","LanguageIdentifier","ModesRegistry","NULL_LANGUAGE_IDENTIFIER","NULL_MODE_ID","Extensions","Registry","hasOwnProperty","Object","prototype","LanguagesRegistry","constructor","useModesRegistry","arguments","length","undefined","warnOnOverwrite","_onDidChange","_register","onDidChange","event","_warnOnOverwrite","_nextLanguageId2","_languageIdToLanguage","_languageToLanguageId","create","_languages","_mimeTypesMap","_nameMap","_lowercaseNameMap","_initializeFromRegistry","onDidChangeLanguages","m","desc","getLanguages","_registerLanguages","d","_registerLanguage","keys","forEach","langId","language","name","identifier","aliases","alias","toLowerCase","mimetypes","mimetype","as","Configuration","registerOverrideIdentifiers","map","id","fire","_getLanguageId","languageId","lang","resolvedLanguage","call","extensions","filenames","configurationFiles","_mergeLanguage","primaryMime","Array","isArray","push","concat","configuration","extension","registerTextMime","filename","filenamePatterns","filenamePattern","filepattern","firstLine","firstLineRegexStr","charAt","firstLineRegex","RegExp","regExpLeadsToEndlessLoop","firstline","err","langAliases","langAlias","containsAliases","bestName","isRegisteredMode","mimetypeOrModeId","getModeIdForLanguageNameLowercase","languageNameLower","extractModeIds","commaSeparatedMimetypesOrCommaSeparatedIds","split","mimeTypeOrId","trim","filter","modeId","getLanguageIdentifier","_modeId","getModeIdsFromFilepathOrFirstLine","resource","mimeTypes","guessMimeTypes","join"],"sources":["C:/Users/Administrator/Desktop/sqllineage-master/sqllineagejs/node_modules/monaco-editor/esm/vs/editor/common/services/languagesRegistry.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { onUnexpectedError } from '../../../base/common/errors.js';\r\nimport { Emitter } from '../../../base/common/event.js';\r\nimport { Disposable } from '../../../base/common/lifecycle.js';\r\nimport * as mime from '../../../base/common/mime.js';\r\nimport * as strings from '../../../base/common/strings.js';\r\nimport { LanguageIdentifier } from '../modes.js';\r\nimport { ModesRegistry } from '../modes/modesRegistry.js';\r\nimport { NULL_LANGUAGE_IDENTIFIER, NULL_MODE_ID } from '../modes/nullMode.js';\r\nimport { Extensions } from '../../../platform/configuration/common/configurationRegistry.js';\r\nimport { Registry } from '../../../platform/registry/common/platform.js';\r\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\r\nexport class LanguagesRegistry extends Disposable {\r\n    constructor(useModesRegistry = true, warnOnOverwrite = false) {\r\n        super();\r\n        this._onDidChange = this._register(new Emitter());\r\n        this.onDidChange = this._onDidChange.event;\r\n        this._warnOnOverwrite = warnOnOverwrite;\r\n        this._nextLanguageId2 = 1;\r\n        this._languageIdToLanguage = [];\r\n        this._languageToLanguageId = Object.create(null);\r\n        this._languages = {};\r\n        this._mimeTypesMap = {};\r\n        this._nameMap = {};\r\n        this._lowercaseNameMap = {};\r\n        if (useModesRegistry) {\r\n            this._initializeFromRegistry();\r\n            this._register(ModesRegistry.onDidChangeLanguages((m) => this._initializeFromRegistry()));\r\n        }\r\n    }\r\n    _initializeFromRegistry() {\r\n        this._languages = {};\r\n        this._mimeTypesMap = {};\r\n        this._nameMap = {};\r\n        this._lowercaseNameMap = {};\r\n        const desc = ModesRegistry.getLanguages();\r\n        this._registerLanguages(desc);\r\n    }\r\n    _registerLanguages(desc) {\r\n        for (const d of desc) {\r\n            this._registerLanguage(d);\r\n        }\r\n        // Rebuild fast path maps\r\n        this._mimeTypesMap = {};\r\n        this._nameMap = {};\r\n        this._lowercaseNameMap = {};\r\n        Object.keys(this._languages).forEach((langId) => {\r\n            let language = this._languages[langId];\r\n            if (language.name) {\r\n                this._nameMap[language.name] = language.identifier;\r\n            }\r\n            language.aliases.forEach((alias) => {\r\n                this._lowercaseNameMap[alias.toLowerCase()] = language.identifier;\r\n            });\r\n            language.mimetypes.forEach((mimetype) => {\r\n                this._mimeTypesMap[mimetype] = language.identifier;\r\n            });\r\n        });\r\n        Registry.as(Extensions.Configuration).registerOverrideIdentifiers(ModesRegistry.getLanguages().map(language => language.id));\r\n        this._onDidChange.fire();\r\n    }\r\n    _getLanguageId(language) {\r\n        if (this._languageToLanguageId[language]) {\r\n            return this._languageToLanguageId[language];\r\n        }\r\n        const languageId = this._nextLanguageId2++;\r\n        this._languageIdToLanguage[languageId] = language;\r\n        this._languageToLanguageId[language] = languageId;\r\n        return languageId;\r\n    }\r\n    _registerLanguage(lang) {\r\n        const langId = lang.id;\r\n        let resolvedLanguage;\r\n        if (hasOwnProperty.call(this._languages, langId)) {\r\n            resolvedLanguage = this._languages[langId];\r\n        }\r\n        else {\r\n            const languageId = this._getLanguageId(langId);\r\n            resolvedLanguage = {\r\n                identifier: new LanguageIdentifier(langId, languageId),\r\n                name: null,\r\n                mimetypes: [],\r\n                aliases: [],\r\n                extensions: [],\r\n                filenames: [],\r\n                configurationFiles: []\r\n            };\r\n            this._languages[langId] = resolvedLanguage;\r\n        }\r\n        this._mergeLanguage(resolvedLanguage, lang);\r\n    }\r\n    _mergeLanguage(resolvedLanguage, lang) {\r\n        const langId = lang.id;\r\n        let primaryMime = null;\r\n        if (Array.isArray(lang.mimetypes) && lang.mimetypes.length > 0) {\r\n            resolvedLanguage.mimetypes.push(...lang.mimetypes);\r\n            primaryMime = lang.mimetypes[0];\r\n        }\r\n        if (!primaryMime) {\r\n            primaryMime = `text/x-${langId}`;\r\n            resolvedLanguage.mimetypes.push(primaryMime);\r\n        }\r\n        if (Array.isArray(lang.extensions)) {\r\n            if (lang.configuration) {\r\n                // insert first as this appears to be the 'primary' language definition\r\n                resolvedLanguage.extensions = lang.extensions.concat(resolvedLanguage.extensions);\r\n            }\r\n            else {\r\n                resolvedLanguage.extensions = resolvedLanguage.extensions.concat(lang.extensions);\r\n            }\r\n            for (let extension of lang.extensions) {\r\n                mime.registerTextMime({ id: langId, mime: primaryMime, extension: extension }, this._warnOnOverwrite);\r\n            }\r\n        }\r\n        if (Array.isArray(lang.filenames)) {\r\n            for (let filename of lang.filenames) {\r\n                mime.registerTextMime({ id: langId, mime: primaryMime, filename: filename }, this._warnOnOverwrite);\r\n                resolvedLanguage.filenames.push(filename);\r\n            }\r\n        }\r\n        if (Array.isArray(lang.filenamePatterns)) {\r\n            for (let filenamePattern of lang.filenamePatterns) {\r\n                mime.registerTextMime({ id: langId, mime: primaryMime, filepattern: filenamePattern }, this._warnOnOverwrite);\r\n            }\r\n        }\r\n        if (typeof lang.firstLine === 'string' && lang.firstLine.length > 0) {\r\n            let firstLineRegexStr = lang.firstLine;\r\n            if (firstLineRegexStr.charAt(0) !== '^') {\r\n                firstLineRegexStr = '^' + firstLineRegexStr;\r\n            }\r\n            try {\r\n                let firstLineRegex = new RegExp(firstLineRegexStr);\r\n                if (!strings.regExpLeadsToEndlessLoop(firstLineRegex)) {\r\n                    mime.registerTextMime({ id: langId, mime: primaryMime, firstline: firstLineRegex }, this._warnOnOverwrite);\r\n                }\r\n            }\r\n            catch (err) {\r\n                // Most likely, the regex was bad\r\n                onUnexpectedError(err);\r\n            }\r\n        }\r\n        resolvedLanguage.aliases.push(langId);\r\n        let langAliases = null;\r\n        if (typeof lang.aliases !== 'undefined' && Array.isArray(lang.aliases)) {\r\n            if (lang.aliases.length === 0) {\r\n                // signal that this language should not get a name\r\n                langAliases = [null];\r\n            }\r\n            else {\r\n                langAliases = lang.aliases;\r\n            }\r\n        }\r\n        if (langAliases !== null) {\r\n            for (const langAlias of langAliases) {\r\n                if (!langAlias || langAlias.length === 0) {\r\n                    continue;\r\n                }\r\n                resolvedLanguage.aliases.push(langAlias);\r\n            }\r\n        }\r\n        let containsAliases = (langAliases !== null && langAliases.length > 0);\r\n        if (containsAliases && langAliases[0] === null) {\r\n            // signal that this language should not get a name\r\n        }\r\n        else {\r\n            let bestName = (containsAliases ? langAliases[0] : null) || langId;\r\n            if (containsAliases || !resolvedLanguage.name) {\r\n                resolvedLanguage.name = bestName;\r\n            }\r\n        }\r\n        if (lang.configuration) {\r\n            resolvedLanguage.configurationFiles.push(lang.configuration);\r\n        }\r\n    }\r\n    isRegisteredMode(mimetypeOrModeId) {\r\n        // Is this a known mime type ?\r\n        if (hasOwnProperty.call(this._mimeTypesMap, mimetypeOrModeId)) {\r\n            return true;\r\n        }\r\n        // Is this a known mode id ?\r\n        return hasOwnProperty.call(this._languages, mimetypeOrModeId);\r\n    }\r\n    getModeIdForLanguageNameLowercase(languageNameLower) {\r\n        if (!hasOwnProperty.call(this._lowercaseNameMap, languageNameLower)) {\r\n            return null;\r\n        }\r\n        return this._lowercaseNameMap[languageNameLower].language;\r\n    }\r\n    extractModeIds(commaSeparatedMimetypesOrCommaSeparatedIds) {\r\n        if (!commaSeparatedMimetypesOrCommaSeparatedIds) {\r\n            return [];\r\n        }\r\n        return (commaSeparatedMimetypesOrCommaSeparatedIds.\r\n            split(',').\r\n            map((mimeTypeOrId) => mimeTypeOrId.trim()).\r\n            map((mimeTypeOrId) => {\r\n            if (hasOwnProperty.call(this._mimeTypesMap, mimeTypeOrId)) {\r\n                return this._mimeTypesMap[mimeTypeOrId].language;\r\n            }\r\n            return mimeTypeOrId;\r\n        }).\r\n            filter((modeId) => {\r\n            return hasOwnProperty.call(this._languages, modeId);\r\n        }));\r\n    }\r\n    getLanguageIdentifier(_modeId) {\r\n        if (_modeId === NULL_MODE_ID || _modeId === 0 /* Null */) {\r\n            return NULL_LANGUAGE_IDENTIFIER;\r\n        }\r\n        let modeId;\r\n        if (typeof _modeId === 'string') {\r\n            modeId = _modeId;\r\n        }\r\n        else {\r\n            modeId = this._languageIdToLanguage[_modeId];\r\n            if (!modeId) {\r\n                return null;\r\n            }\r\n        }\r\n        if (!hasOwnProperty.call(this._languages, modeId)) {\r\n            return null;\r\n        }\r\n        return this._languages[modeId].identifier;\r\n    }\r\n    getModeIdsFromFilepathOrFirstLine(resource, firstLine) {\r\n        if (!resource && !firstLine) {\r\n            return [];\r\n        }\r\n        let mimeTypes = mime.guessMimeTypes(resource, firstLine);\r\n        return this.extractModeIds(mimeTypes.join(','));\r\n    }\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,iBAAiB,QAAQ,gCAAgC;AAClE,SAASC,OAAO,QAAQ,+BAA+B;AACvD,SAASC,UAAU,QAAQ,mCAAmC;AAC9D,OAAO,KAAKC,IAAI,MAAM,8BAA8B;AACpD,OAAO,KAAKC,OAAO,MAAM,iCAAiC;AAC1D,SAASC,kBAAkB,QAAQ,aAAa;AAChD,SAASC,aAAa,QAAQ,2BAA2B;AACzD,SAASC,wBAAwB,EAAEC,YAAY,QAAQ,sBAAsB;AAC7E,SAASC,UAAU,QAAQ,iEAAiE;AAC5F,SAASC,QAAQ,QAAQ,+CAA+C;AACxE,MAAMC,cAAc,GAAGC,MAAM,CAACC,SAAS,CAACF,cAAc;AACtD,OAAO,MAAMG,iBAAiB,SAASZ,UAAU,CAAC;EAC9Ca,WAAWA,CAAA,EAAmD;IAAA,IAAlDC,gBAAgB,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI;IAAA,IAAEG,eAAe,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,KAAK;IACxD,KAAK,CAAC,CAAC;IACP,IAAI,CAACI,YAAY,GAAG,IAAI,CAACC,SAAS,CAAC,IAAIrB,OAAO,CAAC,CAAC,CAAC;IACjD,IAAI,CAACsB,WAAW,GAAG,IAAI,CAACF,YAAY,CAACG,KAAK;IAC1C,IAAI,CAACC,gBAAgB,GAAGL,eAAe;IACvC,IAAI,CAACM,gBAAgB,GAAG,CAAC;IACzB,IAAI,CAACC,qBAAqB,GAAG,EAAE;IAC/B,IAAI,CAACC,qBAAqB,GAAGhB,MAAM,CAACiB,MAAM,CAAC,IAAI,CAAC;IAChD,IAAI,CAACC,UAAU,GAAG,CAAC,CAAC;IACpB,IAAI,CAACC,aAAa,GAAG,CAAC,CAAC;IACvB,IAAI,CAACC,QAAQ,GAAG,CAAC,CAAC;IAClB,IAAI,CAACC,iBAAiB,GAAG,CAAC,CAAC;IAC3B,IAAIjB,gBAAgB,EAAE;MAClB,IAAI,CAACkB,uBAAuB,CAAC,CAAC;MAC9B,IAAI,CAACZ,SAAS,CAAChB,aAAa,CAAC6B,oBAAoB,CAAEC,CAAC,IAAK,IAAI,CAACF,uBAAuB,CAAC,CAAC,CAAC,CAAC;IAC7F;EACJ;EACAA,uBAAuBA,CAAA,EAAG;IACtB,IAAI,CAACJ,UAAU,GAAG,CAAC,CAAC;IACpB,IAAI,CAACC,aAAa,GAAG,CAAC,CAAC;IACvB,IAAI,CAACC,QAAQ,GAAG,CAAC,CAAC;IAClB,IAAI,CAACC,iBAAiB,GAAG,CAAC,CAAC;IAC3B,MAAMI,IAAI,GAAG/B,aAAa,CAACgC,YAAY,CAAC,CAAC;IACzC,IAAI,CAACC,kBAAkB,CAACF,IAAI,CAAC;EACjC;EACAE,kBAAkBA,CAACF,IAAI,EAAE;IACrB,KAAK,MAAMG,CAAC,IAAIH,IAAI,EAAE;MAClB,IAAI,CAACI,iBAAiB,CAACD,CAAC,CAAC;IAC7B;IACA;IACA,IAAI,CAACT,aAAa,GAAG,CAAC,CAAC;IACvB,IAAI,CAACC,QAAQ,GAAG,CAAC,CAAC;IAClB,IAAI,CAACC,iBAAiB,GAAG,CAAC,CAAC;IAC3BrB,MAAM,CAAC8B,IAAI,CAAC,IAAI,CAACZ,UAAU,CAAC,CAACa,OAAO,CAAEC,MAAM,IAAK;MAC7C,IAAIC,QAAQ,GAAG,IAAI,CAACf,UAAU,CAACc,MAAM,CAAC;MACtC,IAAIC,QAAQ,CAACC,IAAI,EAAE;QACf,IAAI,CAACd,QAAQ,CAACa,QAAQ,CAACC,IAAI,CAAC,GAAGD,QAAQ,CAACE,UAAU;MACtD;MACAF,QAAQ,CAACG,OAAO,CAACL,OAAO,CAAEM,KAAK,IAAK;QAChC,IAAI,CAAChB,iBAAiB,CAACgB,KAAK,CAACC,WAAW,CAAC,CAAC,CAAC,GAAGL,QAAQ,CAACE,UAAU;MACrE,CAAC,CAAC;MACFF,QAAQ,CAACM,SAAS,CAACR,OAAO,CAAES,QAAQ,IAAK;QACrC,IAAI,CAACrB,aAAa,CAACqB,QAAQ,CAAC,GAAGP,QAAQ,CAACE,UAAU;MACtD,CAAC,CAAC;IACN,CAAC,CAAC;IACFrC,QAAQ,CAAC2C,EAAE,CAAC5C,UAAU,CAAC6C,aAAa,CAAC,CAACC,2BAA2B,CAACjD,aAAa,CAACgC,YAAY,CAAC,CAAC,CAACkB,GAAG,CAACX,QAAQ,IAAIA,QAAQ,CAACY,EAAE,CAAC,CAAC;IAC5H,IAAI,CAACpC,YAAY,CAACqC,IAAI,CAAC,CAAC;EAC5B;EACAC,cAAcA,CAACd,QAAQ,EAAE;IACrB,IAAI,IAAI,CAACjB,qBAAqB,CAACiB,QAAQ,CAAC,EAAE;MACtC,OAAO,IAAI,CAACjB,qBAAqB,CAACiB,QAAQ,CAAC;IAC/C;IACA,MAAMe,UAAU,GAAG,IAAI,CAAClC,gBAAgB,EAAE;IAC1C,IAAI,CAACC,qBAAqB,CAACiC,UAAU,CAAC,GAAGf,QAAQ;IACjD,IAAI,CAACjB,qBAAqB,CAACiB,QAAQ,CAAC,GAAGe,UAAU;IACjD,OAAOA,UAAU;EACrB;EACAnB,iBAAiBA,CAACoB,IAAI,EAAE;IACpB,MAAMjB,MAAM,GAAGiB,IAAI,CAACJ,EAAE;IACtB,IAAIK,gBAAgB;IACpB,IAAInD,cAAc,CAACoD,IAAI,CAAC,IAAI,CAACjC,UAAU,EAAEc,MAAM,CAAC,EAAE;MAC9CkB,gBAAgB,GAAG,IAAI,CAAChC,UAAU,CAACc,MAAM,CAAC;IAC9C,CAAC,MACI;MACD,MAAMgB,UAAU,GAAG,IAAI,CAACD,cAAc,CAACf,MAAM,CAAC;MAC9CkB,gBAAgB,GAAG;QACff,UAAU,EAAE,IAAI1C,kBAAkB,CAACuC,MAAM,EAAEgB,UAAU,CAAC;QACtDd,IAAI,EAAE,IAAI;QACVK,SAAS,EAAE,EAAE;QACbH,OAAO,EAAE,EAAE;QACXgB,UAAU,EAAE,EAAE;QACdC,SAAS,EAAE,EAAE;QACbC,kBAAkB,EAAE;MACxB,CAAC;MACD,IAAI,CAACpC,UAAU,CAACc,MAAM,CAAC,GAAGkB,gBAAgB;IAC9C;IACA,IAAI,CAACK,cAAc,CAACL,gBAAgB,EAAED,IAAI,CAAC;EAC/C;EACAM,cAAcA,CAACL,gBAAgB,EAAED,IAAI,EAAE;IACnC,MAAMjB,MAAM,GAAGiB,IAAI,CAACJ,EAAE;IACtB,IAAIW,WAAW,GAAG,IAAI;IACtB,IAAIC,KAAK,CAACC,OAAO,CAACT,IAAI,CAACV,SAAS,CAAC,IAAIU,IAAI,CAACV,SAAS,CAACjC,MAAM,GAAG,CAAC,EAAE;MAC5D4C,gBAAgB,CAACX,SAAS,CAACoB,IAAI,CAAC,GAAGV,IAAI,CAACV,SAAS,CAAC;MAClDiB,WAAW,GAAGP,IAAI,CAACV,SAAS,CAAC,CAAC,CAAC;IACnC;IACA,IAAI,CAACiB,WAAW,EAAE;MACdA,WAAW,aAAAI,MAAA,CAAa5B,MAAM,CAAE;MAChCkB,gBAAgB,CAACX,SAAS,CAACoB,IAAI,CAACH,WAAW,CAAC;IAChD;IACA,IAAIC,KAAK,CAACC,OAAO,CAACT,IAAI,CAACG,UAAU,CAAC,EAAE;MAChC,IAAIH,IAAI,CAACY,aAAa,EAAE;QACpB;QACAX,gBAAgB,CAACE,UAAU,GAAGH,IAAI,CAACG,UAAU,CAACQ,MAAM,CAACV,gBAAgB,CAACE,UAAU,CAAC;MACrF,CAAC,MACI;QACDF,gBAAgB,CAACE,UAAU,GAAGF,gBAAgB,CAACE,UAAU,CAACQ,MAAM,CAACX,IAAI,CAACG,UAAU,CAAC;MACrF;MACA,KAAK,IAAIU,SAAS,IAAIb,IAAI,CAACG,UAAU,EAAE;QACnC7D,IAAI,CAACwE,gBAAgB,CAAC;UAAElB,EAAE,EAAEb,MAAM;UAAEzC,IAAI,EAAEiE,WAAW;UAAEM,SAAS,EAAEA;QAAU,CAAC,EAAE,IAAI,CAACjD,gBAAgB,CAAC;MACzG;IACJ;IACA,IAAI4C,KAAK,CAACC,OAAO,CAACT,IAAI,CAACI,SAAS,CAAC,EAAE;MAC/B,KAAK,IAAIW,QAAQ,IAAIf,IAAI,CAACI,SAAS,EAAE;QACjC9D,IAAI,CAACwE,gBAAgB,CAAC;UAAElB,EAAE,EAAEb,MAAM;UAAEzC,IAAI,EAAEiE,WAAW;UAAEQ,QAAQ,EAAEA;QAAS,CAAC,EAAE,IAAI,CAACnD,gBAAgB,CAAC;QACnGqC,gBAAgB,CAACG,SAAS,CAACM,IAAI,CAACK,QAAQ,CAAC;MAC7C;IACJ;IACA,IAAIP,KAAK,CAACC,OAAO,CAACT,IAAI,CAACgB,gBAAgB,CAAC,EAAE;MACtC,KAAK,IAAIC,eAAe,IAAIjB,IAAI,CAACgB,gBAAgB,EAAE;QAC/C1E,IAAI,CAACwE,gBAAgB,CAAC;UAAElB,EAAE,EAAEb,MAAM;UAAEzC,IAAI,EAAEiE,WAAW;UAAEW,WAAW,EAAED;QAAgB,CAAC,EAAE,IAAI,CAACrD,gBAAgB,CAAC;MACjH;IACJ;IACA,IAAI,OAAOoC,IAAI,CAACmB,SAAS,KAAK,QAAQ,IAAInB,IAAI,CAACmB,SAAS,CAAC9D,MAAM,GAAG,CAAC,EAAE;MACjE,IAAI+D,iBAAiB,GAAGpB,IAAI,CAACmB,SAAS;MACtC,IAAIC,iBAAiB,CAACC,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;QACrCD,iBAAiB,GAAG,GAAG,GAAGA,iBAAiB;MAC/C;MACA,IAAI;QACA,IAAIE,cAAc,GAAG,IAAIC,MAAM,CAACH,iBAAiB,CAAC;QAClD,IAAI,CAAC7E,OAAO,CAACiF,wBAAwB,CAACF,cAAc,CAAC,EAAE;UACnDhF,IAAI,CAACwE,gBAAgB,CAAC;YAAElB,EAAE,EAAEb,MAAM;YAAEzC,IAAI,EAAEiE,WAAW;YAAEkB,SAAS,EAAEH;UAAe,CAAC,EAAE,IAAI,CAAC1D,gBAAgB,CAAC;QAC9G;MACJ,CAAC,CACD,OAAO8D,GAAG,EAAE;QACR;QACAvF,iBAAiB,CAACuF,GAAG,CAAC;MAC1B;IACJ;IACAzB,gBAAgB,CAACd,OAAO,CAACuB,IAAI,CAAC3B,MAAM,CAAC;IACrC,IAAI4C,WAAW,GAAG,IAAI;IACtB,IAAI,OAAO3B,IAAI,CAACb,OAAO,KAAK,WAAW,IAAIqB,KAAK,CAACC,OAAO,CAACT,IAAI,CAACb,OAAO,CAAC,EAAE;MACpE,IAAIa,IAAI,CAACb,OAAO,CAAC9B,MAAM,KAAK,CAAC,EAAE;QAC3B;QACAsE,WAAW,GAAG,CAAC,IAAI,CAAC;MACxB,CAAC,MACI;QACDA,WAAW,GAAG3B,IAAI,CAACb,OAAO;MAC9B;IACJ;IACA,IAAIwC,WAAW,KAAK,IAAI,EAAE;MACtB,KAAK,MAAMC,SAAS,IAAID,WAAW,EAAE;QACjC,IAAI,CAACC,SAAS,IAAIA,SAAS,CAACvE,MAAM,KAAK,CAAC,EAAE;UACtC;QACJ;QACA4C,gBAAgB,CAACd,OAAO,CAACuB,IAAI,CAACkB,SAAS,CAAC;MAC5C;IACJ;IACA,IAAIC,eAAe,GAAIF,WAAW,KAAK,IAAI,IAAIA,WAAW,CAACtE,MAAM,GAAG,CAAE;IACtE,IAAIwE,eAAe,IAAIF,WAAW,CAAC,CAAC,CAAC,KAAK,IAAI,EAAE;MAC5C;IAAA,CACH,MACI;MACD,IAAIG,QAAQ,GAAG,CAACD,eAAe,GAAGF,WAAW,CAAC,CAAC,CAAC,GAAG,IAAI,KAAK5C,MAAM;MAClE,IAAI8C,eAAe,IAAI,CAAC5B,gBAAgB,CAAChB,IAAI,EAAE;QAC3CgB,gBAAgB,CAAChB,IAAI,GAAG6C,QAAQ;MACpC;IACJ;IACA,IAAI9B,IAAI,CAACY,aAAa,EAAE;MACpBX,gBAAgB,CAACI,kBAAkB,CAACK,IAAI,CAACV,IAAI,CAACY,aAAa,CAAC;IAChE;EACJ;EACAmB,gBAAgBA,CAACC,gBAAgB,EAAE;IAC/B;IACA,IAAIlF,cAAc,CAACoD,IAAI,CAAC,IAAI,CAAChC,aAAa,EAAE8D,gBAAgB,CAAC,EAAE;MAC3D,OAAO,IAAI;IACf;IACA;IACA,OAAOlF,cAAc,CAACoD,IAAI,CAAC,IAAI,CAACjC,UAAU,EAAE+D,gBAAgB,CAAC;EACjE;EACAC,iCAAiCA,CAACC,iBAAiB,EAAE;IACjD,IAAI,CAACpF,cAAc,CAACoD,IAAI,CAAC,IAAI,CAAC9B,iBAAiB,EAAE8D,iBAAiB,CAAC,EAAE;MACjE,OAAO,IAAI;IACf;IACA,OAAO,IAAI,CAAC9D,iBAAiB,CAAC8D,iBAAiB,CAAC,CAAClD,QAAQ;EAC7D;EACAmD,cAAcA,CAACC,0CAA0C,EAAE;IACvD,IAAI,CAACA,0CAA0C,EAAE;MAC7C,OAAO,EAAE;IACb;IACA,OAAQA,0CAA0C,CAC9CC,KAAK,CAAC,GAAG,CAAC,CACV1C,GAAG,CAAE2C,YAAY,IAAKA,YAAY,CAACC,IAAI,CAAC,CAAC,CAAC,CAC1C5C,GAAG,CAAE2C,YAAY,IAAK;MACtB,IAAIxF,cAAc,CAACoD,IAAI,CAAC,IAAI,CAAChC,aAAa,EAAEoE,YAAY,CAAC,EAAE;QACvD,OAAO,IAAI,CAACpE,aAAa,CAACoE,YAAY,CAAC,CAACtD,QAAQ;MACpD;MACA,OAAOsD,YAAY;IACvB,CAAC,CAAC,CACEE,MAAM,CAAEC,MAAM,IAAK;MACnB,OAAO3F,cAAc,CAACoD,IAAI,CAAC,IAAI,CAACjC,UAAU,EAAEwE,MAAM,CAAC;IACvD,CAAC,CAAC;EACN;EACAC,qBAAqBA,CAACC,OAAO,EAAE;IAC3B,IAAIA,OAAO,KAAKhG,YAAY,IAAIgG,OAAO,KAAK,CAAC,CAAC,YAAY;MACtD,OAAOjG,wBAAwB;IACnC;IACA,IAAI+F,MAAM;IACV,IAAI,OAAOE,OAAO,KAAK,QAAQ,EAAE;MAC7BF,MAAM,GAAGE,OAAO;IACpB,CAAC,MACI;MACDF,MAAM,GAAG,IAAI,CAAC3E,qBAAqB,CAAC6E,OAAO,CAAC;MAC5C,IAAI,CAACF,MAAM,EAAE;QACT,OAAO,IAAI;MACf;IACJ;IACA,IAAI,CAAC3F,cAAc,CAACoD,IAAI,CAAC,IAAI,CAACjC,UAAU,EAAEwE,MAAM,CAAC,EAAE;MAC/C,OAAO,IAAI;IACf;IACA,OAAO,IAAI,CAACxE,UAAU,CAACwE,MAAM,CAAC,CAACvD,UAAU;EAC7C;EACA0D,iCAAiCA,CAACC,QAAQ,EAAE1B,SAAS,EAAE;IACnD,IAAI,CAAC0B,QAAQ,IAAI,CAAC1B,SAAS,EAAE;MACzB,OAAO,EAAE;IACb;IACA,IAAI2B,SAAS,GAAGxG,IAAI,CAACyG,cAAc,CAACF,QAAQ,EAAE1B,SAAS,CAAC;IACxD,OAAO,IAAI,CAACgB,cAAc,CAACW,SAAS,CAACE,IAAI,CAAC,GAAG,CAAC,CAAC;EACnD;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}