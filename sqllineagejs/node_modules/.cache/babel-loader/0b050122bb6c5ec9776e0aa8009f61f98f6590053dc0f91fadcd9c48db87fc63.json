{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport * as platform from '../../registry/common/platform.js';\nimport { Color, RGBA } from '../../../base/common/color.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport * as nls from '../../../nls.js';\nimport { Extensions as JSONExtensions } from '../../jsonschemas/common/jsonContributionRegistry.js';\nimport { RunOnceScheduler } from '../../../base/common/async.js';\n// color registry\nexport const Extensions = {\n  ColorContribution: 'base.contributions.colors'\n};\nclass ColorRegistry {\n  constructor() {\n    this._onDidChangeSchema = new Emitter();\n    this.onDidChangeSchema = this._onDidChangeSchema.event;\n    this.colorSchema = {\n      type: 'object',\n      properties: {}\n    };\n    this.colorReferenceSchema = {\n      type: 'string',\n      enum: [],\n      enumDescriptions: []\n    };\n    this.colorsById = {};\n  }\n  registerColor(id, defaults, description) {\n    let needsTransparency = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    let deprecationMessage = arguments.length > 4 ? arguments[4] : undefined;\n    let colorContribution = {\n      id,\n      description,\n      defaults,\n      needsTransparency,\n      deprecationMessage\n    };\n    this.colorsById[id] = colorContribution;\n    let propertySchema = {\n      type: 'string',\n      description,\n      format: 'color-hex',\n      defaultSnippets: [{\n        body: '${1:#ff0000}'\n      }]\n    };\n    if (deprecationMessage) {\n      propertySchema.deprecationMessage = deprecationMessage;\n    }\n    this.colorSchema.properties[id] = propertySchema;\n    this.colorReferenceSchema.enum.push(id);\n    this.colorReferenceSchema.enumDescriptions.push(description);\n    this._onDidChangeSchema.fire();\n    return id;\n  }\n  resolveDefaultColor(id, theme) {\n    const colorDesc = this.colorsById[id];\n    if (colorDesc && colorDesc.defaults) {\n      const colorValue = colorDesc.defaults[theme.type];\n      return resolveColorValue(colorValue, theme);\n    }\n    return undefined;\n  }\n  getColorSchema() {\n    return this.colorSchema;\n  }\n  toString() {\n    let sorter = (a, b) => {\n      let cat1 = a.indexOf('.') === -1 ? 0 : 1;\n      let cat2 = b.indexOf('.') === -1 ? 0 : 1;\n      if (cat1 !== cat2) {\n        return cat1 - cat2;\n      }\n      return a.localeCompare(b);\n    };\n    return Object.keys(this.colorsById).sort(sorter).map(k => \"- `\".concat(k, \"`: \").concat(this.colorsById[k].description)).join('\\n');\n  }\n}\nconst colorRegistry = new ColorRegistry();\nplatform.Registry.add(Extensions.ColorContribution, colorRegistry);\nexport function registerColor(id, defaults, description, needsTransparency, deprecationMessage) {\n  return colorRegistry.registerColor(id, defaults, description, needsTransparency, deprecationMessage);\n}\n// ----- base colors\nexport const foreground = registerColor('foreground', {\n  dark: '#CCCCCC',\n  light: '#616161',\n  hc: '#FFFFFF'\n}, nls.localize('foreground', \"Overall foreground color. This color is only used if not overridden by a component.\"));\nexport const errorForeground = registerColor('errorForeground', {\n  dark: '#F48771',\n  light: '#A1260D',\n  hc: '#F48771'\n}, nls.localize('errorForeground', \"Overall foreground color for error messages. This color is only used if not overridden by a component.\"));\nexport const iconForeground = registerColor('icon.foreground', {\n  dark: '#C5C5C5',\n  light: '#424242',\n  hc: '#FFFFFF'\n}, nls.localize('iconForeground', \"The default color for icons in the workbench.\"));\nexport const focusBorder = registerColor('focusBorder', {\n  dark: '#007FD4',\n  light: '#0090F1',\n  hc: '#F38518'\n}, nls.localize('focusBorder', \"Overall border color for focused elements. This color is only used if not overridden by a component.\"));\nexport const contrastBorder = registerColor('contrastBorder', {\n  light: null,\n  dark: null,\n  hc: '#6FC3DF'\n}, nls.localize('contrastBorder', \"An extra border around elements to separate them from others for greater contrast.\"));\nexport const activeContrastBorder = registerColor('contrastActiveBorder', {\n  light: null,\n  dark: null,\n  hc: focusBorder\n}, nls.localize('activeContrastBorder', \"An extra border around active elements to separate them from others for greater contrast.\"));\nexport const textLinkForeground = registerColor('textLink.foreground', {\n  light: '#006AB1',\n  dark: '#3794FF',\n  hc: '#3794FF'\n}, nls.localize('textLinkForeground', \"Foreground color for links in text.\"));\nexport const textCodeBlockBackground = registerColor('textCodeBlock.background', {\n  light: '#dcdcdc66',\n  dark: '#0a0a0a66',\n  hc: Color.black\n}, nls.localize('textCodeBlockBackground', \"Background color for code blocks in text.\"));\n// ----- widgets\nexport const widgetShadow = registerColor('widget.shadow', {\n  dark: transparent(Color.black, .36),\n  light: transparent(Color.black, .16),\n  hc: null\n}, nls.localize('widgetShadow', 'Shadow color of widgets such as find/replace inside the editor.'));\nexport const inputBackground = registerColor('input.background', {\n  dark: '#3C3C3C',\n  light: Color.white,\n  hc: Color.black\n}, nls.localize('inputBoxBackground', \"Input box background.\"));\nexport const inputForeground = registerColor('input.foreground', {\n  dark: foreground,\n  light: foreground,\n  hc: foreground\n}, nls.localize('inputBoxForeground', \"Input box foreground.\"));\nexport const inputBorder = registerColor('input.border', {\n  dark: null,\n  light: null,\n  hc: contrastBorder\n}, nls.localize('inputBoxBorder', \"Input box border.\"));\nexport const inputActiveOptionBorder = registerColor('inputOption.activeBorder', {\n  dark: '#007ACC00',\n  light: '#007ACC00',\n  hc: contrastBorder\n}, nls.localize('inputBoxActiveOptionBorder', \"Border color of activated options in input fields.\"));\nexport const inputActiveOptionBackground = registerColor('inputOption.activeBackground', {\n  dark: transparent(focusBorder, 0.4),\n  light: transparent(focusBorder, 0.2),\n  hc: Color.transparent\n}, nls.localize('inputOption.activeBackground', \"Background color of activated options in input fields.\"));\nexport const inputActiveOptionForeground = registerColor('inputOption.activeForeground', {\n  dark: Color.white,\n  light: Color.black,\n  hc: null\n}, nls.localize('inputOption.activeForeground', \"Foreground color of activated options in input fields.\"));\nexport const inputValidationInfoBackground = registerColor('inputValidation.infoBackground', {\n  dark: '#063B49',\n  light: '#D6ECF2',\n  hc: Color.black\n}, nls.localize('inputValidationInfoBackground', \"Input validation background color for information severity.\"));\nexport const inputValidationInfoForeground = registerColor('inputValidation.infoForeground', {\n  dark: null,\n  light: null,\n  hc: null\n}, nls.localize('inputValidationInfoForeground', \"Input validation foreground color for information severity.\"));\nexport const inputValidationInfoBorder = registerColor('inputValidation.infoBorder', {\n  dark: '#007acc',\n  light: '#007acc',\n  hc: contrastBorder\n}, nls.localize('inputValidationInfoBorder', \"Input validation border color for information severity.\"));\nexport const inputValidationWarningBackground = registerColor('inputValidation.warningBackground', {\n  dark: '#352A05',\n  light: '#F6F5D2',\n  hc: Color.black\n}, nls.localize('inputValidationWarningBackground', \"Input validation background color for warning severity.\"));\nexport const inputValidationWarningForeground = registerColor('inputValidation.warningForeground', {\n  dark: null,\n  light: null,\n  hc: null\n}, nls.localize('inputValidationWarningForeground', \"Input validation foreground color for warning severity.\"));\nexport const inputValidationWarningBorder = registerColor('inputValidation.warningBorder', {\n  dark: '#B89500',\n  light: '#B89500',\n  hc: contrastBorder\n}, nls.localize('inputValidationWarningBorder', \"Input validation border color for warning severity.\"));\nexport const inputValidationErrorBackground = registerColor('inputValidation.errorBackground', {\n  dark: '#5A1D1D',\n  light: '#F2DEDE',\n  hc: Color.black\n}, nls.localize('inputValidationErrorBackground', \"Input validation background color for error severity.\"));\nexport const inputValidationErrorForeground = registerColor('inputValidation.errorForeground', {\n  dark: null,\n  light: null,\n  hc: null\n}, nls.localize('inputValidationErrorForeground', \"Input validation foreground color for error severity.\"));\nexport const inputValidationErrorBorder = registerColor('inputValidation.errorBorder', {\n  dark: '#BE1100',\n  light: '#BE1100',\n  hc: contrastBorder\n}, nls.localize('inputValidationErrorBorder', \"Input validation border color for error severity.\"));\nexport const selectBackground = registerColor('dropdown.background', {\n  dark: '#3C3C3C',\n  light: Color.white,\n  hc: Color.black\n}, nls.localize('dropdownBackground', \"Dropdown background.\"));\nexport const selectForeground = registerColor('dropdown.foreground', {\n  dark: '#F0F0F0',\n  light: null,\n  hc: Color.white\n}, nls.localize('dropdownForeground', \"Dropdown foreground.\"));\nexport const buttonForeground = registerColor('button.foreground', {\n  dark: Color.white,\n  light: Color.white,\n  hc: Color.white\n}, nls.localize('buttonForeground', \"Button foreground color.\"));\nexport const buttonBackground = registerColor('button.background', {\n  dark: '#0E639C',\n  light: '#007ACC',\n  hc: null\n}, nls.localize('buttonBackground', \"Button background color.\"));\nexport const buttonHoverBackground = registerColor('button.hoverBackground', {\n  dark: lighten(buttonBackground, 0.2),\n  light: darken(buttonBackground, 0.2),\n  hc: null\n}, nls.localize('buttonHoverBackground', \"Button background color when hovering.\"));\nexport const badgeBackground = registerColor('badge.background', {\n  dark: '#4D4D4D',\n  light: '#C4C4C4',\n  hc: Color.black\n}, nls.localize('badgeBackground', \"Badge background color. Badges are small information labels, e.g. for search results count.\"));\nexport const badgeForeground = registerColor('badge.foreground', {\n  dark: Color.white,\n  light: '#333',\n  hc: Color.white\n}, nls.localize('badgeForeground', \"Badge foreground color. Badges are small information labels, e.g. for search results count.\"));\nexport const scrollbarShadow = registerColor('scrollbar.shadow', {\n  dark: '#000000',\n  light: '#DDDDDD',\n  hc: null\n}, nls.localize('scrollbarShadow', \"Scrollbar shadow to indicate that the view is scrolled.\"));\nexport const scrollbarSliderBackground = registerColor('scrollbarSlider.background', {\n  dark: Color.fromHex('#797979').transparent(0.4),\n  light: Color.fromHex('#646464').transparent(0.4),\n  hc: transparent(contrastBorder, 0.6)\n}, nls.localize('scrollbarSliderBackground', \"Scrollbar slider background color.\"));\nexport const scrollbarSliderHoverBackground = registerColor('scrollbarSlider.hoverBackground', {\n  dark: Color.fromHex('#646464').transparent(0.7),\n  light: Color.fromHex('#646464').transparent(0.7),\n  hc: transparent(contrastBorder, 0.8)\n}, nls.localize('scrollbarSliderHoverBackground', \"Scrollbar slider background color when hovering.\"));\nexport const scrollbarSliderActiveBackground = registerColor('scrollbarSlider.activeBackground', {\n  dark: Color.fromHex('#BFBFBF').transparent(0.4),\n  light: Color.fromHex('#000000').transparent(0.6),\n  hc: contrastBorder\n}, nls.localize('scrollbarSliderActiveBackground', \"Scrollbar slider background color when clicked on.\"));\nexport const progressBarBackground = registerColor('progressBar.background', {\n  dark: Color.fromHex('#0E70C0'),\n  light: Color.fromHex('#0E70C0'),\n  hc: contrastBorder\n}, nls.localize('progressBarBackground', \"Background color of the progress bar that can show for long running operations.\"));\nexport const editorErrorBackground = registerColor('editorError.background', {\n  dark: null,\n  light: null,\n  hc: null\n}, nls.localize('editorError.background', 'Background color of error text in the editor. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const editorErrorForeground = registerColor('editorError.foreground', {\n  dark: '#F48771',\n  light: '#E51400',\n  hc: null\n}, nls.localize('editorError.foreground', 'Foreground color of error squigglies in the editor.'));\nexport const editorErrorBorder = registerColor('editorError.border', {\n  dark: null,\n  light: null,\n  hc: Color.fromHex('#E47777').transparent(0.8)\n}, nls.localize('errorBorder', 'Border color of error boxes in the editor.'));\nexport const editorWarningBackground = registerColor('editorWarning.background', {\n  dark: null,\n  light: null,\n  hc: null\n}, nls.localize('editorWarning.background', 'Background color of warning text in the editor. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const editorWarningForeground = registerColor('editorWarning.foreground', {\n  dark: '#CCA700',\n  light: '#E9A700',\n  hc: null\n}, nls.localize('editorWarning.foreground', 'Foreground color of warning squigglies in the editor.'));\nexport const editorWarningBorder = registerColor('editorWarning.border', {\n  dark: null,\n  light: null,\n  hc: Color.fromHex('#FFCC00').transparent(0.8)\n}, nls.localize('warningBorder', 'Border color of warning boxes in the editor.'));\nexport const editorInfoBackground = registerColor('editorInfo.background', {\n  dark: null,\n  light: null,\n  hc: null\n}, nls.localize('editorInfo.background', 'Background color of info text in the editor. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const editorInfoForeground = registerColor('editorInfo.foreground', {\n  dark: '#75BEFF',\n  light: '#75BEFF',\n  hc: null\n}, nls.localize('editorInfo.foreground', 'Foreground color of info squigglies in the editor.'));\nexport const editorInfoBorder = registerColor('editorInfo.border', {\n  dark: null,\n  light: null,\n  hc: Color.fromHex('#75BEFF').transparent(0.8)\n}, nls.localize('infoBorder', 'Border color of info boxes in the editor.'));\nexport const editorHintForeground = registerColor('editorHint.foreground', {\n  dark: Color.fromHex('#eeeeee').transparent(0.7),\n  light: '#6c6c6c',\n  hc: null\n}, nls.localize('editorHint.foreground', 'Foreground color of hint squigglies in the editor.'));\nexport const editorHintBorder = registerColor('editorHint.border', {\n  dark: null,\n  light: null,\n  hc: Color.fromHex('#eeeeee').transparent(0.8)\n}, nls.localize('hintBorder', 'Border color of hint boxes in the editor.'));\n/**\r\n * Editor background color.\r\n * Because of bug https://monacotools.visualstudio.com/DefaultCollection/Monaco/_workitems/edit/13254\r\n * we are *not* using the color white (or #ffffff, rgba(255,255,255)) but something very close to white.\r\n */\nexport const editorBackground = registerColor('editor.background', {\n  light: '#fffffe',\n  dark: '#1E1E1E',\n  hc: Color.black\n}, nls.localize('editorBackground', \"Editor background color.\"));\n/**\r\n * Editor foreground color.\r\n */\nexport const editorForeground = registerColor('editor.foreground', {\n  light: '#333333',\n  dark: '#BBBBBB',\n  hc: Color.white\n}, nls.localize('editorForeground', \"Editor default foreground color.\"));\n/**\r\n * Editor widgets\r\n */\nexport const editorWidgetBackground = registerColor('editorWidget.background', {\n  dark: '#252526',\n  light: '#F3F3F3',\n  hc: '#0C141F'\n}, nls.localize('editorWidgetBackground', 'Background color of editor widgets, such as find/replace.'));\nexport const editorWidgetForeground = registerColor('editorWidget.foreground', {\n  dark: foreground,\n  light: foreground,\n  hc: foreground\n}, nls.localize('editorWidgetForeground', 'Foreground color of editor widgets, such as find/replace.'));\nexport const editorWidgetBorder = registerColor('editorWidget.border', {\n  dark: '#454545',\n  light: '#C8C8C8',\n  hc: contrastBorder\n}, nls.localize('editorWidgetBorder', 'Border color of editor widgets. The color is only used if the widget chooses to have a border and if the color is not overridden by a widget.'));\nexport const editorWidgetResizeBorder = registerColor('editorWidget.resizeBorder', {\n  light: null,\n  dark: null,\n  hc: null\n}, nls.localize('editorWidgetResizeBorder', \"Border color of the resize bar of editor widgets. The color is only used if the widget chooses to have a resize border and if the color is not overridden by a widget.\"));\n/**\r\n * Quick pick widget\r\n */\nexport const quickInputBackground = registerColor('quickInput.background', {\n  dark: editorWidgetBackground,\n  light: editorWidgetBackground,\n  hc: editorWidgetBackground\n}, nls.localize('pickerBackground', \"Quick picker background color. The quick picker widget is the container for pickers like the command palette.\"));\nexport const quickInputForeground = registerColor('quickInput.foreground', {\n  dark: editorWidgetForeground,\n  light: editorWidgetForeground,\n  hc: editorWidgetForeground\n}, nls.localize('pickerForeground', \"Quick picker foreground color. The quick picker widget is the container for pickers like the command palette.\"));\nexport const quickInputTitleBackground = registerColor('quickInputTitle.background', {\n  dark: new Color(new RGBA(255, 255, 255, 0.105)),\n  light: new Color(new RGBA(0, 0, 0, 0.06)),\n  hc: '#000000'\n}, nls.localize('pickerTitleBackground', \"Quick picker title background color. The quick picker widget is the container for pickers like the command palette.\"));\nexport const pickerGroupForeground = registerColor('pickerGroup.foreground', {\n  dark: '#3794FF',\n  light: '#0066BF',\n  hc: Color.white\n}, nls.localize('pickerGroupForeground', \"Quick picker color for grouping labels.\"));\nexport const pickerGroupBorder = registerColor('pickerGroup.border', {\n  dark: '#3F3F46',\n  light: '#CCCEDB',\n  hc: Color.white\n}, nls.localize('pickerGroupBorder', \"Quick picker color for grouping borders.\"));\n/**\r\n * Editor selection colors.\r\n */\nexport const editorSelectionBackground = registerColor('editor.selectionBackground', {\n  light: '#ADD6FF',\n  dark: '#264F78',\n  hc: '#f3f518'\n}, nls.localize('editorSelectionBackground', \"Color of the editor selection.\"));\nexport const editorSelectionForeground = registerColor('editor.selectionForeground', {\n  light: null,\n  dark: null,\n  hc: '#000000'\n}, nls.localize('editorSelectionForeground', \"Color of the selected text for high contrast.\"));\nexport const editorInactiveSelection = registerColor('editor.inactiveSelectionBackground', {\n  light: transparent(editorSelectionBackground, 0.5),\n  dark: transparent(editorSelectionBackground, 0.5),\n  hc: transparent(editorSelectionBackground, 0.5)\n}, nls.localize('editorInactiveSelection', \"Color of the selection in an inactive editor. The color must not be opaque so as not to hide underlying decorations.\"), true);\nexport const editorSelectionHighlight = registerColor('editor.selectionHighlightBackground', {\n  light: lessProminent(editorSelectionBackground, editorBackground, 0.3, 0.6),\n  dark: lessProminent(editorSelectionBackground, editorBackground, 0.3, 0.6),\n  hc: null\n}, nls.localize('editorSelectionHighlight', 'Color for regions with the same content as the selection. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const editorSelectionHighlightBorder = registerColor('editor.selectionHighlightBorder', {\n  light: null,\n  dark: null,\n  hc: activeContrastBorder\n}, nls.localize('editorSelectionHighlightBorder', \"Border color for regions with the same content as the selection.\"));\n/**\r\n * Editor find match colors.\r\n */\nexport const editorFindMatch = registerColor('editor.findMatchBackground', {\n  light: '#A8AC94',\n  dark: '#515C6A',\n  hc: null\n}, nls.localize('editorFindMatch', \"Color of the current search match.\"));\nexport const editorFindMatchHighlight = registerColor('editor.findMatchHighlightBackground', {\n  light: '#EA5C0055',\n  dark: '#EA5C0055',\n  hc: null\n}, nls.localize('findMatchHighlight', \"Color of the other search matches. The color must not be opaque so as not to hide underlying decorations.\"), true);\nexport const editorFindRangeHighlight = registerColor('editor.findRangeHighlightBackground', {\n  dark: '#3a3d4166',\n  light: '#b4b4b44d',\n  hc: null\n}, nls.localize('findRangeHighlight', \"Color of the range limiting the search. The color must not be opaque so as not to hide underlying decorations.\"), true);\nexport const editorFindMatchBorder = registerColor('editor.findMatchBorder', {\n  light: null,\n  dark: null,\n  hc: activeContrastBorder\n}, nls.localize('editorFindMatchBorder', \"Border color of the current search match.\"));\nexport const editorFindMatchHighlightBorder = registerColor('editor.findMatchHighlightBorder', {\n  light: null,\n  dark: null,\n  hc: activeContrastBorder\n}, nls.localize('findMatchHighlightBorder', \"Border color of the other search matches.\"));\nexport const editorFindRangeHighlightBorder = registerColor('editor.findRangeHighlightBorder', {\n  dark: null,\n  light: null,\n  hc: transparent(activeContrastBorder, 0.4)\n}, nls.localize('findRangeHighlightBorder', \"Border color of the range limiting the search. The color must not be opaque so as not to hide underlying decorations.\"), true);\n/**\r\n * Editor hover\r\n */\nexport const editorHoverHighlight = registerColor('editor.hoverHighlightBackground', {\n  light: '#ADD6FF26',\n  dark: '#264f7840',\n  hc: '#ADD6FF26'\n}, nls.localize('hoverHighlight', 'Highlight below the word for which a hover is shown. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const editorHoverBackground = registerColor('editorHoverWidget.background', {\n  light: editorWidgetBackground,\n  dark: editorWidgetBackground,\n  hc: editorWidgetBackground\n}, nls.localize('hoverBackground', 'Background color of the editor hover.'));\nexport const editorHoverForeground = registerColor('editorHoverWidget.foreground', {\n  light: editorWidgetForeground,\n  dark: editorWidgetForeground,\n  hc: editorWidgetForeground\n}, nls.localize('hoverForeground', 'Foreground color of the editor hover.'));\nexport const editorHoverBorder = registerColor('editorHoverWidget.border', {\n  light: editorWidgetBorder,\n  dark: editorWidgetBorder,\n  hc: editorWidgetBorder\n}, nls.localize('hoverBorder', 'Border color of the editor hover.'));\nexport const editorHoverStatusBarBackground = registerColor('editorHoverWidget.statusBarBackground', {\n  dark: lighten(editorHoverBackground, 0.2),\n  light: darken(editorHoverBackground, 0.05),\n  hc: editorWidgetBackground\n}, nls.localize('statusBarBackground', \"Background color of the editor hover status bar.\"));\n/**\r\n * Editor link colors\r\n */\nexport const editorActiveLinkForeground = registerColor('editorLink.activeForeground', {\n  dark: '#4E94CE',\n  light: Color.blue,\n  hc: Color.cyan\n}, nls.localize('activeLinkForeground', 'Color of active links.'));\n/**\r\n * Inline hints\r\n */\nexport const editorInlineHintForeground = registerColor('editorInlineHint.foreground', {\n  dark: editorWidgetBackground,\n  light: editorWidgetForeground,\n  hc: editorWidgetBackground\n}, nls.localize('editorInlineHintForeground', 'Foreground color of inline hints'));\nexport const editorInlineHintBackground = registerColor('editorInlineHint.background', {\n  dark: editorWidgetForeground,\n  light: editorWidgetBackground,\n  hc: editorWidgetForeground\n}, nls.localize('editorInlineHintBackground', 'Background color of inline hints'));\n/**\r\n * Editor lighbulb icon colors\r\n */\nexport const editorLightBulbForeground = registerColor('editorLightBulb.foreground', {\n  dark: '#FFCC00',\n  light: '#DDB100',\n  hc: '#FFCC00'\n}, nls.localize('editorLightBulbForeground', \"The color used for the lightbulb actions icon.\"));\nexport const editorLightBulbAutoFixForeground = registerColor('editorLightBulbAutoFix.foreground', {\n  dark: '#75BEFF',\n  light: '#007ACC',\n  hc: '#75BEFF'\n}, nls.localize('editorLightBulbAutoFixForeground', \"The color used for the lightbulb auto fix actions icon.\"));\n/**\r\n * Diff Editor Colors\r\n */\nexport const defaultInsertColor = new Color(new RGBA(155, 185, 85, 0.2));\nexport const defaultRemoveColor = new Color(new RGBA(255, 0, 0, 0.2));\nexport const diffInserted = registerColor('diffEditor.insertedTextBackground', {\n  dark: defaultInsertColor,\n  light: defaultInsertColor,\n  hc: null\n}, nls.localize('diffEditorInserted', 'Background color for text that got inserted. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const diffRemoved = registerColor('diffEditor.removedTextBackground', {\n  dark: defaultRemoveColor,\n  light: defaultRemoveColor,\n  hc: null\n}, nls.localize('diffEditorRemoved', 'Background color for text that got removed. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const diffInsertedOutline = registerColor('diffEditor.insertedTextBorder', {\n  dark: null,\n  light: null,\n  hc: '#33ff2eff'\n}, nls.localize('diffEditorInsertedOutline', 'Outline color for the text that got inserted.'));\nexport const diffRemovedOutline = registerColor('diffEditor.removedTextBorder', {\n  dark: null,\n  light: null,\n  hc: '#FF008F'\n}, nls.localize('diffEditorRemovedOutline', 'Outline color for text that got removed.'));\nexport const diffBorder = registerColor('diffEditor.border', {\n  dark: null,\n  light: null,\n  hc: contrastBorder\n}, nls.localize('diffEditorBorder', 'Border color between the two text editors.'));\nexport const diffDiagonalFill = registerColor('diffEditor.diagonalFill', {\n  dark: '#cccccc33',\n  light: '#22222233',\n  hc: null\n}, nls.localize('diffDiagonalFill', \"Color of the diff editor's diagonal fill. The diagonal fill is used in side-by-side diff views.\"));\n/**\r\n * List and tree colors\r\n */\nexport const listFocusBackground = registerColor('list.focusBackground', {\n  dark: '#062F4A',\n  light: '#D6EBFF',\n  hc: null\n}, nls.localize('listFocusBackground', \"List/Tree background color for the focused item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listFocusForeground = registerColor('list.focusForeground', {\n  dark: null,\n  light: null,\n  hc: null\n}, nls.localize('listFocusForeground', \"List/Tree foreground color for the focused item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listActiveSelectionBackground = registerColor('list.activeSelectionBackground', {\n  dark: '#094771',\n  light: '#0060C0',\n  hc: null\n}, nls.localize('listActiveSelectionBackground', \"List/Tree background color for the selected item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listActiveSelectionForeground = registerColor('list.activeSelectionForeground', {\n  dark: Color.white,\n  light: Color.white,\n  hc: null\n}, nls.localize('listActiveSelectionForeground', \"List/Tree foreground color for the selected item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listInactiveSelectionBackground = registerColor('list.inactiveSelectionBackground', {\n  dark: '#37373D',\n  light: '#E4E6F1',\n  hc: null\n}, nls.localize('listInactiveSelectionBackground', \"List/Tree background color for the selected item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listInactiveSelectionForeground = registerColor('list.inactiveSelectionForeground', {\n  dark: null,\n  light: null,\n  hc: null\n}, nls.localize('listInactiveSelectionForeground', \"List/Tree foreground color for the selected item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listInactiveFocusBackground = registerColor('list.inactiveFocusBackground', {\n  dark: null,\n  light: null,\n  hc: null\n}, nls.localize('listInactiveFocusBackground', \"List/Tree background color for the focused item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listHoverBackground = registerColor('list.hoverBackground', {\n  dark: '#2A2D2E',\n  light: '#F0F0F0',\n  hc: null\n}, nls.localize('listHoverBackground', \"List/Tree background when hovering over items using the mouse.\"));\nexport const listHoverForeground = registerColor('list.hoverForeground', {\n  dark: null,\n  light: null,\n  hc: null\n}, nls.localize('listHoverForeground', \"List/Tree foreground when hovering over items using the mouse.\"));\nexport const listDropBackground = registerColor('list.dropBackground', {\n  dark: listFocusBackground,\n  light: listFocusBackground,\n  hc: null\n}, nls.localize('listDropBackground', \"List/Tree drag and drop background when moving items around using the mouse.\"));\nexport const listHighlightForeground = registerColor('list.highlightForeground', {\n  dark: '#0097fb',\n  light: '#0066BF',\n  hc: focusBorder\n}, nls.localize('highlight', 'List/Tree foreground color of the match highlights when searching inside the list/tree.'));\nexport const listFilterWidgetBackground = registerColor('listFilterWidget.background', {\n  light: '#efc1ad',\n  dark: '#653723',\n  hc: Color.black\n}, nls.localize('listFilterWidgetBackground', 'Background color of the type filter widget in lists and trees.'));\nexport const listFilterWidgetOutline = registerColor('listFilterWidget.outline', {\n  dark: Color.transparent,\n  light: Color.transparent,\n  hc: '#f38518'\n}, nls.localize('listFilterWidgetOutline', 'Outline color of the type filter widget in lists and trees.'));\nexport const listFilterWidgetNoMatchesOutline = registerColor('listFilterWidget.noMatchesOutline', {\n  dark: '#BE1100',\n  light: '#BE1100',\n  hc: contrastBorder\n}, nls.localize('listFilterWidgetNoMatchesOutline', 'Outline color of the type filter widget in lists and trees, when there are no matches.'));\nexport const treeIndentGuidesStroke = registerColor('tree.indentGuidesStroke', {\n  dark: '#585858',\n  light: '#a9a9a9',\n  hc: '#a9a9a9'\n}, nls.localize('treeIndentGuidesStroke', \"Tree stroke color for the indentation guides.\"));\n/**\r\n * Menu colors\r\n */\nexport const menuBorder = registerColor('menu.border', {\n  dark: null,\n  light: null,\n  hc: contrastBorder\n}, nls.localize('menuBorder', \"Border color of menus.\"));\nexport const menuForeground = registerColor('menu.foreground', {\n  dark: selectForeground,\n  light: foreground,\n  hc: selectForeground\n}, nls.localize('menuForeground', \"Foreground color of menu items.\"));\nexport const menuBackground = registerColor('menu.background', {\n  dark: selectBackground,\n  light: selectBackground,\n  hc: selectBackground\n}, nls.localize('menuBackground', \"Background color of menu items.\"));\nexport const menuSelectionForeground = registerColor('menu.selectionForeground', {\n  dark: listActiveSelectionForeground,\n  light: listActiveSelectionForeground,\n  hc: listActiveSelectionForeground\n}, nls.localize('menuSelectionForeground', \"Foreground color of the selected menu item in menus.\"));\nexport const menuSelectionBackground = registerColor('menu.selectionBackground', {\n  dark: listActiveSelectionBackground,\n  light: listActiveSelectionBackground,\n  hc: listActiveSelectionBackground\n}, nls.localize('menuSelectionBackground', \"Background color of the selected menu item in menus.\"));\nexport const menuSelectionBorder = registerColor('menu.selectionBorder', {\n  dark: null,\n  light: null,\n  hc: activeContrastBorder\n}, nls.localize('menuSelectionBorder', \"Border color of the selected menu item in menus.\"));\nexport const menuSeparatorBackground = registerColor('menu.separatorBackground', {\n  dark: '#BBBBBB',\n  light: '#888888',\n  hc: contrastBorder\n}, nls.localize('menuSeparatorBackground', \"Color of a separator menu item in menus.\"));\n/**\r\n * Snippet placeholder colors\r\n */\nexport const snippetTabstopHighlightBackground = registerColor('editor.snippetTabstopHighlightBackground', {\n  dark: new Color(new RGBA(124, 124, 124, 0.3)),\n  light: new Color(new RGBA(10, 50, 100, 0.2)),\n  hc: new Color(new RGBA(124, 124, 124, 0.3))\n}, nls.localize('snippetTabstopHighlightBackground', \"Highlight background color of a snippet tabstop.\"));\nexport const snippetTabstopHighlightBorder = registerColor('editor.snippetTabstopHighlightBorder', {\n  dark: null,\n  light: null,\n  hc: null\n}, nls.localize('snippetTabstopHighlightBorder', \"Highlight border color of a snippet tabstop.\"));\nexport const snippetFinalTabstopHighlightBackground = registerColor('editor.snippetFinalTabstopHighlightBackground', {\n  dark: null,\n  light: null,\n  hc: null\n}, nls.localize('snippetFinalTabstopHighlightBackground', \"Highlight background color of the final tabstop of a snippet.\"));\nexport const snippetFinalTabstopHighlightBorder = registerColor('editor.snippetFinalTabstopHighlightBorder', {\n  dark: '#525252',\n  light: new Color(new RGBA(10, 50, 100, 0.5)),\n  hc: '#525252'\n}, nls.localize('snippetFinalTabstopHighlightBorder', \"Highlight border color of the final tabstop of a snippet.\"));\nexport const overviewRulerFindMatchForeground = registerColor('editorOverviewRuler.findMatchForeground', {\n  dark: '#d186167e',\n  light: '#d186167e',\n  hc: '#AB5A00'\n}, nls.localize('overviewRulerFindMatchForeground', 'Overview ruler marker color for find matches. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const overviewRulerSelectionHighlightForeground = registerColor('editorOverviewRuler.selectionHighlightForeground', {\n  dark: '#A0A0A0CC',\n  light: '#A0A0A0CC',\n  hc: '#A0A0A0CC'\n}, nls.localize('overviewRulerSelectionHighlightForeground', 'Overview ruler marker color for selection highlights. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const minimapFindMatch = registerColor('minimap.findMatchHighlight', {\n  light: '#d18616',\n  dark: '#d18616',\n  hc: '#AB5A00'\n}, nls.localize('minimapFindMatchHighlight', 'Minimap marker color for find matches.'), true);\nexport const minimapSelection = registerColor('minimap.selectionHighlight', {\n  light: '#ADD6FF',\n  dark: '#264F78',\n  hc: '#ffffff'\n}, nls.localize('minimapSelectionHighlight', 'Minimap marker color for the editor selection.'), true);\nexport const minimapError = registerColor('minimap.errorHighlight', {\n  dark: new Color(new RGBA(255, 18, 18, 0.7)),\n  light: new Color(new RGBA(255, 18, 18, 0.7)),\n  hc: new Color(new RGBA(255, 50, 50, 1))\n}, nls.localize('minimapError', 'Minimap marker color for errors.'));\nexport const minimapWarning = registerColor('minimap.warningHighlight', {\n  dark: editorWarningForeground,\n  light: editorWarningForeground,\n  hc: editorWarningBorder\n}, nls.localize('overviewRuleWarning', 'Minimap marker color for warnings.'));\nexport const minimapBackground = registerColor('minimap.background', {\n  dark: null,\n  light: null,\n  hc: null\n}, nls.localize('minimapBackground', \"Minimap background color.\"));\nexport const minimapSliderBackground = registerColor('minimapSlider.background', {\n  light: transparent(scrollbarSliderBackground, 0.5),\n  dark: transparent(scrollbarSliderBackground, 0.5),\n  hc: transparent(scrollbarSliderBackground, 0.5)\n}, nls.localize('minimapSliderBackground', \"Minimap slider background color.\"));\nexport const minimapSliderHoverBackground = registerColor('minimapSlider.hoverBackground', {\n  light: transparent(scrollbarSliderHoverBackground, 0.5),\n  dark: transparent(scrollbarSliderHoverBackground, 0.5),\n  hc: transparent(scrollbarSliderHoverBackground, 0.5)\n}, nls.localize('minimapSliderHoverBackground', \"Minimap slider background color when hovering.\"));\nexport const minimapSliderActiveBackground = registerColor('minimapSlider.activeBackground', {\n  light: transparent(scrollbarSliderActiveBackground, 0.5),\n  dark: transparent(scrollbarSliderActiveBackground, 0.5),\n  hc: transparent(scrollbarSliderActiveBackground, 0.5)\n}, nls.localize('minimapSliderActiveBackground', \"Minimap slider background color when clicked on.\"));\nexport const problemsErrorIconForeground = registerColor('problemsErrorIcon.foreground', {\n  dark: editorErrorForeground,\n  light: editorErrorForeground,\n  hc: editorErrorForeground\n}, nls.localize('problemsErrorIconForeground', \"The color used for the problems error icon.\"));\nexport const problemsWarningIconForeground = registerColor('problemsWarningIcon.foreground', {\n  dark: editorWarningForeground,\n  light: editorWarningForeground,\n  hc: editorWarningForeground\n}, nls.localize('problemsWarningIconForeground', \"The color used for the problems warning icon.\"));\nexport const problemsInfoIconForeground = registerColor('problemsInfoIcon.foreground', {\n  dark: editorInfoForeground,\n  light: editorInfoForeground,\n  hc: editorInfoForeground\n}, nls.localize('problemsInfoIconForeground', \"The color used for the problems info icon.\"));\n// ----- color functions\nexport function darken(colorValue, factor) {\n  return theme => {\n    let color = resolveColorValue(colorValue, theme);\n    if (color) {\n      return color.darken(factor);\n    }\n    return undefined;\n  };\n}\nexport function lighten(colorValue, factor) {\n  return theme => {\n    let color = resolveColorValue(colorValue, theme);\n    if (color) {\n      return color.lighten(factor);\n    }\n    return undefined;\n  };\n}\nexport function transparent(colorValue, factor) {\n  return theme => {\n    let color = resolveColorValue(colorValue, theme);\n    if (color) {\n      return color.transparent(factor);\n    }\n    return undefined;\n  };\n}\nexport function oneOf() {\n  for (var _len = arguments.length, colorValues = new Array(_len), _key = 0; _key < _len; _key++) {\n    colorValues[_key] = arguments[_key];\n  }\n  return theme => {\n    for (let colorValue of colorValues) {\n      let color = resolveColorValue(colorValue, theme);\n      if (color) {\n        return color;\n      }\n    }\n    return undefined;\n  };\n}\nfunction lessProminent(colorValue, backgroundColorValue, factor, transparency) {\n  return theme => {\n    let from = resolveColorValue(colorValue, theme);\n    if (from) {\n      let backgroundColor = resolveColorValue(backgroundColorValue, theme);\n      if (backgroundColor) {\n        if (from.isDarkerThan(backgroundColor)) {\n          return Color.getLighterColor(from, backgroundColor, factor).transparent(transparency);\n        }\n        return Color.getDarkerColor(from, backgroundColor, factor).transparent(transparency);\n      }\n      return from.transparent(factor * transparency);\n    }\n    return undefined;\n  };\n}\n// ----- implementation\n/**\r\n * @param colorValue Resolve a color value in the context of a theme\r\n */\nexport function resolveColorValue(colorValue, theme) {\n  if (colorValue === null) {\n    return undefined;\n  } else if (typeof colorValue === 'string') {\n    if (colorValue[0] === '#') {\n      return Color.fromHex(colorValue);\n    }\n    return theme.getColor(colorValue);\n  } else if (colorValue instanceof Color) {\n    return colorValue;\n  } else if (typeof colorValue === 'function') {\n    return colorValue(theme);\n  }\n  return undefined;\n}\nexport const workbenchColorsSchemaId = 'vscode://schemas/workbench-colors';\nlet schemaRegistry = platform.Registry.as(JSONExtensions.JSONContribution);\nschemaRegistry.registerSchema(workbenchColorsSchemaId, colorRegistry.getColorSchema());\nconst delayer = new RunOnceScheduler(() => schemaRegistry.notifySchemaChanged(workbenchColorsSchemaId), 200);\ncolorRegistry.onDidChangeSchema(() => {\n  if (!delayer.isScheduled()) {\n    delayer.schedule();\n  }\n});\n// setTimeout(_ => console.log(colorRegistry.toString()), 5000);","map":{"version":3,"names":["platform","Color","RGBA","Emitter","nls","Extensions","JSONExtensions","RunOnceScheduler","ColorContribution","ColorRegistry","constructor","_onDidChangeSchema","onDidChangeSchema","event","colorSchema","type","properties","colorReferenceSchema","enum","enumDescriptions","colorsById","registerColor","id","defaults","description","needsTransparency","arguments","length","undefined","deprecationMessage","colorContribution","propertySchema","format","defaultSnippets","body","push","fire","resolveDefaultColor","theme","colorDesc","colorValue","resolveColorValue","getColorSchema","toString","sorter","a","b","cat1","indexOf","cat2","localeCompare","Object","keys","sort","map","k","concat","join","colorRegistry","Registry","add","foreground","dark","light","hc","localize","errorForeground","iconForeground","focusBorder","contrastBorder","activeContrastBorder","textLinkForeground","textCodeBlockBackground","black","widgetShadow","transparent","inputBackground","white","inputForeground","inputBorder","inputActiveOptionBorder","inputActiveOptionBackground","inputActiveOptionForeground","inputValidationInfoBackground","inputValidationInfoForeground","inputValidationInfoBorder","inputValidationWarningBackground","inputValidationWarningForeground","inputValidationWarningBorder","inputValidationErrorBackground","inputValidationErrorForeground","inputValidationErrorBorder","selectBackground","selectForeground","buttonForeground","buttonBackground","buttonHoverBackground","lighten","darken","badgeBackground","badgeForeground","scrollbarShadow","scrollbarSliderBackground","fromHex","scrollbarSliderHoverBackground","scrollbarSliderActiveBackground","progressBarBackground","editorErrorBackground","editorErrorForeground","editorErrorBorder","editorWarningBackground","editorWarningForeground","editorWarningBorder","editorInfoBackground","editorInfoForeground","editorInfoBorder","editorHintForeground","editorHintBorder","editorBackground","editorForeground","editorWidgetBackground","editorWidgetForeground","editorWidgetBorder","editorWidgetResizeBorder","quickInputBackground","quickInputForeground","quickInputTitleBackground","pickerGroupForeground","pickerGroupBorder","editorSelectionBackground","editorSelectionForeground","editorInactiveSelection","editorSelectionHighlight","lessProminent","editorSelectionHighlightBorder","editorFindMatch","editorFindMatchHighlight","editorFindRangeHighlight","editorFindMatchBorder","editorFindMatchHighlightBorder","editorFindRangeHighlightBorder","editorHoverHighlight","editorHoverBackground","editorHoverForeground","editorHoverBorder","editorHoverStatusBarBackground","editorActiveLinkForeground","blue","cyan","editorInlineHintForeground","editorInlineHintBackground","editorLightBulbForeground","editorLightBulbAutoFixForeground","defaultInsertColor","defaultRemoveColor","diffInserted","diffRemoved","diffInsertedOutline","diffRemovedOutline","diffBorder","diffDiagonalFill","listFocusBackground","listFocusForeground","listActiveSelectionBackground","listActiveSelectionForeground","listInactiveSelectionBackground","listInactiveSelectionForeground","listInactiveFocusBackground","listHoverBackground","listHoverForeground","listDropBackground","listHighlightForeground","listFilterWidgetBackground","listFilterWidgetOutline","listFilterWidgetNoMatchesOutline","treeIndentGuidesStroke","menuBorder","menuForeground","menuBackground","menuSelectionForeground","menuSelectionBackground","menuSelectionBorder","menuSeparatorBackground","snippetTabstopHighlightBackground","snippetTabstopHighlightBorder","snippetFinalTabstopHighlightBackground","snippetFinalTabstopHighlightBorder","overviewRulerFindMatchForeground","overviewRulerSelectionHighlightForeground","minimapFindMatch","minimapSelection","minimapError","minimapWarning","minimapBackground","minimapSliderBackground","minimapSliderHoverBackground","minimapSliderActiveBackground","problemsErrorIconForeground","problemsWarningIconForeground","problemsInfoIconForeground","factor","color","oneOf","_len","colorValues","Array","_key","backgroundColorValue","transparency","from","backgroundColor","isDarkerThan","getLighterColor","getDarkerColor","getColor","workbenchColorsSchemaId","schemaRegistry","as","JSONContribution","registerSchema","delayer","notifySchemaChanged","isScheduled","schedule"],"sources":["C:/Users/Administrator/Desktop/sqllineage-master/sqllineagejs/node_modules/monaco-editor/esm/vs/platform/theme/common/colorRegistry.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport * as platform from '../../registry/common/platform.js';\r\nimport { Color, RGBA } from '../../../base/common/color.js';\r\nimport { Emitter } from '../../../base/common/event.js';\r\nimport * as nls from '../../../nls.js';\r\nimport { Extensions as JSONExtensions } from '../../jsonschemas/common/jsonContributionRegistry.js';\r\nimport { RunOnceScheduler } from '../../../base/common/async.js';\r\n// color registry\r\nexport const Extensions = {\r\n    ColorContribution: 'base.contributions.colors'\r\n};\r\nclass ColorRegistry {\r\n    constructor() {\r\n        this._onDidChangeSchema = new Emitter();\r\n        this.onDidChangeSchema = this._onDidChangeSchema.event;\r\n        this.colorSchema = { type: 'object', properties: {} };\r\n        this.colorReferenceSchema = { type: 'string', enum: [], enumDescriptions: [] };\r\n        this.colorsById = {};\r\n    }\r\n    registerColor(id, defaults, description, needsTransparency = false, deprecationMessage) {\r\n        let colorContribution = { id, description, defaults, needsTransparency, deprecationMessage };\r\n        this.colorsById[id] = colorContribution;\r\n        let propertySchema = { type: 'string', description, format: 'color-hex', defaultSnippets: [{ body: '${1:#ff0000}' }] };\r\n        if (deprecationMessage) {\r\n            propertySchema.deprecationMessage = deprecationMessage;\r\n        }\r\n        this.colorSchema.properties[id] = propertySchema;\r\n        this.colorReferenceSchema.enum.push(id);\r\n        this.colorReferenceSchema.enumDescriptions.push(description);\r\n        this._onDidChangeSchema.fire();\r\n        return id;\r\n    }\r\n    resolveDefaultColor(id, theme) {\r\n        const colorDesc = this.colorsById[id];\r\n        if (colorDesc && colorDesc.defaults) {\r\n            const colorValue = colorDesc.defaults[theme.type];\r\n            return resolveColorValue(colorValue, theme);\r\n        }\r\n        return undefined;\r\n    }\r\n    getColorSchema() {\r\n        return this.colorSchema;\r\n    }\r\n    toString() {\r\n        let sorter = (a, b) => {\r\n            let cat1 = a.indexOf('.') === -1 ? 0 : 1;\r\n            let cat2 = b.indexOf('.') === -1 ? 0 : 1;\r\n            if (cat1 !== cat2) {\r\n                return cat1 - cat2;\r\n            }\r\n            return a.localeCompare(b);\r\n        };\r\n        return Object.keys(this.colorsById).sort(sorter).map(k => `- \\`${k}\\`: ${this.colorsById[k].description}`).join('\\n');\r\n    }\r\n}\r\nconst colorRegistry = new ColorRegistry();\r\nplatform.Registry.add(Extensions.ColorContribution, colorRegistry);\r\nexport function registerColor(id, defaults, description, needsTransparency, deprecationMessage) {\r\n    return colorRegistry.registerColor(id, defaults, description, needsTransparency, deprecationMessage);\r\n}\r\n// ----- base colors\r\nexport const foreground = registerColor('foreground', { dark: '#CCCCCC', light: '#616161', hc: '#FFFFFF' }, nls.localize('foreground', \"Overall foreground color. This color is only used if not overridden by a component.\"));\r\nexport const errorForeground = registerColor('errorForeground', { dark: '#F48771', light: '#A1260D', hc: '#F48771' }, nls.localize('errorForeground', \"Overall foreground color for error messages. This color is only used if not overridden by a component.\"));\r\nexport const iconForeground = registerColor('icon.foreground', { dark: '#C5C5C5', light: '#424242', hc: '#FFFFFF' }, nls.localize('iconForeground', \"The default color for icons in the workbench.\"));\r\nexport const focusBorder = registerColor('focusBorder', { dark: '#007FD4', light: '#0090F1', hc: '#F38518' }, nls.localize('focusBorder', \"Overall border color for focused elements. This color is only used if not overridden by a component.\"));\r\nexport const contrastBorder = registerColor('contrastBorder', { light: null, dark: null, hc: '#6FC3DF' }, nls.localize('contrastBorder', \"An extra border around elements to separate them from others for greater contrast.\"));\r\nexport const activeContrastBorder = registerColor('contrastActiveBorder', { light: null, dark: null, hc: focusBorder }, nls.localize('activeContrastBorder', \"An extra border around active elements to separate them from others for greater contrast.\"));\r\nexport const textLinkForeground = registerColor('textLink.foreground', { light: '#006AB1', dark: '#3794FF', hc: '#3794FF' }, nls.localize('textLinkForeground', \"Foreground color for links in text.\"));\r\nexport const textCodeBlockBackground = registerColor('textCodeBlock.background', { light: '#dcdcdc66', dark: '#0a0a0a66', hc: Color.black }, nls.localize('textCodeBlockBackground', \"Background color for code blocks in text.\"));\r\n// ----- widgets\r\nexport const widgetShadow = registerColor('widget.shadow', { dark: transparent(Color.black, .36), light: transparent(Color.black, .16), hc: null }, nls.localize('widgetShadow', 'Shadow color of widgets such as find/replace inside the editor.'));\r\nexport const inputBackground = registerColor('input.background', { dark: '#3C3C3C', light: Color.white, hc: Color.black }, nls.localize('inputBoxBackground', \"Input box background.\"));\r\nexport const inputForeground = registerColor('input.foreground', { dark: foreground, light: foreground, hc: foreground }, nls.localize('inputBoxForeground', \"Input box foreground.\"));\r\nexport const inputBorder = registerColor('input.border', { dark: null, light: null, hc: contrastBorder }, nls.localize('inputBoxBorder', \"Input box border.\"));\r\nexport const inputActiveOptionBorder = registerColor('inputOption.activeBorder', { dark: '#007ACC00', light: '#007ACC00', hc: contrastBorder }, nls.localize('inputBoxActiveOptionBorder', \"Border color of activated options in input fields.\"));\r\nexport const inputActiveOptionBackground = registerColor('inputOption.activeBackground', { dark: transparent(focusBorder, 0.4), light: transparent(focusBorder, 0.2), hc: Color.transparent }, nls.localize('inputOption.activeBackground', \"Background color of activated options in input fields.\"));\r\nexport const inputActiveOptionForeground = registerColor('inputOption.activeForeground', { dark: Color.white, light: Color.black, hc: null }, nls.localize('inputOption.activeForeground', \"Foreground color of activated options in input fields.\"));\r\nexport const inputValidationInfoBackground = registerColor('inputValidation.infoBackground', { dark: '#063B49', light: '#D6ECF2', hc: Color.black }, nls.localize('inputValidationInfoBackground', \"Input validation background color for information severity.\"));\r\nexport const inputValidationInfoForeground = registerColor('inputValidation.infoForeground', { dark: null, light: null, hc: null }, nls.localize('inputValidationInfoForeground', \"Input validation foreground color for information severity.\"));\r\nexport const inputValidationInfoBorder = registerColor('inputValidation.infoBorder', { dark: '#007acc', light: '#007acc', hc: contrastBorder }, nls.localize('inputValidationInfoBorder', \"Input validation border color for information severity.\"));\r\nexport const inputValidationWarningBackground = registerColor('inputValidation.warningBackground', { dark: '#352A05', light: '#F6F5D2', hc: Color.black }, nls.localize('inputValidationWarningBackground', \"Input validation background color for warning severity.\"));\r\nexport const inputValidationWarningForeground = registerColor('inputValidation.warningForeground', { dark: null, light: null, hc: null }, nls.localize('inputValidationWarningForeground', \"Input validation foreground color for warning severity.\"));\r\nexport const inputValidationWarningBorder = registerColor('inputValidation.warningBorder', { dark: '#B89500', light: '#B89500', hc: contrastBorder }, nls.localize('inputValidationWarningBorder', \"Input validation border color for warning severity.\"));\r\nexport const inputValidationErrorBackground = registerColor('inputValidation.errorBackground', { dark: '#5A1D1D', light: '#F2DEDE', hc: Color.black }, nls.localize('inputValidationErrorBackground', \"Input validation background color for error severity.\"));\r\nexport const inputValidationErrorForeground = registerColor('inputValidation.errorForeground', { dark: null, light: null, hc: null }, nls.localize('inputValidationErrorForeground', \"Input validation foreground color for error severity.\"));\r\nexport const inputValidationErrorBorder = registerColor('inputValidation.errorBorder', { dark: '#BE1100', light: '#BE1100', hc: contrastBorder }, nls.localize('inputValidationErrorBorder', \"Input validation border color for error severity.\"));\r\nexport const selectBackground = registerColor('dropdown.background', { dark: '#3C3C3C', light: Color.white, hc: Color.black }, nls.localize('dropdownBackground', \"Dropdown background.\"));\r\nexport const selectForeground = registerColor('dropdown.foreground', { dark: '#F0F0F0', light: null, hc: Color.white }, nls.localize('dropdownForeground', \"Dropdown foreground.\"));\r\nexport const buttonForeground = registerColor('button.foreground', { dark: Color.white, light: Color.white, hc: Color.white }, nls.localize('buttonForeground', \"Button foreground color.\"));\r\nexport const buttonBackground = registerColor('button.background', { dark: '#0E639C', light: '#007ACC', hc: null }, nls.localize('buttonBackground', \"Button background color.\"));\r\nexport const buttonHoverBackground = registerColor('button.hoverBackground', { dark: lighten(buttonBackground, 0.2), light: darken(buttonBackground, 0.2), hc: null }, nls.localize('buttonHoverBackground', \"Button background color when hovering.\"));\r\nexport const badgeBackground = registerColor('badge.background', { dark: '#4D4D4D', light: '#C4C4C4', hc: Color.black }, nls.localize('badgeBackground', \"Badge background color. Badges are small information labels, e.g. for search results count.\"));\r\nexport const badgeForeground = registerColor('badge.foreground', { dark: Color.white, light: '#333', hc: Color.white }, nls.localize('badgeForeground', \"Badge foreground color. Badges are small information labels, e.g. for search results count.\"));\r\nexport const scrollbarShadow = registerColor('scrollbar.shadow', { dark: '#000000', light: '#DDDDDD', hc: null }, nls.localize('scrollbarShadow', \"Scrollbar shadow to indicate that the view is scrolled.\"));\r\nexport const scrollbarSliderBackground = registerColor('scrollbarSlider.background', { dark: Color.fromHex('#797979').transparent(0.4), light: Color.fromHex('#646464').transparent(0.4), hc: transparent(contrastBorder, 0.6) }, nls.localize('scrollbarSliderBackground', \"Scrollbar slider background color.\"));\r\nexport const scrollbarSliderHoverBackground = registerColor('scrollbarSlider.hoverBackground', { dark: Color.fromHex('#646464').transparent(0.7), light: Color.fromHex('#646464').transparent(0.7), hc: transparent(contrastBorder, 0.8) }, nls.localize('scrollbarSliderHoverBackground', \"Scrollbar slider background color when hovering.\"));\r\nexport const scrollbarSliderActiveBackground = registerColor('scrollbarSlider.activeBackground', { dark: Color.fromHex('#BFBFBF').transparent(0.4), light: Color.fromHex('#000000').transparent(0.6), hc: contrastBorder }, nls.localize('scrollbarSliderActiveBackground', \"Scrollbar slider background color when clicked on.\"));\r\nexport const progressBarBackground = registerColor('progressBar.background', { dark: Color.fromHex('#0E70C0'), light: Color.fromHex('#0E70C0'), hc: contrastBorder }, nls.localize('progressBarBackground', \"Background color of the progress bar that can show for long running operations.\"));\r\nexport const editorErrorBackground = registerColor('editorError.background', { dark: null, light: null, hc: null }, nls.localize('editorError.background', 'Background color of error text in the editor. The color must not be opaque so as not to hide underlying decorations.'), true);\r\nexport const editorErrorForeground = registerColor('editorError.foreground', { dark: '#F48771', light: '#E51400', hc: null }, nls.localize('editorError.foreground', 'Foreground color of error squigglies in the editor.'));\r\nexport const editorErrorBorder = registerColor('editorError.border', { dark: null, light: null, hc: Color.fromHex('#E47777').transparent(0.8) }, nls.localize('errorBorder', 'Border color of error boxes in the editor.'));\r\nexport const editorWarningBackground = registerColor('editorWarning.background', { dark: null, light: null, hc: null }, nls.localize('editorWarning.background', 'Background color of warning text in the editor. The color must not be opaque so as not to hide underlying decorations.'), true);\r\nexport const editorWarningForeground = registerColor('editorWarning.foreground', { dark: '#CCA700', light: '#E9A700', hc: null }, nls.localize('editorWarning.foreground', 'Foreground color of warning squigglies in the editor.'));\r\nexport const editorWarningBorder = registerColor('editorWarning.border', { dark: null, light: null, hc: Color.fromHex('#FFCC00').transparent(0.8) }, nls.localize('warningBorder', 'Border color of warning boxes in the editor.'));\r\nexport const editorInfoBackground = registerColor('editorInfo.background', { dark: null, light: null, hc: null }, nls.localize('editorInfo.background', 'Background color of info text in the editor. The color must not be opaque so as not to hide underlying decorations.'), true);\r\nexport const editorInfoForeground = registerColor('editorInfo.foreground', { dark: '#75BEFF', light: '#75BEFF', hc: null }, nls.localize('editorInfo.foreground', 'Foreground color of info squigglies in the editor.'));\r\nexport const editorInfoBorder = registerColor('editorInfo.border', { dark: null, light: null, hc: Color.fromHex('#75BEFF').transparent(0.8) }, nls.localize('infoBorder', 'Border color of info boxes in the editor.'));\r\nexport const editorHintForeground = registerColor('editorHint.foreground', { dark: Color.fromHex('#eeeeee').transparent(0.7), light: '#6c6c6c', hc: null }, nls.localize('editorHint.foreground', 'Foreground color of hint squigglies in the editor.'));\r\nexport const editorHintBorder = registerColor('editorHint.border', { dark: null, light: null, hc: Color.fromHex('#eeeeee').transparent(0.8) }, nls.localize('hintBorder', 'Border color of hint boxes in the editor.'));\r\n/**\r\n * Editor background color.\r\n * Because of bug https://monacotools.visualstudio.com/DefaultCollection/Monaco/_workitems/edit/13254\r\n * we are *not* using the color white (or #ffffff, rgba(255,255,255)) but something very close to white.\r\n */\r\nexport const editorBackground = registerColor('editor.background', { light: '#fffffe', dark: '#1E1E1E', hc: Color.black }, nls.localize('editorBackground', \"Editor background color.\"));\r\n/**\r\n * Editor foreground color.\r\n */\r\nexport const editorForeground = registerColor('editor.foreground', { light: '#333333', dark: '#BBBBBB', hc: Color.white }, nls.localize('editorForeground', \"Editor default foreground color.\"));\r\n/**\r\n * Editor widgets\r\n */\r\nexport const editorWidgetBackground = registerColor('editorWidget.background', { dark: '#252526', light: '#F3F3F3', hc: '#0C141F' }, nls.localize('editorWidgetBackground', 'Background color of editor widgets, such as find/replace.'));\r\nexport const editorWidgetForeground = registerColor('editorWidget.foreground', { dark: foreground, light: foreground, hc: foreground }, nls.localize('editorWidgetForeground', 'Foreground color of editor widgets, such as find/replace.'));\r\nexport const editorWidgetBorder = registerColor('editorWidget.border', { dark: '#454545', light: '#C8C8C8', hc: contrastBorder }, nls.localize('editorWidgetBorder', 'Border color of editor widgets. The color is only used if the widget chooses to have a border and if the color is not overridden by a widget.'));\r\nexport const editorWidgetResizeBorder = registerColor('editorWidget.resizeBorder', { light: null, dark: null, hc: null }, nls.localize('editorWidgetResizeBorder', \"Border color of the resize bar of editor widgets. The color is only used if the widget chooses to have a resize border and if the color is not overridden by a widget.\"));\r\n/**\r\n * Quick pick widget\r\n */\r\nexport const quickInputBackground = registerColor('quickInput.background', { dark: editorWidgetBackground, light: editorWidgetBackground, hc: editorWidgetBackground }, nls.localize('pickerBackground', \"Quick picker background color. The quick picker widget is the container for pickers like the command palette.\"));\r\nexport const quickInputForeground = registerColor('quickInput.foreground', { dark: editorWidgetForeground, light: editorWidgetForeground, hc: editorWidgetForeground }, nls.localize('pickerForeground', \"Quick picker foreground color. The quick picker widget is the container for pickers like the command palette.\"));\r\nexport const quickInputTitleBackground = registerColor('quickInputTitle.background', { dark: new Color(new RGBA(255, 255, 255, 0.105)), light: new Color(new RGBA(0, 0, 0, 0.06)), hc: '#000000' }, nls.localize('pickerTitleBackground', \"Quick picker title background color. The quick picker widget is the container for pickers like the command palette.\"));\r\nexport const pickerGroupForeground = registerColor('pickerGroup.foreground', { dark: '#3794FF', light: '#0066BF', hc: Color.white }, nls.localize('pickerGroupForeground', \"Quick picker color for grouping labels.\"));\r\nexport const pickerGroupBorder = registerColor('pickerGroup.border', { dark: '#3F3F46', light: '#CCCEDB', hc: Color.white }, nls.localize('pickerGroupBorder', \"Quick picker color for grouping borders.\"));\r\n/**\r\n * Editor selection colors.\r\n */\r\nexport const editorSelectionBackground = registerColor('editor.selectionBackground', { light: '#ADD6FF', dark: '#264F78', hc: '#f3f518' }, nls.localize('editorSelectionBackground', \"Color of the editor selection.\"));\r\nexport const editorSelectionForeground = registerColor('editor.selectionForeground', { light: null, dark: null, hc: '#000000' }, nls.localize('editorSelectionForeground', \"Color of the selected text for high contrast.\"));\r\nexport const editorInactiveSelection = registerColor('editor.inactiveSelectionBackground', { light: transparent(editorSelectionBackground, 0.5), dark: transparent(editorSelectionBackground, 0.5), hc: transparent(editorSelectionBackground, 0.5) }, nls.localize('editorInactiveSelection', \"Color of the selection in an inactive editor. The color must not be opaque so as not to hide underlying decorations.\"), true);\r\nexport const editorSelectionHighlight = registerColor('editor.selectionHighlightBackground', { light: lessProminent(editorSelectionBackground, editorBackground, 0.3, 0.6), dark: lessProminent(editorSelectionBackground, editorBackground, 0.3, 0.6), hc: null }, nls.localize('editorSelectionHighlight', 'Color for regions with the same content as the selection. The color must not be opaque so as not to hide underlying decorations.'), true);\r\nexport const editorSelectionHighlightBorder = registerColor('editor.selectionHighlightBorder', { light: null, dark: null, hc: activeContrastBorder }, nls.localize('editorSelectionHighlightBorder', \"Border color for regions with the same content as the selection.\"));\r\n/**\r\n * Editor find match colors.\r\n */\r\nexport const editorFindMatch = registerColor('editor.findMatchBackground', { light: '#A8AC94', dark: '#515C6A', hc: null }, nls.localize('editorFindMatch', \"Color of the current search match.\"));\r\nexport const editorFindMatchHighlight = registerColor('editor.findMatchHighlightBackground', { light: '#EA5C0055', dark: '#EA5C0055', hc: null }, nls.localize('findMatchHighlight', \"Color of the other search matches. The color must not be opaque so as not to hide underlying decorations.\"), true);\r\nexport const editorFindRangeHighlight = registerColor('editor.findRangeHighlightBackground', { dark: '#3a3d4166', light: '#b4b4b44d', hc: null }, nls.localize('findRangeHighlight', \"Color of the range limiting the search. The color must not be opaque so as not to hide underlying decorations.\"), true);\r\nexport const editorFindMatchBorder = registerColor('editor.findMatchBorder', { light: null, dark: null, hc: activeContrastBorder }, nls.localize('editorFindMatchBorder', \"Border color of the current search match.\"));\r\nexport const editorFindMatchHighlightBorder = registerColor('editor.findMatchHighlightBorder', { light: null, dark: null, hc: activeContrastBorder }, nls.localize('findMatchHighlightBorder', \"Border color of the other search matches.\"));\r\nexport const editorFindRangeHighlightBorder = registerColor('editor.findRangeHighlightBorder', { dark: null, light: null, hc: transparent(activeContrastBorder, 0.4) }, nls.localize('findRangeHighlightBorder', \"Border color of the range limiting the search. The color must not be opaque so as not to hide underlying decorations.\"), true);\r\n/**\r\n * Editor hover\r\n */\r\nexport const editorHoverHighlight = registerColor('editor.hoverHighlightBackground', { light: '#ADD6FF26', dark: '#264f7840', hc: '#ADD6FF26' }, nls.localize('hoverHighlight', 'Highlight below the word for which a hover is shown. The color must not be opaque so as not to hide underlying decorations.'), true);\r\nexport const editorHoverBackground = registerColor('editorHoverWidget.background', { light: editorWidgetBackground, dark: editorWidgetBackground, hc: editorWidgetBackground }, nls.localize('hoverBackground', 'Background color of the editor hover.'));\r\nexport const editorHoverForeground = registerColor('editorHoverWidget.foreground', { light: editorWidgetForeground, dark: editorWidgetForeground, hc: editorWidgetForeground }, nls.localize('hoverForeground', 'Foreground color of the editor hover.'));\r\nexport const editorHoverBorder = registerColor('editorHoverWidget.border', { light: editorWidgetBorder, dark: editorWidgetBorder, hc: editorWidgetBorder }, nls.localize('hoverBorder', 'Border color of the editor hover.'));\r\nexport const editorHoverStatusBarBackground = registerColor('editorHoverWidget.statusBarBackground', { dark: lighten(editorHoverBackground, 0.2), light: darken(editorHoverBackground, 0.05), hc: editorWidgetBackground }, nls.localize('statusBarBackground', \"Background color of the editor hover status bar.\"));\r\n/**\r\n * Editor link colors\r\n */\r\nexport const editorActiveLinkForeground = registerColor('editorLink.activeForeground', { dark: '#4E94CE', light: Color.blue, hc: Color.cyan }, nls.localize('activeLinkForeground', 'Color of active links.'));\r\n/**\r\n * Inline hints\r\n */\r\nexport const editorInlineHintForeground = registerColor('editorInlineHint.foreground', { dark: editorWidgetBackground, light: editorWidgetForeground, hc: editorWidgetBackground }, nls.localize('editorInlineHintForeground', 'Foreground color of inline hints'));\r\nexport const editorInlineHintBackground = registerColor('editorInlineHint.background', { dark: editorWidgetForeground, light: editorWidgetBackground, hc: editorWidgetForeground }, nls.localize('editorInlineHintBackground', 'Background color of inline hints'));\r\n/**\r\n * Editor lighbulb icon colors\r\n */\r\nexport const editorLightBulbForeground = registerColor('editorLightBulb.foreground', { dark: '#FFCC00', light: '#DDB100', hc: '#FFCC00' }, nls.localize('editorLightBulbForeground', \"The color used for the lightbulb actions icon.\"));\r\nexport const editorLightBulbAutoFixForeground = registerColor('editorLightBulbAutoFix.foreground', { dark: '#75BEFF', light: '#007ACC', hc: '#75BEFF' }, nls.localize('editorLightBulbAutoFixForeground', \"The color used for the lightbulb auto fix actions icon.\"));\r\n/**\r\n * Diff Editor Colors\r\n */\r\nexport const defaultInsertColor = new Color(new RGBA(155, 185, 85, 0.2));\r\nexport const defaultRemoveColor = new Color(new RGBA(255, 0, 0, 0.2));\r\nexport const diffInserted = registerColor('diffEditor.insertedTextBackground', { dark: defaultInsertColor, light: defaultInsertColor, hc: null }, nls.localize('diffEditorInserted', 'Background color for text that got inserted. The color must not be opaque so as not to hide underlying decorations.'), true);\r\nexport const diffRemoved = registerColor('diffEditor.removedTextBackground', { dark: defaultRemoveColor, light: defaultRemoveColor, hc: null }, nls.localize('diffEditorRemoved', 'Background color for text that got removed. The color must not be opaque so as not to hide underlying decorations.'), true);\r\nexport const diffInsertedOutline = registerColor('diffEditor.insertedTextBorder', { dark: null, light: null, hc: '#33ff2eff' }, nls.localize('diffEditorInsertedOutline', 'Outline color for the text that got inserted.'));\r\nexport const diffRemovedOutline = registerColor('diffEditor.removedTextBorder', { dark: null, light: null, hc: '#FF008F' }, nls.localize('diffEditorRemovedOutline', 'Outline color for text that got removed.'));\r\nexport const diffBorder = registerColor('diffEditor.border', { dark: null, light: null, hc: contrastBorder }, nls.localize('diffEditorBorder', 'Border color between the two text editors.'));\r\nexport const diffDiagonalFill = registerColor('diffEditor.diagonalFill', { dark: '#cccccc33', light: '#22222233', hc: null }, nls.localize('diffDiagonalFill', \"Color of the diff editor's diagonal fill. The diagonal fill is used in side-by-side diff views.\"));\r\n/**\r\n * List and tree colors\r\n */\r\nexport const listFocusBackground = registerColor('list.focusBackground', { dark: '#062F4A', light: '#D6EBFF', hc: null }, nls.localize('listFocusBackground', \"List/Tree background color for the focused item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\r\nexport const listFocusForeground = registerColor('list.focusForeground', { dark: null, light: null, hc: null }, nls.localize('listFocusForeground', \"List/Tree foreground color for the focused item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\r\nexport const listActiveSelectionBackground = registerColor('list.activeSelectionBackground', { dark: '#094771', light: '#0060C0', hc: null }, nls.localize('listActiveSelectionBackground', \"List/Tree background color for the selected item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\r\nexport const listActiveSelectionForeground = registerColor('list.activeSelectionForeground', { dark: Color.white, light: Color.white, hc: null }, nls.localize('listActiveSelectionForeground', \"List/Tree foreground color for the selected item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\r\nexport const listInactiveSelectionBackground = registerColor('list.inactiveSelectionBackground', { dark: '#37373D', light: '#E4E6F1', hc: null }, nls.localize('listInactiveSelectionBackground', \"List/Tree background color for the selected item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.\"));\r\nexport const listInactiveSelectionForeground = registerColor('list.inactiveSelectionForeground', { dark: null, light: null, hc: null }, nls.localize('listInactiveSelectionForeground', \"List/Tree foreground color for the selected item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.\"));\r\nexport const listInactiveFocusBackground = registerColor('list.inactiveFocusBackground', { dark: null, light: null, hc: null }, nls.localize('listInactiveFocusBackground', \"List/Tree background color for the focused item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.\"));\r\nexport const listHoverBackground = registerColor('list.hoverBackground', { dark: '#2A2D2E', light: '#F0F0F0', hc: null }, nls.localize('listHoverBackground', \"List/Tree background when hovering over items using the mouse.\"));\r\nexport const listHoverForeground = registerColor('list.hoverForeground', { dark: null, light: null, hc: null }, nls.localize('listHoverForeground', \"List/Tree foreground when hovering over items using the mouse.\"));\r\nexport const listDropBackground = registerColor('list.dropBackground', { dark: listFocusBackground, light: listFocusBackground, hc: null }, nls.localize('listDropBackground', \"List/Tree drag and drop background when moving items around using the mouse.\"));\r\nexport const listHighlightForeground = registerColor('list.highlightForeground', { dark: '#0097fb', light: '#0066BF', hc: focusBorder }, nls.localize('highlight', 'List/Tree foreground color of the match highlights when searching inside the list/tree.'));\r\nexport const listFilterWidgetBackground = registerColor('listFilterWidget.background', { light: '#efc1ad', dark: '#653723', hc: Color.black }, nls.localize('listFilterWidgetBackground', 'Background color of the type filter widget in lists and trees.'));\r\nexport const listFilterWidgetOutline = registerColor('listFilterWidget.outline', { dark: Color.transparent, light: Color.transparent, hc: '#f38518' }, nls.localize('listFilterWidgetOutline', 'Outline color of the type filter widget in lists and trees.'));\r\nexport const listFilterWidgetNoMatchesOutline = registerColor('listFilterWidget.noMatchesOutline', { dark: '#BE1100', light: '#BE1100', hc: contrastBorder }, nls.localize('listFilterWidgetNoMatchesOutline', 'Outline color of the type filter widget in lists and trees, when there are no matches.'));\r\nexport const treeIndentGuidesStroke = registerColor('tree.indentGuidesStroke', { dark: '#585858', light: '#a9a9a9', hc: '#a9a9a9' }, nls.localize('treeIndentGuidesStroke', \"Tree stroke color for the indentation guides.\"));\r\n/**\r\n * Menu colors\r\n */\r\nexport const menuBorder = registerColor('menu.border', { dark: null, light: null, hc: contrastBorder }, nls.localize('menuBorder', \"Border color of menus.\"));\r\nexport const menuForeground = registerColor('menu.foreground', { dark: selectForeground, light: foreground, hc: selectForeground }, nls.localize('menuForeground', \"Foreground color of menu items.\"));\r\nexport const menuBackground = registerColor('menu.background', { dark: selectBackground, light: selectBackground, hc: selectBackground }, nls.localize('menuBackground', \"Background color of menu items.\"));\r\nexport const menuSelectionForeground = registerColor('menu.selectionForeground', { dark: listActiveSelectionForeground, light: listActiveSelectionForeground, hc: listActiveSelectionForeground }, nls.localize('menuSelectionForeground', \"Foreground color of the selected menu item in menus.\"));\r\nexport const menuSelectionBackground = registerColor('menu.selectionBackground', { dark: listActiveSelectionBackground, light: listActiveSelectionBackground, hc: listActiveSelectionBackground }, nls.localize('menuSelectionBackground', \"Background color of the selected menu item in menus.\"));\r\nexport const menuSelectionBorder = registerColor('menu.selectionBorder', { dark: null, light: null, hc: activeContrastBorder }, nls.localize('menuSelectionBorder', \"Border color of the selected menu item in menus.\"));\r\nexport const menuSeparatorBackground = registerColor('menu.separatorBackground', { dark: '#BBBBBB', light: '#888888', hc: contrastBorder }, nls.localize('menuSeparatorBackground', \"Color of a separator menu item in menus.\"));\r\n/**\r\n * Snippet placeholder colors\r\n */\r\nexport const snippetTabstopHighlightBackground = registerColor('editor.snippetTabstopHighlightBackground', { dark: new Color(new RGBA(124, 124, 124, 0.3)), light: new Color(new RGBA(10, 50, 100, 0.2)), hc: new Color(new RGBA(124, 124, 124, 0.3)) }, nls.localize('snippetTabstopHighlightBackground', \"Highlight background color of a snippet tabstop.\"));\r\nexport const snippetTabstopHighlightBorder = registerColor('editor.snippetTabstopHighlightBorder', { dark: null, light: null, hc: null }, nls.localize('snippetTabstopHighlightBorder', \"Highlight border color of a snippet tabstop.\"));\r\nexport const snippetFinalTabstopHighlightBackground = registerColor('editor.snippetFinalTabstopHighlightBackground', { dark: null, light: null, hc: null }, nls.localize('snippetFinalTabstopHighlightBackground', \"Highlight background color of the final tabstop of a snippet.\"));\r\nexport const snippetFinalTabstopHighlightBorder = registerColor('editor.snippetFinalTabstopHighlightBorder', { dark: '#525252', light: new Color(new RGBA(10, 50, 100, 0.5)), hc: '#525252' }, nls.localize('snippetFinalTabstopHighlightBorder', \"Highlight border color of the final tabstop of a snippet.\"));\r\nexport const overviewRulerFindMatchForeground = registerColor('editorOverviewRuler.findMatchForeground', { dark: '#d186167e', light: '#d186167e', hc: '#AB5A00' }, nls.localize('overviewRulerFindMatchForeground', 'Overview ruler marker color for find matches. The color must not be opaque so as not to hide underlying decorations.'), true);\r\nexport const overviewRulerSelectionHighlightForeground = registerColor('editorOverviewRuler.selectionHighlightForeground', { dark: '#A0A0A0CC', light: '#A0A0A0CC', hc: '#A0A0A0CC' }, nls.localize('overviewRulerSelectionHighlightForeground', 'Overview ruler marker color for selection highlights. The color must not be opaque so as not to hide underlying decorations.'), true);\r\nexport const minimapFindMatch = registerColor('minimap.findMatchHighlight', { light: '#d18616', dark: '#d18616', hc: '#AB5A00' }, nls.localize('minimapFindMatchHighlight', 'Minimap marker color for find matches.'), true);\r\nexport const minimapSelection = registerColor('minimap.selectionHighlight', { light: '#ADD6FF', dark: '#264F78', hc: '#ffffff' }, nls.localize('minimapSelectionHighlight', 'Minimap marker color for the editor selection.'), true);\r\nexport const minimapError = registerColor('minimap.errorHighlight', { dark: new Color(new RGBA(255, 18, 18, 0.7)), light: new Color(new RGBA(255, 18, 18, 0.7)), hc: new Color(new RGBA(255, 50, 50, 1)) }, nls.localize('minimapError', 'Minimap marker color for errors.'));\r\nexport const minimapWarning = registerColor('minimap.warningHighlight', { dark: editorWarningForeground, light: editorWarningForeground, hc: editorWarningBorder }, nls.localize('overviewRuleWarning', 'Minimap marker color for warnings.'));\r\nexport const minimapBackground = registerColor('minimap.background', { dark: null, light: null, hc: null }, nls.localize('minimapBackground', \"Minimap background color.\"));\r\nexport const minimapSliderBackground = registerColor('minimapSlider.background', { light: transparent(scrollbarSliderBackground, 0.5), dark: transparent(scrollbarSliderBackground, 0.5), hc: transparent(scrollbarSliderBackground, 0.5) }, nls.localize('minimapSliderBackground', \"Minimap slider background color.\"));\r\nexport const minimapSliderHoverBackground = registerColor('minimapSlider.hoverBackground', { light: transparent(scrollbarSliderHoverBackground, 0.5), dark: transparent(scrollbarSliderHoverBackground, 0.5), hc: transparent(scrollbarSliderHoverBackground, 0.5) }, nls.localize('minimapSliderHoverBackground', \"Minimap slider background color when hovering.\"));\r\nexport const minimapSliderActiveBackground = registerColor('minimapSlider.activeBackground', { light: transparent(scrollbarSliderActiveBackground, 0.5), dark: transparent(scrollbarSliderActiveBackground, 0.5), hc: transparent(scrollbarSliderActiveBackground, 0.5) }, nls.localize('minimapSliderActiveBackground', \"Minimap slider background color when clicked on.\"));\r\nexport const problemsErrorIconForeground = registerColor('problemsErrorIcon.foreground', { dark: editorErrorForeground, light: editorErrorForeground, hc: editorErrorForeground }, nls.localize('problemsErrorIconForeground', \"The color used for the problems error icon.\"));\r\nexport const problemsWarningIconForeground = registerColor('problemsWarningIcon.foreground', { dark: editorWarningForeground, light: editorWarningForeground, hc: editorWarningForeground }, nls.localize('problemsWarningIconForeground', \"The color used for the problems warning icon.\"));\r\nexport const problemsInfoIconForeground = registerColor('problemsInfoIcon.foreground', { dark: editorInfoForeground, light: editorInfoForeground, hc: editorInfoForeground }, nls.localize('problemsInfoIconForeground', \"The color used for the problems info icon.\"));\r\n// ----- color functions\r\nexport function darken(colorValue, factor) {\r\n    return (theme) => {\r\n        let color = resolveColorValue(colorValue, theme);\r\n        if (color) {\r\n            return color.darken(factor);\r\n        }\r\n        return undefined;\r\n    };\r\n}\r\nexport function lighten(colorValue, factor) {\r\n    return (theme) => {\r\n        let color = resolveColorValue(colorValue, theme);\r\n        if (color) {\r\n            return color.lighten(factor);\r\n        }\r\n        return undefined;\r\n    };\r\n}\r\nexport function transparent(colorValue, factor) {\r\n    return (theme) => {\r\n        let color = resolveColorValue(colorValue, theme);\r\n        if (color) {\r\n            return color.transparent(factor);\r\n        }\r\n        return undefined;\r\n    };\r\n}\r\nexport function oneOf(...colorValues) {\r\n    return (theme) => {\r\n        for (let colorValue of colorValues) {\r\n            let color = resolveColorValue(colorValue, theme);\r\n            if (color) {\r\n                return color;\r\n            }\r\n        }\r\n        return undefined;\r\n    };\r\n}\r\nfunction lessProminent(colorValue, backgroundColorValue, factor, transparency) {\r\n    return (theme) => {\r\n        let from = resolveColorValue(colorValue, theme);\r\n        if (from) {\r\n            let backgroundColor = resolveColorValue(backgroundColorValue, theme);\r\n            if (backgroundColor) {\r\n                if (from.isDarkerThan(backgroundColor)) {\r\n                    return Color.getLighterColor(from, backgroundColor, factor).transparent(transparency);\r\n                }\r\n                return Color.getDarkerColor(from, backgroundColor, factor).transparent(transparency);\r\n            }\r\n            return from.transparent(factor * transparency);\r\n        }\r\n        return undefined;\r\n    };\r\n}\r\n// ----- implementation\r\n/**\r\n * @param colorValue Resolve a color value in the context of a theme\r\n */\r\nexport function resolveColorValue(colorValue, theme) {\r\n    if (colorValue === null) {\r\n        return undefined;\r\n    }\r\n    else if (typeof colorValue === 'string') {\r\n        if (colorValue[0] === '#') {\r\n            return Color.fromHex(colorValue);\r\n        }\r\n        return theme.getColor(colorValue);\r\n    }\r\n    else if (colorValue instanceof Color) {\r\n        return colorValue;\r\n    }\r\n    else if (typeof colorValue === 'function') {\r\n        return colorValue(theme);\r\n    }\r\n    return undefined;\r\n}\r\nexport const workbenchColorsSchemaId = 'vscode://schemas/workbench-colors';\r\nlet schemaRegistry = platform.Registry.as(JSONExtensions.JSONContribution);\r\nschemaRegistry.registerSchema(workbenchColorsSchemaId, colorRegistry.getColorSchema());\r\nconst delayer = new RunOnceScheduler(() => schemaRegistry.notifySchemaChanged(workbenchColorsSchemaId), 200);\r\ncolorRegistry.onDidChangeSchema(() => {\r\n    if (!delayer.isScheduled()) {\r\n        delayer.schedule();\r\n    }\r\n});\r\n// setTimeout(_ => console.log(colorRegistry.toString()), 5000);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}