{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nexport class CharWidthRequest {\n  constructor(chr, type) {\n    this.chr = chr;\n    this.type = type;\n    this.width = 0;\n  }\n  fulfill(width) {\n    this.width = width;\n  }\n}\nclass DomCharWidthReader {\n  constructor(bareFontInfo, requests) {\n    this._bareFontInfo = bareFontInfo;\n    this._requests = requests;\n    this._container = null;\n    this._testElements = null;\n  }\n  read() {\n    // Create a test container with all these test elements\n    this._createDomElements();\n    // Add the container to the DOM\n    document.body.appendChild(this._container);\n    // Read character widths\n    this._readFromDomElements();\n    // Remove the container from the DOM\n    document.body.removeChild(this._container);\n    this._container = null;\n    this._testElements = null;\n  }\n  _createDomElements() {\n    const container = document.createElement('div');\n    container.style.position = 'absolute';\n    container.style.top = '-50000px';\n    container.style.width = '50000px';\n    const regularDomNode = document.createElement('div');\n    regularDomNode.style.fontFamily = this._bareFontInfo.getMassagedFontFamily();\n    regularDomNode.style.fontWeight = this._bareFontInfo.fontWeight;\n    regularDomNode.style.fontSize = this._bareFontInfo.fontSize + 'px';\n    regularDomNode.style.fontFeatureSettings = this._bareFontInfo.fontFeatureSettings;\n    regularDomNode.style.lineHeight = this._bareFontInfo.lineHeight + 'px';\n    regularDomNode.style.letterSpacing = this._bareFontInfo.letterSpacing + 'px';\n    container.appendChild(regularDomNode);\n    const boldDomNode = document.createElement('div');\n    boldDomNode.style.fontFamily = this._bareFontInfo.getMassagedFontFamily();\n    boldDomNode.style.fontWeight = 'bold';\n    boldDomNode.style.fontSize = this._bareFontInfo.fontSize + 'px';\n    boldDomNode.style.fontFeatureSettings = this._bareFontInfo.fontFeatureSettings;\n    boldDomNode.style.lineHeight = this._bareFontInfo.lineHeight + 'px';\n    boldDomNode.style.letterSpacing = this._bareFontInfo.letterSpacing + 'px';\n    container.appendChild(boldDomNode);\n    const italicDomNode = document.createElement('div');\n    italicDomNode.style.fontFamily = this._bareFontInfo.getMassagedFontFamily();\n    italicDomNode.style.fontWeight = this._bareFontInfo.fontWeight;\n    italicDomNode.style.fontSize = this._bareFontInfo.fontSize + 'px';\n    italicDomNode.style.fontFeatureSettings = this._bareFontInfo.fontFeatureSettings;\n    italicDomNode.style.lineHeight = this._bareFontInfo.lineHeight + 'px';\n    italicDomNode.style.letterSpacing = this._bareFontInfo.letterSpacing + 'px';\n    italicDomNode.style.fontStyle = 'italic';\n    container.appendChild(italicDomNode);\n    const testElements = [];\n    for (const request of this._requests) {\n      let parent;\n      if (request.type === 0 /* Regular */) {\n        parent = regularDomNode;\n      }\n      if (request.type === 2 /* Bold */) {\n        parent = boldDomNode;\n      }\n      if (request.type === 1 /* Italic */) {\n        parent = italicDomNode;\n      }\n      parent.appendChild(document.createElement('br'));\n      const testElement = document.createElement('span');\n      DomCharWidthReader._render(testElement, request);\n      parent.appendChild(testElement);\n      testElements.push(testElement);\n    }\n    this._container = container;\n    this._testElements = testElements;\n  }\n  static _render(testElement, request) {\n    if (request.chr === ' ') {\n      let htmlString = '\\u00a0';\n      // Repeat character 256 (2^8) times\n      for (let i = 0; i < 8; i++) {\n        htmlString += htmlString;\n      }\n      testElement.innerText = htmlString;\n    } else {\n      let testString = request.chr;\n      // Repeat character 256 (2^8) times\n      for (let i = 0; i < 8; i++) {\n        testString += testString;\n      }\n      testElement.textContent = testString;\n    }\n  }\n  _readFromDomElements() {\n    for (let i = 0, len = this._requests.length; i < len; i++) {\n      const request = this._requests[i];\n      const testElement = this._testElements[i];\n      request.fulfill(testElement.offsetWidth / 256);\n    }\n  }\n}\nexport function readCharWidths(bareFontInfo, requests) {\n  const reader = new DomCharWidthReader(bareFontInfo, requests);\n  reader.read();\n}","map":{"version":3,"names":["CharWidthRequest","constructor","chr","type","width","fulfill","DomCharWidthReader","bareFontInfo","requests","_bareFontInfo","_requests","_container","_testElements","read","_createDomElements","document","body","appendChild","_readFromDomElements","removeChild","container","createElement","style","position","top","regularDomNode","fontFamily","getMassagedFontFamily","fontWeight","fontSize","fontFeatureSettings","lineHeight","letterSpacing","boldDomNode","italicDomNode","fontStyle","testElements","request","parent","testElement","_render","push","htmlString","i","innerText","testString","textContent","len","length","offsetWidth","readCharWidths","reader"],"sources":["C:/Users/Administrator/Desktop/sqllineage-master/sqllineagejs/node_modules/monaco-editor/esm/vs/editor/browser/config/charWidthReader.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nexport class CharWidthRequest {\r\n    constructor(chr, type) {\r\n        this.chr = chr;\r\n        this.type = type;\r\n        this.width = 0;\r\n    }\r\n    fulfill(width) {\r\n        this.width = width;\r\n    }\r\n}\r\nclass DomCharWidthReader {\r\n    constructor(bareFontInfo, requests) {\r\n        this._bareFontInfo = bareFontInfo;\r\n        this._requests = requests;\r\n        this._container = null;\r\n        this._testElements = null;\r\n    }\r\n    read() {\r\n        // Create a test container with all these test elements\r\n        this._createDomElements();\r\n        // Add the container to the DOM\r\n        document.body.appendChild(this._container);\r\n        // Read character widths\r\n        this._readFromDomElements();\r\n        // Remove the container from the DOM\r\n        document.body.removeChild(this._container);\r\n        this._container = null;\r\n        this._testElements = null;\r\n    }\r\n    _createDomElements() {\r\n        const container = document.createElement('div');\r\n        container.style.position = 'absolute';\r\n        container.style.top = '-50000px';\r\n        container.style.width = '50000px';\r\n        const regularDomNode = document.createElement('div');\r\n        regularDomNode.style.fontFamily = this._bareFontInfo.getMassagedFontFamily();\r\n        regularDomNode.style.fontWeight = this._bareFontInfo.fontWeight;\r\n        regularDomNode.style.fontSize = this._bareFontInfo.fontSize + 'px';\r\n        regularDomNode.style.fontFeatureSettings = this._bareFontInfo.fontFeatureSettings;\r\n        regularDomNode.style.lineHeight = this._bareFontInfo.lineHeight + 'px';\r\n        regularDomNode.style.letterSpacing = this._bareFontInfo.letterSpacing + 'px';\r\n        container.appendChild(regularDomNode);\r\n        const boldDomNode = document.createElement('div');\r\n        boldDomNode.style.fontFamily = this._bareFontInfo.getMassagedFontFamily();\r\n        boldDomNode.style.fontWeight = 'bold';\r\n        boldDomNode.style.fontSize = this._bareFontInfo.fontSize + 'px';\r\n        boldDomNode.style.fontFeatureSettings = this._bareFontInfo.fontFeatureSettings;\r\n        boldDomNode.style.lineHeight = this._bareFontInfo.lineHeight + 'px';\r\n        boldDomNode.style.letterSpacing = this._bareFontInfo.letterSpacing + 'px';\r\n        container.appendChild(boldDomNode);\r\n        const italicDomNode = document.createElement('div');\r\n        italicDomNode.style.fontFamily = this._bareFontInfo.getMassagedFontFamily();\r\n        italicDomNode.style.fontWeight = this._bareFontInfo.fontWeight;\r\n        italicDomNode.style.fontSize = this._bareFontInfo.fontSize + 'px';\r\n        italicDomNode.style.fontFeatureSettings = this._bareFontInfo.fontFeatureSettings;\r\n        italicDomNode.style.lineHeight = this._bareFontInfo.lineHeight + 'px';\r\n        italicDomNode.style.letterSpacing = this._bareFontInfo.letterSpacing + 'px';\r\n        italicDomNode.style.fontStyle = 'italic';\r\n        container.appendChild(italicDomNode);\r\n        const testElements = [];\r\n        for (const request of this._requests) {\r\n            let parent;\r\n            if (request.type === 0 /* Regular */) {\r\n                parent = regularDomNode;\r\n            }\r\n            if (request.type === 2 /* Bold */) {\r\n                parent = boldDomNode;\r\n            }\r\n            if (request.type === 1 /* Italic */) {\r\n                parent = italicDomNode;\r\n            }\r\n            parent.appendChild(document.createElement('br'));\r\n            const testElement = document.createElement('span');\r\n            DomCharWidthReader._render(testElement, request);\r\n            parent.appendChild(testElement);\r\n            testElements.push(testElement);\r\n        }\r\n        this._container = container;\r\n        this._testElements = testElements;\r\n    }\r\n    static _render(testElement, request) {\r\n        if (request.chr === ' ') {\r\n            let htmlString = '\\u00a0';\r\n            // Repeat character 256 (2^8) times\r\n            for (let i = 0; i < 8; i++) {\r\n                htmlString += htmlString;\r\n            }\r\n            testElement.innerText = htmlString;\r\n        }\r\n        else {\r\n            let testString = request.chr;\r\n            // Repeat character 256 (2^8) times\r\n            for (let i = 0; i < 8; i++) {\r\n                testString += testString;\r\n            }\r\n            testElement.textContent = testString;\r\n        }\r\n    }\r\n    _readFromDomElements() {\r\n        for (let i = 0, len = this._requests.length; i < len; i++) {\r\n            const request = this._requests[i];\r\n            const testElement = this._testElements[i];\r\n            request.fulfill(testElement.offsetWidth / 256);\r\n        }\r\n    }\r\n}\r\nexport function readCharWidths(bareFontInfo, requests) {\r\n    const reader = new DomCharWidthReader(bareFontInfo, requests);\r\n    reader.read();\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}