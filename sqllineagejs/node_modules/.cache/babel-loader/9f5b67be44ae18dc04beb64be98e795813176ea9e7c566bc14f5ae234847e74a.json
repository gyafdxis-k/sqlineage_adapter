{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable, DisposableStore, dispose } from '../../../base/common/lifecycle.js';\nimport * as platform from '../../../base/common/platform.js';\nimport * as errors from '../../../base/common/errors.js';\nimport { EDITOR_MODEL_DEFAULTS } from '../config/editorOptions.js';\nimport { TextModel } from '../model/textModel.js';\nimport { DocumentSemanticTokensProviderRegistry } from '../modes.js';\nimport { PLAINTEXT_LANGUAGE_IDENTIFIER } from '../modes/modesRegistry.js';\nimport { ITextResourcePropertiesService } from './textResourceConfigurationService.js';\nimport { IConfigurationService } from '../../../platform/configuration/common/configuration.js';\nimport { RunOnceScheduler } from '../../../base/common/async.js';\nimport { CancellationTokenSource } from '../../../base/common/cancellation.js';\nimport { IThemeService } from '../../../platform/theme/common/themeService.js';\nimport { ILogService } from '../../../platform/log/common/log.js';\nimport { IUndoRedoService } from '../../../platform/undoRedo/common/undoRedo.js';\nimport { StringSHA1 } from '../../../base/common/hash.js';\nimport { isEditStackElement } from '../model/editStack.js';\nimport { Schemas } from '../../../base/common/network.js';\nimport { SemanticTokensProviderStyling, toMultilineTokens2 } from './semanticTokensProviderStyling.js';\nimport { getDocumentSemanticTokens, isSemanticTokens, isSemanticTokensEdits } from './getSemanticTokens.js';\nfunction MODEL_ID(resource) {\n  return resource.toString();\n}\nfunction computeModelSha1(model) {\n  // compute the sha1\n  const shaComputer = new StringSHA1();\n  const snapshot = model.createSnapshot();\n  let text;\n  while (text = snapshot.read()) {\n    shaComputer.update(text);\n  }\n  return shaComputer.digest();\n}\nclass ModelData {\n  constructor(model, onWillDispose, onDidChangeLanguage) {\n    this._modelEventListeners = new DisposableStore();\n    this.model = model;\n    this._languageSelection = null;\n    this._languageSelectionListener = null;\n    this._modelEventListeners.add(model.onWillDispose(() => onWillDispose(model)));\n    this._modelEventListeners.add(model.onDidChangeLanguage(e => onDidChangeLanguage(model, e)));\n  }\n  _disposeLanguageSelection() {\n    if (this._languageSelectionListener) {\n      this._languageSelectionListener.dispose();\n      this._languageSelectionListener = null;\n    }\n    if (this._languageSelection) {\n      this._languageSelection.dispose();\n      this._languageSelection = null;\n    }\n  }\n  dispose() {\n    this._modelEventListeners.dispose();\n    this._disposeLanguageSelection();\n  }\n  setLanguage(languageSelection) {\n    this._disposeLanguageSelection();\n    this._languageSelection = languageSelection;\n    this._languageSelectionListener = this._languageSelection.onDidChange(() => this.model.setMode(languageSelection.languageIdentifier));\n    this.model.setMode(languageSelection.languageIdentifier);\n  }\n}\nconst DEFAULT_EOL = platform.isLinux || platform.isMacintosh ? 1 /* LF */ : 2 /* CRLF */;\nclass DisposedModelInfo {\n  constructor(uri, initialUndoRedoSnapshot, time, sharesUndoRedoStack, heapSize, sha1, versionId, alternativeVersionId) {\n    this.uri = uri;\n    this.initialUndoRedoSnapshot = initialUndoRedoSnapshot;\n    this.time = time;\n    this.sharesUndoRedoStack = sharesUndoRedoStack;\n    this.heapSize = heapSize;\n    this.sha1 = sha1;\n    this.versionId = versionId;\n    this.alternativeVersionId = alternativeVersionId;\n  }\n}\nfunction schemaShouldMaintainUndoRedoElements(resource) {\n  return resource.scheme === Schemas.file || resource.scheme === Schemas.vscodeRemote || resource.scheme === Schemas.userData || resource.scheme === 'fake-fs' // for tests\n  ;\n}\n\nlet ModelServiceImpl = class ModelServiceImpl extends Disposable {\n  constructor(_configurationService, _resourcePropertiesService, _themeService, _logService, _undoRedoService) {\n    super();\n    this._configurationService = _configurationService;\n    this._resourcePropertiesService = _resourcePropertiesService;\n    this._themeService = _themeService;\n    this._logService = _logService;\n    this._undoRedoService = _undoRedoService;\n    this._onModelAdded = this._register(new Emitter());\n    this.onModelAdded = this._onModelAdded.event;\n    this._onModelRemoved = this._register(new Emitter());\n    this.onModelRemoved = this._onModelRemoved.event;\n    this._onModelModeChanged = this._register(new Emitter());\n    this.onModelModeChanged = this._onModelModeChanged.event;\n    this._modelCreationOptionsByLanguageAndResource = Object.create(null);\n    this._models = {};\n    this._disposedModels = new Map();\n    this._disposedModelsHeapSize = 0;\n    this._semanticStyling = this._register(new SemanticStyling(this._themeService, this._logService));\n    this._register(this._configurationService.onDidChangeConfiguration(() => this._updateModelOptions()));\n    this._updateModelOptions();\n    this._register(new SemanticColoringFeature(this, this._themeService, this._configurationService, this._semanticStyling));\n  }\n  static _readModelOptions(config, isForSimpleWidget) {\n    let tabSize = EDITOR_MODEL_DEFAULTS.tabSize;\n    if (config.editor && typeof config.editor.tabSize !== 'undefined') {\n      const parsedTabSize = parseInt(config.editor.tabSize, 10);\n      if (!isNaN(parsedTabSize)) {\n        tabSize = parsedTabSize;\n      }\n      if (tabSize < 1) {\n        tabSize = 1;\n      }\n    }\n    let indentSize = tabSize;\n    if (config.editor && typeof config.editor.indentSize !== 'undefined' && config.editor.indentSize !== 'tabSize') {\n      const parsedIndentSize = parseInt(config.editor.indentSize, 10);\n      if (!isNaN(parsedIndentSize)) {\n        indentSize = parsedIndentSize;\n      }\n      if (indentSize < 1) {\n        indentSize = 1;\n      }\n    }\n    let insertSpaces = EDITOR_MODEL_DEFAULTS.insertSpaces;\n    if (config.editor && typeof config.editor.insertSpaces !== 'undefined') {\n      insertSpaces = config.editor.insertSpaces === 'false' ? false : Boolean(config.editor.insertSpaces);\n    }\n    let newDefaultEOL = DEFAULT_EOL;\n    const eol = config.eol;\n    if (eol === '\\r\\n') {\n      newDefaultEOL = 2 /* CRLF */;\n    } else if (eol === '\\n') {\n      newDefaultEOL = 1 /* LF */;\n    }\n\n    let trimAutoWhitespace = EDITOR_MODEL_DEFAULTS.trimAutoWhitespace;\n    if (config.editor && typeof config.editor.trimAutoWhitespace !== 'undefined') {\n      trimAutoWhitespace = config.editor.trimAutoWhitespace === 'false' ? false : Boolean(config.editor.trimAutoWhitespace);\n    }\n    let detectIndentation = EDITOR_MODEL_DEFAULTS.detectIndentation;\n    if (config.editor && typeof config.editor.detectIndentation !== 'undefined') {\n      detectIndentation = config.editor.detectIndentation === 'false' ? false : Boolean(config.editor.detectIndentation);\n    }\n    let largeFileOptimizations = EDITOR_MODEL_DEFAULTS.largeFileOptimizations;\n    if (config.editor && typeof config.editor.largeFileOptimizations !== 'undefined') {\n      largeFileOptimizations = config.editor.largeFileOptimizations === 'false' ? false : Boolean(config.editor.largeFileOptimizations);\n    }\n    return {\n      isForSimpleWidget: isForSimpleWidget,\n      tabSize: tabSize,\n      indentSize: indentSize,\n      insertSpaces: insertSpaces,\n      detectIndentation: detectIndentation,\n      defaultEOL: newDefaultEOL,\n      trimAutoWhitespace: trimAutoWhitespace,\n      largeFileOptimizations: largeFileOptimizations\n    };\n  }\n  _getEOL(resource, language) {\n    if (resource) {\n      return this._resourcePropertiesService.getEOL(resource, language);\n    }\n    const eol = this._configurationService.getValue('files.eol', {\n      overrideIdentifier: language\n    });\n    if (eol && eol !== 'auto') {\n      return eol;\n    }\n    return platform.OS === 3 /* Linux */ || platform.OS === 2 /* Macintosh */ ? '\\n' : '\\r\\n';\n  }\n  _shouldRestoreUndoStack() {\n    const result = this._configurationService.getValue('files.restoreUndoStack');\n    if (typeof result === 'boolean') {\n      return result;\n    }\n    return true;\n  }\n  getCreationOptions(language, resource, isForSimpleWidget) {\n    let creationOptions = this._modelCreationOptionsByLanguageAndResource[language + resource];\n    if (!creationOptions) {\n      const editor = this._configurationService.getValue('editor', {\n        overrideIdentifier: language,\n        resource\n      });\n      const eol = this._getEOL(resource, language);\n      creationOptions = ModelServiceImpl._readModelOptions({\n        editor,\n        eol\n      }, isForSimpleWidget);\n      this._modelCreationOptionsByLanguageAndResource[language + resource] = creationOptions;\n    }\n    return creationOptions;\n  }\n  _updateModelOptions() {\n    const oldOptionsByLanguageAndResource = this._modelCreationOptionsByLanguageAndResource;\n    this._modelCreationOptionsByLanguageAndResource = Object.create(null);\n    // Update options on all models\n    const keys = Object.keys(this._models);\n    for (let i = 0, len = keys.length; i < len; i++) {\n      const modelId = keys[i];\n      const modelData = this._models[modelId];\n      const language = modelData.model.getLanguageIdentifier().language;\n      const uri = modelData.model.uri;\n      const oldOptions = oldOptionsByLanguageAndResource[language + uri];\n      const newOptions = this.getCreationOptions(language, uri, modelData.model.isForSimpleWidget);\n      ModelServiceImpl._setModelOptionsForModel(modelData.model, newOptions, oldOptions);\n    }\n  }\n  static _setModelOptionsForModel(model, newOptions, currentOptions) {\n    if (currentOptions && currentOptions.defaultEOL !== newOptions.defaultEOL && model.getLineCount() === 1) {\n      model.setEOL(newOptions.defaultEOL === 1 /* LF */ ? 0 /* LF */ : 1 /* CRLF */);\n    }\n\n    if (currentOptions && currentOptions.detectIndentation === newOptions.detectIndentation && currentOptions.insertSpaces === newOptions.insertSpaces && currentOptions.tabSize === newOptions.tabSize && currentOptions.indentSize === newOptions.indentSize && currentOptions.trimAutoWhitespace === newOptions.trimAutoWhitespace) {\n      // Same indent opts, no need to touch the model\n      return;\n    }\n    if (newOptions.detectIndentation) {\n      model.detectIndentation(newOptions.insertSpaces, newOptions.tabSize);\n      model.updateOptions({\n        trimAutoWhitespace: newOptions.trimAutoWhitespace\n      });\n    } else {\n      model.updateOptions({\n        insertSpaces: newOptions.insertSpaces,\n        tabSize: newOptions.tabSize,\n        indentSize: newOptions.indentSize,\n        trimAutoWhitespace: newOptions.trimAutoWhitespace\n      });\n    }\n  }\n  // --- begin IModelService\n  _insertDisposedModel(disposedModelData) {\n    this._disposedModels.set(MODEL_ID(disposedModelData.uri), disposedModelData);\n    this._disposedModelsHeapSize += disposedModelData.heapSize;\n  }\n  _removeDisposedModel(resource) {\n    const disposedModelData = this._disposedModels.get(MODEL_ID(resource));\n    if (disposedModelData) {\n      this._disposedModelsHeapSize -= disposedModelData.heapSize;\n    }\n    this._disposedModels.delete(MODEL_ID(resource));\n    return disposedModelData;\n  }\n  _ensureDisposedModelsHeapSize(maxModelsHeapSize) {\n    if (this._disposedModelsHeapSize > maxModelsHeapSize) {\n      // we must remove some old undo stack elements to free up some memory\n      const disposedModels = [];\n      this._disposedModels.forEach(entry => {\n        if (!entry.sharesUndoRedoStack) {\n          disposedModels.push(entry);\n        }\n      });\n      disposedModels.sort((a, b) => a.time - b.time);\n      while (disposedModels.length > 0 && this._disposedModelsHeapSize > maxModelsHeapSize) {\n        const disposedModel = disposedModels.shift();\n        this._removeDisposedModel(disposedModel.uri);\n        if (disposedModel.initialUndoRedoSnapshot !== null) {\n          this._undoRedoService.restoreSnapshot(disposedModel.initialUndoRedoSnapshot);\n        }\n      }\n    }\n  }\n  _createModelData(value, languageIdentifier, resource, isForSimpleWidget) {\n    // create & save the model\n    const options = this.getCreationOptions(languageIdentifier.language, resource, isForSimpleWidget);\n    const model = new TextModel(value, options, languageIdentifier, resource, this._undoRedoService);\n    if (resource && this._disposedModels.has(MODEL_ID(resource))) {\n      const disposedModelData = this._removeDisposedModel(resource);\n      const elements = this._undoRedoService.getElements(resource);\n      const sha1IsEqual = computeModelSha1(model) === disposedModelData.sha1;\n      if (sha1IsEqual || disposedModelData.sharesUndoRedoStack) {\n        for (const element of elements.past) {\n          if (isEditStackElement(element) && element.matchesResource(resource)) {\n            element.setModel(model);\n          }\n        }\n        for (const element of elements.future) {\n          if (isEditStackElement(element) && element.matchesResource(resource)) {\n            element.setModel(model);\n          }\n        }\n        this._undoRedoService.setElementsValidFlag(resource, true, element => isEditStackElement(element) && element.matchesResource(resource));\n        if (sha1IsEqual) {\n          model._overwriteVersionId(disposedModelData.versionId);\n          model._overwriteAlternativeVersionId(disposedModelData.alternativeVersionId);\n          model._overwriteInitialUndoRedoSnapshot(disposedModelData.initialUndoRedoSnapshot);\n        }\n      } else {\n        if (disposedModelData.initialUndoRedoSnapshot !== null) {\n          this._undoRedoService.restoreSnapshot(disposedModelData.initialUndoRedoSnapshot);\n        }\n      }\n    }\n    const modelId = MODEL_ID(model.uri);\n    if (this._models[modelId]) {\n      // There already exists a model with this id => this is a programmer error\n      throw new Error('ModelService: Cannot add model because it already exists!');\n    }\n    const modelData = new ModelData(model, model => this._onWillDispose(model), (model, e) => this._onDidChangeLanguage(model, e));\n    this._models[modelId] = modelData;\n    return modelData;\n  }\n  createModel(value, languageSelection, resource) {\n    let isForSimpleWidget = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    let modelData;\n    if (languageSelection) {\n      modelData = this._createModelData(value, languageSelection.languageIdentifier, resource, isForSimpleWidget);\n      this.setMode(modelData.model, languageSelection);\n    } else {\n      modelData = this._createModelData(value, PLAINTEXT_LANGUAGE_IDENTIFIER, resource, isForSimpleWidget);\n    }\n    this._onModelAdded.fire(modelData.model);\n    return modelData.model;\n  }\n  setMode(model, languageSelection) {\n    if (!languageSelection) {\n      return;\n    }\n    const modelData = this._models[MODEL_ID(model.uri)];\n    if (!modelData) {\n      return;\n    }\n    modelData.setLanguage(languageSelection);\n  }\n  getModels() {\n    const ret = [];\n    const keys = Object.keys(this._models);\n    for (let i = 0, len = keys.length; i < len; i++) {\n      const modelId = keys[i];\n      ret.push(this._models[modelId].model);\n    }\n    return ret;\n  }\n  getModel(resource) {\n    const modelId = MODEL_ID(resource);\n    const modelData = this._models[modelId];\n    if (!modelData) {\n      return null;\n    }\n    return modelData.model;\n  }\n  getSemanticTokensProviderStyling(provider) {\n    return this._semanticStyling.get(provider);\n  }\n  // --- end IModelService\n  _onWillDispose(model) {\n    const modelId = MODEL_ID(model.uri);\n    const modelData = this._models[modelId];\n    const sharesUndoRedoStack = this._undoRedoService.getUriComparisonKey(model.uri) !== model.uri.toString();\n    let maintainUndoRedoStack = false;\n    let heapSize = 0;\n    if (sharesUndoRedoStack || this._shouldRestoreUndoStack() && schemaShouldMaintainUndoRedoElements(model.uri)) {\n      const elements = this._undoRedoService.getElements(model.uri);\n      if (elements.past.length > 0 || elements.future.length > 0) {\n        for (const element of elements.past) {\n          if (isEditStackElement(element) && element.matchesResource(model.uri)) {\n            maintainUndoRedoStack = true;\n            heapSize += element.heapSize(model.uri);\n            element.setModel(model.uri); // remove reference from text buffer instance\n          }\n        }\n\n        for (const element of elements.future) {\n          if (isEditStackElement(element) && element.matchesResource(model.uri)) {\n            maintainUndoRedoStack = true;\n            heapSize += element.heapSize(model.uri);\n            element.setModel(model.uri); // remove reference from text buffer instance\n          }\n        }\n      }\n    }\n\n    const maxMemory = ModelServiceImpl.MAX_MEMORY_FOR_CLOSED_FILES_UNDO_STACK;\n    if (!maintainUndoRedoStack) {\n      if (!sharesUndoRedoStack) {\n        const initialUndoRedoSnapshot = modelData.model.getInitialUndoRedoSnapshot();\n        if (initialUndoRedoSnapshot !== null) {\n          this._undoRedoService.restoreSnapshot(initialUndoRedoSnapshot);\n        }\n      }\n    } else if (!sharesUndoRedoStack && heapSize > maxMemory) {\n      // the undo stack for this file would never fit in the configured memory, so don't bother with it.\n      const initialUndoRedoSnapshot = modelData.model.getInitialUndoRedoSnapshot();\n      if (initialUndoRedoSnapshot !== null) {\n        this._undoRedoService.restoreSnapshot(initialUndoRedoSnapshot);\n      }\n    } else {\n      this._ensureDisposedModelsHeapSize(maxMemory - heapSize);\n      // We only invalidate the elements, but they remain in the undo-redo service.\n      this._undoRedoService.setElementsValidFlag(model.uri, false, element => isEditStackElement(element) && element.matchesResource(model.uri));\n      this._insertDisposedModel(new DisposedModelInfo(model.uri, modelData.model.getInitialUndoRedoSnapshot(), Date.now(), sharesUndoRedoStack, heapSize, computeModelSha1(model), model.getVersionId(), model.getAlternativeVersionId()));\n    }\n    delete this._models[modelId];\n    modelData.dispose();\n    // clean up cache\n    delete this._modelCreationOptionsByLanguageAndResource[model.getLanguageIdentifier().language + model.uri];\n    this._onModelRemoved.fire(model);\n  }\n  _onDidChangeLanguage(model, e) {\n    const oldModeId = e.oldLanguage;\n    const newModeId = model.getLanguageIdentifier().language;\n    const oldOptions = this.getCreationOptions(oldModeId, model.uri, model.isForSimpleWidget);\n    const newOptions = this.getCreationOptions(newModeId, model.uri, model.isForSimpleWidget);\n    ModelServiceImpl._setModelOptionsForModel(model, newOptions, oldOptions);\n    this._onModelModeChanged.fire({\n      model,\n      oldModeId\n    });\n  }\n};\nModelServiceImpl.MAX_MEMORY_FOR_CLOSED_FILES_UNDO_STACK = 20 * 1024 * 1024;\nModelServiceImpl = __decorate([__param(0, IConfigurationService), __param(1, ITextResourcePropertiesService), __param(2, IThemeService), __param(3, ILogService), __param(4, IUndoRedoService)], ModelServiceImpl);\nexport { ModelServiceImpl };\nexport const SEMANTIC_HIGHLIGHTING_SETTING_ID = 'editor.semanticHighlighting';\nexport function isSemanticColoringEnabled(model, themeService, configurationService) {\n  var _a;\n  const setting = (_a = configurationService.getValue(SEMANTIC_HIGHLIGHTING_SETTING_ID, {\n    overrideIdentifier: model.getLanguageIdentifier().language,\n    resource: model.uri\n  })) === null || _a === void 0 ? void 0 : _a.enabled;\n  if (typeof setting === 'boolean') {\n    return setting;\n  }\n  return themeService.getColorTheme().semanticHighlighting;\n}\nclass SemanticColoringFeature extends Disposable {\n  constructor(modelService, themeService, configurationService, semanticStyling) {\n    super();\n    this._watchers = Object.create(null);\n    this._semanticStyling = semanticStyling;\n    const register = model => {\n      this._watchers[model.uri.toString()] = new ModelSemanticColoring(model, themeService, this._semanticStyling);\n    };\n    const deregister = (model, modelSemanticColoring) => {\n      modelSemanticColoring.dispose();\n      delete this._watchers[model.uri.toString()];\n    };\n    const handleSettingOrThemeChange = () => {\n      for (let model of modelService.getModels()) {\n        const curr = this._watchers[model.uri.toString()];\n        if (isSemanticColoringEnabled(model, themeService, configurationService)) {\n          if (!curr) {\n            register(model);\n          }\n        } else {\n          if (curr) {\n            deregister(model, curr);\n          }\n        }\n      }\n    };\n    this._register(modelService.onModelAdded(model => {\n      if (isSemanticColoringEnabled(model, themeService, configurationService)) {\n        register(model);\n      }\n    }));\n    this._register(modelService.onModelRemoved(model => {\n      const curr = this._watchers[model.uri.toString()];\n      if (curr) {\n        deregister(model, curr);\n      }\n    }));\n    this._register(configurationService.onDidChangeConfiguration(e => {\n      if (e.affectsConfiguration(SEMANTIC_HIGHLIGHTING_SETTING_ID)) {\n        handleSettingOrThemeChange();\n      }\n    }));\n    this._register(themeService.onDidColorThemeChange(handleSettingOrThemeChange));\n  }\n}\nclass SemanticStyling extends Disposable {\n  constructor(_themeService, _logService) {\n    super();\n    this._themeService = _themeService;\n    this._logService = _logService;\n    this._caches = new WeakMap();\n    this._register(this._themeService.onDidColorThemeChange(() => {\n      this._caches = new WeakMap();\n    }));\n  }\n  get(provider) {\n    if (!this._caches.has(provider)) {\n      this._caches.set(provider, new SemanticTokensProviderStyling(provider.getLegend(), this._themeService, this._logService));\n    }\n    return this._caches.get(provider);\n  }\n}\nclass SemanticTokensResponse {\n  constructor(_provider, resultId, data) {\n    this._provider = _provider;\n    this.resultId = resultId;\n    this.data = data;\n  }\n  dispose() {\n    this._provider.releaseDocumentSemanticTokens(this.resultId);\n  }\n}\nexport class ModelSemanticColoring extends Disposable {\n  constructor(model, themeService, stylingProvider) {\n    super();\n    this._isDisposed = false;\n    this._model = model;\n    this._semanticStyling = stylingProvider;\n    this._fetchDocumentSemanticTokens = this._register(new RunOnceScheduler(() => this._fetchDocumentSemanticTokensNow(), ModelSemanticColoring.FETCH_DOCUMENT_SEMANTIC_TOKENS_DELAY));\n    this._currentDocumentResponse = null;\n    this._currentDocumentRequestCancellationTokenSource = null;\n    this._documentProvidersChangeListeners = [];\n    this._register(this._model.onDidChangeContent(() => {\n      if (!this._fetchDocumentSemanticTokens.isScheduled()) {\n        this._fetchDocumentSemanticTokens.schedule();\n      }\n    }));\n    const bindDocumentChangeListeners = () => {\n      dispose(this._documentProvidersChangeListeners);\n      this._documentProvidersChangeListeners = [];\n      for (const provider of DocumentSemanticTokensProviderRegistry.all(model)) {\n        if (typeof provider.onDidChange === 'function') {\n          this._documentProvidersChangeListeners.push(provider.onDidChange(() => this._fetchDocumentSemanticTokens.schedule(0)));\n        }\n      }\n    };\n    bindDocumentChangeListeners();\n    this._register(DocumentSemanticTokensProviderRegistry.onDidChange(() => {\n      bindDocumentChangeListeners();\n      this._fetchDocumentSemanticTokens.schedule();\n    }));\n    this._register(themeService.onDidColorThemeChange(_ => {\n      // clear out existing tokens\n      this._setDocumentSemanticTokens(null, null, null, []);\n      this._fetchDocumentSemanticTokens.schedule();\n    }));\n    this._fetchDocumentSemanticTokens.schedule(0);\n  }\n  dispose() {\n    if (this._currentDocumentResponse) {\n      this._currentDocumentResponse.dispose();\n      this._currentDocumentResponse = null;\n    }\n    if (this._currentDocumentRequestCancellationTokenSource) {\n      this._currentDocumentRequestCancellationTokenSource.cancel();\n      this._currentDocumentRequestCancellationTokenSource = null;\n    }\n    this._setDocumentSemanticTokens(null, null, null, []);\n    this._isDisposed = true;\n    super.dispose();\n  }\n  _fetchDocumentSemanticTokensNow() {\n    if (this._currentDocumentRequestCancellationTokenSource) {\n      // there is already a request running, let it finish...\n      return;\n    }\n    const cancellationTokenSource = new CancellationTokenSource();\n    const lastResultId = this._currentDocumentResponse ? this._currentDocumentResponse.resultId || null : null;\n    const r = getDocumentSemanticTokens(this._model, lastResultId, cancellationTokenSource.token);\n    if (!r) {\n      // there is no provider\n      if (this._currentDocumentResponse) {\n        // there are semantic tokens set\n        this._model.setSemanticTokens(null, false);\n      }\n      return;\n    }\n    const {\n      provider,\n      request\n    } = r;\n    this._currentDocumentRequestCancellationTokenSource = cancellationTokenSource;\n    const pendingChanges = [];\n    const contentChangeListener = this._model.onDidChangeContent(e => {\n      pendingChanges.push(e);\n    });\n    const styling = this._semanticStyling.get(provider);\n    request.then(res => {\n      this._currentDocumentRequestCancellationTokenSource = null;\n      contentChangeListener.dispose();\n      this._setDocumentSemanticTokens(provider, res || null, styling, pendingChanges);\n    }, err => {\n      const isExpectedError = err && (errors.isPromiseCanceledError(err) || typeof err.message === 'string' && err.message.indexOf('busy') !== -1);\n      if (!isExpectedError) {\n        errors.onUnexpectedError(err);\n      }\n      // Semantic tokens eats up all errors and considers errors to mean that the result is temporarily not available\n      // The API does not have a special error kind to express this...\n      this._currentDocumentRequestCancellationTokenSource = null;\n      contentChangeListener.dispose();\n      if (pendingChanges.length > 0) {\n        // More changes occurred while the request was running\n        if (!this._fetchDocumentSemanticTokens.isScheduled()) {\n          this._fetchDocumentSemanticTokens.schedule();\n        }\n      }\n    });\n  }\n  static _copy(src, srcOffset, dest, destOffset, length) {\n    for (let i = 0; i < length; i++) {\n      dest[destOffset + i] = src[srcOffset + i];\n    }\n  }\n  _setDocumentSemanticTokens(provider, tokens, styling, pendingChanges) {\n    const currentResponse = this._currentDocumentResponse;\n    const rescheduleIfNeeded = () => {\n      if (pendingChanges.length > 0 && !this._fetchDocumentSemanticTokens.isScheduled()) {\n        this._fetchDocumentSemanticTokens.schedule();\n      }\n    };\n    if (this._currentDocumentResponse) {\n      this._currentDocumentResponse.dispose();\n      this._currentDocumentResponse = null;\n    }\n    if (this._isDisposed) {\n      // disposed!\n      if (provider && tokens) {\n        provider.releaseDocumentSemanticTokens(tokens.resultId);\n      }\n      return;\n    }\n    if (!provider || !styling) {\n      this._model.setSemanticTokens(null, false);\n      return;\n    }\n    if (!tokens) {\n      this._model.setSemanticTokens(null, true);\n      rescheduleIfNeeded();\n      return;\n    }\n    if (isSemanticTokensEdits(tokens)) {\n      if (!currentResponse) {\n        // not possible!\n        this._model.setSemanticTokens(null, true);\n        return;\n      }\n      if (tokens.edits.length === 0) {\n        // nothing to do!\n        tokens = {\n          resultId: tokens.resultId,\n          data: currentResponse.data\n        };\n      } else {\n        let deltaLength = 0;\n        for (const edit of tokens.edits) {\n          deltaLength += (edit.data ? edit.data.length : 0) - edit.deleteCount;\n        }\n        const srcData = currentResponse.data;\n        const destData = new Uint32Array(srcData.length + deltaLength);\n        let srcLastStart = srcData.length;\n        let destLastStart = destData.length;\n        for (let i = tokens.edits.length - 1; i >= 0; i--) {\n          const edit = tokens.edits[i];\n          const copyCount = srcLastStart - (edit.start + edit.deleteCount);\n          if (copyCount > 0) {\n            ModelSemanticColoring._copy(srcData, srcLastStart - copyCount, destData, destLastStart - copyCount, copyCount);\n            destLastStart -= copyCount;\n          }\n          if (edit.data) {\n            ModelSemanticColoring._copy(edit.data, 0, destData, destLastStart - edit.data.length, edit.data.length);\n            destLastStart -= edit.data.length;\n          }\n          srcLastStart = edit.start;\n        }\n        if (srcLastStart > 0) {\n          ModelSemanticColoring._copy(srcData, 0, destData, 0, srcLastStart);\n        }\n        tokens = {\n          resultId: tokens.resultId,\n          data: destData\n        };\n      }\n    }\n    if (isSemanticTokens(tokens)) {\n      this._currentDocumentResponse = new SemanticTokensResponse(provider, tokens.resultId, tokens.data);\n      const result = toMultilineTokens2(tokens, styling, this._model.getLanguageIdentifier());\n      // Adjust incoming semantic tokens\n      if (pendingChanges.length > 0) {\n        // More changes occurred while the request was running\n        // We need to:\n        // 1. Adjust incoming semantic tokens\n        // 2. Request them again\n        for (const change of pendingChanges) {\n          for (const area of result) {\n            for (const singleChange of change.changes) {\n              area.applyEdit(singleChange.range, singleChange.text);\n            }\n          }\n        }\n      }\n      this._model.setSemanticTokens(result, true);\n    } else {\n      this._model.setSemanticTokens(null, true);\n    }\n    rescheduleIfNeeded();\n  }\n}\nModelSemanticColoring.FETCH_DOCUMENT_SEMANTIC_TOKENS_DELAY = 300;","map":{"version":3,"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","Emitter","Disposable","DisposableStore","dispose","platform","errors","EDITOR_MODEL_DEFAULTS","TextModel","DocumentSemanticTokensProviderRegistry","PLAINTEXT_LANGUAGE_IDENTIFIER","ITextResourcePropertiesService","IConfigurationService","RunOnceScheduler","CancellationTokenSource","IThemeService","ILogService","IUndoRedoService","StringSHA1","isEditStackElement","Schemas","SemanticTokensProviderStyling","toMultilineTokens2","getDocumentSemanticTokens","isSemanticTokens","isSemanticTokensEdits","MODEL_ID","resource","toString","computeModelSha1","model","shaComputer","snapshot","createSnapshot","text","read","update","digest","ModelData","constructor","onWillDispose","onDidChangeLanguage","_modelEventListeners","_languageSelection","_languageSelectionListener","add","e","_disposeLanguageSelection","setLanguage","languageSelection","onDidChange","setMode","languageIdentifier","DEFAULT_EOL","isLinux","isMacintosh","DisposedModelInfo","uri","initialUndoRedoSnapshot","time","sharesUndoRedoStack","heapSize","sha1","versionId","alternativeVersionId","schemaShouldMaintainUndoRedoElements","scheme","file","vscodeRemote","userData","ModelServiceImpl","_configurationService","_resourcePropertiesService","_themeService","_logService","_undoRedoService","_onModelAdded","_register","onModelAdded","event","_onModelRemoved","onModelRemoved","_onModelModeChanged","onModelModeChanged","_modelCreationOptionsByLanguageAndResource","create","_models","_disposedModels","Map","_disposedModelsHeapSize","_semanticStyling","SemanticStyling","onDidChangeConfiguration","_updateModelOptions","SemanticColoringFeature","_readModelOptions","config","isForSimpleWidget","tabSize","editor","parsedTabSize","parseInt","isNaN","indentSize","parsedIndentSize","insertSpaces","Boolean","newDefaultEOL","eol","trimAutoWhitespace","detectIndentation","largeFileOptimizations","defaultEOL","_getEOL","language","getEOL","getValue","overrideIdentifier","OS","_shouldRestoreUndoStack","result","getCreationOptions","creationOptions","oldOptionsByLanguageAndResource","keys","len","modelId","modelData","getLanguageIdentifier","oldOptions","newOptions","_setModelOptionsForModel","currentOptions","getLineCount","setEOL","updateOptions","_insertDisposedModel","disposedModelData","set","_removeDisposedModel","get","delete","_ensureDisposedModelsHeapSize","maxModelsHeapSize","disposedModels","forEach","entry","push","sort","a","b","disposedModel","shift","restoreSnapshot","_createModelData","value","options","has","elements","getElements","sha1IsEqual","element","past","matchesResource","setModel","future","setElementsValidFlag","_overwriteVersionId","_overwriteAlternativeVersionId","_overwriteInitialUndoRedoSnapshot","Error","_onWillDispose","_onDidChangeLanguage","createModel","undefined","fire","getModels","ret","getModel","getSemanticTokensProviderStyling","provider","getUriComparisonKey","maintainUndoRedoStack","maxMemory","MAX_MEMORY_FOR_CLOSED_FILES_UNDO_STACK","getInitialUndoRedoSnapshot","Date","now","getVersionId","getAlternativeVersionId","oldModeId","oldLanguage","newModeId","SEMANTIC_HIGHLIGHTING_SETTING_ID","isSemanticColoringEnabled","themeService","configurationService","_a","setting","enabled","getColorTheme","semanticHighlighting","modelService","semanticStyling","_watchers","register","ModelSemanticColoring","deregister","modelSemanticColoring","handleSettingOrThemeChange","curr","affectsConfiguration","onDidColorThemeChange","_caches","WeakMap","getLegend","SemanticTokensResponse","_provider","resultId","data","releaseDocumentSemanticTokens","stylingProvider","_isDisposed","_model","_fetchDocumentSemanticTokens","_fetchDocumentSemanticTokensNow","FETCH_DOCUMENT_SEMANTIC_TOKENS_DELAY","_currentDocumentResponse","_currentDocumentRequestCancellationTokenSource","_documentProvidersChangeListeners","onDidChangeContent","isScheduled","schedule","bindDocumentChangeListeners","all","_","_setDocumentSemanticTokens","cancel","cancellationTokenSource","lastResultId","token","setSemanticTokens","request","pendingChanges","contentChangeListener","styling","then","res","err","isExpectedError","isPromiseCanceledError","message","indexOf","onUnexpectedError","_copy","src","srcOffset","dest","destOffset","tokens","currentResponse","rescheduleIfNeeded","edits","deltaLength","edit","deleteCount","srcData","destData","Uint32Array","srcLastStart","destLastStart","copyCount","start","change","area","singleChange","changes","applyEdit","range"],"sources":["C:/Users/Administrator/Desktop/sqllineage-master/sqllineagejs/node_modules/monaco-editor/esm/vs/editor/common/services/modelServiceImpl.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n};\r\nimport { Emitter } from '../../../base/common/event.js';\r\nimport { Disposable, DisposableStore, dispose } from '../../../base/common/lifecycle.js';\r\nimport * as platform from '../../../base/common/platform.js';\r\nimport * as errors from '../../../base/common/errors.js';\r\nimport { EDITOR_MODEL_DEFAULTS } from '../config/editorOptions.js';\r\nimport { TextModel } from '../model/textModel.js';\r\nimport { DocumentSemanticTokensProviderRegistry } from '../modes.js';\r\nimport { PLAINTEXT_LANGUAGE_IDENTIFIER } from '../modes/modesRegistry.js';\r\nimport { ITextResourcePropertiesService } from './textResourceConfigurationService.js';\r\nimport { IConfigurationService } from '../../../platform/configuration/common/configuration.js';\r\nimport { RunOnceScheduler } from '../../../base/common/async.js';\r\nimport { CancellationTokenSource } from '../../../base/common/cancellation.js';\r\nimport { IThemeService } from '../../../platform/theme/common/themeService.js';\r\nimport { ILogService } from '../../../platform/log/common/log.js';\r\nimport { IUndoRedoService } from '../../../platform/undoRedo/common/undoRedo.js';\r\nimport { StringSHA1 } from '../../../base/common/hash.js';\r\nimport { isEditStackElement } from '../model/editStack.js';\r\nimport { Schemas } from '../../../base/common/network.js';\r\nimport { SemanticTokensProviderStyling, toMultilineTokens2 } from './semanticTokensProviderStyling.js';\r\nimport { getDocumentSemanticTokens, isSemanticTokens, isSemanticTokensEdits } from './getSemanticTokens.js';\r\nfunction MODEL_ID(resource) {\r\n    return resource.toString();\r\n}\r\nfunction computeModelSha1(model) {\r\n    // compute the sha1\r\n    const shaComputer = new StringSHA1();\r\n    const snapshot = model.createSnapshot();\r\n    let text;\r\n    while ((text = snapshot.read())) {\r\n        shaComputer.update(text);\r\n    }\r\n    return shaComputer.digest();\r\n}\r\nclass ModelData {\r\n    constructor(model, onWillDispose, onDidChangeLanguage) {\r\n        this._modelEventListeners = new DisposableStore();\r\n        this.model = model;\r\n        this._languageSelection = null;\r\n        this._languageSelectionListener = null;\r\n        this._modelEventListeners.add(model.onWillDispose(() => onWillDispose(model)));\r\n        this._modelEventListeners.add(model.onDidChangeLanguage((e) => onDidChangeLanguage(model, e)));\r\n    }\r\n    _disposeLanguageSelection() {\r\n        if (this._languageSelectionListener) {\r\n            this._languageSelectionListener.dispose();\r\n            this._languageSelectionListener = null;\r\n        }\r\n        if (this._languageSelection) {\r\n            this._languageSelection.dispose();\r\n            this._languageSelection = null;\r\n        }\r\n    }\r\n    dispose() {\r\n        this._modelEventListeners.dispose();\r\n        this._disposeLanguageSelection();\r\n    }\r\n    setLanguage(languageSelection) {\r\n        this._disposeLanguageSelection();\r\n        this._languageSelection = languageSelection;\r\n        this._languageSelectionListener = this._languageSelection.onDidChange(() => this.model.setMode(languageSelection.languageIdentifier));\r\n        this.model.setMode(languageSelection.languageIdentifier);\r\n    }\r\n}\r\nconst DEFAULT_EOL = (platform.isLinux || platform.isMacintosh) ? 1 /* LF */ : 2 /* CRLF */;\r\nclass DisposedModelInfo {\r\n    constructor(uri, initialUndoRedoSnapshot, time, sharesUndoRedoStack, heapSize, sha1, versionId, alternativeVersionId) {\r\n        this.uri = uri;\r\n        this.initialUndoRedoSnapshot = initialUndoRedoSnapshot;\r\n        this.time = time;\r\n        this.sharesUndoRedoStack = sharesUndoRedoStack;\r\n        this.heapSize = heapSize;\r\n        this.sha1 = sha1;\r\n        this.versionId = versionId;\r\n        this.alternativeVersionId = alternativeVersionId;\r\n    }\r\n}\r\nfunction schemaShouldMaintainUndoRedoElements(resource) {\r\n    return (resource.scheme === Schemas.file\r\n        || resource.scheme === Schemas.vscodeRemote\r\n        || resource.scheme === Schemas.userData\r\n        || resource.scheme === 'fake-fs' // for tests\r\n    );\r\n}\r\nlet ModelServiceImpl = class ModelServiceImpl extends Disposable {\r\n    constructor(_configurationService, _resourcePropertiesService, _themeService, _logService, _undoRedoService) {\r\n        super();\r\n        this._configurationService = _configurationService;\r\n        this._resourcePropertiesService = _resourcePropertiesService;\r\n        this._themeService = _themeService;\r\n        this._logService = _logService;\r\n        this._undoRedoService = _undoRedoService;\r\n        this._onModelAdded = this._register(new Emitter());\r\n        this.onModelAdded = this._onModelAdded.event;\r\n        this._onModelRemoved = this._register(new Emitter());\r\n        this.onModelRemoved = this._onModelRemoved.event;\r\n        this._onModelModeChanged = this._register(new Emitter());\r\n        this.onModelModeChanged = this._onModelModeChanged.event;\r\n        this._modelCreationOptionsByLanguageAndResource = Object.create(null);\r\n        this._models = {};\r\n        this._disposedModels = new Map();\r\n        this._disposedModelsHeapSize = 0;\r\n        this._semanticStyling = this._register(new SemanticStyling(this._themeService, this._logService));\r\n        this._register(this._configurationService.onDidChangeConfiguration(() => this._updateModelOptions()));\r\n        this._updateModelOptions();\r\n        this._register(new SemanticColoringFeature(this, this._themeService, this._configurationService, this._semanticStyling));\r\n    }\r\n    static _readModelOptions(config, isForSimpleWidget) {\r\n        let tabSize = EDITOR_MODEL_DEFAULTS.tabSize;\r\n        if (config.editor && typeof config.editor.tabSize !== 'undefined') {\r\n            const parsedTabSize = parseInt(config.editor.tabSize, 10);\r\n            if (!isNaN(parsedTabSize)) {\r\n                tabSize = parsedTabSize;\r\n            }\r\n            if (tabSize < 1) {\r\n                tabSize = 1;\r\n            }\r\n        }\r\n        let indentSize = tabSize;\r\n        if (config.editor && typeof config.editor.indentSize !== 'undefined' && config.editor.indentSize !== 'tabSize') {\r\n            const parsedIndentSize = parseInt(config.editor.indentSize, 10);\r\n            if (!isNaN(parsedIndentSize)) {\r\n                indentSize = parsedIndentSize;\r\n            }\r\n            if (indentSize < 1) {\r\n                indentSize = 1;\r\n            }\r\n        }\r\n        let insertSpaces = EDITOR_MODEL_DEFAULTS.insertSpaces;\r\n        if (config.editor && typeof config.editor.insertSpaces !== 'undefined') {\r\n            insertSpaces = (config.editor.insertSpaces === 'false' ? false : Boolean(config.editor.insertSpaces));\r\n        }\r\n        let newDefaultEOL = DEFAULT_EOL;\r\n        const eol = config.eol;\r\n        if (eol === '\\r\\n') {\r\n            newDefaultEOL = 2 /* CRLF */;\r\n        }\r\n        else if (eol === '\\n') {\r\n            newDefaultEOL = 1 /* LF */;\r\n        }\r\n        let trimAutoWhitespace = EDITOR_MODEL_DEFAULTS.trimAutoWhitespace;\r\n        if (config.editor && typeof config.editor.trimAutoWhitespace !== 'undefined') {\r\n            trimAutoWhitespace = (config.editor.trimAutoWhitespace === 'false' ? false : Boolean(config.editor.trimAutoWhitespace));\r\n        }\r\n        let detectIndentation = EDITOR_MODEL_DEFAULTS.detectIndentation;\r\n        if (config.editor && typeof config.editor.detectIndentation !== 'undefined') {\r\n            detectIndentation = (config.editor.detectIndentation === 'false' ? false : Boolean(config.editor.detectIndentation));\r\n        }\r\n        let largeFileOptimizations = EDITOR_MODEL_DEFAULTS.largeFileOptimizations;\r\n        if (config.editor && typeof config.editor.largeFileOptimizations !== 'undefined') {\r\n            largeFileOptimizations = (config.editor.largeFileOptimizations === 'false' ? false : Boolean(config.editor.largeFileOptimizations));\r\n        }\r\n        return {\r\n            isForSimpleWidget: isForSimpleWidget,\r\n            tabSize: tabSize,\r\n            indentSize: indentSize,\r\n            insertSpaces: insertSpaces,\r\n            detectIndentation: detectIndentation,\r\n            defaultEOL: newDefaultEOL,\r\n            trimAutoWhitespace: trimAutoWhitespace,\r\n            largeFileOptimizations: largeFileOptimizations\r\n        };\r\n    }\r\n    _getEOL(resource, language) {\r\n        if (resource) {\r\n            return this._resourcePropertiesService.getEOL(resource, language);\r\n        }\r\n        const eol = this._configurationService.getValue('files.eol', { overrideIdentifier: language });\r\n        if (eol && eol !== 'auto') {\r\n            return eol;\r\n        }\r\n        return platform.OS === 3 /* Linux */ || platform.OS === 2 /* Macintosh */ ? '\\n' : '\\r\\n';\r\n    }\r\n    _shouldRestoreUndoStack() {\r\n        const result = this._configurationService.getValue('files.restoreUndoStack');\r\n        if (typeof result === 'boolean') {\r\n            return result;\r\n        }\r\n        return true;\r\n    }\r\n    getCreationOptions(language, resource, isForSimpleWidget) {\r\n        let creationOptions = this._modelCreationOptionsByLanguageAndResource[language + resource];\r\n        if (!creationOptions) {\r\n            const editor = this._configurationService.getValue('editor', { overrideIdentifier: language, resource });\r\n            const eol = this._getEOL(resource, language);\r\n            creationOptions = ModelServiceImpl._readModelOptions({ editor, eol }, isForSimpleWidget);\r\n            this._modelCreationOptionsByLanguageAndResource[language + resource] = creationOptions;\r\n        }\r\n        return creationOptions;\r\n    }\r\n    _updateModelOptions() {\r\n        const oldOptionsByLanguageAndResource = this._modelCreationOptionsByLanguageAndResource;\r\n        this._modelCreationOptionsByLanguageAndResource = Object.create(null);\r\n        // Update options on all models\r\n        const keys = Object.keys(this._models);\r\n        for (let i = 0, len = keys.length; i < len; i++) {\r\n            const modelId = keys[i];\r\n            const modelData = this._models[modelId];\r\n            const language = modelData.model.getLanguageIdentifier().language;\r\n            const uri = modelData.model.uri;\r\n            const oldOptions = oldOptionsByLanguageAndResource[language + uri];\r\n            const newOptions = this.getCreationOptions(language, uri, modelData.model.isForSimpleWidget);\r\n            ModelServiceImpl._setModelOptionsForModel(modelData.model, newOptions, oldOptions);\r\n        }\r\n    }\r\n    static _setModelOptionsForModel(model, newOptions, currentOptions) {\r\n        if (currentOptions && currentOptions.defaultEOL !== newOptions.defaultEOL && model.getLineCount() === 1) {\r\n            model.setEOL(newOptions.defaultEOL === 1 /* LF */ ? 0 /* LF */ : 1 /* CRLF */);\r\n        }\r\n        if (currentOptions\r\n            && (currentOptions.detectIndentation === newOptions.detectIndentation)\r\n            && (currentOptions.insertSpaces === newOptions.insertSpaces)\r\n            && (currentOptions.tabSize === newOptions.tabSize)\r\n            && (currentOptions.indentSize === newOptions.indentSize)\r\n            && (currentOptions.trimAutoWhitespace === newOptions.trimAutoWhitespace)) {\r\n            // Same indent opts, no need to touch the model\r\n            return;\r\n        }\r\n        if (newOptions.detectIndentation) {\r\n            model.detectIndentation(newOptions.insertSpaces, newOptions.tabSize);\r\n            model.updateOptions({\r\n                trimAutoWhitespace: newOptions.trimAutoWhitespace\r\n            });\r\n        }\r\n        else {\r\n            model.updateOptions({\r\n                insertSpaces: newOptions.insertSpaces,\r\n                tabSize: newOptions.tabSize,\r\n                indentSize: newOptions.indentSize,\r\n                trimAutoWhitespace: newOptions.trimAutoWhitespace\r\n            });\r\n        }\r\n    }\r\n    // --- begin IModelService\r\n    _insertDisposedModel(disposedModelData) {\r\n        this._disposedModels.set(MODEL_ID(disposedModelData.uri), disposedModelData);\r\n        this._disposedModelsHeapSize += disposedModelData.heapSize;\r\n    }\r\n    _removeDisposedModel(resource) {\r\n        const disposedModelData = this._disposedModels.get(MODEL_ID(resource));\r\n        if (disposedModelData) {\r\n            this._disposedModelsHeapSize -= disposedModelData.heapSize;\r\n        }\r\n        this._disposedModels.delete(MODEL_ID(resource));\r\n        return disposedModelData;\r\n    }\r\n    _ensureDisposedModelsHeapSize(maxModelsHeapSize) {\r\n        if (this._disposedModelsHeapSize > maxModelsHeapSize) {\r\n            // we must remove some old undo stack elements to free up some memory\r\n            const disposedModels = [];\r\n            this._disposedModels.forEach(entry => {\r\n                if (!entry.sharesUndoRedoStack) {\r\n                    disposedModels.push(entry);\r\n                }\r\n            });\r\n            disposedModels.sort((a, b) => a.time - b.time);\r\n            while (disposedModels.length > 0 && this._disposedModelsHeapSize > maxModelsHeapSize) {\r\n                const disposedModel = disposedModels.shift();\r\n                this._removeDisposedModel(disposedModel.uri);\r\n                if (disposedModel.initialUndoRedoSnapshot !== null) {\r\n                    this._undoRedoService.restoreSnapshot(disposedModel.initialUndoRedoSnapshot);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    _createModelData(value, languageIdentifier, resource, isForSimpleWidget) {\r\n        // create & save the model\r\n        const options = this.getCreationOptions(languageIdentifier.language, resource, isForSimpleWidget);\r\n        const model = new TextModel(value, options, languageIdentifier, resource, this._undoRedoService);\r\n        if (resource && this._disposedModels.has(MODEL_ID(resource))) {\r\n            const disposedModelData = this._removeDisposedModel(resource);\r\n            const elements = this._undoRedoService.getElements(resource);\r\n            const sha1IsEqual = (computeModelSha1(model) === disposedModelData.sha1);\r\n            if (sha1IsEqual || disposedModelData.sharesUndoRedoStack) {\r\n                for (const element of elements.past) {\r\n                    if (isEditStackElement(element) && element.matchesResource(resource)) {\r\n                        element.setModel(model);\r\n                    }\r\n                }\r\n                for (const element of elements.future) {\r\n                    if (isEditStackElement(element) && element.matchesResource(resource)) {\r\n                        element.setModel(model);\r\n                    }\r\n                }\r\n                this._undoRedoService.setElementsValidFlag(resource, true, (element) => (isEditStackElement(element) && element.matchesResource(resource)));\r\n                if (sha1IsEqual) {\r\n                    model._overwriteVersionId(disposedModelData.versionId);\r\n                    model._overwriteAlternativeVersionId(disposedModelData.alternativeVersionId);\r\n                    model._overwriteInitialUndoRedoSnapshot(disposedModelData.initialUndoRedoSnapshot);\r\n                }\r\n            }\r\n            else {\r\n                if (disposedModelData.initialUndoRedoSnapshot !== null) {\r\n                    this._undoRedoService.restoreSnapshot(disposedModelData.initialUndoRedoSnapshot);\r\n                }\r\n            }\r\n        }\r\n        const modelId = MODEL_ID(model.uri);\r\n        if (this._models[modelId]) {\r\n            // There already exists a model with this id => this is a programmer error\r\n            throw new Error('ModelService: Cannot add model because it already exists!');\r\n        }\r\n        const modelData = new ModelData(model, (model) => this._onWillDispose(model), (model, e) => this._onDidChangeLanguage(model, e));\r\n        this._models[modelId] = modelData;\r\n        return modelData;\r\n    }\r\n    createModel(value, languageSelection, resource, isForSimpleWidget = false) {\r\n        let modelData;\r\n        if (languageSelection) {\r\n            modelData = this._createModelData(value, languageSelection.languageIdentifier, resource, isForSimpleWidget);\r\n            this.setMode(modelData.model, languageSelection);\r\n        }\r\n        else {\r\n            modelData = this._createModelData(value, PLAINTEXT_LANGUAGE_IDENTIFIER, resource, isForSimpleWidget);\r\n        }\r\n        this._onModelAdded.fire(modelData.model);\r\n        return modelData.model;\r\n    }\r\n    setMode(model, languageSelection) {\r\n        if (!languageSelection) {\r\n            return;\r\n        }\r\n        const modelData = this._models[MODEL_ID(model.uri)];\r\n        if (!modelData) {\r\n            return;\r\n        }\r\n        modelData.setLanguage(languageSelection);\r\n    }\r\n    getModels() {\r\n        const ret = [];\r\n        const keys = Object.keys(this._models);\r\n        for (let i = 0, len = keys.length; i < len; i++) {\r\n            const modelId = keys[i];\r\n            ret.push(this._models[modelId].model);\r\n        }\r\n        return ret;\r\n    }\r\n    getModel(resource) {\r\n        const modelId = MODEL_ID(resource);\r\n        const modelData = this._models[modelId];\r\n        if (!modelData) {\r\n            return null;\r\n        }\r\n        return modelData.model;\r\n    }\r\n    getSemanticTokensProviderStyling(provider) {\r\n        return this._semanticStyling.get(provider);\r\n    }\r\n    // --- end IModelService\r\n    _onWillDispose(model) {\r\n        const modelId = MODEL_ID(model.uri);\r\n        const modelData = this._models[modelId];\r\n        const sharesUndoRedoStack = (this._undoRedoService.getUriComparisonKey(model.uri) !== model.uri.toString());\r\n        let maintainUndoRedoStack = false;\r\n        let heapSize = 0;\r\n        if (sharesUndoRedoStack || (this._shouldRestoreUndoStack() && schemaShouldMaintainUndoRedoElements(model.uri))) {\r\n            const elements = this._undoRedoService.getElements(model.uri);\r\n            if (elements.past.length > 0 || elements.future.length > 0) {\r\n                for (const element of elements.past) {\r\n                    if (isEditStackElement(element) && element.matchesResource(model.uri)) {\r\n                        maintainUndoRedoStack = true;\r\n                        heapSize += element.heapSize(model.uri);\r\n                        element.setModel(model.uri); // remove reference from text buffer instance\r\n                    }\r\n                }\r\n                for (const element of elements.future) {\r\n                    if (isEditStackElement(element) && element.matchesResource(model.uri)) {\r\n                        maintainUndoRedoStack = true;\r\n                        heapSize += element.heapSize(model.uri);\r\n                        element.setModel(model.uri); // remove reference from text buffer instance\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        const maxMemory = ModelServiceImpl.MAX_MEMORY_FOR_CLOSED_FILES_UNDO_STACK;\r\n        if (!maintainUndoRedoStack) {\r\n            if (!sharesUndoRedoStack) {\r\n                const initialUndoRedoSnapshot = modelData.model.getInitialUndoRedoSnapshot();\r\n                if (initialUndoRedoSnapshot !== null) {\r\n                    this._undoRedoService.restoreSnapshot(initialUndoRedoSnapshot);\r\n                }\r\n            }\r\n        }\r\n        else if (!sharesUndoRedoStack && heapSize > maxMemory) {\r\n            // the undo stack for this file would never fit in the configured memory, so don't bother with it.\r\n            const initialUndoRedoSnapshot = modelData.model.getInitialUndoRedoSnapshot();\r\n            if (initialUndoRedoSnapshot !== null) {\r\n                this._undoRedoService.restoreSnapshot(initialUndoRedoSnapshot);\r\n            }\r\n        }\r\n        else {\r\n            this._ensureDisposedModelsHeapSize(maxMemory - heapSize);\r\n            // We only invalidate the elements, but they remain in the undo-redo service.\r\n            this._undoRedoService.setElementsValidFlag(model.uri, false, (element) => (isEditStackElement(element) && element.matchesResource(model.uri)));\r\n            this._insertDisposedModel(new DisposedModelInfo(model.uri, modelData.model.getInitialUndoRedoSnapshot(), Date.now(), sharesUndoRedoStack, heapSize, computeModelSha1(model), model.getVersionId(), model.getAlternativeVersionId()));\r\n        }\r\n        delete this._models[modelId];\r\n        modelData.dispose();\r\n        // clean up cache\r\n        delete this._modelCreationOptionsByLanguageAndResource[model.getLanguageIdentifier().language + model.uri];\r\n        this._onModelRemoved.fire(model);\r\n    }\r\n    _onDidChangeLanguage(model, e) {\r\n        const oldModeId = e.oldLanguage;\r\n        const newModeId = model.getLanguageIdentifier().language;\r\n        const oldOptions = this.getCreationOptions(oldModeId, model.uri, model.isForSimpleWidget);\r\n        const newOptions = this.getCreationOptions(newModeId, model.uri, model.isForSimpleWidget);\r\n        ModelServiceImpl._setModelOptionsForModel(model, newOptions, oldOptions);\r\n        this._onModelModeChanged.fire({ model, oldModeId });\r\n    }\r\n};\r\nModelServiceImpl.MAX_MEMORY_FOR_CLOSED_FILES_UNDO_STACK = 20 * 1024 * 1024;\r\nModelServiceImpl = __decorate([\r\n    __param(0, IConfigurationService),\r\n    __param(1, ITextResourcePropertiesService),\r\n    __param(2, IThemeService),\r\n    __param(3, ILogService),\r\n    __param(4, IUndoRedoService)\r\n], ModelServiceImpl);\r\nexport { ModelServiceImpl };\r\nexport const SEMANTIC_HIGHLIGHTING_SETTING_ID = 'editor.semanticHighlighting';\r\nexport function isSemanticColoringEnabled(model, themeService, configurationService) {\r\n    var _a;\r\n    const setting = (_a = configurationService.getValue(SEMANTIC_HIGHLIGHTING_SETTING_ID, { overrideIdentifier: model.getLanguageIdentifier().language, resource: model.uri })) === null || _a === void 0 ? void 0 : _a.enabled;\r\n    if (typeof setting === 'boolean') {\r\n        return setting;\r\n    }\r\n    return themeService.getColorTheme().semanticHighlighting;\r\n}\r\nclass SemanticColoringFeature extends Disposable {\r\n    constructor(modelService, themeService, configurationService, semanticStyling) {\r\n        super();\r\n        this._watchers = Object.create(null);\r\n        this._semanticStyling = semanticStyling;\r\n        const register = (model) => {\r\n            this._watchers[model.uri.toString()] = new ModelSemanticColoring(model, themeService, this._semanticStyling);\r\n        };\r\n        const deregister = (model, modelSemanticColoring) => {\r\n            modelSemanticColoring.dispose();\r\n            delete this._watchers[model.uri.toString()];\r\n        };\r\n        const handleSettingOrThemeChange = () => {\r\n            for (let model of modelService.getModels()) {\r\n                const curr = this._watchers[model.uri.toString()];\r\n                if (isSemanticColoringEnabled(model, themeService, configurationService)) {\r\n                    if (!curr) {\r\n                        register(model);\r\n                    }\r\n                }\r\n                else {\r\n                    if (curr) {\r\n                        deregister(model, curr);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        this._register(modelService.onModelAdded((model) => {\r\n            if (isSemanticColoringEnabled(model, themeService, configurationService)) {\r\n                register(model);\r\n            }\r\n        }));\r\n        this._register(modelService.onModelRemoved((model) => {\r\n            const curr = this._watchers[model.uri.toString()];\r\n            if (curr) {\r\n                deregister(model, curr);\r\n            }\r\n        }));\r\n        this._register(configurationService.onDidChangeConfiguration(e => {\r\n            if (e.affectsConfiguration(SEMANTIC_HIGHLIGHTING_SETTING_ID)) {\r\n                handleSettingOrThemeChange();\r\n            }\r\n        }));\r\n        this._register(themeService.onDidColorThemeChange(handleSettingOrThemeChange));\r\n    }\r\n}\r\nclass SemanticStyling extends Disposable {\r\n    constructor(_themeService, _logService) {\r\n        super();\r\n        this._themeService = _themeService;\r\n        this._logService = _logService;\r\n        this._caches = new WeakMap();\r\n        this._register(this._themeService.onDidColorThemeChange(() => {\r\n            this._caches = new WeakMap();\r\n        }));\r\n    }\r\n    get(provider) {\r\n        if (!this._caches.has(provider)) {\r\n            this._caches.set(provider, new SemanticTokensProviderStyling(provider.getLegend(), this._themeService, this._logService));\r\n        }\r\n        return this._caches.get(provider);\r\n    }\r\n}\r\nclass SemanticTokensResponse {\r\n    constructor(_provider, resultId, data) {\r\n        this._provider = _provider;\r\n        this.resultId = resultId;\r\n        this.data = data;\r\n    }\r\n    dispose() {\r\n        this._provider.releaseDocumentSemanticTokens(this.resultId);\r\n    }\r\n}\r\nexport class ModelSemanticColoring extends Disposable {\r\n    constructor(model, themeService, stylingProvider) {\r\n        super();\r\n        this._isDisposed = false;\r\n        this._model = model;\r\n        this._semanticStyling = stylingProvider;\r\n        this._fetchDocumentSemanticTokens = this._register(new RunOnceScheduler(() => this._fetchDocumentSemanticTokensNow(), ModelSemanticColoring.FETCH_DOCUMENT_SEMANTIC_TOKENS_DELAY));\r\n        this._currentDocumentResponse = null;\r\n        this._currentDocumentRequestCancellationTokenSource = null;\r\n        this._documentProvidersChangeListeners = [];\r\n        this._register(this._model.onDidChangeContent(() => {\r\n            if (!this._fetchDocumentSemanticTokens.isScheduled()) {\r\n                this._fetchDocumentSemanticTokens.schedule();\r\n            }\r\n        }));\r\n        const bindDocumentChangeListeners = () => {\r\n            dispose(this._documentProvidersChangeListeners);\r\n            this._documentProvidersChangeListeners = [];\r\n            for (const provider of DocumentSemanticTokensProviderRegistry.all(model)) {\r\n                if (typeof provider.onDidChange === 'function') {\r\n                    this._documentProvidersChangeListeners.push(provider.onDidChange(() => this._fetchDocumentSemanticTokens.schedule(0)));\r\n                }\r\n            }\r\n        };\r\n        bindDocumentChangeListeners();\r\n        this._register(DocumentSemanticTokensProviderRegistry.onDidChange(() => {\r\n            bindDocumentChangeListeners();\r\n            this._fetchDocumentSemanticTokens.schedule();\r\n        }));\r\n        this._register(themeService.onDidColorThemeChange(_ => {\r\n            // clear out existing tokens\r\n            this._setDocumentSemanticTokens(null, null, null, []);\r\n            this._fetchDocumentSemanticTokens.schedule();\r\n        }));\r\n        this._fetchDocumentSemanticTokens.schedule(0);\r\n    }\r\n    dispose() {\r\n        if (this._currentDocumentResponse) {\r\n            this._currentDocumentResponse.dispose();\r\n            this._currentDocumentResponse = null;\r\n        }\r\n        if (this._currentDocumentRequestCancellationTokenSource) {\r\n            this._currentDocumentRequestCancellationTokenSource.cancel();\r\n            this._currentDocumentRequestCancellationTokenSource = null;\r\n        }\r\n        this._setDocumentSemanticTokens(null, null, null, []);\r\n        this._isDisposed = true;\r\n        super.dispose();\r\n    }\r\n    _fetchDocumentSemanticTokensNow() {\r\n        if (this._currentDocumentRequestCancellationTokenSource) {\r\n            // there is already a request running, let it finish...\r\n            return;\r\n        }\r\n        const cancellationTokenSource = new CancellationTokenSource();\r\n        const lastResultId = this._currentDocumentResponse ? this._currentDocumentResponse.resultId || null : null;\r\n        const r = getDocumentSemanticTokens(this._model, lastResultId, cancellationTokenSource.token);\r\n        if (!r) {\r\n            // there is no provider\r\n            if (this._currentDocumentResponse) {\r\n                // there are semantic tokens set\r\n                this._model.setSemanticTokens(null, false);\r\n            }\r\n            return;\r\n        }\r\n        const { provider, request } = r;\r\n        this._currentDocumentRequestCancellationTokenSource = cancellationTokenSource;\r\n        const pendingChanges = [];\r\n        const contentChangeListener = this._model.onDidChangeContent((e) => {\r\n            pendingChanges.push(e);\r\n        });\r\n        const styling = this._semanticStyling.get(provider);\r\n        request.then((res) => {\r\n            this._currentDocumentRequestCancellationTokenSource = null;\r\n            contentChangeListener.dispose();\r\n            this._setDocumentSemanticTokens(provider, res || null, styling, pendingChanges);\r\n        }, (err) => {\r\n            const isExpectedError = err && (errors.isPromiseCanceledError(err) || (typeof err.message === 'string' && err.message.indexOf('busy') !== -1));\r\n            if (!isExpectedError) {\r\n                errors.onUnexpectedError(err);\r\n            }\r\n            // Semantic tokens eats up all errors and considers errors to mean that the result is temporarily not available\r\n            // The API does not have a special error kind to express this...\r\n            this._currentDocumentRequestCancellationTokenSource = null;\r\n            contentChangeListener.dispose();\r\n            if (pendingChanges.length > 0) {\r\n                // More changes occurred while the request was running\r\n                if (!this._fetchDocumentSemanticTokens.isScheduled()) {\r\n                    this._fetchDocumentSemanticTokens.schedule();\r\n                }\r\n            }\r\n        });\r\n    }\r\n    static _copy(src, srcOffset, dest, destOffset, length) {\r\n        for (let i = 0; i < length; i++) {\r\n            dest[destOffset + i] = src[srcOffset + i];\r\n        }\r\n    }\r\n    _setDocumentSemanticTokens(provider, tokens, styling, pendingChanges) {\r\n        const currentResponse = this._currentDocumentResponse;\r\n        const rescheduleIfNeeded = () => {\r\n            if (pendingChanges.length > 0 && !this._fetchDocumentSemanticTokens.isScheduled()) {\r\n                this._fetchDocumentSemanticTokens.schedule();\r\n            }\r\n        };\r\n        if (this._currentDocumentResponse) {\r\n            this._currentDocumentResponse.dispose();\r\n            this._currentDocumentResponse = null;\r\n        }\r\n        if (this._isDisposed) {\r\n            // disposed!\r\n            if (provider && tokens) {\r\n                provider.releaseDocumentSemanticTokens(tokens.resultId);\r\n            }\r\n            return;\r\n        }\r\n        if (!provider || !styling) {\r\n            this._model.setSemanticTokens(null, false);\r\n            return;\r\n        }\r\n        if (!tokens) {\r\n            this._model.setSemanticTokens(null, true);\r\n            rescheduleIfNeeded();\r\n            return;\r\n        }\r\n        if (isSemanticTokensEdits(tokens)) {\r\n            if (!currentResponse) {\r\n                // not possible!\r\n                this._model.setSemanticTokens(null, true);\r\n                return;\r\n            }\r\n            if (tokens.edits.length === 0) {\r\n                // nothing to do!\r\n                tokens = {\r\n                    resultId: tokens.resultId,\r\n                    data: currentResponse.data\r\n                };\r\n            }\r\n            else {\r\n                let deltaLength = 0;\r\n                for (const edit of tokens.edits) {\r\n                    deltaLength += (edit.data ? edit.data.length : 0) - edit.deleteCount;\r\n                }\r\n                const srcData = currentResponse.data;\r\n                const destData = new Uint32Array(srcData.length + deltaLength);\r\n                let srcLastStart = srcData.length;\r\n                let destLastStart = destData.length;\r\n                for (let i = tokens.edits.length - 1; i >= 0; i--) {\r\n                    const edit = tokens.edits[i];\r\n                    const copyCount = srcLastStart - (edit.start + edit.deleteCount);\r\n                    if (copyCount > 0) {\r\n                        ModelSemanticColoring._copy(srcData, srcLastStart - copyCount, destData, destLastStart - copyCount, copyCount);\r\n                        destLastStart -= copyCount;\r\n                    }\r\n                    if (edit.data) {\r\n                        ModelSemanticColoring._copy(edit.data, 0, destData, destLastStart - edit.data.length, edit.data.length);\r\n                        destLastStart -= edit.data.length;\r\n                    }\r\n                    srcLastStart = edit.start;\r\n                }\r\n                if (srcLastStart > 0) {\r\n                    ModelSemanticColoring._copy(srcData, 0, destData, 0, srcLastStart);\r\n                }\r\n                tokens = {\r\n                    resultId: tokens.resultId,\r\n                    data: destData\r\n                };\r\n            }\r\n        }\r\n        if (isSemanticTokens(tokens)) {\r\n            this._currentDocumentResponse = new SemanticTokensResponse(provider, tokens.resultId, tokens.data);\r\n            const result = toMultilineTokens2(tokens, styling, this._model.getLanguageIdentifier());\r\n            // Adjust incoming semantic tokens\r\n            if (pendingChanges.length > 0) {\r\n                // More changes occurred while the request was running\r\n                // We need to:\r\n                // 1. Adjust incoming semantic tokens\r\n                // 2. Request them again\r\n                for (const change of pendingChanges) {\r\n                    for (const area of result) {\r\n                        for (const singleChange of change.changes) {\r\n                            area.applyEdit(singleChange.range, singleChange.text);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            this._model.setSemanticTokens(result, true);\r\n        }\r\n        else {\r\n            this._model.setSemanticTokens(null, true);\r\n        }\r\n        rescheduleIfNeeded();\r\n    }\r\n}\r\nModelSemanticColoring.FETCH_DOCUMENT_SEMANTIC_TOKENS_DELAY = 300;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}