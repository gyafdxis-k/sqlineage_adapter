{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { TimeoutTimer } from '../../../base/common/async.js';\nimport { onUnexpectedError } from '../../../base/common/errors.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { dispose, DisposableStore } from '../../../base/common/lifecycle.js';\nimport { Selection } from '../../common/core/selection.js';\nimport { CompletionProviderRegistry } from '../../common/modes.js';\nimport { CompletionModel } from './completionModel.js';\nimport { getSuggestionComparator, provideSuggestionItems, getSnippetSuggestSupport, CompletionOptions } from './suggest.js';\nimport { SnippetController2 } from '../snippet/snippetController2.js';\nimport { CancellationTokenSource } from '../../../base/common/cancellation.js';\nimport { IEditorWorkerService } from '../../common/services/editorWorkerService.js';\nimport { WordDistance } from './wordDistance.js';\nimport { isLowSurrogate, isHighSurrogate, getLeadingWhitespace } from '../../../base/common/strings.js';\nimport { IClipboardService } from '../../../platform/clipboard/common/clipboardService.js';\nimport { ITelemetryService } from '../../../platform/telemetry/common/telemetry.js';\nimport { ILogService } from '../../../platform/log/common/log.js';\nexport class LineContext {\n  constructor(model, position, auto, shy) {\n    this.leadingLineContent = model.getLineContent(position.lineNumber).substr(0, position.column - 1);\n    this.leadingWord = model.getWordUntilPosition(position);\n    this.lineNumber = position.lineNumber;\n    this.column = position.column;\n    this.auto = auto;\n    this.shy = shy;\n  }\n  static shouldAutoTrigger(editor) {\n    if (!editor.hasModel()) {\n      return false;\n    }\n    const model = editor.getModel();\n    const pos = editor.getPosition();\n    model.tokenizeIfCheap(pos.lineNumber);\n    const word = model.getWordAtPosition(pos);\n    if (!word) {\n      return false;\n    }\n    if (word.endColumn !== pos.column) {\n      return false;\n    }\n    if (!isNaN(Number(word.word))) {\n      return false;\n    }\n    return true;\n  }\n}\nlet SuggestModel = class SuggestModel {\n  constructor(_editor, _editorWorkerService, _clipboardService, _telemetryService, _logService) {\n    this._editor = _editor;\n    this._editorWorkerService = _editorWorkerService;\n    this._clipboardService = _clipboardService;\n    this._telemetryService = _telemetryService;\n    this._logService = _logService;\n    this._toDispose = new DisposableStore();\n    this._quickSuggestDelay = 10;\n    this._triggerCharacterListener = new DisposableStore();\n    this._triggerQuickSuggest = new TimeoutTimer();\n    this._state = 0 /* Idle */;\n    this._completionDisposables = new DisposableStore();\n    this._onDidCancel = new Emitter();\n    this._onDidTrigger = new Emitter();\n    this._onDidSuggest = new Emitter();\n    this.onDidCancel = this._onDidCancel.event;\n    this.onDidTrigger = this._onDidTrigger.event;\n    this.onDidSuggest = this._onDidSuggest.event;\n    this._telemetryGate = 0;\n    this._currentSelection = this._editor.getSelection() || new Selection(1, 1, 1, 1);\n    // wire up various listeners\n    this._toDispose.add(this._editor.onDidChangeModel(() => {\n      this._updateTriggerCharacters();\n      this.cancel();\n    }));\n    this._toDispose.add(this._editor.onDidChangeModelLanguage(() => {\n      this._updateTriggerCharacters();\n      this.cancel();\n    }));\n    this._toDispose.add(this._editor.onDidChangeConfiguration(() => {\n      this._updateTriggerCharacters();\n      this._updateQuickSuggest();\n    }));\n    this._toDispose.add(CompletionProviderRegistry.onDidChange(() => {\n      this._updateTriggerCharacters();\n      this._updateActiveSuggestSession();\n    }));\n    this._toDispose.add(this._editor.onDidChangeCursorSelection(e => {\n      this._onCursorChange(e);\n    }));\n    let editorIsComposing = false;\n    this._toDispose.add(this._editor.onDidCompositionStart(() => {\n      editorIsComposing = true;\n    }));\n    this._toDispose.add(this._editor.onDidCompositionEnd(() => {\n      // refilter when composition ends\n      editorIsComposing = false;\n      this._refilterCompletionItems();\n    }));\n    this._toDispose.add(this._editor.onDidChangeModelContent(() => {\n      // only filter completions when the editor isn't\n      // composing a character, e.g. ¨ + u makes ü but just\n      // ¨ cannot be used for filtering\n      if (!editorIsComposing) {\n        this._refilterCompletionItems();\n      }\n    }));\n    this._updateTriggerCharacters();\n    this._updateQuickSuggest();\n  }\n  dispose() {\n    dispose(this._triggerCharacterListener);\n    dispose([this._onDidCancel, this._onDidSuggest, this._onDidTrigger, this._triggerQuickSuggest]);\n    this._toDispose.dispose();\n    this._completionDisposables.dispose();\n    this.cancel();\n  }\n  // --- handle configuration & precondition changes\n  _updateQuickSuggest() {\n    this._quickSuggestDelay = this._editor.getOption(74 /* quickSuggestionsDelay */);\n    if (isNaN(this._quickSuggestDelay) || !this._quickSuggestDelay && this._quickSuggestDelay !== 0 || this._quickSuggestDelay < 0) {\n      this._quickSuggestDelay = 10;\n    }\n  }\n  _updateTriggerCharacters() {\n    this._triggerCharacterListener.clear();\n    if (this._editor.getOption(75 /* readOnly */) || !this._editor.hasModel() || !this._editor.getOption(104 /* suggestOnTriggerCharacters */)) {\n      return;\n    }\n    const supportsByTriggerCharacter = new Map();\n    for (const support of CompletionProviderRegistry.all(this._editor.getModel())) {\n      for (const ch of support.triggerCharacters || []) {\n        let set = supportsByTriggerCharacter.get(ch);\n        if (!set) {\n          set = new Set();\n          set.add(getSnippetSuggestSupport());\n          supportsByTriggerCharacter.set(ch, set);\n        }\n        set.add(support);\n      }\n    }\n    const checkTriggerCharacter = text => {\n      if (!text) {\n        // came here from the compositionEnd-event\n        const position = this._editor.getPosition();\n        const model = this._editor.getModel();\n        text = model.getLineContent(position.lineNumber).substr(0, position.column - 1);\n      }\n      let lastChar = '';\n      if (isLowSurrogate(text.charCodeAt(text.length - 1))) {\n        if (isHighSurrogate(text.charCodeAt(text.length - 2))) {\n          lastChar = text.substr(text.length - 2);\n        }\n      } else {\n        lastChar = text.charAt(text.length - 1);\n      }\n      const supports = supportsByTriggerCharacter.get(lastChar);\n      if (supports) {\n        // keep existing items that where not computed by the\n        // supports/providers that want to trigger now\n        const existing = this._completionModel ? {\n          items: this._completionModel.adopt(supports),\n          clipboardText: this._completionModel.clipboardText\n        } : undefined;\n        this.trigger({\n          auto: true,\n          shy: false,\n          triggerCharacter: lastChar\n        }, Boolean(this._completionModel), supports, existing);\n      }\n    };\n    this._triggerCharacterListener.add(this._editor.onDidType(checkTriggerCharacter));\n    this._triggerCharacterListener.add(this._editor.onDidCompositionEnd(checkTriggerCharacter));\n  }\n  // --- trigger/retrigger/cancel suggest\n  get state() {\n    return this._state;\n  }\n  cancel() {\n    let retrigger = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    var _a;\n    if (this._state !== 0 /* Idle */) {\n      this._triggerQuickSuggest.cancel();\n      (_a = this._requestToken) === null || _a === void 0 ? void 0 : _a.cancel();\n      this._requestToken = undefined;\n      this._state = 0 /* Idle */;\n      this._completionModel = undefined;\n      this._context = undefined;\n      this._onDidCancel.fire({\n        retrigger\n      });\n    }\n  }\n  clear() {\n    this._completionDisposables.clear();\n  }\n  _updateActiveSuggestSession() {\n    if (this._state !== 0 /* Idle */) {\n      if (!this._editor.hasModel() || !CompletionProviderRegistry.has(this._editor.getModel())) {\n        this.cancel();\n      } else {\n        this.trigger({\n          auto: this._state === 2 /* Auto */,\n          shy: false\n        }, true);\n      }\n    }\n  }\n  _onCursorChange(e) {\n    if (!this._editor.hasModel()) {\n      return;\n    }\n    const model = this._editor.getModel();\n    const prevSelection = this._currentSelection;\n    this._currentSelection = this._editor.getSelection();\n    if (!e.selection.isEmpty() || e.reason !== 0 /* NotSet */ && e.reason !== 3 /* Explicit */ || e.source !== 'keyboard' && e.source !== 'deleteLeft') {\n      // Early exit if nothing needs to be done!\n      // Leave some form of early exit check here if you wish to continue being a cursor position change listener ;)\n      this.cancel();\n      return;\n    }\n    if (!CompletionProviderRegistry.has(model)) {\n      return;\n    }\n    if (this._state === 0 /* Idle */ && e.reason === 0 /* NotSet */) {\n      if (this._editor.getOption(73 /* quickSuggestions */) === false) {\n        // not enabled\n        return;\n      }\n      if (!prevSelection.containsRange(this._currentSelection) && !prevSelection.getEndPosition().isBeforeOrEqual(this._currentSelection.getPosition())) {\n        // cursor didn't move RIGHT\n        return;\n      }\n      if (this._editor.getOption(101 /* suggest */).snippetsPreventQuickSuggestions && SnippetController2.get(this._editor).isInSnippet()) {\n        // no quick suggestion when in snippet mode\n        return;\n      }\n      this.cancel();\n      this._triggerQuickSuggest.cancelAndSet(() => {\n        if (this._state !== 0 /* Idle */) {\n          return;\n        }\n        if (!LineContext.shouldAutoTrigger(this._editor)) {\n          return;\n        }\n        if (!this._editor.hasModel()) {\n          return;\n        }\n        const model = this._editor.getModel();\n        const pos = this._editor.getPosition();\n        // validate enabled now\n        const quickSuggestions = this._editor.getOption(73 /* quickSuggestions */);\n        if (quickSuggestions === false) {\n          return;\n        } else if (quickSuggestions === true) {\n          // all good\n        } else {\n          // Check the type of the token that triggered this\n          model.tokenizeIfCheap(pos.lineNumber);\n          const lineTokens = model.getLineTokens(pos.lineNumber);\n          const tokenType = lineTokens.getStandardTokenType(lineTokens.findTokenIndexAtOffset(Math.max(pos.column - 1 - 1, 0)));\n          const inValidScope = quickSuggestions.other && tokenType === 0 /* Other */ || quickSuggestions.comments && tokenType === 1 /* Comment */ || quickSuggestions.strings && tokenType === 2 /* String */;\n          if (!inValidScope) {\n            return;\n          }\n        }\n        // we made it till here -> trigger now\n        this.trigger({\n          auto: true,\n          shy: false\n        });\n      }, this._quickSuggestDelay);\n    } else if (this._state !== 0 /* Idle */ && e.reason === 3 /* Explicit */) {\n      // suggest is active and something like cursor keys are used to move\n      // the cursor. this means we can refilter at the new position\n      this._refilterCompletionItems();\n    }\n  }\n  _refilterCompletionItems() {\n    // Re-filter suggestions. This MUST run async because filtering/scoring\n    // uses the model content AND the cursor position. The latter is NOT\n    // updated when the document has changed (the event which drives this method)\n    // and therefore a little pause (next mirco task) is needed. See:\n    // https://stackoverflow.com/questions/25915634/difference-between-microtask-and-macrotask-within-an-event-loop-context#25933985\n    Promise.resolve().then(() => {\n      if (this._state === 0 /* Idle */) {\n        return;\n      }\n      if (!this._editor.hasModel()) {\n        return;\n      }\n      const model = this._editor.getModel();\n      const position = this._editor.getPosition();\n      const ctx = new LineContext(model, position, this._state === 2 /* Auto */, false);\n      this._onNewContext(ctx);\n    });\n  }\n  trigger(context) {\n    let retrigger = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let onlyFrom = arguments.length > 2 ? arguments[2] : undefined;\n    let existing = arguments.length > 3 ? arguments[3] : undefined;\n    var _a;\n    if (!this._editor.hasModel()) {\n      return;\n    }\n    const model = this._editor.getModel();\n    const auto = context.auto;\n    const ctx = new LineContext(model, this._editor.getPosition(), auto, context.shy);\n    // Cancel previous requests, change state & update UI\n    this.cancel(retrigger);\n    this._state = auto ? 2 /* Auto */ : 1 /* Manual */;\n    this._onDidTrigger.fire({\n      auto,\n      shy: context.shy,\n      position: this._editor.getPosition()\n    });\n    // Capture context when request was sent\n    this._context = ctx;\n    // Build context for request\n    let suggestCtx = {\n      triggerKind: (_a = context.triggerKind) !== null && _a !== void 0 ? _a : 0 /* Invoke */\n    };\n    if (context.triggerCharacter) {\n      suggestCtx = {\n        triggerKind: 1 /* TriggerCharacter */,\n        triggerCharacter: context.triggerCharacter\n      };\n    }\n    this._requestToken = new CancellationTokenSource();\n    // kind filter and snippet sort rules\n    const snippetSuggestions = this._editor.getOption(96 /* snippetSuggestions */);\n    let snippetSortOrder = 1 /* Inline */;\n    switch (snippetSuggestions) {\n      case 'top':\n        snippetSortOrder = 0 /* Top */;\n        break;\n      // \t↓ that's the default anyways...\n      // case 'inline':\n      // \tsnippetSortOrder = SnippetSortOrder.Inline;\n      // \tbreak;\n      case 'bottom':\n        snippetSortOrder = 2 /* Bottom */;\n        break;\n    }\n    const itemKindFilter = SuggestModel._createItemKindFilter(this._editor);\n    const wordDistance = WordDistance.create(this._editorWorkerService, this._editor);\n    const completions = provideSuggestionItems(model, this._editor.getPosition(), new CompletionOptions(snippetSortOrder, itemKindFilter, onlyFrom), suggestCtx, this._requestToken.token);\n    Promise.all([completions, wordDistance]).then(_ref => {\n      let [completions, wordDistance] = _ref;\n      return __awaiter(this, void 0, void 0, function* () {\n        var _b;\n        (_b = this._requestToken) === null || _b === void 0 ? void 0 : _b.dispose();\n        if (!this._editor.hasModel()) {\n          return;\n        }\n        let clipboardText = existing === null || existing === void 0 ? void 0 : existing.clipboardText;\n        if (!clipboardText && completions.needsClipboard) {\n          clipboardText = yield this._clipboardService.readText();\n        }\n        if (this._state === 0 /* Idle */) {\n          return;\n        }\n        const model = this._editor.getModel();\n        let items = completions.items;\n        if (existing) {\n          const cmpFn = getSuggestionComparator(snippetSortOrder);\n          items = items.concat(existing.items).sort(cmpFn);\n        }\n        const ctx = new LineContext(model, this._editor.getPosition(), auto, context.shy);\n        this._completionModel = new CompletionModel(items, this._context.column, {\n          leadingLineContent: ctx.leadingLineContent,\n          characterCountDelta: ctx.column - this._context.column\n        }, wordDistance, this._editor.getOption(101 /* suggest */), this._editor.getOption(96 /* snippetSuggestions */), clipboardText);\n        // store containers so that they can be disposed later\n        this._completionDisposables.add(completions.disposable);\n        this._onNewContext(ctx);\n        // finally report telemetry about durations\n        this._reportDurationsTelemetry(completions.durations);\n      });\n    }).catch(onUnexpectedError);\n  }\n  _reportDurationsTelemetry(durations) {\n    if (this._telemetryGate++ % 230 !== 0) {\n      return;\n    }\n    setTimeout(() => {\n      this._telemetryService.publicLog2('suggest.durations.json', {\n        data: JSON.stringify(durations)\n      });\n      this._logService.debug('suggest.durations.json', durations);\n    });\n  }\n  static _createItemKindFilter(editor) {\n    // kind filter and snippet sort rules\n    const result = new Set();\n    // snippet setting\n    const snippetSuggestions = editor.getOption(96 /* snippetSuggestions */);\n    if (snippetSuggestions === 'none') {\n      result.add(27 /* Snippet */);\n    }\n    // type setting\n    const suggestOptions = editor.getOption(101 /* suggest */);\n    if (!suggestOptions.showMethods) {\n      result.add(0 /* Method */);\n    }\n\n    if (!suggestOptions.showFunctions) {\n      result.add(1 /* Function */);\n    }\n\n    if (!suggestOptions.showConstructors) {\n      result.add(2 /* Constructor */);\n    }\n\n    if (!suggestOptions.showFields) {\n      result.add(3 /* Field */);\n    }\n\n    if (!suggestOptions.showVariables) {\n      result.add(4 /* Variable */);\n    }\n\n    if (!suggestOptions.showClasses) {\n      result.add(5 /* Class */);\n    }\n\n    if (!suggestOptions.showStructs) {\n      result.add(6 /* Struct */);\n    }\n\n    if (!suggestOptions.showInterfaces) {\n      result.add(7 /* Interface */);\n    }\n\n    if (!suggestOptions.showModules) {\n      result.add(8 /* Module */);\n    }\n\n    if (!suggestOptions.showProperties) {\n      result.add(9 /* Property */);\n    }\n\n    if (!suggestOptions.showEvents) {\n      result.add(10 /* Event */);\n    }\n\n    if (!suggestOptions.showOperators) {\n      result.add(11 /* Operator */);\n    }\n\n    if (!suggestOptions.showUnits) {\n      result.add(12 /* Unit */);\n    }\n\n    if (!suggestOptions.showValues) {\n      result.add(13 /* Value */);\n    }\n\n    if (!suggestOptions.showConstants) {\n      result.add(14 /* Constant */);\n    }\n\n    if (!suggestOptions.showEnums) {\n      result.add(15 /* Enum */);\n    }\n\n    if (!suggestOptions.showEnumMembers) {\n      result.add(16 /* EnumMember */);\n    }\n\n    if (!suggestOptions.showKeywords) {\n      result.add(17 /* Keyword */);\n    }\n\n    if (!suggestOptions.showWords) {\n      result.add(18 /* Text */);\n    }\n\n    if (!suggestOptions.showColors) {\n      result.add(19 /* Color */);\n    }\n\n    if (!suggestOptions.showFiles) {\n      result.add(20 /* File */);\n    }\n\n    if (!suggestOptions.showReferences) {\n      result.add(21 /* Reference */);\n    }\n\n    if (!suggestOptions.showColors) {\n      result.add(22 /* Customcolor */);\n    }\n\n    if (!suggestOptions.showFolders) {\n      result.add(23 /* Folder */);\n    }\n\n    if (!suggestOptions.showTypeParameters) {\n      result.add(24 /* TypeParameter */);\n    }\n\n    if (!suggestOptions.showSnippets) {\n      result.add(27 /* Snippet */);\n    }\n\n    if (!suggestOptions.showUsers) {\n      result.add(25 /* User */);\n    }\n\n    if (!suggestOptions.showIssues) {\n      result.add(26 /* Issue */);\n    }\n\n    return result;\n  }\n  _onNewContext(ctx) {\n    if (!this._context) {\n      // happens when 24x7 IntelliSense is enabled and still in its delay\n      return;\n    }\n    if (ctx.lineNumber !== this._context.lineNumber) {\n      // e.g. happens when pressing Enter while IntelliSense is computed\n      this.cancel();\n      return;\n    }\n    if (getLeadingWhitespace(ctx.leadingLineContent) !== getLeadingWhitespace(this._context.leadingLineContent)) {\n      // cancel IntelliSense when line start changes\n      // happens when the current word gets outdented\n      this.cancel();\n      return;\n    }\n    if (ctx.column < this._context.column) {\n      // typed -> moved cursor LEFT -> retrigger if still on a word\n      if (ctx.leadingWord.word) {\n        this.trigger({\n          auto: this._context.auto,\n          shy: false\n        }, true);\n      } else {\n        this.cancel();\n      }\n      return;\n    }\n    if (!this._completionModel) {\n      // happens when IntelliSense is not yet computed\n      return;\n    }\n    if (ctx.leadingWord.word.length !== 0 && ctx.leadingWord.startColumn > this._context.leadingWord.startColumn) {\n      // started a new word while IntelliSense shows -> retrigger\n      // Select those providers have not contributed to this completion model and re-trigger completions for\n      // them. Also adopt the existing items and merge them into the new completion model\n      const inactiveProvider = new Set(CompletionProviderRegistry.all(this._editor.getModel()));\n      for (let provider of this._completionModel.allProvider) {\n        inactiveProvider.delete(provider);\n      }\n      const items = this._completionModel.adopt(new Set());\n      this.trigger({\n        auto: this._context.auto,\n        shy: false\n      }, true, inactiveProvider, {\n        items,\n        clipboardText: this._completionModel.clipboardText\n      });\n      return;\n    }\n    if (ctx.column > this._context.column && this._completionModel.incomplete.size > 0 && ctx.leadingWord.word.length !== 0) {\n      // typed -> moved cursor RIGHT & incomple model & still on a word -> retrigger\n      const {\n        incomplete\n      } = this._completionModel;\n      const items = this._completionModel.adopt(incomplete);\n      this.trigger({\n        auto: this._state === 2 /* Auto */,\n        shy: false,\n        triggerKind: 2 /* TriggerForIncompleteCompletions */\n      }, true, incomplete, {\n        items,\n        clipboardText: this._completionModel.clipboardText\n      });\n    } else {\n      // typed -> moved cursor RIGHT -> update UI\n      let oldLineContext = this._completionModel.lineContext;\n      let isFrozen = false;\n      this._completionModel.lineContext = {\n        leadingLineContent: ctx.leadingLineContent,\n        characterCountDelta: ctx.column - this._context.column\n      };\n      if (this._completionModel.items.length === 0) {\n        if (LineContext.shouldAutoTrigger(this._editor) && this._context.leadingWord.endColumn < ctx.leadingWord.startColumn) {\n          // retrigger when heading into a new word\n          this.trigger({\n            auto: this._context.auto,\n            shy: false\n          }, true);\n          return;\n        }\n        if (!this._context.auto) {\n          // freeze when IntelliSense was manually requested\n          this._completionModel.lineContext = oldLineContext;\n          isFrozen = this._completionModel.items.length > 0;\n          if (isFrozen && ctx.leadingWord.word.length === 0) {\n            // there were results before but now there aren't\n            // and also we are not on a word anymore -> cancel\n            this.cancel();\n            return;\n          }\n        } else {\n          // nothing left\n          this.cancel();\n          return;\n        }\n      }\n      this._onDidSuggest.fire({\n        completionModel: this._completionModel,\n        auto: this._context.auto,\n        shy: this._context.shy,\n        isFrozen\n      });\n    }\n  }\n};\nSuggestModel = __decorate([__param(1, IEditorWorkerService), __param(2, IClipboardService), __param(3, ITelemetryService), __param(4, ILogService)], SuggestModel);\nexport { SuggestModel };","map":{"version":3,"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","TimeoutTimer","onUnexpectedError","Emitter","dispose","DisposableStore","Selection","CompletionProviderRegistry","CompletionModel","getSuggestionComparator","provideSuggestionItems","getSnippetSuggestSupport","CompletionOptions","SnippetController2","CancellationTokenSource","IEditorWorkerService","WordDistance","isLowSurrogate","isHighSurrogate","getLeadingWhitespace","IClipboardService","ITelemetryService","ILogService","LineContext","constructor","model","position","auto","shy","leadingLineContent","getLineContent","lineNumber","substr","column","leadingWord","getWordUntilPosition","shouldAutoTrigger","editor","hasModel","getModel","pos","getPosition","tokenizeIfCheap","word","getWordAtPosition","endColumn","isNaN","Number","SuggestModel","_editor","_editorWorkerService","_clipboardService","_telemetryService","_logService","_toDispose","_quickSuggestDelay","_triggerCharacterListener","_triggerQuickSuggest","_state","_completionDisposables","_onDidCancel","_onDidTrigger","_onDidSuggest","onDidCancel","event","onDidTrigger","onDidSuggest","_telemetryGate","_currentSelection","getSelection","add","onDidChangeModel","_updateTriggerCharacters","cancel","onDidChangeModelLanguage","onDidChangeConfiguration","_updateQuickSuggest","onDidChange","_updateActiveSuggestSession","onDidChangeCursorSelection","_onCursorChange","editorIsComposing","onDidCompositionStart","onDidCompositionEnd","_refilterCompletionItems","onDidChangeModelContent","getOption","clear","supportsByTriggerCharacter","Map","support","all","ch","triggerCharacters","set","get","Set","checkTriggerCharacter","text","lastChar","charCodeAt","charAt","supports","existing","_completionModel","items","clipboardText","undefined","trigger","triggerCharacter","Boolean","onDidType","state","retrigger","_a","_requestToken","_context","fire","has","prevSelection","selection","isEmpty","reason","source","containsRange","getEndPosition","isBeforeOrEqual","snippetsPreventQuickSuggestions","isInSnippet","cancelAndSet","quickSuggestions","lineTokens","getLineTokens","tokenType","getStandardTokenType","findTokenIndexAtOffset","Math","max","inValidScope","other","comments","strings","ctx","_onNewContext","context","onlyFrom","suggestCtx","triggerKind","snippetSuggestions","snippetSortOrder","itemKindFilter","_createItemKindFilter","wordDistance","create","completions","token","_ref","_b","needsClipboard","readText","cmpFn","concat","sort","characterCountDelta","disposable","_reportDurationsTelemetry","durations","catch","setTimeout","publicLog2","data","JSON","stringify","debug","suggestOptions","showMethods","showFunctions","showConstructors","showFields","showVariables","showClasses","showStructs","showInterfaces","showModules","showProperties","showEvents","showOperators","showUnits","showValues","showConstants","showEnums","showEnumMembers","showKeywords","showWords","showColors","showFiles","showReferences","showFolders","showTypeParameters","showSnippets","showUsers","showIssues","startColumn","inactiveProvider","provider","allProvider","delete","incomplete","size","oldLineContext","lineContext","isFrozen","completionModel"],"sources":["C:/Users/Administrator/Desktop/sqllineage-master/sqllineagejs/node_modules/monaco-editor/esm/vs/editor/contrib/suggest/suggestModel.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n};\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nimport { TimeoutTimer } from '../../../base/common/async.js';\r\nimport { onUnexpectedError } from '../../../base/common/errors.js';\r\nimport { Emitter } from '../../../base/common/event.js';\r\nimport { dispose, DisposableStore } from '../../../base/common/lifecycle.js';\r\nimport { Selection } from '../../common/core/selection.js';\r\nimport { CompletionProviderRegistry } from '../../common/modes.js';\r\nimport { CompletionModel } from './completionModel.js';\r\nimport { getSuggestionComparator, provideSuggestionItems, getSnippetSuggestSupport, CompletionOptions } from './suggest.js';\r\nimport { SnippetController2 } from '../snippet/snippetController2.js';\r\nimport { CancellationTokenSource } from '../../../base/common/cancellation.js';\r\nimport { IEditorWorkerService } from '../../common/services/editorWorkerService.js';\r\nimport { WordDistance } from './wordDistance.js';\r\nimport { isLowSurrogate, isHighSurrogate, getLeadingWhitespace } from '../../../base/common/strings.js';\r\nimport { IClipboardService } from '../../../platform/clipboard/common/clipboardService.js';\r\nimport { ITelemetryService } from '../../../platform/telemetry/common/telemetry.js';\r\nimport { ILogService } from '../../../platform/log/common/log.js';\r\nexport class LineContext {\r\n    constructor(model, position, auto, shy) {\r\n        this.leadingLineContent = model.getLineContent(position.lineNumber).substr(0, position.column - 1);\r\n        this.leadingWord = model.getWordUntilPosition(position);\r\n        this.lineNumber = position.lineNumber;\r\n        this.column = position.column;\r\n        this.auto = auto;\r\n        this.shy = shy;\r\n    }\r\n    static shouldAutoTrigger(editor) {\r\n        if (!editor.hasModel()) {\r\n            return false;\r\n        }\r\n        const model = editor.getModel();\r\n        const pos = editor.getPosition();\r\n        model.tokenizeIfCheap(pos.lineNumber);\r\n        const word = model.getWordAtPosition(pos);\r\n        if (!word) {\r\n            return false;\r\n        }\r\n        if (word.endColumn !== pos.column) {\r\n            return false;\r\n        }\r\n        if (!isNaN(Number(word.word))) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n}\r\nlet SuggestModel = class SuggestModel {\r\n    constructor(_editor, _editorWorkerService, _clipboardService, _telemetryService, _logService) {\r\n        this._editor = _editor;\r\n        this._editorWorkerService = _editorWorkerService;\r\n        this._clipboardService = _clipboardService;\r\n        this._telemetryService = _telemetryService;\r\n        this._logService = _logService;\r\n        this._toDispose = new DisposableStore();\r\n        this._quickSuggestDelay = 10;\r\n        this._triggerCharacterListener = new DisposableStore();\r\n        this._triggerQuickSuggest = new TimeoutTimer();\r\n        this._state = 0 /* Idle */;\r\n        this._completionDisposables = new DisposableStore();\r\n        this._onDidCancel = new Emitter();\r\n        this._onDidTrigger = new Emitter();\r\n        this._onDidSuggest = new Emitter();\r\n        this.onDidCancel = this._onDidCancel.event;\r\n        this.onDidTrigger = this._onDidTrigger.event;\r\n        this.onDidSuggest = this._onDidSuggest.event;\r\n        this._telemetryGate = 0;\r\n        this._currentSelection = this._editor.getSelection() || new Selection(1, 1, 1, 1);\r\n        // wire up various listeners\r\n        this._toDispose.add(this._editor.onDidChangeModel(() => {\r\n            this._updateTriggerCharacters();\r\n            this.cancel();\r\n        }));\r\n        this._toDispose.add(this._editor.onDidChangeModelLanguage(() => {\r\n            this._updateTriggerCharacters();\r\n            this.cancel();\r\n        }));\r\n        this._toDispose.add(this._editor.onDidChangeConfiguration(() => {\r\n            this._updateTriggerCharacters();\r\n            this._updateQuickSuggest();\r\n        }));\r\n        this._toDispose.add(CompletionProviderRegistry.onDidChange(() => {\r\n            this._updateTriggerCharacters();\r\n            this._updateActiveSuggestSession();\r\n        }));\r\n        this._toDispose.add(this._editor.onDidChangeCursorSelection(e => {\r\n            this._onCursorChange(e);\r\n        }));\r\n        let editorIsComposing = false;\r\n        this._toDispose.add(this._editor.onDidCompositionStart(() => {\r\n            editorIsComposing = true;\r\n        }));\r\n        this._toDispose.add(this._editor.onDidCompositionEnd(() => {\r\n            // refilter when composition ends\r\n            editorIsComposing = false;\r\n            this._refilterCompletionItems();\r\n        }));\r\n        this._toDispose.add(this._editor.onDidChangeModelContent(() => {\r\n            // only filter completions when the editor isn't\r\n            // composing a character, e.g. ¨ + u makes ü but just\r\n            // ¨ cannot be used for filtering\r\n            if (!editorIsComposing) {\r\n                this._refilterCompletionItems();\r\n            }\r\n        }));\r\n        this._updateTriggerCharacters();\r\n        this._updateQuickSuggest();\r\n    }\r\n    dispose() {\r\n        dispose(this._triggerCharacterListener);\r\n        dispose([this._onDidCancel, this._onDidSuggest, this._onDidTrigger, this._triggerQuickSuggest]);\r\n        this._toDispose.dispose();\r\n        this._completionDisposables.dispose();\r\n        this.cancel();\r\n    }\r\n    // --- handle configuration & precondition changes\r\n    _updateQuickSuggest() {\r\n        this._quickSuggestDelay = this._editor.getOption(74 /* quickSuggestionsDelay */);\r\n        if (isNaN(this._quickSuggestDelay) || (!this._quickSuggestDelay && this._quickSuggestDelay !== 0) || this._quickSuggestDelay < 0) {\r\n            this._quickSuggestDelay = 10;\r\n        }\r\n    }\r\n    _updateTriggerCharacters() {\r\n        this._triggerCharacterListener.clear();\r\n        if (this._editor.getOption(75 /* readOnly */)\r\n            || !this._editor.hasModel()\r\n            || !this._editor.getOption(104 /* suggestOnTriggerCharacters */)) {\r\n            return;\r\n        }\r\n        const supportsByTriggerCharacter = new Map();\r\n        for (const support of CompletionProviderRegistry.all(this._editor.getModel())) {\r\n            for (const ch of support.triggerCharacters || []) {\r\n                let set = supportsByTriggerCharacter.get(ch);\r\n                if (!set) {\r\n                    set = new Set();\r\n                    set.add(getSnippetSuggestSupport());\r\n                    supportsByTriggerCharacter.set(ch, set);\r\n                }\r\n                set.add(support);\r\n            }\r\n        }\r\n        const checkTriggerCharacter = (text) => {\r\n            if (!text) {\r\n                // came here from the compositionEnd-event\r\n                const position = this._editor.getPosition();\r\n                const model = this._editor.getModel();\r\n                text = model.getLineContent(position.lineNumber).substr(0, position.column - 1);\r\n            }\r\n            let lastChar = '';\r\n            if (isLowSurrogate(text.charCodeAt(text.length - 1))) {\r\n                if (isHighSurrogate(text.charCodeAt(text.length - 2))) {\r\n                    lastChar = text.substr(text.length - 2);\r\n                }\r\n            }\r\n            else {\r\n                lastChar = text.charAt(text.length - 1);\r\n            }\r\n            const supports = supportsByTriggerCharacter.get(lastChar);\r\n            if (supports) {\r\n                // keep existing items that where not computed by the\r\n                // supports/providers that want to trigger now\r\n                const existing = this._completionModel\r\n                    ? { items: this._completionModel.adopt(supports), clipboardText: this._completionModel.clipboardText }\r\n                    : undefined;\r\n                this.trigger({ auto: true, shy: false, triggerCharacter: lastChar }, Boolean(this._completionModel), supports, existing);\r\n            }\r\n        };\r\n        this._triggerCharacterListener.add(this._editor.onDidType(checkTriggerCharacter));\r\n        this._triggerCharacterListener.add(this._editor.onDidCompositionEnd(checkTriggerCharacter));\r\n    }\r\n    // --- trigger/retrigger/cancel suggest\r\n    get state() {\r\n        return this._state;\r\n    }\r\n    cancel(retrigger = false) {\r\n        var _a;\r\n        if (this._state !== 0 /* Idle */) {\r\n            this._triggerQuickSuggest.cancel();\r\n            (_a = this._requestToken) === null || _a === void 0 ? void 0 : _a.cancel();\r\n            this._requestToken = undefined;\r\n            this._state = 0 /* Idle */;\r\n            this._completionModel = undefined;\r\n            this._context = undefined;\r\n            this._onDidCancel.fire({ retrigger });\r\n        }\r\n    }\r\n    clear() {\r\n        this._completionDisposables.clear();\r\n    }\r\n    _updateActiveSuggestSession() {\r\n        if (this._state !== 0 /* Idle */) {\r\n            if (!this._editor.hasModel() || !CompletionProviderRegistry.has(this._editor.getModel())) {\r\n                this.cancel();\r\n            }\r\n            else {\r\n                this.trigger({ auto: this._state === 2 /* Auto */, shy: false }, true);\r\n            }\r\n        }\r\n    }\r\n    _onCursorChange(e) {\r\n        if (!this._editor.hasModel()) {\r\n            return;\r\n        }\r\n        const model = this._editor.getModel();\r\n        const prevSelection = this._currentSelection;\r\n        this._currentSelection = this._editor.getSelection();\r\n        if (!e.selection.isEmpty()\r\n            || (e.reason !== 0 /* NotSet */ && e.reason !== 3 /* Explicit */)\r\n            || (e.source !== 'keyboard' && e.source !== 'deleteLeft')) {\r\n            // Early exit if nothing needs to be done!\r\n            // Leave some form of early exit check here if you wish to continue being a cursor position change listener ;)\r\n            this.cancel();\r\n            return;\r\n        }\r\n        if (!CompletionProviderRegistry.has(model)) {\r\n            return;\r\n        }\r\n        if (this._state === 0 /* Idle */ && e.reason === 0 /* NotSet */) {\r\n            if (this._editor.getOption(73 /* quickSuggestions */) === false) {\r\n                // not enabled\r\n                return;\r\n            }\r\n            if (!prevSelection.containsRange(this._currentSelection) && !prevSelection.getEndPosition().isBeforeOrEqual(this._currentSelection.getPosition())) {\r\n                // cursor didn't move RIGHT\r\n                return;\r\n            }\r\n            if (this._editor.getOption(101 /* suggest */).snippetsPreventQuickSuggestions && SnippetController2.get(this._editor).isInSnippet()) {\r\n                // no quick suggestion when in snippet mode\r\n                return;\r\n            }\r\n            this.cancel();\r\n            this._triggerQuickSuggest.cancelAndSet(() => {\r\n                if (this._state !== 0 /* Idle */) {\r\n                    return;\r\n                }\r\n                if (!LineContext.shouldAutoTrigger(this._editor)) {\r\n                    return;\r\n                }\r\n                if (!this._editor.hasModel()) {\r\n                    return;\r\n                }\r\n                const model = this._editor.getModel();\r\n                const pos = this._editor.getPosition();\r\n                // validate enabled now\r\n                const quickSuggestions = this._editor.getOption(73 /* quickSuggestions */);\r\n                if (quickSuggestions === false) {\r\n                    return;\r\n                }\r\n                else if (quickSuggestions === true) {\r\n                    // all good\r\n                }\r\n                else {\r\n                    // Check the type of the token that triggered this\r\n                    model.tokenizeIfCheap(pos.lineNumber);\r\n                    const lineTokens = model.getLineTokens(pos.lineNumber);\r\n                    const tokenType = lineTokens.getStandardTokenType(lineTokens.findTokenIndexAtOffset(Math.max(pos.column - 1 - 1, 0)));\r\n                    const inValidScope = quickSuggestions.other && tokenType === 0 /* Other */\r\n                        || quickSuggestions.comments && tokenType === 1 /* Comment */\r\n                        || quickSuggestions.strings && tokenType === 2 /* String */;\r\n                    if (!inValidScope) {\r\n                        return;\r\n                    }\r\n                }\r\n                // we made it till here -> trigger now\r\n                this.trigger({ auto: true, shy: false });\r\n            }, this._quickSuggestDelay);\r\n        }\r\n        else if (this._state !== 0 /* Idle */ && e.reason === 3 /* Explicit */) {\r\n            // suggest is active and something like cursor keys are used to move\r\n            // the cursor. this means we can refilter at the new position\r\n            this._refilterCompletionItems();\r\n        }\r\n    }\r\n    _refilterCompletionItems() {\r\n        // Re-filter suggestions. This MUST run async because filtering/scoring\r\n        // uses the model content AND the cursor position. The latter is NOT\r\n        // updated when the document has changed (the event which drives this method)\r\n        // and therefore a little pause (next mirco task) is needed. See:\r\n        // https://stackoverflow.com/questions/25915634/difference-between-microtask-and-macrotask-within-an-event-loop-context#25933985\r\n        Promise.resolve().then(() => {\r\n            if (this._state === 0 /* Idle */) {\r\n                return;\r\n            }\r\n            if (!this._editor.hasModel()) {\r\n                return;\r\n            }\r\n            const model = this._editor.getModel();\r\n            const position = this._editor.getPosition();\r\n            const ctx = new LineContext(model, position, this._state === 2 /* Auto */, false);\r\n            this._onNewContext(ctx);\r\n        });\r\n    }\r\n    trigger(context, retrigger = false, onlyFrom, existing) {\r\n        var _a;\r\n        if (!this._editor.hasModel()) {\r\n            return;\r\n        }\r\n        const model = this._editor.getModel();\r\n        const auto = context.auto;\r\n        const ctx = new LineContext(model, this._editor.getPosition(), auto, context.shy);\r\n        // Cancel previous requests, change state & update UI\r\n        this.cancel(retrigger);\r\n        this._state = auto ? 2 /* Auto */ : 1 /* Manual */;\r\n        this._onDidTrigger.fire({ auto, shy: context.shy, position: this._editor.getPosition() });\r\n        // Capture context when request was sent\r\n        this._context = ctx;\r\n        // Build context for request\r\n        let suggestCtx = { triggerKind: (_a = context.triggerKind) !== null && _a !== void 0 ? _a : 0 /* Invoke */ };\r\n        if (context.triggerCharacter) {\r\n            suggestCtx = {\r\n                triggerKind: 1 /* TriggerCharacter */,\r\n                triggerCharacter: context.triggerCharacter\r\n            };\r\n        }\r\n        this._requestToken = new CancellationTokenSource();\r\n        // kind filter and snippet sort rules\r\n        const snippetSuggestions = this._editor.getOption(96 /* snippetSuggestions */);\r\n        let snippetSortOrder = 1 /* Inline */;\r\n        switch (snippetSuggestions) {\r\n            case 'top':\r\n                snippetSortOrder = 0 /* Top */;\r\n                break;\r\n            // \t↓ that's the default anyways...\r\n            // case 'inline':\r\n            // \tsnippetSortOrder = SnippetSortOrder.Inline;\r\n            // \tbreak;\r\n            case 'bottom':\r\n                snippetSortOrder = 2 /* Bottom */;\r\n                break;\r\n        }\r\n        const itemKindFilter = SuggestModel._createItemKindFilter(this._editor);\r\n        const wordDistance = WordDistance.create(this._editorWorkerService, this._editor);\r\n        const completions = provideSuggestionItems(model, this._editor.getPosition(), new CompletionOptions(snippetSortOrder, itemKindFilter, onlyFrom), suggestCtx, this._requestToken.token);\r\n        Promise.all([completions, wordDistance]).then(([completions, wordDistance]) => __awaiter(this, void 0, void 0, function* () {\r\n            var _b;\r\n            (_b = this._requestToken) === null || _b === void 0 ? void 0 : _b.dispose();\r\n            if (!this._editor.hasModel()) {\r\n                return;\r\n            }\r\n            let clipboardText = existing === null || existing === void 0 ? void 0 : existing.clipboardText;\r\n            if (!clipboardText && completions.needsClipboard) {\r\n                clipboardText = yield this._clipboardService.readText();\r\n            }\r\n            if (this._state === 0 /* Idle */) {\r\n                return;\r\n            }\r\n            const model = this._editor.getModel();\r\n            let items = completions.items;\r\n            if (existing) {\r\n                const cmpFn = getSuggestionComparator(snippetSortOrder);\r\n                items = items.concat(existing.items).sort(cmpFn);\r\n            }\r\n            const ctx = new LineContext(model, this._editor.getPosition(), auto, context.shy);\r\n            this._completionModel = new CompletionModel(items, this._context.column, {\r\n                leadingLineContent: ctx.leadingLineContent,\r\n                characterCountDelta: ctx.column - this._context.column\r\n            }, wordDistance, this._editor.getOption(101 /* suggest */), this._editor.getOption(96 /* snippetSuggestions */), clipboardText);\r\n            // store containers so that they can be disposed later\r\n            this._completionDisposables.add(completions.disposable);\r\n            this._onNewContext(ctx);\r\n            // finally report telemetry about durations\r\n            this._reportDurationsTelemetry(completions.durations);\r\n        })).catch(onUnexpectedError);\r\n    }\r\n    _reportDurationsTelemetry(durations) {\r\n        if (this._telemetryGate++ % 230 !== 0) {\r\n            return;\r\n        }\r\n        setTimeout(() => {\r\n            this._telemetryService.publicLog2('suggest.durations.json', { data: JSON.stringify(durations) });\r\n            this._logService.debug('suggest.durations.json', durations);\r\n        });\r\n    }\r\n    static _createItemKindFilter(editor) {\r\n        // kind filter and snippet sort rules\r\n        const result = new Set();\r\n        // snippet setting\r\n        const snippetSuggestions = editor.getOption(96 /* snippetSuggestions */);\r\n        if (snippetSuggestions === 'none') {\r\n            result.add(27 /* Snippet */);\r\n        }\r\n        // type setting\r\n        const suggestOptions = editor.getOption(101 /* suggest */);\r\n        if (!suggestOptions.showMethods) {\r\n            result.add(0 /* Method */);\r\n        }\r\n        if (!suggestOptions.showFunctions) {\r\n            result.add(1 /* Function */);\r\n        }\r\n        if (!suggestOptions.showConstructors) {\r\n            result.add(2 /* Constructor */);\r\n        }\r\n        if (!suggestOptions.showFields) {\r\n            result.add(3 /* Field */);\r\n        }\r\n        if (!suggestOptions.showVariables) {\r\n            result.add(4 /* Variable */);\r\n        }\r\n        if (!suggestOptions.showClasses) {\r\n            result.add(5 /* Class */);\r\n        }\r\n        if (!suggestOptions.showStructs) {\r\n            result.add(6 /* Struct */);\r\n        }\r\n        if (!suggestOptions.showInterfaces) {\r\n            result.add(7 /* Interface */);\r\n        }\r\n        if (!suggestOptions.showModules) {\r\n            result.add(8 /* Module */);\r\n        }\r\n        if (!suggestOptions.showProperties) {\r\n            result.add(9 /* Property */);\r\n        }\r\n        if (!suggestOptions.showEvents) {\r\n            result.add(10 /* Event */);\r\n        }\r\n        if (!suggestOptions.showOperators) {\r\n            result.add(11 /* Operator */);\r\n        }\r\n        if (!suggestOptions.showUnits) {\r\n            result.add(12 /* Unit */);\r\n        }\r\n        if (!suggestOptions.showValues) {\r\n            result.add(13 /* Value */);\r\n        }\r\n        if (!suggestOptions.showConstants) {\r\n            result.add(14 /* Constant */);\r\n        }\r\n        if (!suggestOptions.showEnums) {\r\n            result.add(15 /* Enum */);\r\n        }\r\n        if (!suggestOptions.showEnumMembers) {\r\n            result.add(16 /* EnumMember */);\r\n        }\r\n        if (!suggestOptions.showKeywords) {\r\n            result.add(17 /* Keyword */);\r\n        }\r\n        if (!suggestOptions.showWords) {\r\n            result.add(18 /* Text */);\r\n        }\r\n        if (!suggestOptions.showColors) {\r\n            result.add(19 /* Color */);\r\n        }\r\n        if (!suggestOptions.showFiles) {\r\n            result.add(20 /* File */);\r\n        }\r\n        if (!suggestOptions.showReferences) {\r\n            result.add(21 /* Reference */);\r\n        }\r\n        if (!suggestOptions.showColors) {\r\n            result.add(22 /* Customcolor */);\r\n        }\r\n        if (!suggestOptions.showFolders) {\r\n            result.add(23 /* Folder */);\r\n        }\r\n        if (!suggestOptions.showTypeParameters) {\r\n            result.add(24 /* TypeParameter */);\r\n        }\r\n        if (!suggestOptions.showSnippets) {\r\n            result.add(27 /* Snippet */);\r\n        }\r\n        if (!suggestOptions.showUsers) {\r\n            result.add(25 /* User */);\r\n        }\r\n        if (!suggestOptions.showIssues) {\r\n            result.add(26 /* Issue */);\r\n        }\r\n        return result;\r\n    }\r\n    _onNewContext(ctx) {\r\n        if (!this._context) {\r\n            // happens when 24x7 IntelliSense is enabled and still in its delay\r\n            return;\r\n        }\r\n        if (ctx.lineNumber !== this._context.lineNumber) {\r\n            // e.g. happens when pressing Enter while IntelliSense is computed\r\n            this.cancel();\r\n            return;\r\n        }\r\n        if (getLeadingWhitespace(ctx.leadingLineContent) !== getLeadingWhitespace(this._context.leadingLineContent)) {\r\n            // cancel IntelliSense when line start changes\r\n            // happens when the current word gets outdented\r\n            this.cancel();\r\n            return;\r\n        }\r\n        if (ctx.column < this._context.column) {\r\n            // typed -> moved cursor LEFT -> retrigger if still on a word\r\n            if (ctx.leadingWord.word) {\r\n                this.trigger({ auto: this._context.auto, shy: false }, true);\r\n            }\r\n            else {\r\n                this.cancel();\r\n            }\r\n            return;\r\n        }\r\n        if (!this._completionModel) {\r\n            // happens when IntelliSense is not yet computed\r\n            return;\r\n        }\r\n        if (ctx.leadingWord.word.length !== 0 && ctx.leadingWord.startColumn > this._context.leadingWord.startColumn) {\r\n            // started a new word while IntelliSense shows -> retrigger\r\n            // Select those providers have not contributed to this completion model and re-trigger completions for\r\n            // them. Also adopt the existing items and merge them into the new completion model\r\n            const inactiveProvider = new Set(CompletionProviderRegistry.all(this._editor.getModel()));\r\n            for (let provider of this._completionModel.allProvider) {\r\n                inactiveProvider.delete(provider);\r\n            }\r\n            const items = this._completionModel.adopt(new Set());\r\n            this.trigger({ auto: this._context.auto, shy: false }, true, inactiveProvider, { items, clipboardText: this._completionModel.clipboardText });\r\n            return;\r\n        }\r\n        if (ctx.column > this._context.column && this._completionModel.incomplete.size > 0 && ctx.leadingWord.word.length !== 0) {\r\n            // typed -> moved cursor RIGHT & incomple model & still on a word -> retrigger\r\n            const { incomplete } = this._completionModel;\r\n            const items = this._completionModel.adopt(incomplete);\r\n            this.trigger({ auto: this._state === 2 /* Auto */, shy: false, triggerKind: 2 /* TriggerForIncompleteCompletions */ }, true, incomplete, { items, clipboardText: this._completionModel.clipboardText });\r\n        }\r\n        else {\r\n            // typed -> moved cursor RIGHT -> update UI\r\n            let oldLineContext = this._completionModel.lineContext;\r\n            let isFrozen = false;\r\n            this._completionModel.lineContext = {\r\n                leadingLineContent: ctx.leadingLineContent,\r\n                characterCountDelta: ctx.column - this._context.column\r\n            };\r\n            if (this._completionModel.items.length === 0) {\r\n                if (LineContext.shouldAutoTrigger(this._editor) && this._context.leadingWord.endColumn < ctx.leadingWord.startColumn) {\r\n                    // retrigger when heading into a new word\r\n                    this.trigger({ auto: this._context.auto, shy: false }, true);\r\n                    return;\r\n                }\r\n                if (!this._context.auto) {\r\n                    // freeze when IntelliSense was manually requested\r\n                    this._completionModel.lineContext = oldLineContext;\r\n                    isFrozen = this._completionModel.items.length > 0;\r\n                    if (isFrozen && ctx.leadingWord.word.length === 0) {\r\n                        // there were results before but now there aren't\r\n                        // and also we are not on a word anymore -> cancel\r\n                        this.cancel();\r\n                        return;\r\n                    }\r\n                }\r\n                else {\r\n                    // nothing left\r\n                    this.cancel();\r\n                    return;\r\n                }\r\n            }\r\n            this._onDidSuggest.fire({\r\n                completionModel: this._completionModel,\r\n                auto: this._context.auto,\r\n                shy: this._context.shy,\r\n                isFrozen,\r\n            });\r\n        }\r\n    }\r\n};\r\nSuggestModel = __decorate([\r\n    __param(1, IEditorWorkerService),\r\n    __param(2, IClipboardService),\r\n    __param(3, ITelemetryService),\r\n    __param(4, ILogService)\r\n], SuggestModel);\r\nexport { SuggestModel };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}