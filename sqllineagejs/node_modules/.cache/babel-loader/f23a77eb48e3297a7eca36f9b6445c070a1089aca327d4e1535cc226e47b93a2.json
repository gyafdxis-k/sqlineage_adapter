{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { CursorState, SingleCursorState } from './cursorCommon.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport { Selection } from '../core/selection.js';\nexport class OneCursor {\n  constructor(context) {\n    this._selTrackedRange = null;\n    this._trackSelection = true;\n    this._setState(context, new SingleCursorState(new Range(1, 1, 1, 1), 0, new Position(1, 1), 0), new SingleCursorState(new Range(1, 1, 1, 1), 0, new Position(1, 1), 0));\n  }\n  dispose(context) {\n    this._removeTrackedRange(context);\n  }\n  startTrackingSelection(context) {\n    this._trackSelection = true;\n    this._updateTrackedRange(context);\n  }\n  stopTrackingSelection(context) {\n    this._trackSelection = false;\n    this._removeTrackedRange(context);\n  }\n  _updateTrackedRange(context) {\n    if (!this._trackSelection) {\n      // don't track the selection\n      return;\n    }\n    this._selTrackedRange = context.model._setTrackedRange(this._selTrackedRange, this.modelState.selection, 0 /* AlwaysGrowsWhenTypingAtEdges */);\n  }\n\n  _removeTrackedRange(context) {\n    this._selTrackedRange = context.model._setTrackedRange(this._selTrackedRange, null, 0 /* AlwaysGrowsWhenTypingAtEdges */);\n  }\n\n  asCursorState() {\n    return new CursorState(this.modelState, this.viewState);\n  }\n  readSelectionFromMarkers(context) {\n    const range = context.model._getTrackedRange(this._selTrackedRange);\n    if (this.modelState.selection.getDirection() === 0 /* LTR */) {\n      return new Selection(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn);\n    }\n    return new Selection(range.endLineNumber, range.endColumn, range.startLineNumber, range.startColumn);\n  }\n  ensureValidState(context) {\n    this._setState(context, this.modelState, this.viewState);\n  }\n  setState(context, modelState, viewState) {\n    this._setState(context, modelState, viewState);\n  }\n  _setState(context, modelState, viewState) {\n    if (!modelState) {\n      if (!viewState) {\n        return;\n      }\n      // We only have the view state => compute the model state\n      const selectionStart = context.model.validateRange(context.coordinatesConverter.convertViewRangeToModelRange(viewState.selectionStart));\n      const position = context.model.validatePosition(context.coordinatesConverter.convertViewPositionToModelPosition(viewState.position));\n      modelState = new SingleCursorState(selectionStart, viewState.selectionStartLeftoverVisibleColumns, position, viewState.leftoverVisibleColumns);\n    } else {\n      // Validate new model state\n      const selectionStart = context.model.validateRange(modelState.selectionStart);\n      const selectionStartLeftoverVisibleColumns = modelState.selectionStart.equalsRange(selectionStart) ? modelState.selectionStartLeftoverVisibleColumns : 0;\n      const position = context.model.validatePosition(modelState.position);\n      const leftoverVisibleColumns = modelState.position.equals(position) ? modelState.leftoverVisibleColumns : 0;\n      modelState = new SingleCursorState(selectionStart, selectionStartLeftoverVisibleColumns, position, leftoverVisibleColumns);\n    }\n    if (!viewState) {\n      // We only have the model state => compute the view state\n      const viewSelectionStart1 = context.coordinatesConverter.convertModelPositionToViewPosition(new Position(modelState.selectionStart.startLineNumber, modelState.selectionStart.startColumn));\n      const viewSelectionStart2 = context.coordinatesConverter.convertModelPositionToViewPosition(new Position(modelState.selectionStart.endLineNumber, modelState.selectionStart.endColumn));\n      const viewSelectionStart = new Range(viewSelectionStart1.lineNumber, viewSelectionStart1.column, viewSelectionStart2.lineNumber, viewSelectionStart2.column);\n      const viewPosition = context.coordinatesConverter.convertModelPositionToViewPosition(modelState.position);\n      viewState = new SingleCursorState(viewSelectionStart, modelState.selectionStartLeftoverVisibleColumns, viewPosition, modelState.leftoverVisibleColumns);\n    } else {\n      // Validate new view state\n      const viewSelectionStart = context.coordinatesConverter.validateViewRange(viewState.selectionStart, modelState.selectionStart);\n      const viewPosition = context.coordinatesConverter.validateViewPosition(viewState.position, modelState.position);\n      viewState = new SingleCursorState(viewSelectionStart, modelState.selectionStartLeftoverVisibleColumns, viewPosition, modelState.leftoverVisibleColumns);\n    }\n    this.modelState = modelState;\n    this.viewState = viewState;\n    this._updateTrackedRange(context);\n  }\n}","map":{"version":3,"names":["CursorState","SingleCursorState","Position","Range","Selection","OneCursor","constructor","context","_selTrackedRange","_trackSelection","_setState","dispose","_removeTrackedRange","startTrackingSelection","_updateTrackedRange","stopTrackingSelection","model","_setTrackedRange","modelState","selection","asCursorState","viewState","readSelectionFromMarkers","range","_getTrackedRange","getDirection","startLineNumber","startColumn","endLineNumber","endColumn","ensureValidState","setState","selectionStart","validateRange","coordinatesConverter","convertViewRangeToModelRange","position","validatePosition","convertViewPositionToModelPosition","selectionStartLeftoverVisibleColumns","leftoverVisibleColumns","equalsRange","equals","viewSelectionStart1","convertModelPositionToViewPosition","viewSelectionStart2","viewSelectionStart","lineNumber","column","viewPosition","validateViewRange","validateViewPosition"],"sources":["C:/Users/Administrator/Desktop/sqllineage-master/sqllineagejs/node_modules/monaco-editor/esm/vs/editor/common/controller/oneCursor.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { CursorState, SingleCursorState } from './cursorCommon.js';\r\nimport { Position } from '../core/position.js';\r\nimport { Range } from '../core/range.js';\r\nimport { Selection } from '../core/selection.js';\r\nexport class OneCursor {\r\n    constructor(context) {\r\n        this._selTrackedRange = null;\r\n        this._trackSelection = true;\r\n        this._setState(context, new SingleCursorState(new Range(1, 1, 1, 1), 0, new Position(1, 1), 0), new SingleCursorState(new Range(1, 1, 1, 1), 0, new Position(1, 1), 0));\r\n    }\r\n    dispose(context) {\r\n        this._removeTrackedRange(context);\r\n    }\r\n    startTrackingSelection(context) {\r\n        this._trackSelection = true;\r\n        this._updateTrackedRange(context);\r\n    }\r\n    stopTrackingSelection(context) {\r\n        this._trackSelection = false;\r\n        this._removeTrackedRange(context);\r\n    }\r\n    _updateTrackedRange(context) {\r\n        if (!this._trackSelection) {\r\n            // don't track the selection\r\n            return;\r\n        }\r\n        this._selTrackedRange = context.model._setTrackedRange(this._selTrackedRange, this.modelState.selection, 0 /* AlwaysGrowsWhenTypingAtEdges */);\r\n    }\r\n    _removeTrackedRange(context) {\r\n        this._selTrackedRange = context.model._setTrackedRange(this._selTrackedRange, null, 0 /* AlwaysGrowsWhenTypingAtEdges */);\r\n    }\r\n    asCursorState() {\r\n        return new CursorState(this.modelState, this.viewState);\r\n    }\r\n    readSelectionFromMarkers(context) {\r\n        const range = context.model._getTrackedRange(this._selTrackedRange);\r\n        if (this.modelState.selection.getDirection() === 0 /* LTR */) {\r\n            return new Selection(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn);\r\n        }\r\n        return new Selection(range.endLineNumber, range.endColumn, range.startLineNumber, range.startColumn);\r\n    }\r\n    ensureValidState(context) {\r\n        this._setState(context, this.modelState, this.viewState);\r\n    }\r\n    setState(context, modelState, viewState) {\r\n        this._setState(context, modelState, viewState);\r\n    }\r\n    _setState(context, modelState, viewState) {\r\n        if (!modelState) {\r\n            if (!viewState) {\r\n                return;\r\n            }\r\n            // We only have the view state => compute the model state\r\n            const selectionStart = context.model.validateRange(context.coordinatesConverter.convertViewRangeToModelRange(viewState.selectionStart));\r\n            const position = context.model.validatePosition(context.coordinatesConverter.convertViewPositionToModelPosition(viewState.position));\r\n            modelState = new SingleCursorState(selectionStart, viewState.selectionStartLeftoverVisibleColumns, position, viewState.leftoverVisibleColumns);\r\n        }\r\n        else {\r\n            // Validate new model state\r\n            const selectionStart = context.model.validateRange(modelState.selectionStart);\r\n            const selectionStartLeftoverVisibleColumns = modelState.selectionStart.equalsRange(selectionStart) ? modelState.selectionStartLeftoverVisibleColumns : 0;\r\n            const position = context.model.validatePosition(modelState.position);\r\n            const leftoverVisibleColumns = modelState.position.equals(position) ? modelState.leftoverVisibleColumns : 0;\r\n            modelState = new SingleCursorState(selectionStart, selectionStartLeftoverVisibleColumns, position, leftoverVisibleColumns);\r\n        }\r\n        if (!viewState) {\r\n            // We only have the model state => compute the view state\r\n            const viewSelectionStart1 = context.coordinatesConverter.convertModelPositionToViewPosition(new Position(modelState.selectionStart.startLineNumber, modelState.selectionStart.startColumn));\r\n            const viewSelectionStart2 = context.coordinatesConverter.convertModelPositionToViewPosition(new Position(modelState.selectionStart.endLineNumber, modelState.selectionStart.endColumn));\r\n            const viewSelectionStart = new Range(viewSelectionStart1.lineNumber, viewSelectionStart1.column, viewSelectionStart2.lineNumber, viewSelectionStart2.column);\r\n            const viewPosition = context.coordinatesConverter.convertModelPositionToViewPosition(modelState.position);\r\n            viewState = new SingleCursorState(viewSelectionStart, modelState.selectionStartLeftoverVisibleColumns, viewPosition, modelState.leftoverVisibleColumns);\r\n        }\r\n        else {\r\n            // Validate new view state\r\n            const viewSelectionStart = context.coordinatesConverter.validateViewRange(viewState.selectionStart, modelState.selectionStart);\r\n            const viewPosition = context.coordinatesConverter.validateViewPosition(viewState.position, modelState.position);\r\n            viewState = new SingleCursorState(viewSelectionStart, modelState.selectionStartLeftoverVisibleColumns, viewPosition, modelState.leftoverVisibleColumns);\r\n        }\r\n        this.modelState = modelState;\r\n        this.viewState = viewState;\r\n        this._updateTrackedRange(context);\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}