{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../base/common/strings.js';\nimport { ReplaceCommand } from '../commands/replaceCommand.js';\nimport { CursorColumns, EditOperationResult, isQuote } from './cursorCommon.js';\nimport { MoveOperations } from './cursorMoveOperations.js';\nimport { Range } from '../core/range.js';\nexport class DeleteOperations {\n  static deleteRight(prevEditOperationType, config, model, selections) {\n    let commands = [];\n    let shouldPushStackElementBefore = prevEditOperationType !== 3 /* DeletingRight */;\n    for (let i = 0, len = selections.length; i < len; i++) {\n      const selection = selections[i];\n      let deleteSelection = selection;\n      if (deleteSelection.isEmpty()) {\n        let position = selection.getPosition();\n        let rightOfPosition = MoveOperations.right(config, model, position.lineNumber, position.column);\n        deleteSelection = new Range(rightOfPosition.lineNumber, rightOfPosition.column, position.lineNumber, position.column);\n      }\n      if (deleteSelection.isEmpty()) {\n        // Probably at end of file => ignore\n        commands[i] = null;\n        continue;\n      }\n      if (deleteSelection.startLineNumber !== deleteSelection.endLineNumber) {\n        shouldPushStackElementBefore = true;\n      }\n      commands[i] = new ReplaceCommand(deleteSelection, '');\n    }\n    return [shouldPushStackElementBefore, commands];\n  }\n  static isAutoClosingPairDelete(autoClosingBrackets, autoClosingQuotes, autoClosingPairsOpen, model, selections) {\n    if (autoClosingBrackets === 'never' && autoClosingQuotes === 'never') {\n      return false;\n    }\n    for (let i = 0, len = selections.length; i < len; i++) {\n      const selection = selections[i];\n      const position = selection.getPosition();\n      if (!selection.isEmpty()) {\n        return false;\n      }\n      const lineText = model.getLineContent(position.lineNumber);\n      if (position.column < 2 || position.column >= lineText.length + 1) {\n        return false;\n      }\n      const character = lineText.charAt(position.column - 2);\n      const autoClosingPairCandidates = autoClosingPairsOpen.get(character);\n      if (!autoClosingPairCandidates) {\n        return false;\n      }\n      if (isQuote(character)) {\n        if (autoClosingQuotes === 'never') {\n          return false;\n        }\n      } else {\n        if (autoClosingBrackets === 'never') {\n          return false;\n        }\n      }\n      const afterCharacter = lineText.charAt(position.column - 1);\n      let foundAutoClosingPair = false;\n      for (const autoClosingPairCandidate of autoClosingPairCandidates) {\n        if (autoClosingPairCandidate.open === character && autoClosingPairCandidate.close === afterCharacter) {\n          foundAutoClosingPair = true;\n        }\n      }\n      if (!foundAutoClosingPair) {\n        return false;\n      }\n    }\n    return true;\n  }\n  static _runAutoClosingPairDelete(config, model, selections) {\n    let commands = [];\n    for (let i = 0, len = selections.length; i < len; i++) {\n      const position = selections[i].getPosition();\n      const deleteSelection = new Range(position.lineNumber, position.column - 1, position.lineNumber, position.column + 1);\n      commands[i] = new ReplaceCommand(deleteSelection, '');\n    }\n    return [true, commands];\n  }\n  static deleteLeft(prevEditOperationType, config, model, selections) {\n    if (this.isAutoClosingPairDelete(config.autoClosingBrackets, config.autoClosingQuotes, config.autoClosingPairs.autoClosingPairsOpenByEnd, model, selections)) {\n      return this._runAutoClosingPairDelete(config, model, selections);\n    }\n    let commands = [];\n    let shouldPushStackElementBefore = prevEditOperationType !== 2 /* DeletingLeft */;\n    for (let i = 0, len = selections.length; i < len; i++) {\n      const selection = selections[i];\n      let deleteSelection = selection;\n      if (deleteSelection.isEmpty()) {\n        let position = selection.getPosition();\n        if (config.useTabStops && position.column > 1) {\n          let lineContent = model.getLineContent(position.lineNumber);\n          let firstNonWhitespaceIndex = strings.firstNonWhitespaceIndex(lineContent);\n          let lastIndentationColumn = firstNonWhitespaceIndex === -1 ? /* entire string is whitespace */lineContent.length + 1 : firstNonWhitespaceIndex + 1;\n          if (position.column <= lastIndentationColumn) {\n            let fromVisibleColumn = CursorColumns.visibleColumnFromColumn2(config, model, position);\n            let toVisibleColumn = CursorColumns.prevIndentTabStop(fromVisibleColumn, config.indentSize);\n            let toColumn = CursorColumns.columnFromVisibleColumn2(config, model, position.lineNumber, toVisibleColumn);\n            deleteSelection = new Range(position.lineNumber, toColumn, position.lineNumber, position.column);\n          } else {\n            deleteSelection = new Range(position.lineNumber, position.column - 1, position.lineNumber, position.column);\n          }\n        } else {\n          let leftOfPosition = MoveOperations.left(config, model, position.lineNumber, position.column);\n          deleteSelection = new Range(leftOfPosition.lineNumber, leftOfPosition.column, position.lineNumber, position.column);\n        }\n      }\n      if (deleteSelection.isEmpty()) {\n        // Probably at beginning of file => ignore\n        commands[i] = null;\n        continue;\n      }\n      if (deleteSelection.startLineNumber !== deleteSelection.endLineNumber) {\n        shouldPushStackElementBefore = true;\n      }\n      commands[i] = new ReplaceCommand(deleteSelection, '');\n    }\n    return [shouldPushStackElementBefore, commands];\n  }\n  static cut(config, model, selections) {\n    let commands = [];\n    for (let i = 0, len = selections.length; i < len; i++) {\n      const selection = selections[i];\n      if (selection.isEmpty()) {\n        if (config.emptySelectionClipboard) {\n          // This is a full line cut\n          let position = selection.getPosition();\n          let startLineNumber, startColumn, endLineNumber, endColumn;\n          if (position.lineNumber < model.getLineCount()) {\n            // Cutting a line in the middle of the model\n            startLineNumber = position.lineNumber;\n            startColumn = 1;\n            endLineNumber = position.lineNumber + 1;\n            endColumn = 1;\n          } else if (position.lineNumber > 1) {\n            // Cutting the last line & there are more than 1 lines in the model\n            startLineNumber = position.lineNumber - 1;\n            startColumn = model.getLineMaxColumn(position.lineNumber - 1);\n            endLineNumber = position.lineNumber;\n            endColumn = model.getLineMaxColumn(position.lineNumber);\n          } else {\n            // Cutting the single line that the model contains\n            startLineNumber = position.lineNumber;\n            startColumn = 1;\n            endLineNumber = position.lineNumber;\n            endColumn = model.getLineMaxColumn(position.lineNumber);\n          }\n          let deleteSelection = new Range(startLineNumber, startColumn, endLineNumber, endColumn);\n          if (!deleteSelection.isEmpty()) {\n            commands[i] = new ReplaceCommand(deleteSelection, '');\n          } else {\n            commands[i] = null;\n          }\n        } else {\n          // Cannot cut empty selection\n          commands[i] = null;\n        }\n      } else {\n        commands[i] = new ReplaceCommand(selection, '');\n      }\n    }\n    return new EditOperationResult(0 /* Other */, commands, {\n      shouldPushStackElementBefore: true,\n      shouldPushStackElementAfter: true\n    });\n  }\n}","map":{"version":3,"names":["strings","ReplaceCommand","CursorColumns","EditOperationResult","isQuote","MoveOperations","Range","DeleteOperations","deleteRight","prevEditOperationType","config","model","selections","commands","shouldPushStackElementBefore","i","len","length","selection","deleteSelection","isEmpty","position","getPosition","rightOfPosition","right","lineNumber","column","startLineNumber","endLineNumber","isAutoClosingPairDelete","autoClosingBrackets","autoClosingQuotes","autoClosingPairsOpen","lineText","getLineContent","character","charAt","autoClosingPairCandidates","get","afterCharacter","foundAutoClosingPair","autoClosingPairCandidate","open","close","_runAutoClosingPairDelete","deleteLeft","autoClosingPairs","autoClosingPairsOpenByEnd","useTabStops","lineContent","firstNonWhitespaceIndex","lastIndentationColumn","fromVisibleColumn","visibleColumnFromColumn2","toVisibleColumn","prevIndentTabStop","indentSize","toColumn","columnFromVisibleColumn2","leftOfPosition","left","cut","emptySelectionClipboard","startColumn","endColumn","getLineCount","getLineMaxColumn","shouldPushStackElementAfter"],"sources":["C:/Users/Administrator/Desktop/sqllineage-master/sqllineagejs/node_modules/monaco-editor/esm/vs/editor/common/controller/cursorDeleteOperations.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport * as strings from '../../../base/common/strings.js';\r\nimport { ReplaceCommand } from '../commands/replaceCommand.js';\r\nimport { CursorColumns, EditOperationResult, isQuote } from './cursorCommon.js';\r\nimport { MoveOperations } from './cursorMoveOperations.js';\r\nimport { Range } from '../core/range.js';\r\nexport class DeleteOperations {\r\n    static deleteRight(prevEditOperationType, config, model, selections) {\r\n        let commands = [];\r\n        let shouldPushStackElementBefore = (prevEditOperationType !== 3 /* DeletingRight */);\r\n        for (let i = 0, len = selections.length; i < len; i++) {\r\n            const selection = selections[i];\r\n            let deleteSelection = selection;\r\n            if (deleteSelection.isEmpty()) {\r\n                let position = selection.getPosition();\r\n                let rightOfPosition = MoveOperations.right(config, model, position.lineNumber, position.column);\r\n                deleteSelection = new Range(rightOfPosition.lineNumber, rightOfPosition.column, position.lineNumber, position.column);\r\n            }\r\n            if (deleteSelection.isEmpty()) {\r\n                // Probably at end of file => ignore\r\n                commands[i] = null;\r\n                continue;\r\n            }\r\n            if (deleteSelection.startLineNumber !== deleteSelection.endLineNumber) {\r\n                shouldPushStackElementBefore = true;\r\n            }\r\n            commands[i] = new ReplaceCommand(deleteSelection, '');\r\n        }\r\n        return [shouldPushStackElementBefore, commands];\r\n    }\r\n    static isAutoClosingPairDelete(autoClosingBrackets, autoClosingQuotes, autoClosingPairsOpen, model, selections) {\r\n        if (autoClosingBrackets === 'never' && autoClosingQuotes === 'never') {\r\n            return false;\r\n        }\r\n        for (let i = 0, len = selections.length; i < len; i++) {\r\n            const selection = selections[i];\r\n            const position = selection.getPosition();\r\n            if (!selection.isEmpty()) {\r\n                return false;\r\n            }\r\n            const lineText = model.getLineContent(position.lineNumber);\r\n            if (position.column < 2 || position.column >= lineText.length + 1) {\r\n                return false;\r\n            }\r\n            const character = lineText.charAt(position.column - 2);\r\n            const autoClosingPairCandidates = autoClosingPairsOpen.get(character);\r\n            if (!autoClosingPairCandidates) {\r\n                return false;\r\n            }\r\n            if (isQuote(character)) {\r\n                if (autoClosingQuotes === 'never') {\r\n                    return false;\r\n                }\r\n            }\r\n            else {\r\n                if (autoClosingBrackets === 'never') {\r\n                    return false;\r\n                }\r\n            }\r\n            const afterCharacter = lineText.charAt(position.column - 1);\r\n            let foundAutoClosingPair = false;\r\n            for (const autoClosingPairCandidate of autoClosingPairCandidates) {\r\n                if (autoClosingPairCandidate.open === character && autoClosingPairCandidate.close === afterCharacter) {\r\n                    foundAutoClosingPair = true;\r\n                }\r\n            }\r\n            if (!foundAutoClosingPair) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    static _runAutoClosingPairDelete(config, model, selections) {\r\n        let commands = [];\r\n        for (let i = 0, len = selections.length; i < len; i++) {\r\n            const position = selections[i].getPosition();\r\n            const deleteSelection = new Range(position.lineNumber, position.column - 1, position.lineNumber, position.column + 1);\r\n            commands[i] = new ReplaceCommand(deleteSelection, '');\r\n        }\r\n        return [true, commands];\r\n    }\r\n    static deleteLeft(prevEditOperationType, config, model, selections) {\r\n        if (this.isAutoClosingPairDelete(config.autoClosingBrackets, config.autoClosingQuotes, config.autoClosingPairs.autoClosingPairsOpenByEnd, model, selections)) {\r\n            return this._runAutoClosingPairDelete(config, model, selections);\r\n        }\r\n        let commands = [];\r\n        let shouldPushStackElementBefore = (prevEditOperationType !== 2 /* DeletingLeft */);\r\n        for (let i = 0, len = selections.length; i < len; i++) {\r\n            const selection = selections[i];\r\n            let deleteSelection = selection;\r\n            if (deleteSelection.isEmpty()) {\r\n                let position = selection.getPosition();\r\n                if (config.useTabStops && position.column > 1) {\r\n                    let lineContent = model.getLineContent(position.lineNumber);\r\n                    let firstNonWhitespaceIndex = strings.firstNonWhitespaceIndex(lineContent);\r\n                    let lastIndentationColumn = (firstNonWhitespaceIndex === -1\r\n                        ? /* entire string is whitespace */ lineContent.length + 1\r\n                        : firstNonWhitespaceIndex + 1);\r\n                    if (position.column <= lastIndentationColumn) {\r\n                        let fromVisibleColumn = CursorColumns.visibleColumnFromColumn2(config, model, position);\r\n                        let toVisibleColumn = CursorColumns.prevIndentTabStop(fromVisibleColumn, config.indentSize);\r\n                        let toColumn = CursorColumns.columnFromVisibleColumn2(config, model, position.lineNumber, toVisibleColumn);\r\n                        deleteSelection = new Range(position.lineNumber, toColumn, position.lineNumber, position.column);\r\n                    }\r\n                    else {\r\n                        deleteSelection = new Range(position.lineNumber, position.column - 1, position.lineNumber, position.column);\r\n                    }\r\n                }\r\n                else {\r\n                    let leftOfPosition = MoveOperations.left(config, model, position.lineNumber, position.column);\r\n                    deleteSelection = new Range(leftOfPosition.lineNumber, leftOfPosition.column, position.lineNumber, position.column);\r\n                }\r\n            }\r\n            if (deleteSelection.isEmpty()) {\r\n                // Probably at beginning of file => ignore\r\n                commands[i] = null;\r\n                continue;\r\n            }\r\n            if (deleteSelection.startLineNumber !== deleteSelection.endLineNumber) {\r\n                shouldPushStackElementBefore = true;\r\n            }\r\n            commands[i] = new ReplaceCommand(deleteSelection, '');\r\n        }\r\n        return [shouldPushStackElementBefore, commands];\r\n    }\r\n    static cut(config, model, selections) {\r\n        let commands = [];\r\n        for (let i = 0, len = selections.length; i < len; i++) {\r\n            const selection = selections[i];\r\n            if (selection.isEmpty()) {\r\n                if (config.emptySelectionClipboard) {\r\n                    // This is a full line cut\r\n                    let position = selection.getPosition();\r\n                    let startLineNumber, startColumn, endLineNumber, endColumn;\r\n                    if (position.lineNumber < model.getLineCount()) {\r\n                        // Cutting a line in the middle of the model\r\n                        startLineNumber = position.lineNumber;\r\n                        startColumn = 1;\r\n                        endLineNumber = position.lineNumber + 1;\r\n                        endColumn = 1;\r\n                    }\r\n                    else if (position.lineNumber > 1) {\r\n                        // Cutting the last line & there are more than 1 lines in the model\r\n                        startLineNumber = position.lineNumber - 1;\r\n                        startColumn = model.getLineMaxColumn(position.lineNumber - 1);\r\n                        endLineNumber = position.lineNumber;\r\n                        endColumn = model.getLineMaxColumn(position.lineNumber);\r\n                    }\r\n                    else {\r\n                        // Cutting the single line that the model contains\r\n                        startLineNumber = position.lineNumber;\r\n                        startColumn = 1;\r\n                        endLineNumber = position.lineNumber;\r\n                        endColumn = model.getLineMaxColumn(position.lineNumber);\r\n                    }\r\n                    let deleteSelection = new Range(startLineNumber, startColumn, endLineNumber, endColumn);\r\n                    if (!deleteSelection.isEmpty()) {\r\n                        commands[i] = new ReplaceCommand(deleteSelection, '');\r\n                    }\r\n                    else {\r\n                        commands[i] = null;\r\n                    }\r\n                }\r\n                else {\r\n                    // Cannot cut empty selection\r\n                    commands[i] = null;\r\n                }\r\n            }\r\n            else {\r\n                commands[i] = new ReplaceCommand(selection, '');\r\n            }\r\n        }\r\n        return new EditOperationResult(0 /* Other */, commands, {\r\n            shouldPushStackElementBefore: true,\r\n            shouldPushStackElementAfter: true\r\n        });\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}