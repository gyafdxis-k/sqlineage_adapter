{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\nimport { IQuickInputService, ItemActivation } from '../common/quickInput.js';\nimport { Disposable, DisposableStore, toDisposable } from '../../../base/common/lifecycle.js';\nimport { Extensions, DefaultQuickAccessFilterValue } from '../common/quickAccess.js';\nimport { Registry } from '../../registry/common/platform.js';\nimport { CancellationTokenSource } from '../../../base/common/cancellation.js';\nimport { IInstantiationService } from '../../instantiation/common/instantiation.js';\nimport { once } from '../../../base/common/functional.js';\nlet QuickAccessController = class QuickAccessController extends Disposable {\n  constructor(quickInputService, instantiationService) {\n    super();\n    this.quickInputService = quickInputService;\n    this.instantiationService = instantiationService;\n    this.registry = Registry.as(Extensions.Quickaccess);\n    this.mapProviderToDescriptor = new Map();\n    this.lastAcceptedPickerValues = new Map();\n    this.visibleQuickAccess = undefined;\n  }\n  show() {\n    let value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    let options = arguments.length > 1 ? arguments[1] : undefined;\n    var _a;\n    // Find provider for the value to show\n    const [provider, descriptor] = this.getOrInstantiateProvider(value);\n    // Return early if quick access is already showing on that same prefix\n    const visibleQuickAccess = this.visibleQuickAccess;\n    const visibleDescriptor = visibleQuickAccess === null || visibleQuickAccess === void 0 ? void 0 : visibleQuickAccess.descriptor;\n    if (visibleQuickAccess && descriptor && visibleDescriptor === descriptor) {\n      // Apply value only if it is more specific than the prefix\n      // from the provider and we are not instructed to preserve\n      if (value !== descriptor.prefix && !(options === null || options === void 0 ? void 0 : options.preserveValue)) {\n        visibleQuickAccess.picker.value = value;\n      }\n      // Always adjust selection\n      this.adjustValueSelection(visibleQuickAccess.picker, descriptor, options);\n      return;\n    }\n    // Rewrite the filter value based on certain rules unless disabled\n    if (descriptor && !(options === null || options === void 0 ? void 0 : options.preserveValue)) {\n      let newValue = undefined;\n      // If we have a visible provider with a value, take it's filter value but\n      // rewrite to new provider prefix in case they differ\n      if (visibleQuickAccess && visibleDescriptor && visibleDescriptor !== descriptor) {\n        const newValueCandidateWithoutPrefix = visibleQuickAccess.value.substr(visibleDescriptor.prefix.length);\n        if (newValueCandidateWithoutPrefix) {\n          newValue = \"\".concat(descriptor.prefix).concat(newValueCandidateWithoutPrefix);\n        }\n      }\n      // Otherwise, take a default value as instructed\n      if (!newValue) {\n        const defaultFilterValue = provider === null || provider === void 0 ? void 0 : provider.defaultFilterValue;\n        if (defaultFilterValue === DefaultQuickAccessFilterValue.LAST) {\n          newValue = this.lastAcceptedPickerValues.get(descriptor);\n        } else if (typeof defaultFilterValue === 'string') {\n          newValue = \"\".concat(descriptor.prefix).concat(defaultFilterValue);\n        }\n      }\n      if (typeof newValue === 'string') {\n        value = newValue;\n      }\n    }\n    // Create a picker for the provider to use with the initial value\n    // and adjust the filtering to exclude the prefix from filtering\n    const disposables = new DisposableStore();\n    const picker = disposables.add(this.quickInputService.createQuickPick());\n    picker.value = value;\n    this.adjustValueSelection(picker, descriptor, options);\n    picker.placeholder = descriptor === null || descriptor === void 0 ? void 0 : descriptor.placeholder;\n    picker.quickNavigate = options === null || options === void 0 ? void 0 : options.quickNavigateConfiguration;\n    picker.hideInput = !!picker.quickNavigate && !visibleQuickAccess; // only hide input if there was no picker opened already\n    if (typeof (options === null || options === void 0 ? void 0 : options.itemActivation) === 'number' || (options === null || options === void 0 ? void 0 : options.quickNavigateConfiguration)) {\n      picker.itemActivation = (_a = options === null || options === void 0 ? void 0 : options.itemActivation) !== null && _a !== void 0 ? _a : ItemActivation.SECOND /* quick nav is always second */;\n    }\n\n    picker.contextKey = descriptor === null || descriptor === void 0 ? void 0 : descriptor.contextKey;\n    picker.filterValue = value => value.substring(descriptor ? descriptor.prefix.length : 0);\n    if (descriptor === null || descriptor === void 0 ? void 0 : descriptor.placeholder) {\n      picker.ariaLabel = descriptor === null || descriptor === void 0 ? void 0 : descriptor.placeholder;\n    }\n    // Register listeners\n    const cancellationToken = this.registerPickerListeners(picker, provider, descriptor, value, disposables);\n    // Ask provider to fill the picker as needed if we have one\n    if (provider) {\n      disposables.add(provider.provide(picker, cancellationToken));\n    }\n    // Finally, show the picker. This is important because a provider\n    // may not call this and then our disposables would leak that rely\n    // on the onDidHide event.\n    picker.show();\n  }\n  adjustValueSelection(picker, descriptor, options) {\n    var _a;\n    let valueSelection;\n    // Preserve: just always put the cursor at the end\n    if (options === null || options === void 0 ? void 0 : options.preserveValue) {\n      valueSelection = [picker.value.length, picker.value.length];\n    }\n    // Otherwise: select the value up until the prefix\n    else {\n      valueSelection = [(_a = descriptor === null || descriptor === void 0 ? void 0 : descriptor.prefix.length) !== null && _a !== void 0 ? _a : 0, picker.value.length];\n    }\n    picker.valueSelection = valueSelection;\n  }\n  registerPickerListeners(picker, provider, descriptor, value, disposables) {\n    // Remember as last visible picker and clean up once picker get's disposed\n    const visibleQuickAccess = this.visibleQuickAccess = {\n      picker,\n      descriptor,\n      value\n    };\n    disposables.add(toDisposable(() => {\n      if (visibleQuickAccess === this.visibleQuickAccess) {\n        this.visibleQuickAccess = undefined;\n      }\n    }));\n    // Whenever the value changes, check if the provider has\n    // changed and if so - re-create the picker from the beginning\n    disposables.add(picker.onDidChangeValue(value => {\n      const [providerForValue] = this.getOrInstantiateProvider(value);\n      if (providerForValue !== provider) {\n        this.show(value, {\n          preserveValue: true\n        } /* do not rewrite value from user typing! */);\n      } else {\n        visibleQuickAccess.value = value; // remember the value in our visible one\n      }\n    }));\n    // Remember picker input for future use when accepting\n    if (descriptor) {\n      disposables.add(picker.onDidAccept(() => {\n        this.lastAcceptedPickerValues.set(descriptor, picker.value);\n      }));\n    }\n    // Create a cancellation token source that is valid as long as the\n    // picker has not been closed without picking an item\n    const cts = disposables.add(new CancellationTokenSource());\n    once(picker.onDidHide)(() => {\n      if (picker.selectedItems.length === 0) {\n        cts.cancel();\n      }\n      // Start to dispose once picker hides\n      disposables.dispose();\n    });\n    return cts.token;\n  }\n  getOrInstantiateProvider(value) {\n    const providerDescriptor = this.registry.getQuickAccessProvider(value);\n    if (!providerDescriptor) {\n      return [undefined, undefined];\n    }\n    let provider = this.mapProviderToDescriptor.get(providerDescriptor);\n    if (!provider) {\n      provider = this.instantiationService.createInstance(providerDescriptor.ctor);\n      this.mapProviderToDescriptor.set(providerDescriptor, provider);\n    }\n    return [provider, providerDescriptor];\n  }\n};\nQuickAccessController = __decorate([__param(0, IQuickInputService), __param(1, IInstantiationService)], QuickAccessController);\nexport { QuickAccessController };","map":{"version":3,"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","IQuickInputService","ItemActivation","Disposable","DisposableStore","toDisposable","Extensions","DefaultQuickAccessFilterValue","Registry","CancellationTokenSource","IInstantiationService","once","QuickAccessController","constructor","quickInputService","instantiationService","registry","as","Quickaccess","mapProviderToDescriptor","Map","lastAcceptedPickerValues","visibleQuickAccess","undefined","show","value","options","_a","provider","descriptor","getOrInstantiateProvider","visibleDescriptor","prefix","preserveValue","picker","adjustValueSelection","newValue","newValueCandidateWithoutPrefix","substr","concat","defaultFilterValue","LAST","get","disposables","add","createQuickPick","placeholder","quickNavigate","quickNavigateConfiguration","hideInput","itemActivation","SECOND","contextKey","filterValue","substring","ariaLabel","cancellationToken","registerPickerListeners","provide","valueSelection","onDidChangeValue","providerForValue","onDidAccept","set","cts","onDidHide","selectedItems","cancel","dispose","token","providerDescriptor","getQuickAccessProvider","createInstance","ctor"],"sources":["C:/Users/Administrator/Desktop/sqllineage-master/sqllineagejs/node_modules/monaco-editor/esm/vs/platform/quickinput/browser/quickAccess.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n};\r\nimport { IQuickInputService, ItemActivation } from '../common/quickInput.js';\r\nimport { Disposable, DisposableStore, toDisposable } from '../../../base/common/lifecycle.js';\r\nimport { Extensions, DefaultQuickAccessFilterValue } from '../common/quickAccess.js';\r\nimport { Registry } from '../../registry/common/platform.js';\r\nimport { CancellationTokenSource } from '../../../base/common/cancellation.js';\r\nimport { IInstantiationService } from '../../instantiation/common/instantiation.js';\r\nimport { once } from '../../../base/common/functional.js';\r\nlet QuickAccessController = class QuickAccessController extends Disposable {\r\n    constructor(quickInputService, instantiationService) {\r\n        super();\r\n        this.quickInputService = quickInputService;\r\n        this.instantiationService = instantiationService;\r\n        this.registry = Registry.as(Extensions.Quickaccess);\r\n        this.mapProviderToDescriptor = new Map();\r\n        this.lastAcceptedPickerValues = new Map();\r\n        this.visibleQuickAccess = undefined;\r\n    }\r\n    show(value = '', options) {\r\n        var _a;\r\n        // Find provider for the value to show\r\n        const [provider, descriptor] = this.getOrInstantiateProvider(value);\r\n        // Return early if quick access is already showing on that same prefix\r\n        const visibleQuickAccess = this.visibleQuickAccess;\r\n        const visibleDescriptor = visibleQuickAccess === null || visibleQuickAccess === void 0 ? void 0 : visibleQuickAccess.descriptor;\r\n        if (visibleQuickAccess && descriptor && visibleDescriptor === descriptor) {\r\n            // Apply value only if it is more specific than the prefix\r\n            // from the provider and we are not instructed to preserve\r\n            if (value !== descriptor.prefix && !(options === null || options === void 0 ? void 0 : options.preserveValue)) {\r\n                visibleQuickAccess.picker.value = value;\r\n            }\r\n            // Always adjust selection\r\n            this.adjustValueSelection(visibleQuickAccess.picker, descriptor, options);\r\n            return;\r\n        }\r\n        // Rewrite the filter value based on certain rules unless disabled\r\n        if (descriptor && !(options === null || options === void 0 ? void 0 : options.preserveValue)) {\r\n            let newValue = undefined;\r\n            // If we have a visible provider with a value, take it's filter value but\r\n            // rewrite to new provider prefix in case they differ\r\n            if (visibleQuickAccess && visibleDescriptor && visibleDescriptor !== descriptor) {\r\n                const newValueCandidateWithoutPrefix = visibleQuickAccess.value.substr(visibleDescriptor.prefix.length);\r\n                if (newValueCandidateWithoutPrefix) {\r\n                    newValue = `${descriptor.prefix}${newValueCandidateWithoutPrefix}`;\r\n                }\r\n            }\r\n            // Otherwise, take a default value as instructed\r\n            if (!newValue) {\r\n                const defaultFilterValue = provider === null || provider === void 0 ? void 0 : provider.defaultFilterValue;\r\n                if (defaultFilterValue === DefaultQuickAccessFilterValue.LAST) {\r\n                    newValue = this.lastAcceptedPickerValues.get(descriptor);\r\n                }\r\n                else if (typeof defaultFilterValue === 'string') {\r\n                    newValue = `${descriptor.prefix}${defaultFilterValue}`;\r\n                }\r\n            }\r\n            if (typeof newValue === 'string') {\r\n                value = newValue;\r\n            }\r\n        }\r\n        // Create a picker for the provider to use with the initial value\r\n        // and adjust the filtering to exclude the prefix from filtering\r\n        const disposables = new DisposableStore();\r\n        const picker = disposables.add(this.quickInputService.createQuickPick());\r\n        picker.value = value;\r\n        this.adjustValueSelection(picker, descriptor, options);\r\n        picker.placeholder = descriptor === null || descriptor === void 0 ? void 0 : descriptor.placeholder;\r\n        picker.quickNavigate = options === null || options === void 0 ? void 0 : options.quickNavigateConfiguration;\r\n        picker.hideInput = !!picker.quickNavigate && !visibleQuickAccess; // only hide input if there was no picker opened already\r\n        if (typeof (options === null || options === void 0 ? void 0 : options.itemActivation) === 'number' || (options === null || options === void 0 ? void 0 : options.quickNavigateConfiguration)) {\r\n            picker.itemActivation = (_a = options === null || options === void 0 ? void 0 : options.itemActivation) !== null && _a !== void 0 ? _a : ItemActivation.SECOND /* quick nav is always second */;\r\n        }\r\n        picker.contextKey = descriptor === null || descriptor === void 0 ? void 0 : descriptor.contextKey;\r\n        picker.filterValue = (value) => value.substring(descriptor ? descriptor.prefix.length : 0);\r\n        if (descriptor === null || descriptor === void 0 ? void 0 : descriptor.placeholder) {\r\n            picker.ariaLabel = descriptor === null || descriptor === void 0 ? void 0 : descriptor.placeholder;\r\n        }\r\n        // Register listeners\r\n        const cancellationToken = this.registerPickerListeners(picker, provider, descriptor, value, disposables);\r\n        // Ask provider to fill the picker as needed if we have one\r\n        if (provider) {\r\n            disposables.add(provider.provide(picker, cancellationToken));\r\n        }\r\n        // Finally, show the picker. This is important because a provider\r\n        // may not call this and then our disposables would leak that rely\r\n        // on the onDidHide event.\r\n        picker.show();\r\n    }\r\n    adjustValueSelection(picker, descriptor, options) {\r\n        var _a;\r\n        let valueSelection;\r\n        // Preserve: just always put the cursor at the end\r\n        if (options === null || options === void 0 ? void 0 : options.preserveValue) {\r\n            valueSelection = [picker.value.length, picker.value.length];\r\n        }\r\n        // Otherwise: select the value up until the prefix\r\n        else {\r\n            valueSelection = [(_a = descriptor === null || descriptor === void 0 ? void 0 : descriptor.prefix.length) !== null && _a !== void 0 ? _a : 0, picker.value.length];\r\n        }\r\n        picker.valueSelection = valueSelection;\r\n    }\r\n    registerPickerListeners(picker, provider, descriptor, value, disposables) {\r\n        // Remember as last visible picker and clean up once picker get's disposed\r\n        const visibleQuickAccess = this.visibleQuickAccess = { picker, descriptor, value };\r\n        disposables.add(toDisposable(() => {\r\n            if (visibleQuickAccess === this.visibleQuickAccess) {\r\n                this.visibleQuickAccess = undefined;\r\n            }\r\n        }));\r\n        // Whenever the value changes, check if the provider has\r\n        // changed and if so - re-create the picker from the beginning\r\n        disposables.add(picker.onDidChangeValue(value => {\r\n            const [providerForValue] = this.getOrInstantiateProvider(value);\r\n            if (providerForValue !== provider) {\r\n                this.show(value, { preserveValue: true } /* do not rewrite value from user typing! */);\r\n            }\r\n            else {\r\n                visibleQuickAccess.value = value; // remember the value in our visible one\r\n            }\r\n        }));\r\n        // Remember picker input for future use when accepting\r\n        if (descriptor) {\r\n            disposables.add(picker.onDidAccept(() => {\r\n                this.lastAcceptedPickerValues.set(descriptor, picker.value);\r\n            }));\r\n        }\r\n        // Create a cancellation token source that is valid as long as the\r\n        // picker has not been closed without picking an item\r\n        const cts = disposables.add(new CancellationTokenSource());\r\n        once(picker.onDidHide)(() => {\r\n            if (picker.selectedItems.length === 0) {\r\n                cts.cancel();\r\n            }\r\n            // Start to dispose once picker hides\r\n            disposables.dispose();\r\n        });\r\n        return cts.token;\r\n    }\r\n    getOrInstantiateProvider(value) {\r\n        const providerDescriptor = this.registry.getQuickAccessProvider(value);\r\n        if (!providerDescriptor) {\r\n            return [undefined, undefined];\r\n        }\r\n        let provider = this.mapProviderToDescriptor.get(providerDescriptor);\r\n        if (!provider) {\r\n            provider = this.instantiationService.createInstance(providerDescriptor.ctor);\r\n            this.mapProviderToDescriptor.set(providerDescriptor, provider);\r\n        }\r\n        return [provider, providerDescriptor];\r\n    }\r\n};\r\nQuickAccessController = __decorate([\r\n    __param(0, IQuickInputService),\r\n    __param(1, IInstantiationService)\r\n], QuickAccessController);\r\nexport { QuickAccessController };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}