{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { basename, posix } from './path.js';\nimport { startsWithUTF8BOM } from './strings.js';\nimport { match } from './glob.js';\nimport { Schemas } from './network.js';\nimport { DataUri } from './resources.js';\nexport const MIME_TEXT = 'text/plain';\nexport const MIME_UNKNOWN = 'application/unknown';\nlet registeredAssociations = [];\nlet nonUserRegisteredAssociations = [];\nlet userRegisteredAssociations = [];\n/**\r\n * Associate a text mime to the registry.\r\n */\nexport function registerTextMime(association) {\n  let warnOnOverwrite = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  // Register\n  const associationItem = toTextMimeAssociationItem(association);\n  registeredAssociations.push(associationItem);\n  if (!associationItem.userConfigured) {\n    nonUserRegisteredAssociations.push(associationItem);\n  } else {\n    userRegisteredAssociations.push(associationItem);\n  }\n  // Check for conflicts unless this is a user configured association\n  if (warnOnOverwrite && !associationItem.userConfigured) {\n    registeredAssociations.forEach(a => {\n      if (a.mime === associationItem.mime || a.userConfigured) {\n        return; // same mime or userConfigured is ok\n      }\n\n      if (associationItem.extension && a.extension === associationItem.extension) {\n        console.warn(\"Overwriting extension <<\".concat(associationItem.extension, \">> to now point to mime <<\").concat(associationItem.mime, \">>\"));\n      }\n      if (associationItem.filename && a.filename === associationItem.filename) {\n        console.warn(\"Overwriting filename <<\".concat(associationItem.filename, \">> to now point to mime <<\").concat(associationItem.mime, \">>\"));\n      }\n      if (associationItem.filepattern && a.filepattern === associationItem.filepattern) {\n        console.warn(\"Overwriting filepattern <<\".concat(associationItem.filepattern, \">> to now point to mime <<\").concat(associationItem.mime, \">>\"));\n      }\n      if (associationItem.firstline && a.firstline === associationItem.firstline) {\n        console.warn(\"Overwriting firstline <<\".concat(associationItem.firstline, \">> to now point to mime <<\").concat(associationItem.mime, \">>\"));\n      }\n    });\n  }\n}\nfunction toTextMimeAssociationItem(association) {\n  return {\n    id: association.id,\n    mime: association.mime,\n    filename: association.filename,\n    extension: association.extension,\n    filepattern: association.filepattern,\n    firstline: association.firstline,\n    userConfigured: association.userConfigured,\n    filenameLowercase: association.filename ? association.filename.toLowerCase() : undefined,\n    extensionLowercase: association.extension ? association.extension.toLowerCase() : undefined,\n    filepatternLowercase: association.filepattern ? association.filepattern.toLowerCase() : undefined,\n    filepatternOnPath: association.filepattern ? association.filepattern.indexOf(posix.sep) >= 0 : false\n  };\n}\n/**\r\n * Given a file, return the best matching mime type for it\r\n */\nexport function guessMimeTypes(resource, firstLine) {\n  let path;\n  if (resource) {\n    switch (resource.scheme) {\n      case Schemas.file:\n        path = resource.fsPath;\n        break;\n      case Schemas.data:\n        const metadata = DataUri.parseMetaData(resource);\n        path = metadata.get(DataUri.META_DATA_LABEL);\n        break;\n      default:\n        path = resource.path;\n    }\n  }\n  if (!path) {\n    return [MIME_UNKNOWN];\n  }\n  path = path.toLowerCase();\n  const filename = basename(path);\n  // 1.) User configured mappings have highest priority\n  const configuredMime = guessMimeTypeByPath(path, filename, userRegisteredAssociations);\n  if (configuredMime) {\n    return [configuredMime, MIME_TEXT];\n  }\n  // 2.) Registered mappings have middle priority\n  const registeredMime = guessMimeTypeByPath(path, filename, nonUserRegisteredAssociations);\n  if (registeredMime) {\n    return [registeredMime, MIME_TEXT];\n  }\n  // 3.) Firstline has lowest priority\n  if (firstLine) {\n    const firstlineMime = guessMimeTypeByFirstline(firstLine);\n    if (firstlineMime) {\n      return [firstlineMime, MIME_TEXT];\n    }\n  }\n  return [MIME_UNKNOWN];\n}\nfunction guessMimeTypeByPath(path, filename, associations) {\n  let filenameMatch = null;\n  let patternMatch = null;\n  let extensionMatch = null;\n  // We want to prioritize associations based on the order they are registered so that the last registered\n  // association wins over all other. This is for https://github.com/microsoft/vscode/issues/20074\n  for (let i = associations.length - 1; i >= 0; i--) {\n    const association = associations[i];\n    // First exact name match\n    if (filename === association.filenameLowercase) {\n      filenameMatch = association;\n      break; // take it!\n    }\n    // Longest pattern match\n    if (association.filepattern) {\n      if (!patternMatch || association.filepattern.length > patternMatch.filepattern.length) {\n        const target = association.filepatternOnPath ? path : filename; // match on full path if pattern contains path separator\n        if (match(association.filepatternLowercase, target)) {\n          patternMatch = association;\n        }\n      }\n    }\n    // Longest extension match\n    if (association.extension) {\n      if (!extensionMatch || association.extension.length > extensionMatch.extension.length) {\n        if (filename.endsWith(association.extensionLowercase)) {\n          extensionMatch = association;\n        }\n      }\n    }\n  }\n  // 1.) Exact name match has second highest prio\n  if (filenameMatch) {\n    return filenameMatch.mime;\n  }\n  // 2.) Match on pattern\n  if (patternMatch) {\n    return patternMatch.mime;\n  }\n  // 3.) Match on extension comes next\n  if (extensionMatch) {\n    return extensionMatch.mime;\n  }\n  return null;\n}\nfunction guessMimeTypeByFirstline(firstLine) {\n  if (startsWithUTF8BOM(firstLine)) {\n    firstLine = firstLine.substr(1);\n  }\n  if (firstLine.length > 0) {\n    // We want to prioritize associations based on the order they are registered so that the last registered\n    // association wins over all other. This is for https://github.com/microsoft/vscode/issues/20074\n    for (let i = registeredAssociations.length - 1; i >= 0; i--) {\n      const association = registeredAssociations[i];\n      if (!association.firstline) {\n        continue;\n      }\n      const matches = firstLine.match(association.firstline);\n      if (matches && matches.length > 0) {\n        return association.mime;\n      }\n    }\n  }\n  return null;\n}","map":{"version":3,"names":["basename","posix","startsWithUTF8BOM","match","Schemas","DataUri","MIME_TEXT","MIME_UNKNOWN","registeredAssociations","nonUserRegisteredAssociations","userRegisteredAssociations","registerTextMime","association","warnOnOverwrite","arguments","length","undefined","associationItem","toTextMimeAssociationItem","push","userConfigured","forEach","a","mime","extension","console","warn","concat","filename","filepattern","firstline","id","filenameLowercase","toLowerCase","extensionLowercase","filepatternLowercase","filepatternOnPath","indexOf","sep","guessMimeTypes","resource","firstLine","path","scheme","file","fsPath","data","metadata","parseMetaData","get","META_DATA_LABEL","configuredMime","guessMimeTypeByPath","registeredMime","firstlineMime","guessMimeTypeByFirstline","associations","filenameMatch","patternMatch","extensionMatch","i","target","endsWith","substr","matches"],"sources":["C:/Users/Administrator/Desktop/sqllineage-master/sqllineagejs/node_modules/monaco-editor/esm/vs/base/common/mime.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { basename, posix } from './path.js';\r\nimport { startsWithUTF8BOM } from './strings.js';\r\nimport { match } from './glob.js';\r\nimport { Schemas } from './network.js';\r\nimport { DataUri } from './resources.js';\r\nexport const MIME_TEXT = 'text/plain';\r\nexport const MIME_UNKNOWN = 'application/unknown';\r\nlet registeredAssociations = [];\r\nlet nonUserRegisteredAssociations = [];\r\nlet userRegisteredAssociations = [];\r\n/**\r\n * Associate a text mime to the registry.\r\n */\r\nexport function registerTextMime(association, warnOnOverwrite = false) {\r\n    // Register\r\n    const associationItem = toTextMimeAssociationItem(association);\r\n    registeredAssociations.push(associationItem);\r\n    if (!associationItem.userConfigured) {\r\n        nonUserRegisteredAssociations.push(associationItem);\r\n    }\r\n    else {\r\n        userRegisteredAssociations.push(associationItem);\r\n    }\r\n    // Check for conflicts unless this is a user configured association\r\n    if (warnOnOverwrite && !associationItem.userConfigured) {\r\n        registeredAssociations.forEach(a => {\r\n            if (a.mime === associationItem.mime || a.userConfigured) {\r\n                return; // same mime or userConfigured is ok\r\n            }\r\n            if (associationItem.extension && a.extension === associationItem.extension) {\r\n                console.warn(`Overwriting extension <<${associationItem.extension}>> to now point to mime <<${associationItem.mime}>>`);\r\n            }\r\n            if (associationItem.filename && a.filename === associationItem.filename) {\r\n                console.warn(`Overwriting filename <<${associationItem.filename}>> to now point to mime <<${associationItem.mime}>>`);\r\n            }\r\n            if (associationItem.filepattern && a.filepattern === associationItem.filepattern) {\r\n                console.warn(`Overwriting filepattern <<${associationItem.filepattern}>> to now point to mime <<${associationItem.mime}>>`);\r\n            }\r\n            if (associationItem.firstline && a.firstline === associationItem.firstline) {\r\n                console.warn(`Overwriting firstline <<${associationItem.firstline}>> to now point to mime <<${associationItem.mime}>>`);\r\n            }\r\n        });\r\n    }\r\n}\r\nfunction toTextMimeAssociationItem(association) {\r\n    return {\r\n        id: association.id,\r\n        mime: association.mime,\r\n        filename: association.filename,\r\n        extension: association.extension,\r\n        filepattern: association.filepattern,\r\n        firstline: association.firstline,\r\n        userConfigured: association.userConfigured,\r\n        filenameLowercase: association.filename ? association.filename.toLowerCase() : undefined,\r\n        extensionLowercase: association.extension ? association.extension.toLowerCase() : undefined,\r\n        filepatternLowercase: association.filepattern ? association.filepattern.toLowerCase() : undefined,\r\n        filepatternOnPath: association.filepattern ? association.filepattern.indexOf(posix.sep) >= 0 : false\r\n    };\r\n}\r\n/**\r\n * Given a file, return the best matching mime type for it\r\n */\r\nexport function guessMimeTypes(resource, firstLine) {\r\n    let path;\r\n    if (resource) {\r\n        switch (resource.scheme) {\r\n            case Schemas.file:\r\n                path = resource.fsPath;\r\n                break;\r\n            case Schemas.data:\r\n                const metadata = DataUri.parseMetaData(resource);\r\n                path = metadata.get(DataUri.META_DATA_LABEL);\r\n                break;\r\n            default:\r\n                path = resource.path;\r\n        }\r\n    }\r\n    if (!path) {\r\n        return [MIME_UNKNOWN];\r\n    }\r\n    path = path.toLowerCase();\r\n    const filename = basename(path);\r\n    // 1.) User configured mappings have highest priority\r\n    const configuredMime = guessMimeTypeByPath(path, filename, userRegisteredAssociations);\r\n    if (configuredMime) {\r\n        return [configuredMime, MIME_TEXT];\r\n    }\r\n    // 2.) Registered mappings have middle priority\r\n    const registeredMime = guessMimeTypeByPath(path, filename, nonUserRegisteredAssociations);\r\n    if (registeredMime) {\r\n        return [registeredMime, MIME_TEXT];\r\n    }\r\n    // 3.) Firstline has lowest priority\r\n    if (firstLine) {\r\n        const firstlineMime = guessMimeTypeByFirstline(firstLine);\r\n        if (firstlineMime) {\r\n            return [firstlineMime, MIME_TEXT];\r\n        }\r\n    }\r\n    return [MIME_UNKNOWN];\r\n}\r\nfunction guessMimeTypeByPath(path, filename, associations) {\r\n    let filenameMatch = null;\r\n    let patternMatch = null;\r\n    let extensionMatch = null;\r\n    // We want to prioritize associations based on the order they are registered so that the last registered\r\n    // association wins over all other. This is for https://github.com/microsoft/vscode/issues/20074\r\n    for (let i = associations.length - 1; i >= 0; i--) {\r\n        const association = associations[i];\r\n        // First exact name match\r\n        if (filename === association.filenameLowercase) {\r\n            filenameMatch = association;\r\n            break; // take it!\r\n        }\r\n        // Longest pattern match\r\n        if (association.filepattern) {\r\n            if (!patternMatch || association.filepattern.length > patternMatch.filepattern.length) {\r\n                const target = association.filepatternOnPath ? path : filename; // match on full path if pattern contains path separator\r\n                if (match(association.filepatternLowercase, target)) {\r\n                    patternMatch = association;\r\n                }\r\n            }\r\n        }\r\n        // Longest extension match\r\n        if (association.extension) {\r\n            if (!extensionMatch || association.extension.length > extensionMatch.extension.length) {\r\n                if (filename.endsWith(association.extensionLowercase)) {\r\n                    extensionMatch = association;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // 1.) Exact name match has second highest prio\r\n    if (filenameMatch) {\r\n        return filenameMatch.mime;\r\n    }\r\n    // 2.) Match on pattern\r\n    if (patternMatch) {\r\n        return patternMatch.mime;\r\n    }\r\n    // 3.) Match on extension comes next\r\n    if (extensionMatch) {\r\n        return extensionMatch.mime;\r\n    }\r\n    return null;\r\n}\r\nfunction guessMimeTypeByFirstline(firstLine) {\r\n    if (startsWithUTF8BOM(firstLine)) {\r\n        firstLine = firstLine.substr(1);\r\n    }\r\n    if (firstLine.length > 0) {\r\n        // We want to prioritize associations based on the order they are registered so that the last registered\r\n        // association wins over all other. This is for https://github.com/microsoft/vscode/issues/20074\r\n        for (let i = registeredAssociations.length - 1; i >= 0; i--) {\r\n            const association = registeredAssociations[i];\r\n            if (!association.firstline) {\r\n                continue;\r\n            }\r\n            const matches = firstLine.match(association.firstline);\r\n            if (matches && matches.length > 0) {\r\n                return association.mime;\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}